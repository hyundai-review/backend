INSERT IGNORE INTO genre (name, created_at, updated_at)
VALUES ('액션', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (name, created_at, updated_at)
VALUES ('모험', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (name, created_at, updated_at)
VALUES ('애니메이션', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (name, created_at, updated_at)
VALUES ('코미디', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (name, created_at, updated_at)
VALUES ('범죄', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (name, created_at, updated_at)
VALUES ('다큐멘터리', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (name, created_at, updated_at)
VALUES ('드라마', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (name, created_at, updated_at)
VALUES ('가족', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (name, created_at, updated_at)
VALUES ('판타지', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (name, created_at, updated_at)
VALUES ('역사', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (name, created_at, updated_at)
VALUES ('공포', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (name, created_at, updated_at)
VALUES ('음악', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (name, created_at, updated_at)
VALUES ('미스터리', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (name, created_at, updated_at)
VALUES ('로맨스', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (name, created_at, updated_at)
VALUES ('SF', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (name, created_at, updated_at)
VALUES ('TV 영화', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (name, created_at, updated_at)
VALUES ('스릴러', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (name, created_at, updated_at)
VALUES ('전쟁', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (name, created_at, updated_at)
VALUES ('서부', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (912649, '베놈: 라스트 댄스', '2024-10-22', '죽음이 갈라놓을 때까지', '환상의 케미스트리의 에디 브록과 그의 심비오트 베놈은 그들을 노리는 정체불명 존재의 추격을 피해 같이 도망을 다니게 된다. 한편 베놈의 창조자 널은 고향 행성에서부터 그들을 찾아내기 위해 지구를 침략하고 에디와 베놈은 그동안 겪어보지 못한 최악의 위기를 맞이하게 되는데…', 109, '15', 'NOW_PLAYING', 3930.216000, 6.390000, 394000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 912649 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 912649 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 912649 AND g.name = '모험';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '톰 하디', '/d81K0RH8UX7tZj49tZaQhZ9ewH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 하디');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eddie Brock / Venom', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 912649 AND a.name = '톰 하디';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '추이텔 에지오포', '/kq5DDnqqofoRI0t6ddtRlsJnNPT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '추이텔 에지오포');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'General Rex Strickland', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 912649 AND a.name = '추이텔 에지오포';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '주노 템플', '/wMpZcKp7zaHnmNQooqbve33577Q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '주노 템플');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Teddy Paine', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 912649 AND a.name = '주노 템플';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Clark Backo', '/d24KKFxfoql6PBsBPsejFgzhSlH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Clark Backo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sadie Christmas', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 912649 AND a.name = 'Clark Backo';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '리스 에반스', '/1D670EEsbky3EtO7XLG32A09p92.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리스 에반스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Martin Moon', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 912649 AND a.name = '리스 에반스';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Kelly Marcel', '/thpdVW7O1975GcA3eNs1H8UIlmd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Kelly Marcel');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 912649 AND d.name = 'Kelly Marcel';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3flIDcZF3tnR7m5OU2h7lLPQwmr.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 912649;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3V4kLQg0kSqPLctI5ziYWabAZYF.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 912649;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1118031, '아포칼립스 Z: 종말의 시작', '2024-10-04', '', '광견병과 유사한 질병이 지구 전역에 퍼져 사람들이 공격적인 생명체로 변한다. 마넬은 고양이와 함께 집에 숨어서 재치를 발휘해 살아남는다. 곧 둘은 식량을 구하고 육지와 바다의 안전한 곳을 찾기 위해 떠나야 한다.', 119, '', 'RELEASED', 2835.786000, 6.751000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1118031 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1118031 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1118031 AND g.name = '공포';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Francisco Ortiz', '/iIwGt05vG5smGDiLJ7f6bMRQOOY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Francisco Ortiz');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Manel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1118031 AND a.name = 'Francisco Ortiz';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'José María Yázpik', '/uqZE7oXEADJ1NTg7g7xRELw59Hy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'José María Yázpik');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pritchenko', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1118031 AND a.name = 'José María Yázpik';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Berta Vázquez', '/2QNOI5L03XomONmCR42GPyVYryy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Berta Vázquez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lucía', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1118031 AND a.name = 'Berta Vázquez';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Iria del Río', '/z7Dqvpnb8R13P6B5pmUCDxb2Jvv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Iria del Río');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Julia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1118031 AND a.name = 'Iria del Río';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Marta Poveda', '/gsQvVa5uipx5YAQ8esJevlmPjsv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marta Poveda');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Belén', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1118031 AND a.name = 'Marta Poveda';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Carles Torrens', '/jBGDX4BwsytGhPehgrrPKFFlIgn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Carles Torrens');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1118031 AND d.name = 'Carles Torrens';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hofZ9t2zQEYjQWNZ8cPjMByVHci.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1118031;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2fxnTXr8NwyTFkunkimJkGkhqfy.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1118031;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1034541, '테리파이어 3', '2024-10-09', '', '"아트 더 클라운"이 크리스마스 이브에 평화롭게 잠든 "마일스 카운티"의 주민들을 향해 혼돈을 일으키려 한다', 125, '', 'RELEASED', 3304.003000, 6.935000, 78573405, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1034541 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1034541 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1034541 AND g.name = '미스터리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '로렌 라베라', '/qJYWq2oZcvHh7lnGskxkrYXCom0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로렌 라베라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sienna Shaw', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1034541 AND a.name = '로렌 라베라';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Elliott Fullam', '/dNsFLihmWfA2KCENbZCtq9AjSob.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Elliott Fullam');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jonathan Shaw', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1034541 AND a.name = 'Elliott Fullam';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '데이비드 하워드 손턴', '/9nYijs4ACzjg93zKezLiLmuRGvp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이비드 하워드 손턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Art the Clown', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1034541 AND a.name = '데이비드 하워드 손턴';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Samantha Scaffidi', '/jwd0XXuc4ibXAXjOxmhsFP0fQEO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Samantha Scaffidi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Victoria Heyes', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1034541 AND a.name = 'Samantha Scaffidi';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Margaret Anne Florence', '/c2EqBueLCrn6XEnmfutylUd1icl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Margaret Anne Florence');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jessica', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1034541 AND a.name = 'Margaret Anne Florence';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Damien Leone', '/nX2kkYD32x2PC9rRU7DrYCRPjFE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Damien Leone');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1034541 AND d.name = 'Damien Leone';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/l1175hgL5DoXnqeZQCcU3eZIdhX.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1034541;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/18TSJF1WLA4CkymvVUcKDBwUJ9F.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1034541;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1184918, '와일드 로봇', '2024-09-12', '너를 통해 더 넓은 세상을 만나다', '우연한 사고로 거대한 야생에 불시착한 로봇 로즈는 주변 동물들의 행동을 배우며 낯선 환경 속에 적응해 가던 중, 사고로 세상에 홀로 남겨진 아기 기러기 브라이트빌의 보호자가 된다. 로즈는 입력되어 있지 않은 새로운 역할과 관계에 낯선 감정을 마주하고 겨울이 오기 전에 남쪽으로 떠나야 하는 브라이트빌을 위해 동물들의 도움을 받아 이주를 위한 생존 기술을 가르쳐준다. 그러나 선천적으로 몸집이 작은 브라이트빌은 짧은 비행도 힘겨워 하는데...', 102, 'ALL', 'RELEASED', 2214.674000, 8.491000, 292583746, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1184918 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1184918 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1184918 AND g.name = '가족';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '루피타 뇽오', '/y40Wu1T742kynOqtwXASc5Qgm49.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루피타 뇽오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Roz / Rummage (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1184918 AND a.name = '루피타 뇽오';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '페드로 파스칼', '/9VYK7oxcqhjd5LAH6ZFJ3XzOlID.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '페드로 파스칼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fink (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1184918 AND a.name = '페드로 파스칼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '킷 코너', '/gCIdbnV9D3lzTaOB0YtuKDz6Nt0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '킷 코너');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brightbill (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1184918 AND a.name = '킷 코너';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '빌 나이', '/ixFI2YCGNGJfwlpI8iyhvVZRg8C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빌 나이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Longneck (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1184918 AND a.name = '빌 나이';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '스테파니 수', '/8gb3lfIHKQAGOQyeC4ynQPsCiHr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스테파니 수');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vontra (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1184918 AND a.name = '스테파니 수';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '크리스 샌더스', '/6CtrIOCxggJ5eIAWeFQqd4Hs9FP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스 샌더스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1184918 AND d.name = '크리스 샌더스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8dkuf9IuVh0VZjDTk7kAY67lU0U.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1184918;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/v9acaWVVFdZT5yAU7J2QjwfhXyD.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1184918;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (933260, '서브스턴스', '2024-09-07', '더 나은 버전의 당신을 꿈꿔본 적 있나요?', '더 나은 버전의 당신을 꿈꿔본 적 있나요? 당신의 인생을 바꿔줄 신제품 ‘서브스턴스’. ‘서브스턴스’는 또 다른 당신을 만들어냅니다. 새롭고, 젊고, 더 아름답고, 더 완벽한 당신을. 단 한가지 규칙, 당신의 시간을 공유하면 됩니다. 당신을 위한 일주일, 새로운 당신을 위한 일주일, 각각 7일간의 완벽한 밸런스. 쉽죠? 균형을 존중한다면… 무엇이 잘못될 수 있을까요?', 140, '15', 'RELEASED', 1893.832000, 7.300000, 46818041, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 933260 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 933260 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 933260 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '데미 무어', '/brENIHiNrGUpoBMPqIEQwFNdIsc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데미 무어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elisabeth', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 933260 AND a.name = '데미 무어';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마가렛 퀄리', '/pSRCcDQBibsr6wb3FlKmEvh7zen.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마가렛 퀄리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sue', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 933260 AND a.name = '마가렛 퀄리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '데니스 퀘이드', '/lMaDAJHzsKH7U3dln2B3kY3rOhE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데니스 퀘이드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Harvey', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 933260 AND a.name = '데니스 퀘이드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Edward Hamilton-Clark', '/q1EWL2z2xMcbf84TpOTqGs6Csxs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Edward Hamilton-Clark');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fred', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 933260 AND a.name = 'Edward Hamilton-Clark';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Gore Abrams', '/bKMTqbl0FYlzIC6aTMKQZNAhhXK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gore Abrams');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Oliver', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 933260 AND a.name = 'Gore Abrams';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '코랄리 파르자', '/8TlTqFD5RnJGBxxzarpvygZlRXC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '코랄리 파르자');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 933260 AND d.name = '코랄리 파르자';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pq5Wh3DE0KIBjF2kdGHn98eV1PC.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 933260;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7h6TqPB3ESmjuVbxCxAeB1c9OB1.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 933260;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (533535, '데드풀과 울버린', '2024-07-24', '', '히어로 생활에서 은퇴한 후, 평범한 중고차 딜러로 살아가던 ‘데드풀’이 예상치 못한 거대한 위기를 맞아 모든 면에서 상극인 ‘울버린’을 찾아가게 되며 펼쳐지는 도파민 폭발 액션 블록버스터.', 128, '19', 'RELEASED', 1974.511000, 7.700000, 1336816112, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 533535 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 533535 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 533535 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '라이언 레이놀즈', '/6m3hkkHmKkD4MUJhng7ojE7MLKC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '라이언 레이놀즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wade Wilson / Deadpool / Nicepool', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 533535 AND a.name = '라이언 레이놀즈';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '휴 잭맨', '/4Xujtewxqt6aU0Y81tsS9gkjizk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '휴 잭맨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Logan / Wolverine', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 533535 AND a.name = '휴 잭맨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '엠마 코린', '/wqGOVOsHzZaHeHymIS40elGCnY0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '엠마 코린');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cassandra Nova', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 533535 AND a.name = '엠마 코린';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '매튜 맥패디언', '/2FF3Yjxd7DYR4EIJL6s2GpKDMkJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '매튜 맥패디언');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Paradox', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 533535 AND a.name = '매튜 맥패디언';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '다프네 킨', '/g325OIjIHrFr0te8ewPfhKQ2SKj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다프네 킨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Laura / X-23', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 533535 AND a.name = '다프네 킨';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '숀 레비', '/j1CXZgmfvFeD7S3PYtsEk8H3ebB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '숀 레비');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 533535 AND d.name = '숀 레비';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4Zb4Z2HjX1t5zr1qYOTdVoisJKp.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 533535;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dvBCdCohwWbsP5qAaglOXagDMtk.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 533535;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (698687, '트랜스포머 ONE', '2024-09-11', '모든 것이 바뀐다', '사이버트론 행성의 지하 광산에서 일하는 변신 못 하는 하급 로봇 오라이온 팩스와 D-16. 한 번도 가보지 못한 지상 세계를 꿈꾸던 둘은 쾌활한 수다쟁이 B-127, 카리스마 넘치는 엘리타 원과 함께 출입이 금지된 지상에 도달한다. 지상에서 잠들어 있던 알파 트라이온을 만난 넷은 그의 도움으로 잠재되어 있던 변신 능력을 얻게 된다. 막강한 힘과 변신 능력으로 자유를 느낀 것도 잠시, 자신들의 행성을 지배하고 있는 거대한 배후의 존재를 알게 되며 모든 것을 바꿀 전쟁을 시작하는데…', 104, 'ALL', 'RELEASED', 1550.314000, 8.094000, 124530200, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 698687 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 698687 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 698687 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 698687 AND g.name = '가족';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '크리스 헴스워스', '/piQGdoIQOF3C1EI5cbYZLAW1gfj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 헴스워스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Orion Pax / Optimus Prime (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 698687 AND a.name = '크리스 헴스워스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '브라이언 타이리 헨리', '/2MsJh0bpyzwvOUnXOltHp3j85Pb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브라이언 타이리 헨리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'D-16 / Megatron (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 698687 AND a.name = '브라이언 타이리 헨리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '스칼렛 요한슨', '/6NsMbJXRlDZuDzatN2akFdGuTvx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스칼렛 요한슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elita-1 (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 698687 AND a.name = '스칼렛 요한슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '키건마이클 키', '/xmdzYXP9j87a43FSiL138nLesuS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키건마이클 키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'B-127 (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 698687 AND a.name = '키건마이클 키';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '존 햄', '/mrXE5fZbEDPc7BEE5G21J6qrwzi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '존 햄');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sentinel Prime (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 698687 AND a.name = '존 햄';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '조시 쿨리', '/eGN0vaFmKtqHu1nFi3Lv4roQ6P2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조시 쿨리');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 698687 AND d.name = '조시 쿨리';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/c2JXlWzvXegSda8qaATr8I47kMx.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 698687;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zViRwl3ySscZnbXZJ2Q9wq3SeUG.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 698687;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (845781, '레드 원', '2024-10-31', '크리스마스 실종 위기, 사라진 산타를 찾기 위한 대환장 플레이', '크리스마스 D-1, 철통같은 보안을 뚫고 코드명 ''레드 원'' 산타클로스가 납치되고 크리스마스가 사라질 위기에 처했다! ''레드 원''을 찾기 위해 사령관 ''칼럼 드리프트''는 산타클로스 따위는 없다고 믿는 현상금 사냥꾼 ''잭 오말리''와 협력하기로 한다. 시작부터 삐그덕 거리는 이들 앞에 크리스마스의 존재를 위협하는 위험천만한 적들이 나타나는데…', 124, '12', 'NOW_PLAYING', 1315.870000, 6.724000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 845781 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 845781 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 845781 AND g.name = '모험';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '드웨인 존슨', '/5QApZVV8FUFlVxQpIK3Ew6cqotq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '드웨인 존슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Callum Drift', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 845781 AND a.name = '드웨인 존슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '크리스 에반스', '/3bOGNsHlrswhyW79uvIHH1V43JI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 에반스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jack O''Malley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 845781 AND a.name = '크리스 에반스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'J.K. 시몬스', '/ScmKoJ9eiSUOthAt1PDNLi8Fkw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'J.K. 시몬스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nick', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 845781 AND a.name = 'J.K. 시몬스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '루시 리우', '/9nbtjqsx3De7hO2XDtrBQ7M9VCH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루시 리우');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zoe', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 845781 AND a.name = '루시 리우';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '키어넌 십카', '/t2FWVLTIhVRIa398mQAfN4thO5R.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키어넌 십카');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gryla', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 845781 AND a.name = '키어넌 십카';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Jake Kasdan', '/pIpY7zcBSpq6Z3Q1eADPtKDB043.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jake Kasdan');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 845781 AND d.name = 'Jake Kasdan';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ryYEpxWiZFmJJZUyvQCBvM5UOCU.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 845781;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rOmUuQEZfPXglwFs5ELLLUDKodL.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 845781;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (945961, '에이리언: 로물루스', '2024-08-13', '비명마저 집어삼킬 극강의 공포', '2142년, 부모 세대가 맞닥뜨렸던 암울한 미래를 피하려는 청년들이 더 나은 삶을 찾기 위해 식민지를 떠날 계획을 세운다. 하지만 버려진 우주 기지 로물루스에 도착한 이들은 악몽과도 같은 에이리언의 무자비한 공격에 쫓기기 시작한다. 그 누구도 그들의 절규를 들을 수 없는 우주 한가운데, 생존을 위한 치열한 사투를 벌여야 하는데...', 119, '15', 'RELEASED', 1282.341000, 7.300000, 350752564, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 945961 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 945961 AND g.name = '공포';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '케일리 스패니', '/nquUc6o2dK4Pg4zjvl2HmZOfiRS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케일리 스패니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rain', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 945961 AND a.name = '케일리 스패니';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '데이비드 존슨', '/nIT9PmgMHHwSYG39hjqL6vv3TWU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이비드 존슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Andy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 945961 AND a.name = '데이비드 존슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Archie Renaux', '/uTd18t2VJovN2jSJyhuG8Yy3PV6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Archie Renaux');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tyler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 945961 AND a.name = 'Archie Renaux';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이사벨라 메르세드', '/zfLScjMHJWkGMzvDZmb1tpsBHuk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이사벨라 메르세드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kay', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 945961 AND a.name = '이사벨라 메르세드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Spike Fearn', '/o1WcXkDdlN5wdL5WIuGXNpNouZ9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Spike Fearn');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bjorn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 945961 AND a.name = 'Spike Fearn';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '페데 알바레즈', '/f8KjBkmqAyNGTUkZh1oYIURP4id.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '페데 알바레즈');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 945961 AND d.name = '페데 알바레즈';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/AmWTYg3RCMv7fbQxwCqrxiaUhkc.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 945961;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6vn6K9oX82i6E86ZiHVxqVEMQqP.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 945961;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1051896, '아카디안', '2024-04-12', '', '문명의 대부분이 파괴된 지구, 쌍둥이 형제들이 정체를 알 수 없는 괴물들로부터 아버지 ‘폴’과 이웃들을 지키기 위해 나서며 벌어지는 액션 스릴러', 92, '19', 'RELEASED', 1213.087000, 6.000000, 859453, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1051896 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1051896 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1051896 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1051896 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '니콜라스 케이지', '/iqqNNhPMrd1jMPWNiVACURaDwii.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '니콜라스 케이지');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paul', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1051896 AND a.name = '니콜라스 케이지';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제이든 리버허', '/Anx0n2hsJnHKAnMQP7ptOTfTxTI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이든 리버허');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joseph', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1051896 AND a.name = '제이든 리버허';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Maxwell Jenkins', '/1fLzPGmVqAuktboeneJ3Ru1ab2v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Maxwell Jenkins');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Thomas', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1051896 AND a.name = 'Maxwell Jenkins';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Sadie Soverall', '/wGQgTJztCKwCZA79JgvZMQhhFFs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sadie Soverall');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Charlotte', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1051896 AND a.name = 'Sadie Soverall';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Samantha Coughlan', '/oTcw7AFY52UYyIjPLp9ZjySwivy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Samantha Coughlan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mrs. Rose', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1051896 AND a.name = 'Samantha Coughlan';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Benjamin Brewer', '/vr0ZjHGlSg5mR1cs7yC26lRdIAP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Benjamin Brewer');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1051896 AND d.name = 'Benjamin Brewer';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/spWV1eRzlDxvai8LbxwAWR0Vst4.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1051896;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9s9o9RT9Yj6nDuRJjnJm78WFoFl.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1051896;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1084736, '몬테크리스토 백작', '2024-06-28', '', '에드먼드 단테스는  음모에 빠져 결혼식 날 자신이 저지르지도 않은 범죄로 체포된다. 샤토 디프에서 14년 동안의 수감 생활을 끝으로 탈옥에 성공하고  꿈에 그리던 부자가 된다. 단테스는 몬테크리스토 백작으로 신분을 위장하고 세 남자에게 복수를 실행에 옮긴다.', 178, '', 'RELEASED', 1040.657000, 8.300000, 73924182, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '역사';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '피에르 니네이', '/aMsGsnRPet7pZ2ppAxaRdBz4yGU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '피에르 니네이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Edmond Dantès / le Comte de Monte-Cristo / Lord Halifax', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1084736 AND a.name = '피에르 니네이';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Bastien Bouillon', '/NNaftwlsU8rvBY4e4LX25ZTKgB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bastien Bouillon');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fernand de Morcerf', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1084736 AND a.name = 'Bastien Bouillon';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '아나이스 드무스티에', '/kObYOu3UYkNcQGg1gnl4xitwhNc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아나이스 드무스티에');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mercédès Herrera', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1084736 AND a.name = '아나이스 드무스티에';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '아나마리아 바르톨로메이', '/oU56hySuXi4Q51gX6nPcplWybQo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아나마리아 바르톨로메이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Haydée', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1084736 AND a.name = '아나마리아 바르톨로메이';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Laurent Lafitte', '/lpF5sb1aEMEmxxfZT3u8PWGEipC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Laurent Lafitte');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gérard de Villefort', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1084736 AND a.name = 'Laurent Lafitte';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Alexandre de La Patellière', '/er7ZbU5inozZfFmvpwswjujxBos.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Alexandre de La Patellière');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1084736 AND d.name = 'Alexandre de La Patellière';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Matthieu Delaporte', '/ofOMIBoC3FyRgfPRWhQxzJMCeLy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Matthieu Delaporte');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1084736 AND d.name = 'Matthieu Delaporte';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4MlHj9EWOFIDoa4uXwcQhnf66w5.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1084736;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/llIXQAndg5kB6SWlp6ouUdO7Zxd.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1084736;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (889737, '조커: 폴리 아 되', '2024-10-01', '온 세상이 바로 무대', '2년 전, 세상을 뒤흔들며 고담시 아이콘으로 자리한 아서 플렉은 아캄 수용소에 갇혀 최종 재판을 앞둔 무기력한 삶을 살아간다. 그러던 어느 날, 수용소에서 운명적으로 만난 리 퀸젤은 아서의 삶을 다시 뒤바꾸며 그의 마음 속에 잠들어 있던 조커를 깨우고 리 역시 각성하며 자신을 할리 퀸이라 지칭하며 서로에게 깊이 빠져든다. 무고한 시민을 죽인 죄로 재판에 오르게 된 아서. 그는 최후의 심판대에서 할리 퀸과 함께 자신, 조커의 이야기를 시작하는데…', 138, '15', 'RELEASED', 853.370000, 5.600000, 200714058, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 889737 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 889737 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 889737 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '호아킨 피닉스', '/u38k3hQBDwNX0VA22aQceDp9Iyv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '호아킨 피닉스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Arthur Fleck', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 889737 AND a.name = '호아킨 피닉스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '레이디 가가', '/8BEujpdfDScHepZ3j9Kq2SObhE4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레이디 가가');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lee Quinzel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 889737 AND a.name = '레이디 가가';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '브렌던 글리슨', '/dTS2y7FLsnrskf0tPb8f9H7KAP3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브렌던 글리슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jackie Sullivan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 889737 AND a.name = '브렌던 글리슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '캐서린 키너', '/n4CTwGszs6cwS1wJRlDQ5Mlh7Ex.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '캐서린 키너');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maryanne Stewart', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 889737 AND a.name = '캐서린 키너';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '재지 비츠', '/ijrT4pvALvxU0gphea4YxDnDh6e.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '재지 비츠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sophie Dumond', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 889737 AND a.name = '재지 비츠';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '토드 필립스', '/A6FPht87DiqXzp456WjakLi2AtP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '토드 필립스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 889737 AND d.name = '토드 필립스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dA1TGJPTVjlqPc8PiEE2PfvFBUp.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 889737;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uGmYqxh8flqkudioyFtD7IJSHxK.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 889737;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (335983, '베놈', '2018-09-28', '영웅인가, 악당인가', '진실을 위해서라면 몸을 사리지 않고 사회의 부조리를 취재하는 정의로운 열혈 기자 에디 브록. 거대 기업 라이프 파운데이션의 생체실험에 의혹을 품고 뒤를 쫓던 그는 이들의 사무실에 잠입했다가 실험실에서 외계 생물체 심비오트의 기습 공격을 받게 된다. 심비오트가 숙주의 몸과 정신을 지배할 때 능력을 발휘하는 베놈은 에디의 몸에 기생하며 갖가지 소동을 일으킨다. 한편 비밀리에 인간과 심비오트를 결합해 새로운 생명체를 만들려는 시도를 계속하던 라이프 파운데이션의 회장 드레이크 또한 심비오트의 숙주가 된다.', 112, '15', 'RELEASED', 909.623000, 6.835000, 856085151, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 335983 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 335983 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '톰 하디', '/d81K0RH8UX7tZj49tZaQhZ9ewH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 하디');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eddie Brock / Venom', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 335983 AND a.name = '톰 하디';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '미셸 윌리엄스', '/jn3BVMVbIptz2gc6Fhxo1qwJVvW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미셸 윌리엄스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anne Weying', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 335983 AND a.name = '미셸 윌리엄스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '리즈 아메드', '/1uP9RaX7BGVx7XGTEmwObBJJzsC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리즈 아메드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Carlton Drake / Riot', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 335983 AND a.name = '리즈 아메드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Scott Haze', '/6cd3Jt8Vo52j8cRKbNf1j7cERhs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Scott Haze');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Security Chief Roland Treece', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 335983 AND a.name = 'Scott Haze';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '리드 스콧', '/kBAeDUDA7XJRXFLGNALlpE5d3lA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리드 스콧');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Dan Lewis', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 335983 AND a.name = '리드 스콧';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '루빈 플라이셔', '/3JLxOPFTLigSy8FjFjDyMwD9GIp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '루빈 플라이셔');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 335983 AND d.name = '루빈 플라이셔';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/x4ojC59pYfPlAP4mmy2LSkCCuK2.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 335983;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/VuukZLgaCrho2Ar8Scl9HtV3yD.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 335983;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1116490, '캐시 아웃', '2024-04-26', '완벽한 작전은 사라졌다. 지금부터 플랜 B가 시작된다!', '전설적인 강도단의 보스 ‘메이슨’(존 트라볼타) 실패로 끝난 작전 이후 은퇴하고 잠적했던 그가 옛 팀원들의 다급한 요청으로 은행 강도 현장에 도착한다.  하지만 현장은 곧 치밀한 작전 따윈 사라지고 예상치 못한 FBI 협상가까지 등장하며 엉망이 되어버린다.  ‘메이슨’은 이제 FBI에 맞서 팀원들을 지키고 인생 마지막 한탕을 성공시키기 위해 완벽한 플랜 B를 설계하기 시작하는데…', 90, '12', 'RELEASED', 1155.410000, 6.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1116490 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1116490 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '존 트래볼타', '/eVWcevrvGLLqt9gkDMruqgLJPsp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '존 트래볼타');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mason Goddard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1116490 AND a.name = '존 트래볼타';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '크리스틴 데이비스', '/61TjappibaZ1i8pEFlqwK2yrR2W.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스틴 데이비스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Amelia Decker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1116490 AND a.name = '크리스틴 데이비스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '루카스 하스', '/6LNGu3o2aBiYNTDkbXMDIGyQtBh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루카스 하스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shawn Goddard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1116490 AND a.name = '루카스 하스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '퀘이보', '/xnNpJvPluhit6LFxLEFlbZwHtoJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '퀘이보');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1116490 AND a.name = '퀘이보';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '노엘 구글리에미', '/26khzGvkwfTdR3f6rNAtQ39Z8OF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '노엘 구글리에미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vernon Richter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1116490 AND a.name = '노엘 구글리에미';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '랜들 에멧', '/qkSvRlmJFSPl9Y1qMiOZyfP29mU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '랜들 에멧');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1116490 AND d.name = '랜들 에멧';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4r77ZO9pKgQuW1GxjMrktyY8eUP.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1116490;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6VoxDupaW2VXfLtJyeOoGCgXSjD.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1116490;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (519182, '슈퍼배드 4', '2024-06-20', '올여름은 우리가 씹어 먹는다!', '슈트-업 하고 악당 전담 처리반 AVL이 된 에이전트 미니언즈와 미니언즈 만큼 귀여운 그루 주니어가 태어나면서 더욱 완벽해진 그루 패밀리. 이들 앞에 과거 그루의 고등학교 동창이자 그에게 체포당했던 빌런 맥심이 등장하고, 오직 그루를 향한 복수심에 불타올라 탈옥까지 감행한 맥심은 그루 패밀리의 뒤를 바짝 추격하며 위협을 가하기 시작하는데... 과연 에이전트 미니언즈와 그루 패밀리는 맥심을 막아낼 수 있을까?', 94, 'ALL', 'RELEASED', 860.072000, 7.100000, 953140610, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 519182 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 519182 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 519182 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 519182 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '스티브 카렐', '/1LQDqpcDQTtQb90o9vagbuCHueb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스티브 카렐');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gru (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 519182 AND a.name = '스티브 카렐';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '크리스틴 위그', '/N517EQh7j4mNl3BStMmjMN6hId.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스틴 위그');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lucy (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 519182 AND a.name = '크리스틴 위그';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '윌 페럴', '/xYPM1OOLXZguj4FsgmOzTSUXaXd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '윌 페럴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maxime (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 519182 AND a.name = '윌 페럴';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '소피아 베르가라', '/7VZL8Lupwf3rgNyc7DC3m0XNtvq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '소피아 베르가라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Valentina (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 519182 AND a.name = '소피아 베르가라';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '미란다 코스그로브', '/qIGeoyXEVu1LxTH34TWx1YSHyQr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미란다 코스그로브');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Margo (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 519182 AND a.name = '미란다 코스그로브';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Chris Renaud', '/sumBJgBqRkK4XEJ2JYXpad3MTJs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Chris Renaud');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 519182 AND d.name = 'Chris Renaud';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5hl1PEpAvZ8Ok37kB7woIssHi3X.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 519182;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lgkPzcOSnTvjeMnuFzozRO5HHw1.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 519182;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (580489, '베놈 2: 렛 데어 비 카니지', '2021-09-30', '히어로의 시대는 끝났다', '‘베놈''과 완벽한 파트너가 된 ‘에디 브록'' 앞에 ‘클리터스 캐서디''가 ‘카니지''로 등장, 앞으로 닥칠 대혼돈의 세상을 예고한다. 대혼돈의 시대가 시작되고, 악을 악으로 처단할 것인가?', 97, '15', 'RELEASED', 800.762000, 6.800000, 506863592, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 580489 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 580489 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 580489 AND g.name = '모험';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '톰 하디', '/d81K0RH8UX7tZj49tZaQhZ9ewH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 하디');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eddie Brock / Venom', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 580489 AND a.name = '톰 하디';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '우디 해럴슨', '/x9jcwNJxpbqx3YARrifLR5xU4Ty.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '우디 해럴슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cletus Kasady / Carnage', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 580489 AND a.name = '우디 해럴슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '미셸 윌리엄스', '/jn3BVMVbIptz2gc6Fhxo1qwJVvW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미셸 윌리엄스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anne Weying', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 580489 AND a.name = '미셸 윌리엄스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '나오미 해리스', '/41TVAcYqKKF7PGf3x7QfaLvkLSW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나오미 해리스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frances Louise Barrison / Shriek', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 580489 AND a.name = '나오미 해리스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '리드 스콧', '/kBAeDUDA7XJRXFLGNALlpE5d3lA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리드 스콧');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Dan Lewis', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 580489 AND a.name = '리드 스콧';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '앤디 서키스', '/eNGqhebQ4cDssjVeNFrKtUvweV5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '앤디 서키스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 580489 AND d.name = '앤디 서키스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fHnKlSp28U648O4vm95z86Jw5tT.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 580489;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vIgyYkXkg6NC2whRbYjBD7eb3Er.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 580489;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1196470, 'Survivre', '2024-06-19', '', '', 90, '', 'RELEASED', 788.558000, 5.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1196470 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1196470 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1196470 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1196470 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Andreas Pietschmann', '/2eXCr0GfkjVRbPgMacZlR8fMjYL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Andreas Pietschmann');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tom', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1196470 AND a.name = 'Andreas Pietschmann';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '에밀리 드켄', '/aNGdK8n9GCzgHbxcucqdgmKM8lR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에밀리 드켄');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Julia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1196470 AND a.name = '에밀리 드켄';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Lucas Ebel', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lucas Ebel');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ben', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1196470 AND a.name = 'Lucas Ebel';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Arben Bajraktaraj', '/3MYjqNvkUv0ltieUw2Hhfrs3W6y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Arben Bajraktaraj');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'L''homme au harpon', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1196470 AND a.name = 'Arben Bajraktaraj';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Lisa Delamar', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lisa Delamar');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cassie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1196470 AND a.name = 'Lisa Delamar';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Frédéric Jardin', '/uiJA1LYyfFcFUuxYBl21F6Hx7BL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Frédéric Jardin');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1196470 AND d.name = 'Frédéric Jardin';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/901kRttzfLScns7ss7RyKqG6d2A.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1196470;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/csQSGH0QU8D3Ov5YLEYuHep8ihA.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1196470;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (976734, '카나리 블랙', '2024-10-10', '', 'CIA 최고 요원 에이버리 그레이브스(케이트 베킨세일)는 납치된 남편을 구하기 위해 조국을 배신하라는 테러리스트의 협박을 받는다. 팀과 단절된 그녀는 납치범들이 원하는 정보를 찾기 위해 지하세계의 인맥에 도움을 청한다. 매번 배신을 당하는 에이버리는 글로벌 위기를 촉발할 수 있는 몸값을 전달하기 위해 치명적인 경쟁에 뛰어들게 되는데...', 103, '', 'RELEASED', 701.920000, 6.300000, 525704, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 976734 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 976734 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 976734 AND g.name = '범죄';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '케이트 베킨세일', '/9RnPZhX9PXaHL4PFE65RUQLSewt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케이트 베킨세일');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Avery Graves', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 976734 AND a.name = '케이트 베킨세일';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '루퍼트 프렌드', '/mYgY8LrMkQ4OkGTIOf6MtkbMnnW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루퍼트 프렌드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'David Brooks', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 976734 AND a.name = '루퍼트 프렌드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Saffron Burrows', '/2qMLZh9XWquBt7TZF9wmDiOtJdm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Saffron Burrows');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elizabeth Mills', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 976734 AND a.name = 'Saffron Burrows';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '레이 스티븐슨', '/msafbswGI6uisRuNvQ8a1wMF5Ca.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레이 스티븐슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jarvis Hedlund', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 976734 AND a.name = '레이 스티븐슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Goran Kostić', '/m6CEa5UjqhPzLRbUNHku9GpvCmQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Goran Kostić');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Breznov', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 976734 AND a.name = 'Goran Kostić';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Pierre Morel', '/pfuvCNPt4BtK81GnMy4GpxYoCs9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Pierre Morel');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 976734 AND d.name = 'Pierre Morel';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hhiR6uUbTYYvKoACkdAIQPS5c6f.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 976734;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/begseNUKhZcc05Bc1UggaX5GeES.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 976734;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1022789, '인사이드 아웃 2', '2024-06-11', '비상! 새로운 감정들이 몰려온다!', '13살이 된 라일리의 행복을 위해 매일 바쁘게 머릿속 감정 컨트롤 본부를 운영하는 ‘기쁨’, ‘슬픔’, ‘버럭’, ‘까칠’, ‘소심’. 그러던 어느 날, 낯선 감정인 ‘불안’, ‘당황’, ‘따분’, ‘부럽’이가 본부에 등장하고, 언제나 최악의 상황을 대비하며 제멋대로인 ‘불안’이와 기존 감정들은 계속 충돌한다. 결국 새로운 감정들에 의해 본부에서 쫓겨나게 된 기존 감정들은 다시 본부로 돌아가기 위해 위험천만한 모험을 시작하는데…', 97, 'ALL', 'RELEASED', 696.620000, 7.601000, 1682636477, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1022789 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1022789 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1022789 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1022789 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1022789 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '에이미 폴러', '/rwmvRonpluV6dCPiQissYrchvSD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에이미 폴러');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joy (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1022789 AND a.name = '에이미 폴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마야 호크', '/evjbbHM1bzA6Ma5Ptjwa4WkYkkj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마야 호크');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anxiety (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1022789 AND a.name = '마야 호크';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '켄싱턴 톨먼', '/tBqawwg2VJq1V4mZjAOFQ7fnXNW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '켄싱턴 톨먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Riley (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1022789 AND a.name = '켄싱턴 톨먼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '리자 라피라', '/o3jvQAGWtxi5rEycslhC6CY8BWX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리자 라피라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Disgust (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1022789 AND a.name = '리자 라피라';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '토니 헤일', '/3dEyZgTye0Ec17VGKp0mJ3aU6ty.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '토니 헤일');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fear (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1022789 AND a.name = '토니 헤일';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '켈시 만', '/fbZTKdt6wcZ6s6J0z91ZpxXpqOY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '켈시 만');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1022789 AND d.name = '켈시 만';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/x2BHx02jMbvpKjMvbf8XxJkYwHJ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1022789;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/p5ozvmdgsmbWe0H8Xk7Rc8SCwAB.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1022789;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1331375, '도미니크: 불사조', '2024-10-11', '지옥에 떨어진 천사, 거침없이 상대한다!', '킬러의 삶을 버리지만 범죄의 땅에 추락한 천사. 마을은 경찰까지 카르텔에 장악된 무법지대이다. 친절을 보인 가족이 위험에 처하고 운명은 그녀에게 다시 총을 잡게한다. 경찰특공대와 일당백의 전쟁이 시작된다.', 100, '', 'RELEASED', 631.492000, 7.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1331375 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1331375 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Oksana Orlan', '/lofMKIpjHygZ2p6g27FQj8otsjH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Oksana Orlan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dominique', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1331375 AND a.name = 'Oksana Orlan';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Sebastián Carvajal', '/cBaHCzpZe27KzWviS41heE01sSe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sebastián Carvajal');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Julio', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1331375 AND a.name = 'Sebastián Carvajal';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'María del Rosario', '/ln83cpcticvSWbEMVUD3NtmmLCA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'María del Rosario');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paulina', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1331375 AND a.name = 'María del Rosario';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Maurice Compte', '/9PFInf2I0kqjAU0CmZhdDWmHfwT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Maurice Compte');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chief Santiago', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1331375 AND a.name = 'Maurice Compte';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Chase Coleman', '/eXrwo2UOgDLbywSUxUBBQcGZbgf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Chase Coleman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'John', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1331375 AND a.name = 'Chase Coleman';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Michael S. Ojeda', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Michael S. Ojeda');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1331375 AND d.name = 'Michael S. Ojeda';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5OTh8Xaoueck7g6qgJNJ6vtHcAP.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1331375;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jT4KqFTrR2ofpUUwzKCIn4uYWXp.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1331375;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1331375, '도미니크: 불사조', '2024-10-11', '지옥에 떨어진 천사, 거침없이 상대한다!', '킬러의 삶을 버리지만 범죄의 땅에 추락한 천사. 마을은 경찰까지 카르텔에 장악된 무법지대이다. 친절을 보인 가족이 위험에 처하고 운명은 그녀에게 다시 총을 잡게한다. 경찰특공대와 일당백의 전쟁이 시작된다.', 100, '', 'RELEASED', 631.492000, 7.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1331375 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1331375 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Oksana Orlan', '/lofMKIpjHygZ2p6g27FQj8otsjH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Oksana Orlan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dominique', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1331375 AND a.name = 'Oksana Orlan';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Sebastián Carvajal', '/cBaHCzpZe27KzWviS41heE01sSe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sebastián Carvajal');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Julio', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1331375 AND a.name = 'Sebastián Carvajal';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'María del Rosario', '/ln83cpcticvSWbEMVUD3NtmmLCA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'María del Rosario');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paulina', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1331375 AND a.name = 'María del Rosario';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Maurice Compte', '/9PFInf2I0kqjAU0CmZhdDWmHfwT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Maurice Compte');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chief Santiago', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1331375 AND a.name = 'Maurice Compte';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Chase Coleman', '/eXrwo2UOgDLbywSUxUBBQcGZbgf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Chase Coleman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'John', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1331375 AND a.name = 'Chase Coleman';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Michael S. Ojeda', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Michael S. Ojeda');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1331375 AND d.name = 'Michael S. Ojeda';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5OTh8Xaoueck7g6qgJNJ6vtHcAP.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1331375;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jT4KqFTrR2ofpUUwzKCIn4uYWXp.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1331375;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (558449, '글래디에이터 II', '2024-11-13', '역사로 기억될 새로운 반란이 시작된다!', '로마의 영웅이자 최고의 검투사였던 ‘막시무스’가 콜로세움에서 죽음을 맞이한 뒤 20여 년이 흐른 후. 쌍둥이 황제 ‘게타’와 ‘카라칼라’의 폭압 아래 시민을 위한 자유로운 나라 ‘로마의 꿈’은 잊힌 지 오래다. 한편 ‘아카시우스’ 장군이 이끄는 로마군에 대패한 후 모든 것을 잃고 노예로 전락한 ‘루시우스’는 강한 권력욕을 지닌 ‘마크리누스’의 눈에 띄어 검투사로 발탁된다. 로마를 향한 걷잡을 수 없는 분노, 타고난 투사의 기질로 콜로세움에 입성하게 된 ‘루시우스’는 결투를 거듭하며 자신이 진짜 누구인지 알게 되고 마침내 로마의 운명을 건 결전을 준비하게 되는데...!', 148, '19', 'NOW_PLAYING', 1044.357000, 7.600000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 558449 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 558449 AND g.name = '모험';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '폴 메스칼', '/vrzZ41TGNAFgfmZjC2sOJySzBLd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '폴 메스칼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lucius Verus / Hanno', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 558449 AND a.name = '폴 메스칼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '덴젤 워싱턴', '/jj2Gcobpopokal0YstuCQW0ldJ4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '덴젤 워싱턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Macrinus', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 558449 AND a.name = '덴젤 워싱턴';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '페드로 파스칼', '/9VYK7oxcqhjd5LAH6ZFJ3XzOlID.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '페드로 파스칼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'General Acacius', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 558449 AND a.name = '페드로 파스칼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '코니 닐센', '/lvQypTfeH2Gn2PTbzq6XkT2PLmn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '코니 닐센');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lucilla', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 558449 AND a.name = '코니 닐센';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '조셉 퀸', '/zshhuioZaH8S5ZKdMcojzWi1ntl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조셉 퀸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Emperor Geta', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 558449 AND a.name = '조셉 퀸';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '리들리 스콧', '/zABJmN9opmqD4orWl3KSdCaSo7Q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '리들리 스콧');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 558449 AND d.name = '리들리 스콧';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/b5UXjzW5cLZhprMnlAmsVAA3G4t.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 558449;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8mjYwWT50GkRrrRdyHzJorfEfcl.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 558449;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1214484, '렛 고', '2024-11-01', '', '가정생활에 지쳐버린 엄마가 가족들의 화합을 위해 마지막 노력을 쏟아 보려 한다. 바로 10대 딸의 폴댄스 대회를 위해 온 가족이 여행을 떠나는 것.', 110, '19', 'RELEASED', 592.826000, 8.095000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1214484 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Josephine Bornebusch', '/nba2j9kEqZrFI1VdoYNXxWeK2Mv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Josephine Bornebusch');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Stella', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1214484 AND a.name = 'Josephine Bornebusch';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Pål Sverre Hagen', '/eJzuZZfFBaMSgcbR3Pe5zBxEC3z.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Pål Sverre Hagen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gustav', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1214484 AND a.name = 'Pål Sverre Hagen';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Sigrid Johnson', '/4jn1H17ZB2nJgT0oVqkoaDryPTm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sigrid Johnson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anna', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1214484 AND a.name = 'Sigrid Johnson';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Olle Tikkakoski Lundström', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Olle Tikkakoski Lundström');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Manne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1214484 AND a.name = 'Olle Tikkakoski Lundström';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Leon Mentori', '/1Y1niowpVEUgkXCRD4ZqGfX5YgX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Leon Mentori');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gabriel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1214484 AND a.name = 'Leon Mentori';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Josephine Bornebusch', '/nba2j9kEqZrFI1VdoYNXxWeK2Mv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Josephine Bornebusch');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1214484 AND d.name = 'Josephine Bornebusch';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5QqzteriIBTWlWMLNkshTDKx9Xx.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1214484;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lk2V8WFnAoXa44q8vqVeYyK6WJK.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1214484;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1287717, '출입금지', '2024-08-06', '', '노동자 계급 출신인 두 명의 유튜버가 콘텐츠를 만들던 중 자신들의 농구공 가방을 되찾기 위해서 버려진 저택에 들어가 장난을 치다 길을 잃고 만다. 그들은 핸드폰으로 이 깜짝 어드벤처를 찍기 시작하고, 유튜브 채널의 구독자 수를 늘리려는 욕심에 유령이 나오는 것처럼 동영상을 조작한다. 동영상은 입소문을 타고 이들은 챌린지를 시작한다. 영상 조회수가 일정 수에 도달하면 그 집에 다시 들어가기로 한 것. 밤에, 혼자, 완전히 무방비 상태로 말이다. 팬들이 호응하자 그들은 약속한 대로 다시 그 집에 간다. 그리고 그곳에 사는 이들의 진짜 정체와 함께, 자신들 역시 더 이상 산 사람이 아닐 수 있다는 사실을 깨닫는다.', 85, '15', 'RELEASED', 505.740000, 7.571000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1287717 AND g.name = '공포';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Pablo Martínez', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Pablo Martínez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1287717 AND a.name = 'Pablo Martínez';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Lucas Caballero', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lucas Caballero');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1287717 AND a.name = 'Lucas Caballero';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Rafael Alfaro', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rafael Alfaro');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1287717 AND a.name = 'Rafael Alfaro';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Lara Chamorro', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lara Chamorro');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1287717 AND a.name = 'Lara Chamorro';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Andy Romero', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Andy Romero');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1287717 AND a.name = 'Andy Romero';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Hugo Cardozo', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Hugo Cardozo');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1287717 AND d.name = 'Hugo Cardozo';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pi2pkIUeVk0z3iy67YKTxDjeAGr.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1287717;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xSQjJiAYiLdpVU20iSDAQisAVJY.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1287717;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (420634, '테리파이어', '2018-01-25', '', '할로윈 밤. 술마시고 진탕 놀다 귀가하던 타라와 돈은 광대 복장의 남자와 맞닥뜨린다. 이들은 할로윈 코스프레를 한 찌질남으로 치부하지만, 그는 수년 전 세상을 떠들썩하게 만든 광대 살인마였고 할로윈 밤에 다시 돌아온 것이었다. 두 사람은 광대 살인마의 표적이 되는데...', 85, '', 'RELEASED', 548.174000, 6.385000, 416322, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 420634 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 420634 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '데이비드 하워드 손턴', '/9nYijs4ACzjg93zKezLiLmuRGvp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이비드 하워드 손턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Art the Clown', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 420634 AND a.name = '데이비드 하워드 손턴';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jenna Kanell', '/xrWxxvNsZvBVHeeS3RIlhi8rGyA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jenna Kanell');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tara Heyes', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 420634 AND a.name = 'Jenna Kanell';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Samantha Scaffidi', '/jwd0XXuc4ibXAXjOxmhsFP0fQEO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Samantha Scaffidi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Victoria Heyes', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 420634 AND a.name = 'Samantha Scaffidi';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Catherine Corcoran', '/vv3hncIfLPsTj5XonPrMV4UcbPl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Catherine Corcoran');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dawn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 420634 AND a.name = 'Catherine Corcoran';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Pooya Mohseni', '/k9KebLQpIfsBKAT5DUkMS5O8vOv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Pooya Mohseni');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cat Lady', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 420634 AND a.name = 'Pooya Mohseni';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Damien Leone', '/nX2kkYD32x2PC9rRU7DrYCRPjFE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Damien Leone');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 420634 AND d.name = 'Damien Leone';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sFaPj5UyIAsiRuIgVl60pCYUzmR.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 420634;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fBNnj5bQ5YhzPUzxIW1UvLVZepP.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 420634;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1371727, '씽: Thriller', '2024-10-16', '', '버스터 문이 마이클 잭슨의 ''Thriller''에 맞춰 스타들이 총출동하는 화려한 무대를 꿈꾼다. 인기 영화 《씽》의 캐릭터들이 출연하는 단편 애니메이션.', 11, 'ALL', 'RELEASED', 525.827000, 7.371000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1371727 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1371727 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1371727 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1371727 AND g.name = '공포';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '매튜 매커너히', '/rUxLWWCDUF8RnDaocSqrVDJ2MS1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '매튜 매커너히');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Buster Moon (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1371727 AND a.name = '매튜 매커너히';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '토리 켈리', '/jNKEWJf4FMac3yCK6jsM6TfFJG5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '토리 켈리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Meena (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1371727 AND a.name = '토리 켈리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '닉 크롤', '/vdgpGtSXqTBnIKrKNMZocdFu7pX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '닉 크롤');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gunter (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1371727 AND a.name = '닉 크롤';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '스칼렛 요한슨', '/6NsMbJXRlDZuDzatN2akFdGuTvx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스칼렛 요한슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ash (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1371727 AND a.name = '스칼렛 요한슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '태런 에저턴', '/vYjk7d9MMQv8vL3rGvuBY8LI55U.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '태런 에저턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Johnny (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1371727 AND a.name = '태런 에저턴';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Garth Jennings', '/zl6ZWijGySSIYJRFalleAiGkxyQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Garth Jennings');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1371727 AND d.name = 'Garth Jennings';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/i77OInTKcrnRlAozFOaB6D5mk15.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1371727;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/m1MifWpNjOU1g8UfIyNSI2dMFZf.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1371727;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1029235, '아즈라엘', '2024-09-27', '', '종말이 일어난 지 여러 해가 지난 후, 말을 못 하는 광신도들로 구성된 종교 단체에서 탈출한 젊은 여성 아즈라엘을 추적하는 이야기. 무자비한 지도자들에게 붙잡혀 감금당한 아즈라엘은 주변 황야 깊은 곳에 숨어있는 고대의 악마를 달래기 위한 제물로 바쳐질 예정이었다. 그러나 그녀는 살기 위해 어떤 것도 주저하지 않는다. 그녀의 불타는 복수와 탈출을 위한 맹렬한 질주는 극적으로 치닫는다.', 86, '19', 'RELEASED', 542.609000, 6.100000, 631272, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1029235 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1029235 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1029235 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '사마라 위빙', '/7sHnBVEiJOzjdfzUHo9vvDLkoCH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사마라 위빙');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Azrael', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1029235 AND a.name = '사마라 위빙';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Vic Carmen Sonne', '/2ROtesSqxXDT9IszpKkspsHp42O.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Vic Carmen Sonne');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miriam', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1029235 AND a.name = 'Vic Carmen Sonne';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Katariina Unt', '/nJiJuzppxhOSWjCmt4tYm0vnylE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Katariina Unt');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Josefine', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1029235 AND a.name = 'Katariina Unt';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Peter Christoffersen', '/tJXFLKYVnKZTE0LxrdMeERcZyL1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Peter Christoffersen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Demian', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1029235 AND a.name = 'Peter Christoffersen';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Nathan Stewart-Jarrett', '/xWd7wOIgJlxAKoIo5sgrZh6G2jl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nathan Stewart-Jarrett');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kenan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1029235 AND a.name = 'Nathan Stewart-Jarrett';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'E.L. Katz', '/y0QSBve9p7NZ3KR3RpPhDSlFp4P.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'E.L. Katz');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1029235 AND d.name = 'E.L. Katz';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qpdFKDvJS7oLKTcBLXOaMwUESbs.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1029235;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uLqNGzJwnj8JKkKuRM2dHWJKCtc.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1029235;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (663712, '테리파이어 2', '2022-10-06', '', '악명 높은 마일즈 카운티 대학살 이후 1년, 연쇄 살인마 ‘아트 더 크라운’이 한 유가족을 해치기 위해 다시 돌아온다. 악령의 환영에 이끌린 채, 살인마는 한 십대 소녀와 그녀의 남동생을 노린다. 악몽과 현실의 경계가 모호해질 수록 살인은 증가한다. 남매는 그들을 구원으로 이끌 한 가족의 비밀을 발견하고 ‘아트 더 크라운’의 학살을 멈추려한다.', 138, '18', 'RELEASED', 514.813000, 6.750000, 15740003, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 663712 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 663712 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '데이비드 하워드 손턴', '/9nYijs4ACzjg93zKezLiLmuRGvp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이비드 하워드 손턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Art the Clown', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 663712 AND a.name = '데이비드 하워드 손턴';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '로렌 라베라', '/qJYWq2oZcvHh7lnGskxkrYXCom0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로렌 라베라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sienna Shaw', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 663712 AND a.name = '로렌 라베라';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Elliott Fullam', '/dNsFLihmWfA2KCENbZCtq9AjSob.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Elliott Fullam');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jonathan Shaw', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 663712 AND a.name = 'Elliott Fullam';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Sarah Voigt', '/7OR1UUn0DrDykNcxakYkpxW5I1Z.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sarah Voigt');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Barbara', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 663712 AND a.name = 'Sarah Voigt';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Kailey Hyman', '/aiREJkXiIT2GIzZcl6M9LPOFbuI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kailey Hyman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brooke', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 663712 AND a.name = 'Kailey Hyman';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Damien Leone', '/nX2kkYD32x2PC9rRU7DrYCRPjFE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Damien Leone');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 663712 AND d.name = 'Damien Leone';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8gLhu8UFPZfH2Hv11JhTZkb9CVl.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 663712;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/cRdA9xjHBbobw4LJFsQ3j1CgpVq.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 663712;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (827931, '타임 컷', '2024-10-29', '', '한 십 대 소녀가 시간을 거슬러 2024년에서 2003년으로 돌아간다. 언니가 마스크를 쓴 살인마에게 살해당하기 며칠 전으로 돌아간 소녀. 과연 미래를 파괴하지 않고 과거를 바꿀 수 있을까?', 90, '15', 'RELEASED', 464.432000, 5.700000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 827931 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 827931 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 827931 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '매디슨 베일리', '/7sCoQ7hsoQ92v3X1O1JO8ueWjMI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '매디슨 베일리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lucy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 827931 AND a.name = '매디슨 베일리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '앤터니아 젠트리', '/2XgTZZS6gPqUPN6cSXnFNR1OkxO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앤터니아 젠트리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Summer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 827931 AND a.name = '앤터니아 젠트리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '그리핀 글럭', '/j7KSBKYLgnLxkZfhQ679HRSDIjj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '그리핀 글럭');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Quinn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 827931 AND a.name = '그리핀 글럭';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '메간 베스트', '/w3M6fxedhJTCXCxcv7U4mJIoTs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '메간 베스트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Emmy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 827931 AND a.name = '메간 베스트';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마이클 섕크스', '/4YkOrSUmfKljqTMwGIo50oviKe1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 섕크스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gil', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 827931 AND a.name = '마이클 섕크스';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Hannah Macpherson', '/oEdhRg9GDWvKdht4TEjRrtHmMNO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Hannah Macpherson');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 827931 AND d.name = 'Hannah Macpherson';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/59k1QVE0fiDJWqoGGKS8TcTqZPI.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 827931;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qYvOcinXcnebhmCxYeivurh91T1.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 827931;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1063877, '돈 무브', '2024-10-24', '', '사랑하는 이를 잃은 슬픔을 달래려 외딴 숲을 찾은 여자. 우연히 마주친 살인마에게 마비성 약물을 주입당하는데. 온몸이 점점 마비되어 가는 가운데, 그녀의 생존을 건 싸움이 시작된다.', 92, '19', 'RELEASED', 463.960000, 6.464000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1063877 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1063877 AND g.name = '공포';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Kelsey Asbille', '/8mXqxKaPc6FpAnLeZlPaaUaJHdC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kelsey Asbille');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Iris', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1063877 AND a.name = 'Kelsey Asbille';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Finn Wittrock', '/gwGMGTmli0uBF7eAhhXePWhYNFJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Finn Wittrock');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Richard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1063877 AND a.name = 'Finn Wittrock';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '대니얼 프랜시스', '/ltLYFcQHcaS5wdxX085Lhn0vX5v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '대니얼 프랜시스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dontrell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1063877 AND a.name = '대니얼 프랜시스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Moray Treadwell', '/hmaqML3iwGouEACUzjWDBJN6Sdz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Moray Treadwell');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bill', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1063877 AND a.name = 'Moray Treadwell';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Dylan Beam', '/udzwdodFTx4dvfwoyUX4sU5XdNL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Dylan Beam');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Daughter (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1063877 AND a.name = 'Dylan Beam';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Adam Schindler', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Adam Schindler');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1063877 AND d.name = 'Adam Schindler';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Brian Netto', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Brian Netto');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1063877 AND d.name = 'Brian Netto';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oYWAVAhvpB9CmlJuZD3n23vEgiU.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1063877;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6Rjsm5khNaYa4Gnw4iHnGX2E34T.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1063877;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (917496, '비틀쥬스 비틀쥬스', '2024-09-04', '산 자와 죽은 자, 누가 남을 것인가!', '유령과 대화하는 영매로 유명세를 타게 된 리디아와 그런 엄마가 마음에 들지 않는 10대 딸 아스트리드. 할아버지 찰스의 갑작스러운 죽음으로 가족들은 함께 시골 마을에 내려간다. 유령을 보는 엄마가 마음에 들지 않는 아스트리드는 방황하던 중 함정에 빠져 저세상에 발을 들이게 되고 딸을 구하기 위해 리디아는 인간을 믿지 않는 저세상 슈퍼스타 비틀쥬스를 소환한다. 이루지 못한 리디아와의 결혼을 조건으로 내민 비틀쥬스. 이번엔 아스트리드가 비틀쥬스를 다시 저세상으로 보내야 하는데···', 105, '12', 'RELEASED', 505.727000, 7.100000, 445300598, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 917496 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 917496 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 917496 AND g.name = '공포';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마이클 키튼', '/82rxrGxOqQW2NjKsIiNbDYHFfmb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 키튼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Beetlejuice', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 917496 AND a.name = '마이클 키튼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '위노나 라이더', '/nRB8LDsteteDJoUZPKLtu134GsS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '위노나 라이더');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lydia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 917496 AND a.name = '위노나 라이더';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '캐서린 오하라', '/cMBxHeztNVc8YXKcj084Mdd3f3U.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '캐서린 오하라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Delia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 917496 AND a.name = '캐서린 오하라';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제나 오르테가', '/q1NRzyZQlYkxLY07GO9NVPkQnu8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제나 오르테가');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Astrid', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 917496 AND a.name = '제나 오르테가';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '저스틴 서로', '/vnI9L0rXBAw1HeC0Q8hJGeJMGAW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '저스틴 서로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rory', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 917496 AND a.name = '저스틴 서로';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '팀 버튼', '/wcjuY5vD1nlfwWNbvvTGg5dGoRR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '팀 버튼');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 917496 AND d.name = '팀 버튼';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ypWQatJYyESE5PIzdlSdiOyWYja.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 917496;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xi1VSt3DtkevUmzCx2mNlCoDe74.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 917496;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1125510, '더 플랫폼 2', '2024-09-27', '', '수직 구조로 된 감방. 정체 모를 리더가 잔혹한 시스템에 자체적인 규범을 도입시키고, 이후 새로운 인물이 나타나 수상한 배급 방식에 대해 반기를 든다.', 100, '19', 'RELEASED', 497.754000, 5.700000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1125510 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1125510 AND g.name = '공포';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Milena Smit', '/aD7RhtQZZ6adyPiy4jp3RB4DhEs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Milena Smit');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Perempuán', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1125510 AND a.name = 'Milena Smit';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Hovik Keuchkerian', '/o5cGKWHlZl4RFROYlT2hD95j0lN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Hovik Keuchkerian');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zamiatin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1125510 AND a.name = 'Hovik Keuchkerian';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Natalia Tena', '/7kN9NpECZoR4NLXb4SlpHOaJx7T.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Natalia Tena');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sahabat', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1125510 AND a.name = 'Natalia Tena';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '오스카르 하에나다', '/qwphNLIwMyQW2ZLA0g0l1zFiB3w.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오스카르 하에나다');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dagin Babi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1125510 AND a.name = '오스카르 하에나다';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Ivan Massagué', '/dmnJo2sGlfFjtKb8FDPlNjRhfyc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ivan Massagué');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Goreng', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1125510 AND a.name = 'Ivan Massagué';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '갈데르 가스텔루-우루티아', '/rAPQ6GjKHbmD0zuwizhu5g3GlCB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '갈데르 가스텔루-우루티아');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1125510 AND d.name = '갈데르 가스텔루-우루티아';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/poELZsrROLJW28gc1V9nB1kJigq.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1125510;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/epQfhIcfqWgrMhRvnxkVm7EeEpE.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1125510;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (179387, 'Heavenly Touch', '2009-05-12', '', '', 89, '', 'RELEASED', 354.122000, 6.310000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 179387 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 179387 AND g.name = '로맨스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Paolo Serrano', '/nZhbmyjaQSAshWtQ3GlQxE3oOGH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Paolo Serrano');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rodel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 179387 AND a.name = 'Paolo Serrano';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Joash Balejado', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Joash Balejado');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jonard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 179387 AND a.name = 'Joash Balejado';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Marco Morales', '/slIb6dJVStEngxKC6Z4QJShP3xm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marco Morales');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Biboy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 179387 AND a.name = 'Marco Morales';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Gwen Garci', '/8ul2ti0wMAEPty5Gmc3QVXdUJWt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gwen Garci');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sheila', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 179387 AND a.name = 'Gwen Garci';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Paolo Rivero', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Paolo Rivero');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sandy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 179387 AND a.name = 'Paolo Rivero';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Joel Lamangan', '/lKEVNg8HFfsGrfzHxGZjLHVQ5ir.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Joel Lamangan');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 179387 AND d.name = 'Joel Lamangan';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ory8WuAqznTE7lfopTSymHpop2t.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 179387;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9msuazXGWAyl7vhxVFU7e7Bb5Ik.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 179387;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1100856, 'Заклятье. Шепот ведьм', '2024-06-13', '', '', 90, '', 'RELEASED', 685.097000, 4.700000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1100856 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1100856 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Артур Бесчастный', '/yI8CXyhep0WWU7juFBUTN6MRyUY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Артур Бесчастный');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Пол', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100856 AND a.name = 'Артур Бесчастный';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Марьяна Спивак', '/rCCiNJW5CROYGSJtPbGsEUN1Ehe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Марьяна Спивак');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'София', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100856 AND a.name = 'Марьяна Спивак';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Софья Шидловская', '/t7n0y5pS5JLvsQfb7OEF9mNc0de.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Софья Шидловская');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Яна', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100856 AND a.name = 'Софья Шидловская';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Игорь Грабузов', '/6QtMjf3suh9Y8T5dBx5udR0bbwI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Игорь Грабузов');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ник', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100856 AND a.name = 'Игорь Грабузов';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Сергей Сафронов', '/4a6do04xgHTlIChDFULBX5aD67m.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Сергей Сафронов');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Артур', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100856 AND a.name = 'Сергей Сафронов';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Serik Beyseu', '/5cYbNPD2hioVi47CFWp4Y20TOFq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Serik Beyseu');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1100856 AND d.name = 'Serik Beyseu';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/um3n8rQbr97uaGB2058TsktPtAy.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1100856;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xPVhaMMUZq1yclf4kCEYwJ1Cqr6.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1100856;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1159311, '나의 히어로 아카데미아 더 무비: 유어 넥스트', '2024-08-02', '평화의 상징에 도전하라', '“다음은 너다” 초자연능력 ‘개성’을 가진 인간이 당연해진 세계에서 옛 ‘평화의 상징’ NO.1 히어로 ‘올마이트’가 악의 제왕 ‘올 포 원’과의 사투 직후 한 말. ‘올마이트’의 의지는 데쿠와 유에이 고등학교 히어로과로 이어져 왔다. 유에이 2년 차 봄, 히어로 VS 빌런의 전면전이 발발하고 황폐해진 사회에 수수께끼의 남자가 나타난다. 스스로를 ‘올마이트를 대신하는 새로운 상징’이라고 말하는 ‘다크마이트’는 자신의 야망을 위해 ‘개성’으로 거대한 요새를 만들어 마을과 사람들을 차례로 삼켜간다! ‘다크마이트’의 등장과 동시에 특별한 ‘개성’을 지닌 ‘안나’라는 소녀, 그리고 그녀를 ‘아가씨’라고 부르는 ‘줄리오’라는 남자가 나타나는데… 데쿠와 바쿠고, 토도로키, 그리고 유에이 고교 1학년 A반은 ‘다크마이트’에 맞서 세계를 지킬 수 있을까? “다음은 우리다!”', 110, '12', 'NOW_PLAYING', 461.924000, 6.863000, 30568047, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1159311 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1159311 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1159311 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1159311 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '야마시타 다이키', '/rQNdJdZewk7VGP16ZNbpfJ9ZeMd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '야마시타 다이키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Izuku Midoriya (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1159311 AND a.name = '야마시타 다이키';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '오카모토 노부히코', '/41BGKnwmE2573X2ve9rGXeLw3oW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오카모토 노부히코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Katsuki Bakugo (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1159311 AND a.name = '오카모토 노부히코';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '카지 유우키', '/8wKdPV11IwowfwoqGqMMNt9hmp6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카지 유우키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shoto Todoroki (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1159311 AND a.name = '카지 유우키';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '미야노 마모루', '/i8n9U3JlujjyPmiZPHGkpwxkh7X.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미야노 마모루');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Giulio Gandini (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1159311 AND a.name = '미야노 마모루';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '生見愛瑠', '/bZjwmpUt9J3GtRLzNH5LUNDu29s.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '生見愛瑠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anna Scervino (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1159311 AND a.name = '生見愛瑠';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '오카무라 텐사이', '/uOu6uNXRMDZKyXY47T9WTa0cbeY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '오카무라 텐사이');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1159311 AND d.name = '오카무라 텐사이';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rSJnz7FqxEIe5uzAZbWSzc8bk5f.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1159311;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hd1TvTUGjkoYoqvXYfSBpI5Ri9B.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1159311;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1149912, 'Kelas Bintang - Hot Moms', '2023-02-09', '', '', 0, '', 'RELEASED', 498.713000, 5.700000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1149912 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1149912 AND g.name = '로맨스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7dBqZmErtrxN9ghOJoW6SimgDo1.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1149912;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1149912;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (573435, '나쁜 녀석들: 라이드 오어 다이', '2024-06-05', '용의자가 된 나쁜 녀석들의 화끈한 수사가 시작된다!', '마이애미 강력반 최고의 콤비 마이크와 마커스. 가족 같은 하워드 반장이 사망 전 마약 카르텔 조직의 비리에 연루되었다는 뉴스 속보를 접하게 된다. 하지만 아무도 믿지 말라는 하워드 반장의 비밀 메시지를 받은 마이크와 마커스 형사는 사건의 진실을 밝히기 위해 위험한 수사를 시작한다. 서서히 드러나는 거대한 음모와 마주하게 된 나쁜 녀석들. 그러나 이들 역시 함정에 빠져 사건의 용의자로 지목되며 동료 경찰들은 물론 마약 카르텔 조직에게도 쫓기는 신세가 되고 마는데…', 115, '15', 'RELEASED', 485.607000, 7.497000, 402529640, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 573435 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 573435 AND g.name = '코미디';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '윌 스미스', '/1QqaRZ8neYlqLx7ODZC4as47wUV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '윌 스미스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mike Lowrey', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 573435 AND a.name = '윌 스미스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마틴 로런스', '/gIHaPE7THrubUGpK8nQGI0q9EIQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마틴 로런스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marcus Burnett', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 573435 AND a.name = '마틴 로런스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '바네사 허진스', '/ssFXWN5li5OWJLgUoFlUDY0ZyPc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '바네사 허진스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kelly', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 573435 AND a.name = '바네사 허진스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '알렉산더 루드위그', '/unP5YUgEdECL2gMLs0zCNya6is6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '알렉산더 루드위그');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dorn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 573435 AND a.name = '알렉산더 루드위그';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '파올라 누녜스', '/5k8tBBvoV43iK6u0k2YUSVXPmuK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '파올라 누녜스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rita', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 573435 AND a.name = '파올라 누녜스';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '아딜 엘 아르비', '/hpl12TXFDUjzomftx7zST3M2aLg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '아딜 엘 아르비');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 573435 AND d.name = '아딜 엘 아르비';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '빌랄 팔라흐', '/thwiN6FPRkCtzrP7PrmrwaEIFtv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '빌랄 팔라흐');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 573435 AND d.name = '빌랄 팔라흐';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wIrhEUBWjRmZuL1Ix41cF2LhJrW.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 573435;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tncbMvfV0V07UZozXdBEq4Wu9HH.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 573435;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (957452, '더 크로우', '2024-08-21', '죽음마저 두려워할 사랑!', '인생에서 가장 어둡고 외로웠던 순간, 자신과 비슷한 영혼을 가진 ''셸리''를 만나 영원한 사랑을 약속한 ''에릭''. 완벽한 행복을 만끽하던 그때, 두 사람은 의문의 괴한들에게 무참히 살해 당하고 ''셸리''는 과거의 끔찍한 실수로 지옥에 끌려가게 된다. 지옥에서 ''셸리''를 되찾기 위해 ''에릭''은 까마귀의 저주를 받아 불사의 몸이 되고 죽여도 죽지 않는 복수의 화신으로 부활하게 되는데…', 111, '', 'RELEASED', 444.514000, 5.900000, 24008667, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 957452 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 957452 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 957452 AND g.name = '공포';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '빌 스카스가드', '/wGQidITqyDl4Igmq9TCQjRpegsk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빌 스카스가드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eric', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 957452 AND a.name = '빌 스카스가드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'FKA twigs', '/8bUUu7jPEY1aQgAtJXM2NyYpfgN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'FKA twigs');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shelly', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 957452 AND a.name = 'FKA twigs';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '대니 휴스턴', '/7Wdh73SltnllH4KVd64PvqKQ5NJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '대니 휴스턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vincent Roeg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 957452 AND a.name = '대니 휴스턴';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Josette Simon', '/uLvLGR6a60To8AAlj0C5124d7Xu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Josette Simon');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sophia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 957452 AND a.name = 'Josette Simon';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Laura Birn', '/7aFAUPKj1joqQ2VOWOuGh88biuH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Laura Birn');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marion', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 957452 AND a.name = 'Laura Birn';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Rupert Sanders', '/jG07WemmHOWQvYnKPSdNGioGg7A.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Rupert Sanders');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 957452 AND d.name = 'Rupert Sanders';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rcedPQYtPIBK5uN3gJJyKdDCPax.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 957452;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/Asg2UUwipAdE87MxtJy7SQo08XI.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 957452;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (173705, '여교사: 학생의 눈앞에서', '1982-04-09', '', '사랑스러운 레이코는 소름 끼치는 오래된 고등학교에서 새로운 교직을 얻었습니다. 그녀는 매우 매력적인 여성이며 같은 반의 어린 학생들은 그녀에게 반했습니다. 어느 날 밤, 테니스 연습을 마친 그녀는 탈의실 샤워실에서 얼굴에 스타킹을 가린 남자에게 잔인하게 폭행을 당합니다. 알몸으로 충격에 빠진 채 바닥에 남겨진 그녀는 미친 남자가 남긴 퍼즐 조각 하나를 발견합니다. 며칠 후, 한 쌍의 학생이 테니스 팀에서 누군가를 쫓아낸 레이코에게 변태적인 성적 복수를 합니다. 이 학생들 중 한 명이 탈의실에서 그녀를 잔인하게 만든 남자일까요? 이상한 퍼즐 조각의 주인은 누구입니까? 수수께끼가 풀리면서 레이코는 자신의 성적 충동과 운명을 받아들여야 합니다.', 69, '', 'RELEASED', 451.698000, 7.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 173705 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 173705 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 173705 AND g.name = '공포';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Rushia Santô', '/83wE43nx2rnSiovDW6LF6iPONMU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rushia Santô');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Reiko / Teacher', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 173705 AND a.name = 'Rushia Santô';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Rina Oka', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rina Oka');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kumi / Girl Friend of Takuya', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 173705 AND a.name = 'Rina Oka';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Kyôko Sagami', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kyôko Sagami');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Syôko / Teacher', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 173705 AND a.name = 'Kyôko Sagami';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '北見敏之', '/bcLSC5ZT7VmASi3om23k1EukUyr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '北見敏之');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Akiyama / Teacher', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 173705 AND a.name = '北見敏之';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '中根徹', '/vPCb73DYW5wyYWt78c5lCm0jPnS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '中根徹');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Takuya / High School Boy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 173705 AND a.name = '中根徹';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '上垣保朗', '/wdF0fCsWMSGKrI9mfvB4Zpa1nhL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '上垣保朗');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 173705 AND d.name = '上垣保朗';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rwGW7zhFKaojtJiSMnoLyVkKZnx.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 173705;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/27FRFe8lu1C1LStWmzwOa87vo98.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 173705;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (991610, '인베이젼', '2024-04-11', '', '아무런 경고도 없이 이웃 독재 국가 베라과가 퀴라소와 아루바를 공격한다. 네덜란드의 정치인들은 당황한다. 갈등이 급격히 고조되면서 세 명의 젊은 해병대원들이 나서서 행동해야 한다. 아루바의 병영은 공격을 받고 있고, 영공은 폐쇄되었지만, 네덜란드 대사는 여전히 적대 지역에서 대피하지 못한 상태다. 갓 임명된 해병대원들은 자신들의구조 임무가 시간 싸움이 되었다는 것을 깨닫는다.', 92, '15', 'RELEASED', 414.592000, 4.900000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 991610 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 991610 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 991610 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Tarikh Janssen', '/v2i38M9I8CTTBHVvHpI703flM1J.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tarikh Janssen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Andy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 991610 AND a.name = 'Tarikh Janssen';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '하이스 블롬', '/fBt9qOW4EA1miKaLXFIMYOHAled.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하이스 블롬');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jack', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 991610 AND a.name = '하이스 블롬';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Ortál Vriend', '/dhb5Xa3q4L1JB0EQkFzRR8RcHq6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ortál Vriend');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Noa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 991610 AND a.name = 'Ortál Vriend';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jasha Rudge', '/5oGoUNizhJdklX7WoDCD05IPnNQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jasha Rudge');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Judsel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 991610 AND a.name = 'Jasha Rudge';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '페드야 반 휴엣', '/fIN5xMtn1B7XD0HD5Qqg6uZIDd8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '페드야 반 휴엣');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Stan Bot', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 991610 AND a.name = '페드야 반 휴엣';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '바비 보어만스', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '바비 보어만스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 991610 AND d.name = '바비 보어만스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/osPKnn1Q1BoZ88kLcksR7iPJKVg.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 991610;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rivlyJuBKNnSgzOU0GkEWIuawjt.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 991610;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (616446, '형제들', '2024-10-10', '', '''형제들''은 새사람이 되어 정직하게 살고자 하는 전과자(조시 브롤린)가 항상 자신을 미치게 만드는 쌍둥이 형제(피터 딘클리지)와 재회하면서 의도치 않게 일생일대의 한탕을 노리고 국토를 횡단하게 되는 이야기다. 두 형제가 서로 죽여버리고 마는 불상사를 막으려면 총알과 법망, 남의 말이라곤 전혀 듣지 않는 어머니를 피해 가며 잃어버린 가족애를 되찾아야 한다.', 89, '', 'RELEASED', 401.551000, 6.146000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 616446 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 616446 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 616446 AND g.name = '범죄';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '조쉬 브롤린', '/sX2etBbIkxRaCsATyw5ZpOVMPTD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조쉬 브롤린');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Moke Munger', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 616446 AND a.name = '조쉬 브롤린';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '피터 딘클리지', '/9CAd7wr8QZyIN0E7nm8v1B6WkGn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '피터 딘클리지');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jady Munger', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 616446 AND a.name = '피터 딘클리지';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '글렌 클로즈', '/eNTn3OmlnsQYLIp7HVGeH9kOJiA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '글렌 클로즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cath Munger', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 616446 AND a.name = '글렌 클로즈';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '브랜든 프레이저', '/tFj5PaWWQbb8rHBBhu1EHklznph.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브랜든 프레이저');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Farful', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 616446 AND a.name = '브랜든 프레이저';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '테일러 페이지', '/KTX1trmIfVa7MFkZmES1MVjl79.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '테일러 페이지');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Abby Munger-Jacobson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 616446 AND a.name = '테일러 페이지';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Max Barbakow', '/nJjznElTpKtQNOoGRaFtDIgcnqi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Max Barbakow');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 616446 AND d.name = 'Max Barbakow';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/Akweo95FGyDpucYVT81h0SbX8Ky.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 616446;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bAO9hLGRWOJMUFXmKwa4kST6I5N.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 616446;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (978796, '백맨', '2024-09-20', '', '', 92, '', 'RELEASED', 377.710000, 6.390000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 978796 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 978796 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '샘 클라플린', '/e5CU4tjCNZFfm7ITmZfzjZse2Bb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '샘 클라플린');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Patrick McKee', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 978796 AND a.name = '샘 클라플린';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Antonia Thomas', '/ybmnPYUzcr3RMdaXnZIw2jEw9ju.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Antonia Thomas');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Karina', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 978796 AND a.name = 'Antonia Thomas';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Caréll Vincent Rhoden', '/vaEX3jxuAHQ6qQZ2TNuoDK0UqBX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Caréll Vincent Rhoden');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jake McKee', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 978796 AND a.name = 'Caréll Vincent Rhoden';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Will Davis', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Will Davis');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bagman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 978796 AND a.name = 'Will Davis';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Adelle Leonce', '/zL3CdzHhQQdqNi6hrronOoh9jHQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Adelle Leonce');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anna', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 978796 AND a.name = 'Adelle Leonce';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Colm McCarthy', '/iTVWq0wCVoKf6pfrJvdTlVWyems.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Colm McCarthy');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 978796 AND d.name = 'Colm McCarthy';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hzrvol8K2VWm2BsDTwb8YvRMzIH.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 978796;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mpMDztY5OmV7i4ypYpWgqsP4DHs.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 978796;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1142518, '자유', '2024-11-01', '', '1980년대 프랑스에서 가장 악명 높았던 비폭력 강도 브루노 술락의 실화를 바탕으로 한 이야기다. 그는 여러 번 강도질을 하고, 경찰에 잡혀도 대담하게 탈출해 대중의 관심을 끌었다. 그가 매번 탈출한 이유는 사랑하는 연인이자 공범인 애니와 다시 만나기 위해서였고, 결국 그는 프랑스의 공공의 적 1호이자 자유의 아이콘이 되었다.', 110, '', 'RELEASED', 658.892000, 6.800000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1142518 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1142518 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1142518 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Lucas Bravo', '/uO6vMlJBMASyOQMisvnPehjsfJB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lucas Bravo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruno Sulak', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1142518 AND a.name = 'Lucas Bravo';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Yvan Attal', '/2VaxsiFuad8uHHWTM6Fc71wtNCx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Yvan Attal');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'George Moréas', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1142518 AND a.name = 'Yvan Attal';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Léa Luce Busato', '/TeeCdnPoSWH4ZihjXh71v4tLTw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Léa Luce Busato');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Annie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1142518 AND a.name = 'Léa Luce Busato';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Steve Tientcheu', '/zhKrlGuSLuRPg8Jev18k5z7SHwE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Steve Tientcheu');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Drago', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1142518 AND a.name = 'Steve Tientcheu';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'David Ayala', '/g1FlhpnXANAvr80osb0rpazI5V6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'David Ayala');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Belina', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1142518 AND a.name = 'David Ayala';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '멜라니 로랑', '/pKV3XJ6mlzfj0B0MGS8uMcMI9cl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '멜라니 로랑');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1142518 AND d.name = '멜라니 로랑';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/trN0zFcrtcCPLWyqqQEVoToztNk.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1142518;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/n9Do4rv1Hl3QvQLMmT5w6pBadqq.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1142518;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1144962, 'Transmorphers: Mech Beasts', '2023-06-09', '', '', 84, '', 'RELEASED', 358.940000, 5.400000, 65452, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1144962 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1144962 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Tom Arnold', '/z2ajL1ozVCS4Ug04zOGCNH06OPP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tom Arnold');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brady', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1144962 AND a.name = 'Tom Arnold';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Tania Fox', '/dlQJEd0XxzyCKR8GyDPkTLMNKU3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tania Fox');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lana', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1144962 AND a.name = 'Tania Fox';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jolene Anderson', '/l4SPMWGpEpVvA5wrLG1vguJ99ZZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jolene Anderson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agnes', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1144962 AND a.name = 'Jolene Anderson';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Andrew Rogers', '/oSBBuN3SWGeYIsIm1RkyK7qWPLj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Andrew Rogers');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Captain Watts', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1144962 AND a.name = 'Andrew Rogers';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Mica Javier', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mica Javier');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mila', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1144962 AND a.name = 'Mica Javier';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Michael Su', '/yNvnLqEHb2FtdB7AW2O0lZelKBO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Michael Su');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1144962 AND d.name = 'Michael Su';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oqhaffnQqSzdLrYAQA5W4IdAoCX.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1144962;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tCKWksaQI8XkAQLVou0AlGab5S6.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1144962;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (823219, '플로우', '2024-08-29', '', '대홍수가 세상을 덮친 뒤, 유일한 피난처가 된 배 한 척을 타고 다양한 동물 친구들과 항해를 시작한 ‘고양이’의 눈부신 모험담', 85, 'ALL', 'RELEASED', 352.024000, 8.600000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 823219 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 823219 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 823219 AND g.name = '모험';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Gints Zilbalodis', '/kVRvFXr1Vzyy7KFYGlzVj0P7mtC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Gints Zilbalodis');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 823219 AND d.name = 'Gints Zilbalodis';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kX9gzHyfwXCkTszBcPekQZxPnzP.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 823219;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/b3mdmjYTEL70j7nuXATUAD9qgu4.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 823219;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (726139, '탈출: 프로젝트 사일런스', '2024-07-11', '생존자 전원이 타겟이 된다', '한치 앞도 구분할 수 없는 짙은 안개 속 붕괴 직전의 공항대교에 고립된 사람들이 그 안에 도사리고 있는 예기치 못한 위협으로부터 살아남기 위해 고군분투하는 이야기.', 96, '15', 'RELEASED', 366.313000, 7.021000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 726139 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 726139 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 726139 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 726139 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이선균', '/mwF2HgyEF2UzxSvNRJEtbWlKbAj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이선균');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cha Jung-won', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 726139 AND a.name = '이선균';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '주지훈', '/7PYfUrBBXhYv5PIsTalJhjbRteg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '주지훈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jobak', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 726139 AND a.name = '주지훈';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '김희원', '/sDCxskfmmNidOjV2LwsWh9dAVbN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김희원');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Yang', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 726139 AND a.name = '김희원';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '문성근', '/wQjOvAFqCItwMw7dxa486KnGgEE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '문성근');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Byung-hak', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 726139 AND a.name = '문성근';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '예수정', '/rwGPhu8Ge36eMkrOlzfdKKFargw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '예수정');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Soon-ok', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 726139 AND a.name = '예수정';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '김태곤', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '김태곤');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 726139 AND d.name = '김태곤';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rXuSca6qEb4xPrSRT7XRzYCFbZB.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 726139;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hPIWQT70wQK6akqfLXByEvr62u0.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 726139;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1079091, '우리가 끝이야', '2024-08-07', '15초면 충분해요. 모든 게 뒤바뀌기까지', '아버지의 장례식을 멋지게 망치고 아지트로 향한 ‘릴리’는 어딘가 위태롭지만 매력적인 남자 ‘라일’에게 순식간에 마음을 빼앗긴다. 새로운 도시에서 자신의 이름을 건 꽃집을 오픈한 릴리는 운명처럼 라일을 다시 만나게 되고 걷잡을 수 없는 사랑에 빠져든다. 그러던 어느 날, 어린 시절의 모든 상처를 알고 있는 첫사랑 ‘아틀라스’와 우연히 재회한 후 감당하기 벅찬 라일의 위협적인 모습을 목격하게 되고 완벽했던 관계가 순식간에 요동치면서 릴리는 피할 수 없는 선택의 기로에 서게 되는데… 외면하고 싶지만 마주해야 하는 사랑과 선택의 순간 올가을, 모두에게 위로와 용기를 선사하는 특별한 이야기!', 131, '15', 'RELEASED', 344.514000, 7.200000, 348276888, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1079091 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1079091 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '블레이크 라이블리', '/rkGVjd6wImtgjOCi0IpeffdEWtb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '블레이크 라이블리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lily Bloom', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1079091 AND a.name = '블레이크 라이블리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Justin Baldoni', '/2sc6iUWljADnqtjsaKU3s6f0DGW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Justin Baldoni');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ryle Kincaid', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1079091 AND a.name = 'Justin Baldoni';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제니 슬레이트', '/iNpXig5Djkh5moYG4TCekIATs5B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제니 슬레이트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Allysa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1079091 AND a.name = '제니 슬레이트';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '브랜든 스클레나', '/unM5wewbqrmE2cf6DSyyKLeA05I.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브랜든 스클레나');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Atlas Corrigan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1079091 AND a.name = '브랜든 스클레나';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Hasan Minhaj', '/6vHHhLnbKBCPmYc90qAV2Cde95F.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Hasan Minhaj');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marshall', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1079091 AND a.name = 'Hasan Minhaj';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Justin Baldoni', '/2sc6iUWljADnqtjsaKU3s6f0DGW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Justin Baldoni');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1079091 AND d.name = 'Justin Baldoni';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/287MYoxjfINSyfaaV636Z2ioR36.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1079091;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zAqBIeO71BFL7bAtP5TFzVjVamy.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1079091;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (824003, 'Diabolik chi sei?', '2023-11-30', '', '', 124, '', 'RELEASED', 354.985000, 6.278000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 824003 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 824003 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Giacomo Gianniotti', '/gym2kTV6aqHYRK2zFEhVnYBuPiR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Giacomo Gianniotti');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Diabolik', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 824003 AND a.name = 'Giacomo Gianniotti';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Miriam Leone', '/kOl4gte94tJKXl8csCEYIxhZV0B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Miriam Leone');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eva Kant', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 824003 AND a.name = 'Miriam Leone';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Valerio Mastandrea', '/tE7JkSuyv2N8vtEN0YypsCAxW9B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Valerio Mastandrea');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ginko', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 824003 AND a.name = 'Valerio Mastandrea';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '모니카 벨루치', '/7g3k3u2gZpE7XU8GRYwHDuN1jlM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '모니카 벨루치');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Altea di Vallenberg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 824003 AND a.name = '모니카 벨루치';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Pier Giorgio Bellocchio', '/hZTd1cLRnlB9eibCZTeBq1UvDOQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Pier Giorgio Bellocchio');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sgt. Palmer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 824003 AND a.name = 'Pier Giorgio Bellocchio';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Antonio Manetti', '/isbb4gEK4AKp1JcD8tL4qEX8ku1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Antonio Manetti');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 824003 AND d.name = 'Antonio Manetti';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Marco Manetti', '/hdTxWCnCr2BYXDkEcfs5beGNRD6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Marco Manetti');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 824003 AND d.name = 'Marco Manetti';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1DAXwi4y941ryPoGbzUlFEEiPAo.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 824003;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hLYH6wbi3Mgscdv2KuYcTdWGlUV.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 824003;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1354627, 'SpongeBob Squarepants: Kreepaway Kamp', '2024-10-10', '', '', 45, '', 'RELEASED', 332.367000, 7.220000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1354627 AND g.name = 'TV 영화';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1354627 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1354627 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1354627 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1354627 AND g.name = '애니메이션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '톰 케니', '/dKOxpGnRkIMaPkZSHKIns99WxQa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 케니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'SpongeBob / Cabin / Clam / Snail / Tall Tail / Vampire Monster / Sea Urchins / Jellyfish / Anchovies (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1354627 AND a.name = '톰 케니';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Bill Fagerbakke', '/zntKKc1uT53BnIihmzbq601eWKZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bill Fagerbakke');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Patrick / Anchovy #2 / Roh / Sea Urchins / Anchovies (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1354627 AND a.name = 'Bill Fagerbakke';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Rodger Bumpass', '/lGQkw6adxqB6Hcm7VK8nVHbKupe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rodger Bumpass');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Squidward / Regigilled / The Creeper / Sea Urchins (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1354627 AND a.name = 'Rodger Bumpass';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '클랜시 브라운', '/1JeBRNG7VS7r64V9lOvej9bZXW5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '클랜시 브라운');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Krabs / Anchovies (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1354627 AND a.name = '클랜시 브라운';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Carolyn Lawrence', '/7Ehx4bEO8loovbmbntXl0sBNjtj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Carolyn Lawrence');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sandy / Rea / Teen Girls / Sea Urchins / Anchovies (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1354627 AND a.name = 'Carolyn Lawrence';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Ian Vasquez', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Ian Vasquez');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1354627 AND d.name = 'Ian Vasquez';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Dave Cunningham', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Dave Cunningham');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1354627 AND d.name = 'Dave Cunningham';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Fred Osmond', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Fred Osmond');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1354627 AND d.name = 'Fred Osmond';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Kurt Snyder', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Kurt Snyder');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1354627 AND d.name = 'Kurt Snyder';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Sherm Cohen', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Sherm Cohen');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1354627 AND d.name = 'Sherm Cohen';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/blRsgsexoBqnjcEJkV8beKAVT6J.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1354627;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aFDYcmwEWRiEh58Ri1tMpCUWPBp.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1354627;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (653346, '혹성탈출: 새로운 시대', '2024-05-08', '세상의 주인이 바뀌었다', '진화한 유인원과 퇴화된 인간들이 살아가는 땅. 유인원 리더 프록시무스는 완전한 군림을 위해 인간들을 사냥하며 자신의 제국을 건설한다. 한편, 또 다른 유인원 노아는 우연히 숨겨진 과거의 이야기와 시저의 가르침을 듣게 되고 인간과 유인원이 함께 할 새로운 세상을 꿈꾼다. 어느 날 그의 앞에 나타난 의문의 한 인간 소녀. 노아는 그녀와 함께 자유를 향한 여정을 시작하게 되는데…', 145, '12', 'RELEASED', 351.639000, 7.111000, 397366385, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 653346 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 653346 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 653346 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '오웬 티그', '/tgCkGE0LIggyjMmgSwHhpZAkfJs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오웬 티그');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Noa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 653346 AND a.name = '오웬 티그';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '프레이아 앨런', '/xq33JCqUjBzPz3drN48N2N7ySKI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '프레이아 앨런');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nova / Mae', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 653346 AND a.name = '프레이아 앨런';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '케빈 듀랜드', '/hINvryvce5tpod6kTnUg9ZTH8wg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케빈 듀랜드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Proximus Caesar', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 653346 AND a.name = '케빈 듀랜드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '피터 메이컨', '/jF4jzgtWB2NAJ6BfVTSDQOlOHLr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '피터 메이컨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Raka', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 653346 AND a.name = '피터 메이컨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '윌리엄 H. 메이시', '/hdVEGSrP8qWlJnt0v5vSVcGOjy7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '윌리엄 H. 메이시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Trevathan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 653346 AND a.name = '윌리엄 H. 메이시';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '웨스 볼', '/zVPXrhuAxYAWlwDEWCaqeUPycFx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '웨스 볼');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 653346 AND d.name = '웨스 볼';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/plNOSbqkSuGEK2i15A5btAXtB7t.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 653346;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/iHYh4cdO8ylA3W0dUxTDVdyJ5G9.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 653346;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1151949, '섀도우의 13', '2024-09-10', '', '살인 훈련을 받은 젊은 킬러가 무자비한 범죄 조직으로부터 한 소년을 구출하려 한다. 소년만 구할 수 있다면 멘토를 등지는 것은 물론, 그 길을 가로막는 누구라도 제거할 것이다.', 145, '19', 'RELEASED', 352.969000, 7.394000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1151949 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1151949 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1151949 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Aurora Ribero', '/oUK71SxqHVp3OXWptYNEnVsOlr5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Aurora Ribero');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agent 13 / Nomi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1151949 AND a.name = 'Aurora Ribero';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Hana Malasan', '/g6ETjwEnzgoYpwb7zurcxyGCRE3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Hana Malasan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agent Umbra', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1151949 AND a.name = 'Hana Malasan';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Andri Mashadi', '/nKBg1kOv7ElDnI2pPrfRK1vLkSf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Andri Mashadi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ariel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1151949 AND a.name = 'Andri Mashadi';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Adipati Dolken', '/p0RmTWjypOrRK613v763mpnQRiO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Adipati Dolken');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Prasetyo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1151949 AND a.name = 'Adipati Dolken';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Kristo Immanuel', '/xPaRIpL5PfiCB3qFPLOxHqzEKwf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kristo Immanuel');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jeki', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1151949 AND a.name = 'Kristo Immanuel';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '티모 차얀토', '/gYBBoFnY4ualTvxwThF3FTLfzas.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '티모 차얀토');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1151949 AND d.name = '티모 차얀토';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mLxunT78TAbvH8Gjv1hlmfIsECd.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1151949;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wB8HiUiFWo1EsxrdvB6bsMNW81g.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1151949;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1100782, '스마일 2', '2024-10-16', '이번엔 너도 같이 웃게 될 거야', '월드투어를 앞두고 자신의 눈 앞에서 기괴한 미소와 함께 끔찍한 죽음을 맞은 친구를 목격한 팝스타 ‘스카이’. 그 날 이후 공연 리허설과 팬 미팅 행사 등 그녀의 삶 곳곳에서 끔찍한 일들이 잇따라 발생한다. 화려한 스타의 삶을 뒤덮은 공포에서 벗어나기 위해 몸부림치던 ‘스카이’는 자신이 죽어야만 전염처럼 번지는 저주가 끝난다는 사실을 듣게 되는데…', 128, '19', 'NOW_PLAYING', 342.346000, 6.887000, 123787540, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1100782 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1100782 AND g.name = '미스터리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '나오미 스콧', '/nNqqgP2yF1jkLZq9ndYcXOzTD2G.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나오미 스콧');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Skye Riley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100782 AND a.name = '나오미 스콧';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Rosemarie DeWitt', '/44sxIdGtYN24R14OmnZbCpcd8J8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rosemarie DeWitt');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elizabeth Riley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100782 AND a.name = 'Rosemarie DeWitt';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Dylan Gelula', '/nqXd0gVNlma8knaykJh5ArXSYqy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Dylan Gelula');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gemma', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100782 AND a.name = 'Dylan Gelula';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '루카스 게이지', '/j7Zub5J9PgCnsfgEC5QCr160JtH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루카스 게이지');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lewis Fregoli', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100782 AND a.name = '루카스 게이지';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '피터 제이컵슨', '/pGi9CnzEG4cLa2viUP89yvlPCyR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '피터 제이컵슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Morris', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100782 AND a.name = '피터 제이컵슨';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '파커 핀', '/lw1I0voNLS2llYTlDgd6qZzAMZ6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '파커 핀');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1100782 AND d.name = '파커 핀';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4nQk1OgbtdnKYMEQiOwwMB4yGxn.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1100782;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3rxoUVI74z7rTWYSAC2q3Uax2nC.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1100782;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (365177, '보더랜드', '2024-08-07', '', '베일에 쌓인 과거를 가진 악명 높은 현상금 사냥꾼 릴리스는 갑작스럽게 그녀의 고향인 은하계에서 가장 혼란스러운 행성 ''판도라''로 돌아간다. 그 내역은 우주에서 매우 강대한 권력을 지닌 아틀라스 회장의 잃어버린 딸을 찾기 위해서였다. 릴리스는 예상치 못한 나사빠진 연합을 만들었다. 임무를 위해 온 용병 롤랜드, 흉포한 10살 배기 폭파전문가 타이니 티나, 티나의 근육질 보디가드 크리그, 보이는 게 전부인 괴짜 과학자 태니스, 그리고 허풍쟁이 클랩트랩이 판도라의 가장 뜨거운 비밀을 파헤치기 위해 외계 종족과 위험천만한 도적떼와 맞짱을 떠야하는 우주의 운명이 그들 손에 달려 있지만 그보다 더한 것과 싸울 것이다. 보더랜드에 어서오세요.', 101, '', 'RELEASED', 320.182000, 5.900000, 30863794, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 365177 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 365177 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 365177 AND g.name = '코미디';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '케이트 블란쳇', '/vUuEHiAR0eD3XEJhg2DWIjymUAA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케이트 블란쳇');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lilith', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 365177 AND a.name = '케이트 블란쳇';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '케빈 하트', '/byiNydUlM6oP8diA7WMvYbNM7a1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케빈 하트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Roland', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 365177 AND a.name = '케빈 하트';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '에드가 라미레즈', '/o9xJcedad1BwpMcgDGtW5dVgzH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에드가 라미레즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Atlas', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 365177 AND a.name = '에드가 라미레즈';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제이미 리 커티스', '/9KWvPVeiLOXlOGl0XVyHZtJWQtx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이미 리 커티스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tannis', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 365177 AND a.name = '제이미 리 커티스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '아리아나 그린블랫', '/3Y3Xk8jwE1Ju0zIn31zBMuD7Fkn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아리아나 그린블랫');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tiny Tina', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 365177 AND a.name = '아리아나 그린블랫';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '일라이 로스', '/qQTkpxzh1FlBGL1HD5hzdUMxv49.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '일라이 로스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 365177 AND d.name = '일라이 로스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3NPUQ6Ywayb5ES2IP1HWrDRt1Gc.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 365177;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mKOBdgaEFguADkJhfFslY7TYxIh.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 365177;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (157336, '인터스텔라', '2014-11-05', '우린 답을 찾을 것이다, 늘 그랬듯이', '세계 각국의 정부와 경제가 완전히 붕괴된 미래가 다가온다. 지난 20세기에 범한 잘못이 전 세계적인 식량 부족을 불러왔고, NASA도 해체되었다. 나사 소속 우주비행사였던 쿠퍼는 지구에 몰아친 식량난으로 옥수수나 키우며 살고 있다. 거센 황사가 몰아친 어느 날 알 수 없는 힘에 이끌려 딸과 함께 도착한 곳은 인류가 이주할 행성을 찾는 나사의 비밀본부. 이 때 시공간에 불가사의한 틈이 열리고, 이 곳을 탐험해 인류를 구해야 하는 임무를 위해 쿠퍼는 만류하는 딸을 뒤로한 채 우주선에 탑승하는데...', 169, '12', 'RELEASED', 247.217000, 8.441000, 701729206, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 157336 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 157336 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 157336 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '매튜 매커너히', '/rUxLWWCDUF8RnDaocSqrVDJ2MS1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '매튜 매커너히');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cooper', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 157336 AND a.name = '매튜 매커너히';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '앤 해서웨이', '/kRYxBuUtN3vNz5pLfqCf32ZYlw2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앤 해서웨이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brand', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 157336 AND a.name = '앤 해서웨이';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마이클 케인', '/bVZRMlpjTAO2pJK6v90buFgVbSW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 케인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Professor Brand', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 157336 AND a.name = '마이클 케인';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제시카 차스테인', '/xRvRzxiiHhgUErl0yf9w8WariRE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제시카 차스테인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Murph', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 157336 AND a.name = '제시카 차스테인';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '케이시 애플렉', '/vD5MtCjHPHpmU9XNn74EPGMHT7o.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케이시 애플렉');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tom', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 157336 AND a.name = '케이시 애플렉';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '크리스토퍼 놀란', '/xuAIuYSmsUzKlUMBFGVZaWsY3DZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스토퍼 놀란');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 157336 AND d.name = '크리스토퍼 놀란';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/evoEi8SBSvIIEveM3V6nCJ6vKj8.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 157336;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xJHokMbljvjADYdit5fK5VQsXEG.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 157336;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (592695, '플레저', '2021-10-08', '', '벨라 체리는 포르노 영화 배우의 꿈을 안고 로스앤젤레스에 도착하지만,  그녀는 그녀의 야망과 교활함을 활용하여 이 매혹적이고 독특한 세계의  정상에 오르기 위해 노력하지만 그런 명성이 쉽게 오지 않는다는 것을 곧 알게 된다.', 108, '', 'RELEASED', 334.031000, 6.221000, 393824, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 592695 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Sofia Kappel', '/y2yMZ37bM9b4oYcsrZFnPpeun4G.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sofia Kappel');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bella Cherry', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 592695 AND a.name = 'Sofia Kappel';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Zelda Morrison', '/8suRdN1ds2iJTPJnLUfoy98CbPa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Zelda Morrison');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 592695 AND a.name = 'Zelda Morrison';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Tee Reel', '/lYnzxsQMdj0CJWA4KuGtqhvo3aP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tee Reel');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mike', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 592695 AND a.name = 'Tee Reel';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Evelyn Claire', '/gJWQ1gfCrjGdI9ZFMgSOD1ElPwS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Evelyn Claire');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ava', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 592695 AND a.name = 'Evelyn Claire';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Chris Cock', '/7ZQURgnph71tP4cD3UvWSpAyoTA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Chris Cock');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bear', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 592695 AND a.name = 'Chris Cock';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Ninja Thyberg', '/9uY75TQt9lX3mK9v3eAmChFUxaC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Ninja Thyberg');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 592695 AND d.name = 'Ninja Thyberg';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/t3SEI2YI81oO3nEgjJ9jMAIKApY.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 592695;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5tqkP8NNWdteskVBYPRXE6h82ts.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 592695;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1241982, '모아나 2', '2024-11-27', '바다 저 너머 새로운 항해가 시작된다!', '바다를 누볐던 선조들에게서 예기치 못한 부름을 받은 모아나가 마우이와 다시 만나 새로운 선원들과 함께 오랫동안 잊혀진 멀고 위험한 바다 너머로 떠나는 특별한 모험을 담은 이야기', 100, '', 'UPCOMING', 335.704000, 0.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1241982 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1241982 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1241982 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1241982 AND g.name = '코미디';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '아울리이 크러발리오', '/vEroqcnM2g6yY7qXDAie7hx2Cyp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아울리이 크러발리오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Moana (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1241982 AND a.name = '아울리이 크러발리오';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '드웨인 존슨', '/5QApZVV8FUFlVxQpIK3Ew6cqotq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '드웨인 존슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maui (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1241982 AND a.name = '드웨인 존슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '앨런 튜딕', '/jUuUbPuMGonFT5E2pcs4alfqaCN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앨런 튜딕');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hei Hei (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1241982 AND a.name = '앨런 튜딕';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '레이철 하우스', '/m8D9XlTGfI0ZmauMKtYp5tw8eNi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레이철 하우스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gramma Tala (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1241982 AND a.name = '레이철 하우스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '테무에라 모리슨', '/1ckHDFgKXJ8pazmvLCW7DeOKqA0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '테무에라 모리슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chief Tui (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1241982 AND a.name = '테무에라 모리슨';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'David G. Derrick Jr.', '/j5JOtRua5KduoPsQVix0rwY3jOo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'David G. Derrick Jr.');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1241982 AND d.name = 'David G. Derrick Jr.';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Jason Hand', '/gepbkgavGdDXdNbQzdFaxayTpoH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jason Hand');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1241982 AND d.name = 'Jason Hand';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Dana Ledoux Miller', '/wKqVtkgOv6iMcv1P0YPxV7UtQS9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Dana Ledoux Miller');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1241982 AND d.name = 'Dana Ledoux Miller';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2WVvPcVRqfjyVzIUVIcszGb6zT4.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1241982;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tElnmtQ6yz1PjN1kePNl8yMSb59.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1241982;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1010581, '나의 잘못', '2023-06-08', '', '노아는 남자 친구와 친구들이 있는 동네를 뒤로하고 엄마의 새 부자 남편 저택으로 이사를 가게 된다. 의붓오빠 닉과는 첫 만남부터 삐걱댔지만 곧 서로에게 이끌려 금지된 관계를 맺는다. 반항심과 고뇌로 가득 찬 그들의 인생은 송두리째 흔들리고 둘은 결국 뜨거운 사랑에 빠진다.', 117, '', 'RELEASED', 378.284000, 7.920000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1010581 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1010581 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '니콜 월리스', '/xlvq6OYCN6yQef4fpJQtwVyQxqr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '니콜 월리스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Noah Morgan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1010581 AND a.name = '니콜 월리스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '가브리엘 게바라', '/pviRYKEEmoPUfLYwP1VHJ6LQcRg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '가브리엘 게바라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nick Leister', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1010581 AND a.name = '가브리엘 게바라';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Marta Hazas', '/1dbeTFRCbWBt70dIGjYHKVLnpaG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marta Hazas');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rafaela', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1010581 AND a.name = 'Marta Hazas';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Iván Sánchez', '/woVz8D7t1VUKjFJnsTAdc8tyz5C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Iván Sánchez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'William Leister', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1010581 AND a.name = 'Iván Sánchez';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Eva Ruiz', '/bcu0nmQvhxwTzh4csc4kuxJsQee.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Eva Ruiz');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jenna', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1010581 AND a.name = 'Eva Ruiz';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Domingo González', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Domingo González');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1010581 AND d.name = 'Domingo González';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/duT8Vks5FXwDkpxoR84xb2a6VB6.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1010581;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lntyt4OVDbcxA1l7LtwITbrD3FI.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1010581;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1140648, '더블 블라인드', '2024-02-09', '잠들면 죽는다!', '이중맹검 임상시험에 참여한 클레어는 다른 참가자들과 함께 통신이 터지지 않는 시설에서 지내게 된다. 정량대로 약을 복용하면서 경과를 지켜보던 참가자들은 순탄할 거라는 버크 박사의 말과는 달리 밤에 잠을 이루지 못하고, 제약사는 참가자들에게 거액의 돈을 제안하며 임상시험의 조건을 변경하는데...', 90, '', 'RELEASED', 329.510000, 5.800000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1140648 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1140648 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1140648 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Millie Brady', '/8IBIRaUl4QyttlieUfKVBR2Ia5J.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Millie Brady');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Claire', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1140648 AND a.name = 'Millie Brady';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '폴리애너 매킨토시', '/n9jfF6pEutTz6qeofHFz2mxh95e.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '폴리애너 매킨토시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Burke', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1140648 AND a.name = '폴리애너 매킨토시';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Akshay Kumar', '/ynbrjFIC9jRKUL2xw4G3HvvFSIH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Akshay Kumar');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Amir', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1140648 AND a.name = 'Akshay Kumar';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Diarmuid Noyes', '/saynEGgbzlYOyzFaEKfNhvBLKbA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Diarmuid Noyes');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ray', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1140648 AND a.name = 'Diarmuid Noyes';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Brenock O''Connor', '/n32zOLtJ1BP8UnCEkZfaGLsdp6L.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Brenock O''Connor');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paul', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1140648 AND a.name = 'Brenock O''Connor';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Ian Hunt Duffy', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Ian Hunt Duffy');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1140648 AND d.name = 'Ian Hunt Duffy';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5U4wqXmRf2FbwS0NMDlArDr7xq2.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1140648;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pcjWAV4Iw7sl3dpV1dfIoxbbTuu.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1140648;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1328814, 'Amityville: Where the Echo Lives', '2024-10-28', '', '', 89, '', 'RELEASED', 473.641000, 5.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1328814 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1328814 AND g.name = '미스터리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Sarah McDonald', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sarah McDonald');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Heather West', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1328814 AND a.name = 'Sarah McDonald';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Breanna Rossi', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Breanna Rossi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mary Gonzalez', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1328814 AND a.name = 'Breanna Rossi';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Adela Perez', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Adela Perez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1328814 AND a.name = 'Adela Perez';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Nicholas J. Barelli', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nicholas J. Barelli');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'John Madison', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1328814 AND a.name = 'Nicholas J. Barelli';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Hector De Alva', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Hector De Alva');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1328814 AND a.name = 'Hector De Alva';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Carlos Ayala', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Carlos Ayala');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1328814 AND d.name = 'Carlos Ayala';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jqhAgE9ceTX8f9xTcqBlmXSuMG3.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1328814;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5VYqB2T9L0WetvN9Bxk3Wg4vKoJ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1328814;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (86328, '테리파이어', '2011-08-09', '', '', 19, '', 'RELEASED', 268.714000, 6.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 86328 AND g.name = '공포';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Marie Maser', '/iFLTBR6mC32zjSsTruT7m7aLCqo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marie Maser');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Woman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 86328 AND a.name = 'Marie Maser';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Mike Giannelli', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mike Giannelli');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Art the Clown', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 86328 AND a.name = 'Mike Giannelli';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Michael Chmiel', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Michael Chmiel');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Attendant', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 86328 AND a.name = 'Michael Chmiel';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Daniel Rodas', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Daniel Rodas');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Man in Car', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 86328 AND a.name = 'Daniel Rodas';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jennifer Castellano', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jennifer Castellano');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mutilated Woman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 86328 AND a.name = 'Jennifer Castellano';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Damien Leone', '/nX2kkYD32x2PC9rRU7DrYCRPjFE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Damien Leone');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 86328 AND d.name = 'Damien Leone';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uP5k78WkCVrxrFp4AJflHbC61Ao.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 86328;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1U7EVGj7Noc26owNOreCTKn59Bd.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 86328;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (639720, '이프: 상상의 친구', '2024-05-08', '믿어야만 보이는 세계가 열린다', '상상의 친구 ‘이프’를 볼 수 있는 능력을 지닌 한 소녀가 아이들에게 잊혀졌던 ‘이프’를 다시 되찾아주기 위해 마법 같은 모험을 시작하는 이야기를 그린 영화', 104, 'ALL', 'RELEASED', 314.825000, 7.300000, 186240904, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 639720 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 639720 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 639720 AND g.name = '가족';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '케일리 플레밍', '/yF2p16KK9gFlGnYKd2PLQqwmsek.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케일리 플레밍');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bea', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 639720 AND a.name = '케일리 플레밍';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '라이언 레이놀즈', '/6m3hkkHmKkD4MUJhng7ojE7MLKC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '라이언 레이놀즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cal', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 639720 AND a.name = '라이언 레이놀즈';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '존 크래신스키', '/pmVGDb6Yl6OyFcHVGbu1EYNfyFK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '존 크래신스키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dad / Marshmallow (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 639720 AND a.name = '존 크래신스키';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '피오나 쇼', '/tjM74LcxwnYM77Csg1EtlXb1F9a.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '피오나 쇼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Grandmother', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 639720 AND a.name = '피오나 쇼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '스티브 카렐', '/1LQDqpcDQTtQb90o9vagbuCHueb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스티브 카렐');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Blue (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 639720 AND a.name = '스티브 카렐';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '존 크래신스키', '/pmVGDb6Yl6OyFcHVGbu1EYNfyFK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '존 크래신스키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 639720 AND d.name = '존 크래신스키';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9GAOhSzXjXJR4AxYCa2AMzMGPVg.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 639720;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/nxxCPRGTzxUH8SFMrIsvMmdxHti.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 639720;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (354912, '코코', '2017-10-27', '죽은 자들의 세상은 더욱 화려하다', '미구엘은 멕시코의 자랑인 에르네스토 델라 크루즈 같은 뮤지션이 되길 꿈꾸지만 미구엘 집안 사람들에게 음악은 금기다. 먼 옛날 조상 중에 음악 때문에 가족을 버린 인물이 있었기 때문. 미구엘은 죽은 자의 날이 되자 실력으로 인정받겠다는 결심을 하고 경연 무대에 오르려 하는데, 우연히 에르네스토의 기타에 손을 댔다가 죽은 자들의 세상에 들어서게 된다. 이승과 저승을 이어주는 마리골드 꽃길을 건너 죽은 자들의 세상에 도착한 미구엘은 거짓말과 위변조가 장기인 헥터를 만난다. 그리고 꿈에 그리던 우상 에르네스토를 만나러 가는 여정에서 가족의 비밀을 알게 된다.', 105, 'All', 'RELEASED', 288.160000, 8.209000, 807816196, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 354912 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 354912 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 354912 AND g.name = '음악';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 354912 AND g.name = '모험';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Anthony Gonzalez', '/WF7bn6t0LkxwBWyDMWvomVujn7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Anthony Gonzalez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miguel Rivera (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 354912 AND a.name = 'Anthony Gonzalez';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '가엘 가르시아 베르날', '/7mq3EQN1oJfYNXkv9xKXKu6Ccw5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '가엘 가르시아 베르날');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Héctor (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 354912 AND a.name = '가엘 가르시아 베르날';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '벤저민 브랫', '/hBenHPT4iJEG2kt5z2TOGnkRZwh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '벤저민 브랫');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ernesto de la Cruz (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 354912 AND a.name = '벤저민 브랫';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Alanna Ubach', '/ffyBAEoW3bDgVJQV3GaHsZ9x29W.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alanna Ubach');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mamá Imelda Rivera (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 354912 AND a.name = 'Alanna Ubach';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Renee Victor', '/wAVDqwFhQsRQgO6VIYq6T9Wbbx8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Renee Victor');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elena Rivera (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 354912 AND a.name = 'Renee Victor';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '리 언크리치', '/crb297utC6W4HSstOe5djDPTwEN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '리 언크리치');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 354912 AND d.name = '리 언크리치';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pQu93NuwR90AaCULzglVD5Ge4Ml.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 354912;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/askg3SMvhqEl4OL52YuvdtY40Yb.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 354912;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1011985, '쿵푸팬더 4', '2024-03-02', '오랜만이지! 드림웍스 레전드 시리즈 마침내 컴백!', '마침내 내면의 평화… 냉면의 평화…가 찾아왔다고 믿는 용의 전사 ‘포’ 이젠 평화의 계곡의 영적 지도자가 되고, 자신을 대신할 후계자를 찾아야만 한다. “이제 용의 전사는 그만둬야 해요?” 용의 전사로의 모습이 익숙해지고 새로운 성장을 하기보다 지금 이대로가 좋은 ‘포’ 하지만 모든 쿵푸 마스터들의 능력을 그대로 복제하는 강력한 빌런 ‘카멜레온’이 나타나고 그녀를 막기 위해 정체를 알 수 없는 쿵푸 고수 ‘젠’과 함께 모험을 떠나게 되는데… 포는 가장 강력한 빌런과 자기 자신마저 뛰어넘고 진정한 변화를 할 수 있을까?', 94, 'ALL', 'RELEASED', 312.389000, 7.092000, 543900620, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1011985 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1011985 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1011985 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1011985 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '잭 블랙', '/rtCx0fiYxJVhzXXdwZE2XRTfIKE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '잭 블랙');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Po (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1011985 AND a.name = '잭 블랙';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '아콰피나', '/l5AKkg3H1QhMuXmTTmq1EyjyiRb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아콰피나');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zhen (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1011985 AND a.name = '아콰피나';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '비올라 데이비스', '/y6Qq5FP3AlnDDQ5s0cOhOnNFrPh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '비올라 데이비스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Chameleon (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1011985 AND a.name = '비올라 데이비스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '더스틴 호프만', '/yFjTzJHE6AFbwQifOlnNDzmiwlq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '더스틴 호프만');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shifu (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1011985 AND a.name = '더스틴 호프만';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '브라이언 크랜스턴', '/kNyTXGkiSP8W4Gs60hF7UoxZnWN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브라이언 크랜스턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Li (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1011985 AND a.name = '브라이언 크랜스턴';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Mike Mitchell', '/w6ibMbbw7KBrcWxUb7N7h3GEQGO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Mike Mitchell');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1011985 AND d.name = 'Mike Mitchell';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1ZNOOMmILNUzVYbzG1j7GYb5bEV.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1011985;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4z88bpDf7aqZcYkLDDEIdj8TfZU.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1011985;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (814889, '네버 렛 고', '2024-09-18', '한 번의 접촉이면 충분하다.', '악마에 의해 멸망한 세상에서 엄마는 악마를 피하기 위해 쌍둥이 아들을 데리고 악이 침입할 수 없는 태곳적 목재로 지은 오두막으로 왔는데... 유일하게 안전한 숲 속 외딴 오두막에서, 가족을 지키려는 엄마와 인간을 미혹하는 악마와의 투쟁을 그린 작품', 101, '', 'RELEASED', 286.101000, 6.200000, 13111608, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 814889 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 814889 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '할리 베리', '/peJWU9QVTkWkXxqDi9heUIQ647T.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '할리 베리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Momma', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 814889 AND a.name = '할리 베리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Anthony B. Jenkins', '/v0hZpeChlytBx0MwUhkKoeFpedF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Anthony B. Jenkins');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Samuel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 814889 AND a.name = 'Anthony B. Jenkins';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'William Catlett', '/1GzaCfhYEfg2s2lQzlQykijlUY8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'William Catlett');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Father', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 814889 AND a.name = 'William Catlett';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Percy Daggs IV', '/dhn9bDGhBSbVKWkzFC86rtg1nHj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Percy Daggs IV');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nolan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 814889 AND a.name = 'Percy Daggs IV';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Matthew Kevin Anderson', '/lSCwDQjV2qaPapwq5q77aQW2Ndv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Matthew Kevin Anderson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Stranger', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 814889 AND a.name = 'Matthew Kevin Anderson';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '알렉상드르 아자', '/qODWbFXeWk3quoDKzhfmAhxn4Dx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '알렉상드르 아자');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 814889 AND d.name = '알렉상드르 아자';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3EpZ2ksjijmdr8BhISP03PYzNFW.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 814889;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/l8OyAXEp5FKZWmDhqJMbiwAEvz.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 814889;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1087822, '헬보이: 크룩드 맨', '2024-08-29', '세상을 구할 악마가 온다', '불가사의한 심령 현상을 해결하는 B.R.P.D의 베테랑 해결사 ''헬보이''. 유령 거미를 퇴치하는 임무 중, 기차 탈선 사고로 애팔레치아 산맥 깊숙이 위치한 음산한 마을에 도착한다. 그곳은 흑마법사 ‘크룩드 맨’이 지배하고 있다. 마녀와 저주, 그리고 죽음이 들끓는 마을을 구하기 위해 ''헬보이''는 신입 요원 ''조''와 함께 죽은 자들을 불러오는 ''크룩드 맨''에 맞서는데…', 99, '', 'RELEASED', 274.406000, 5.400000, 1289658, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1087822 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1087822 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1087822 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jack Kesy', '/lQ8nUYK6InbCFk2TWNnXjjvG9IY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jack Kesy');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hellboy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1087822 AND a.name = 'Jack Kesy';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jefferson White', '/8QSrhrWpqTBGJN3rfijXCvmOcb5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jefferson White');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tom Ferrell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1087822 AND a.name = 'Jefferson White';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Adeline Rudolph', '/8j0zvHIqvW9kwOFLWI7QOa4V62y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Adeline Rudolph');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bobbie Jo Song', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1087822 AND a.name = 'Adeline Rudolph';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Martin Bassindale', '/gsMepIrek14cuV2vQPEo9GhuoRs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Martin Bassindale');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Crooked Man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1087822 AND a.name = 'Martin Bassindale';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Leah McNamara', '/ecVaqYk9SlH0sOJ8eDgwqsbKceS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Leah McNamara');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Effie Kolb', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1087822 AND a.name = 'Leah McNamara';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Brian Taylor', '/1TXxgF48STiUb3F9cp1L5iEx5Pb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Brian Taylor');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1087822 AND d.name = 'Brian Taylor';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/90upwAQ60ENSHLcT8uF7IhveuT1.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1087822;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/g1z1ZvYKcmk9EnVOTYXR6vkNjkZ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1087822;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1255208, 'Bag of Lies', '2024-03-29', '', '', 96, '', 'RELEASED', 264.813000, 6.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1255208 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1255208 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'John Wells', '/udDheh1OOGggBFQm56N5QSdrc6q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'John Wells');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Harold', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1255208 AND a.name = 'John Wells';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Madison Pullins', '/oFCAinWBkcWA0Sq8ezOYO2vxAJq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Madison Pullins');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Peggy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1255208 AND a.name = 'Madison Pullins';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Patrick Taft', '/ysRAylTNXaH6FQyAgFG47KKSANk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Patrick Taft');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Matt', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1255208 AND a.name = 'Patrick Taft';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Brandi Botkin', '/P2ZLDHo0wfPphKKc3uZKmVRkUs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Brandi Botkin');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Claire', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1255208 AND a.name = 'Brandi Botkin';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Terry Tocantins', '/p1kCwSKaTcQ43Dbf6tY0dHJSvgL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Terry Tocantins');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Al', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1255208 AND a.name = 'Terry Tocantins';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'David Andrew James', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'David Andrew James');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1255208 AND d.name = 'David Andrew James';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pPElE8npavUirQWmscJUGZyPiP6.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1255208;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/r5NvzqWUpOdy4eQ7OENzb73XY25.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1255208;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (150540, '인사이드 아웃', '2015-06-17', '진짜 나를 만날 시간', '모든 사람의 머릿속에 존재하는 감정 컨트롤 본부. 그곳에서 불철주야 열심히 일하는 기쁨, 슬픔, 버럭, 까칠, 소심 다섯 감정들. 정든 옛 동네를 떠나 도시로 이사하는 라일리 가족. 이사 후 새로운 환경에 적응해야 하는 라일리를 위해 그 어느 때 보다 바쁘게 감정의 신호를 보내지만 우연한 실수로 기쁨과 슬픔이 본부를 이탈하게 되자 라일리의 마음 속에 큰 변화가 찾아온다. 라일리가 예전의 모습을 되찾기 위해서는 기쁨과 슬픔이 본부로 돌아가야만 한다. 그러나 엄청난 기억들이 저장되어 있는 머릿속 세계에서 본부까지 가는 길은 험난하기만 한데...', 102, 'ALL', 'RELEASED', 213.552000, 7.912000, 857611174, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 150540 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 150540 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 150540 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 150540 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 150540 AND g.name = '코미디';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '에이미 폴러', '/rwmvRonpluV6dCPiQissYrchvSD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에이미 폴러');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joy (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 150540 AND a.name = '에이미 폴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '필리스 스미스', '/h9w9pQbiderRWAC2mi7spjzuIGz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '필리스 스미스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sadness (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 150540 AND a.name = '필리스 스미스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '리처드 카인드', '/yWmuVQeQUzb5OSMVDoWkR0IylCK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리처드 카인드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bing Bong (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 150540 AND a.name = '리처드 카인드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '빌 헤이더', '/50FpKsWiyqbZxu0oLBAGbWn7wag.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빌 헤이더');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fear (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 150540 AND a.name = '빌 헤이더';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '루이스 블랙', '/1Yvp5dwnJ1UI0KtXGNhZ384wTgv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루이스 블랙');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anger (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 150540 AND a.name = '루이스 블랙';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '피트 닥터', '/vITDphkNpSn1LP5gUEheAnlclnl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피트 닥터');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 150540 AND d.name = '피트 닥터';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rMXHvHzpuYZXrJUhRVJ3TvDSwe5.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 150540;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/j29ekbcLpBvxnGk6LjdTc2EI5SA.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 150540;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (762441, '콰이어트 플레이스: 첫째 날', '2024-06-26', '쉿! 절대 소리내지 말 것', '평균 소음 90 데시벨을 자랑하는 미국 최대도시 뉴욕, 고양이 프로도와 함께 간만에 외출을 나온 사미라는 공연을 보고 돌아가던 중 하늘에서 떨어져 내리는 섬광을 목격하고 곧 사람들을 닥치는 대로 공격하는 정체불명 괴생명체의 출현에 충격에 휩싸인다. 아수라장이 된 뉴욕 도심에 ‘절대 소리 내지 말라’는 안내방송이 울려퍼지는 가운데 맨해튼의 모든 다리가 폭격으로 끊어지고, 사람들은 온갖 위협이 도사리는 도시에 고립되고 만다. 살아남기 위해 홀로 사투를 벌이던 ''사미라''는 우연히 또 다른 생존자 에릭을 만나고 두 사람은 괴생명체를 피해 지하철역부터 시가지, 할렘까지 숨죽인 여정을 이어 나가는데…', 99, '15', 'RELEASED', 267.813000, 6.800000, 260894737, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 762441 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 762441 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 762441 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '루피타 뇽오', '/y40Wu1T742kynOqtwXASc5Qgm49.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루피타 뇽오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Samira', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762441 AND a.name = '루피타 뇽오';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '조셉 퀸', '/zshhuioZaH8S5ZKdMcojzWi1ntl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조셉 퀸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eric', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762441 AND a.name = '조셉 퀸';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '알렉스 울프', '/7PMu5zFOEH7PqFDzrKThgKD4Ndf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '알렉스 울프');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Reuben', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762441 AND a.name = '알렉스 울프';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '자이먼 혼수', '/tpvtxxvCx2Mb5DV632hmuYlHoiY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '자이먼 혼수');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Henri', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762441 AND a.name = '자이먼 혼수';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Eliane Umuhire', '/u2q6nQtLsKGyTnWHtmKGyeYAyXq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Eliane Umuhire');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zena', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762441 AND a.name = 'Eliane Umuhire';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '마이클 사노스키', '/s2bl2Ct2BNLZjXqxHt7SpYgYzLD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '마이클 사노스키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 762441 AND d.name = '마이클 사노스키';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/eufjDFIHtFSmcblWpvw5BiNzmO6.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 762441;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6XjMwQTvnICBz6TguiDKkDVHvgS.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 762441;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1047373, 'The Silent Hour', '2024-10-03', '', '', 95, '', 'RELEASED', 276.411000, 6.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1047373 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1047373 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1047373 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '조엘 키너먼', '/kymJrfLvDF6hXRkNWVUUr0sb5va.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조엘 키너먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frank Shaw', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1047373 AND a.name = '조엘 키너먼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Sandra Mae Frank', '/giviV3KhxVeem0WhGBm7VlJbR2d.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sandra Mae Frank');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ava Fremont', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1047373 AND a.name = 'Sandra Mae Frank';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '메키 파이퍼', '/b9qbdKiuJdNROpIdZCuUdN5Smam.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '메키 파이퍼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mason Lynch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1047373 AND a.name = '메키 파이퍼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마크 스트롱', '/3cNmatYsoifytg7TfQhI1EHow3v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마크 스트롱');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Doug Slater', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1047373 AND a.name = '마크 스트롱';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Michael Eklund', '/la3J6E12pbZHe0sE73EipKkzQOp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Michael Eklund');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Angel Flores', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1047373 AND a.name = 'Michael Eklund';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Brad Anderson', '/4XCOsnXocIsOTLdVjktj3gqTu2b.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Brad Anderson');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1047373 AND d.name = 'Brad Anderson';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/j736cRzBtEPCm0nHnpRN1prqiqj.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1047373;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3C3LTPEdkH0la3LMbCEgMXzMHlh.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1047373;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1373893, 'Joni pata de conejo', '2024-10-11', '', '', 0, '', 'RELEASED', 267.297000, 7.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1373893 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jose Valero', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jose Valero');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1373893 AND a.name = 'Jose Valero';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Gregor Acuña-Pohl', '/3wbgpPWm92rsZz3IVlEIUUBm2o2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gregor Acuña-Pohl');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1373893 AND a.name = 'Gregor Acuña-Pohl';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Ismael Vazquez Nervión', '/ywKMwyUBTywb5NcUW1tmgO26A1F.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Ismael Vazquez Nervión');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1373893 AND d.name = 'Ismael Vazquez Nervión';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/a3nKPtKs7SRB6bdlaxPbD7f7eKJ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1373893;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7pa3mMBIHJXPJantNvlbyNVI5a1.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1373893;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (3933, '유령 신부', '2005-09-12', '한 번의 결혼, 두 명의 신부, 뭔가 잘못되었다', '생선 통조림 공장을 하며 벼락부자가 된 반 도르트 일가와 세습귀족이지만 가난한 에버글롯 일가는 각기 서로의 신분과 재산 때문에 사돈으로서의 연을 맺기로 결정한다. 결혼식 전날, 예행연습을 위해 처음 만나게 된 빅터와 빅토리아. 두 사람은 쑥스럽고 어색한 분위기 속에서도 사랑의 가능성을 발견하게 된다. 하지만 빅터는 결혼 리허설에서 계속해서 실수를 저지르고 급기야 연습을 더 하고 오라며 갤스웰 목사에게 쫓겨난다. 숲 속에서 홀로 연습하던 도중, 땅 위로 튀어나온 손가락 뼈에 반지를 끼웠다가 유령 신부의 오해로 지하세계에 끌려가게 되는 색다른 경험을 하게 된다.', 77, 'All', 'RELEASED', 263.250000, 7.582000, 118133252, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 3933 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 3933 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 3933 AND g.name = '애니메이션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '조니 뎁', '/6GkSSnhlLirHidf6hThCEFCfYhZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조니 뎁');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Victor Van Dort (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3933 AND a.name = '조니 뎁';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '헬레나 본햄 카터', '/hJMbNSPJ2PCahsP3rNEU39C8GWU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헬레나 본햄 카터');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Corpse Bride (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3933 AND a.name = '헬레나 본햄 카터';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '에밀리 왓슨', '/bd0qiJXHoLNpkCqABsh67AKRtjC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에밀리 왓슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Victoria Everglot (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3933 AND a.name = '에밀리 왓슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '트레이시 울만', '/cmug3uUXKBo9fhCcJk3pkgt1nvM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '트레이시 울만');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nell Van Dort / Hildegarde (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3933 AND a.name = '트레이시 울만';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Paul Whitehouse', '/v24xgnX50qEmH04RUmgC6dSCRYh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Paul Whitehouse');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'William Van Dort / Mayhew / Paul the Head Waiter (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3933 AND a.name = 'Paul Whitehouse';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Mike Johnson', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Mike Johnson');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 3933 AND d.name = 'Mike Johnson';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '팀 버튼', '/wcjuY5vD1nlfwWNbvvTGg5dGoRR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '팀 버튼');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 3933 AND d.name = '팀 버튼';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/AinoobwUR3mDspc1O9exQHgUAyv.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 3933;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/v23fWgJUEt8EMmvn19btIacxP8E.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 3933;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (7451, '트리플 엑스', '2002-08-09', '', '싸이렌이 온 거리를 울려 퍼지며 요란한 추격씬이 벌어지는 도중 한 녀석이 콜벳를 몰고 다리를 돌진, 200미터 높이에서 자동차 번지를 시도한다. 짜릿한 곡예를 선보인 후 낙하산을 펴고 유유히 사라지는 녀석의 이름은 ''젠더 케이지''. 인터넷에 생방송된 이 장면은 전세계 네티즌들에게 열렬한 환호를 받는다. 또 한 번의 멋진 프로젝트로 영웅 대접을 받는 젠더 케이지. 그러나 파티가 무르익을 무렵, 갑자기 들이닥친 특수부대는 그에게 신경 안정제를 쏜 후 잠들게 한다. 깨어난 곳은 알 수 없는 레스토랑. 어리둥절한 그 곳은 갑자기 강도들의 침입장으로 돌변하고, 단숨에 상황을 정리해버린 그에게 기븐스가 축하 인사를 전한다. 미국 비밀첩보국 NSA의 1차 테스트를 통과한 것. 이후 또 다시 잠에서 깨어난 곳은 비행기 안. 2번째 테스트로 콜럼비아 마약 밀매상의 아지트에 던져진 젠더 케이지. 때마침 콜럼비아 정부와 마약상들의 충돌로 아수라장이 된 그곳에서 살아남기 위한 치열한 전쟁이 펼쳐지는데...  상황종료 후 유유히 나타난 기븐스는 NSA의 테스트를 유일하게 통과한 그에게 비밀요원이 되어줄 것을 부탁한다. 단 그렇지 않을 경우는 감옥행뿐이라는 단서를 둔다. 젠더 케이지의 코드명은 트리플 X. 첫번째 임무지는 비밀요원의 무덤이라는 별칭을 가지고 있는 도시 프라하. 이제 얼떨결에 비밀요원이 되어버린 트리플 X의 위험한 여정이 시작되는데.', 124, '', 'RELEASED', 339.447000, 5.900000, 277448382, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 7451 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 7451 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 7451 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 7451 AND g.name = '범죄';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '빈 디젤', '/nZdVry7lnUkE24PnXakok9okvL4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빈 디젤');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Xander Cage', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 7451 AND a.name = '빈 디젤';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '아시아 아르젠토', '/dYbYNxMnqhNyAJyrPU7e2C9jcRz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아시아 아르젠토');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yelena', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 7451 AND a.name = '아시아 아르젠토';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마튼 초카스', '/y065G0CPTpvweDUksPWhFzsNhqH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마튼 초카스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yorgi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 7451 AND a.name = '마튼 초카스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '사무엘 L. 잭슨', '/AiAYAqwpM5xmiFrAIeQvUXDCVvo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사무엘 L. 잭슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agent Augustus Gibbons', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 7451 AND a.name = '사무엘 L. 잭슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Michael Roof', '/qhP35tsTTuAPUFcKYMGOxaw1s4j.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Michael Roof');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agent Toby Lee Shavers', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 7451 AND a.name = 'Michael Roof';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Rob Cohen', '/kVbB8Q0g8eXsn8l81flyC6TgMPW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Rob Cohen');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 7451 AND d.name = 'Rob Cohen';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xeEw3eLeSFmJgXZzmF2Efww0q3s.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 7451;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qwK9soQmmJ7kRdjLZVXblw3g7AQ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 7451;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (783110, '밀수', '2023-07-26', '열길 물속은 알아도 한길 사람 속은 모른다!', '1970년대, 바닷가에 인접한 작은 마을 군천엔 절친인 두 해녀 춘자와 진숙, 그리고 진숙의 동생이 살고 있다. 그들은 생계를 위해 항상 물 속에서 해산물들을 채집하는 일을 한다. 하지만 해변 근처에 공장들이 하나 둘 지어지면서, 해녀들의 생계에 곤란이 생기고 선원들은 생계를 위해서 밀수 일에 뛰어들게 된다. 그렇게 시작된 밀수업은 진숙의 가족이 감당하기 벅찰만큼 규모가 커지고 마을의 평화도 점차 깨지기 시작한다.', 129, '15', 'RELEASED', 257.274000, 6.600000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 783110 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 783110 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '김혜수', '/mTC57xEYJluTvygkIVmfYW2SfJU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김혜수');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jo Choon-ja', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 783110 AND a.name = '김혜수';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '염정아', '/5qIkgP0VcfF0YhO3bixzBtA1jH2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '염정아');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Uhm Jin-sook', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 783110 AND a.name = '염정아';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '조인성', '/69gbyFI0ET0l0dyjKChlx1Zx269.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조인성');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kwon Pil-sam', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 783110 AND a.name = '조인성';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '박정민', '/4ulrJOpIwgCjYjEsq8zdBoRnDDy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '박정민');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hammer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 783110 AND a.name = '박정민';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '김종수', '/bcZLy3t0EXvRY4EWsD5BoEt3xOM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김종수');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lee Jang-choon', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 783110 AND a.name = '김종수';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '류승완', '/mvLK4P2n5fMlE0Sdxfw6flRk09s.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '류승완');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 783110 AND d.name = '류승완';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ayLXqPZCu3uaLLhXiqvw5NBb7Lw.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 783110;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vZaIAIX5XcXLsF4jRSp5x7wsRzn.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 783110;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (231001, '할로윈: 살인영상', '2013-10-29', '', '어린 남매를 돌보는 베이비시터가 있는 한 가정집에서 이상한 비디오테잎을 발견한다. 아이들의 요구에 틀어보니 다큐멘터리 같은 영화는 잔인하게 사람을 살해하는 내용이었다. 오싹한 느낌에 베이비시터는 영상을 끄고 아이들이 영상을 못보게 하지만 그 이후로 집에서 이상한 일들이 일어나기 시작한다.', 82, '', 'RELEASED', 242.092000, 5.600000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 231001 AND g.name = '공포';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Katie Maguire', '/e2NArSgGrpFTVxG8OrvuSSPMGCZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Katie Maguire');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sarah', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 231001 AND a.name = 'Katie Maguire';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Catherine A. Callahan', '/wfHL971lj7uzJPHFDluCdcMMh61.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Catherine A. Callahan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Caroline', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 231001 AND a.name = 'Catherine A. Callahan';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Marie Maser', '/iFLTBR6mC32zjSsTruT7m7aLCqo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marie Maser');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Costume Designer (archive footage)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 231001 AND a.name = 'Marie Maser';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Kayla Lian', '/6J3dxOTHnyrnRP7zuMqZTYNEfHc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kayla Lian');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Casey (archive footage)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 231001 AND a.name = 'Kayla Lian';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Mike Giannelli', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mike Giannelli');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Art the Clown', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 231001 AND a.name = 'Mike Giannelli';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Damien Leone', '/nX2kkYD32x2PC9rRU7DrYCRPjFE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Damien Leone');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 231001 AND d.name = 'Damien Leone';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bSe8CBqK8HkbP6sqZWzcJfQV9Ci.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 231001;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/cCBdL7v7msKHE0T5lPbaAY8GTJ5.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 231001;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1153291, 'Llamada privada', '2023-07-11', '', '', 79, '', 'RELEASED', 258.475000, 0.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1153291 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1153291 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Gabriel Ng', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gabriel Ng');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Valentino Lombardi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1153291 AND a.name = 'Gabriel Ng';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Carolina Herrera', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Carolina Herrera');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wife', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1153291 AND a.name = 'Carolina Herrera';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Santiago Rodríguez', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Santiago Rodríguez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Killer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1153291 AND a.name = 'Santiago Rodríguez';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Christian Cosse', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Christian Cosse');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Police', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1153291 AND a.name = 'Christian Cosse';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Alex Bries', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Alex Bries');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1153291 AND d.name = 'Alex Bries';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Gabriel Ng', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Gabriel Ng');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1153291 AND d.name = 'Gabriel Ng';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tUjSG0q3NghJ1UT9KzDUq3EyjJk.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1153291;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1153291;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1145491, 'Operation Black Ops', '2023-07-11', '', '', 80, '', 'RELEASED', 252.108000, 5.861000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1145491 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1145491 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Tito Ortiz', '/ivG0rCc5FE1XWdh6CIBTWfeIgBk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tito Ortiz');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Noah', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1145491 AND a.name = 'Tito Ortiz';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Cristiane Justino', '/gbHhIXul6LhOE8P91nom5lANxNS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Cristiane Justino');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chicago', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1145491 AND a.name = 'Cristiane Justino';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Mike Ferguson', '/fgmxWHKESApKHtu1Rar0iCVi6if.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mike Ferguson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Schroder', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1145491 AND a.name = 'Mike Ferguson';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Kelsey Johnson', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kelsey Johnson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1145491 AND a.name = 'Kelsey Johnson';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Mike Markoff', '/d7Z0hSmCOleHt1BycaAbU9doKMR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mike Markoff');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1145491 AND a.name = 'Mike Markoff';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Jamaal Burden', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jamaal Burden');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1145491 AND d.name = 'Jamaal Burden';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vMgkjQM2fHirExilsTZWJTqL33G.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1145491;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bEJyUUygNSLhe4BPykEHf3hPnsh.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1145491;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (718821, '트위스터스', '2024-07-10', '쫓아라! 막아라! 살아남아라! 역대급 토네이도에 정면돌파 선언!', '뉴욕 기상청 직원 케이트는 대학 시절 토네이도에 맞서다 소중한 사람들을 잃고 죄책감에 살고 있다. 그런 그녀 앞에 옛 친구 하비가 찾아와 토네이도를 소멸시킬 수 있는 획기적인 방법을 제안한다.  고민 끝에 합류하게 된 케이트는 하비와 오클라호마로 향하고, 일명 토네이도 카우보이라 불리는 유명 인플루언서 타일러를 만난다. 마치 자연을 정복한 듯이 자신감 넘치는 타일러와 매사 부딪히게 되는 케이트. 어느 날, 모든 것을 집어삼킬 거대한 토네이도가 휘몰아칠 것을 감지하게 되는데…', 123, '12', 'RELEASED', 237.870000, 6.959000, 369590675, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 718821 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 718821 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '데이지 에드거존스', '/uhrgWinc0W2Q1K0ynUmyTaWd8dv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이지 에드거존스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kate', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 718821 AND a.name = '데이지 에드거존스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '글렌 파월', '/fUnIaJkdgvQTztyR1nLeUceSzly.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '글렌 파월');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tyler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 718821 AND a.name = '글렌 파월';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '안소니 라모스', '/seFm2fKh6reyZaaCg7DmRpodLCw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '안소니 라모스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Javi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 718821 AND a.name = '안소니 라모스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '브랜든 페레아', '/hEzljVgsho0Uwd8tg7AGB5Uy3Lr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브랜든 페레아');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Boone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 718821 AND a.name = '브랜든 페레아';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Maura Tierney', '/4BCrwdHdC4iRSDimvkoYaXg2qki.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Maura Tierney');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cathy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 718821 AND a.name = 'Maura Tierney';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '정이삭', '/fwiIh7jECjefCco3ZCdug6i3t9U.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '정이삭');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 718821 AND d.name = '정이삭';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/w5mXdM9AIf7urUtoUVYjABdp3g8.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 718821;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7aPrv2HFssWcOtpig5G3HEVk3uS.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 718821;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1129598, '더 라이언: 사막의 생존자들', '2024-03-15', '인간과 짐승에 맞서 생존하라!', '극단주의 무장 단체의 위협을 받은 한 젊은 부부는 칼라하리 사막의 선교 기지를 떠나야 한다. 부패한 밀수업자가 조종하는 허술한 비행기에 겨우 탑승하여 탈출을 시도하지만,비행기가 추락하며 더 큰 위협에 직면하게 된다. 그들이 불시착한 곳은 사자, 표범, 하이에나 같은 맹수들이 서식하는 칼라하리 사막 한가운데…무장 단체에게 추적당하는 승객들은 인간과 야생 동물 모두와 싸워야만 한다. 과연 누가 이 치열한 생존 싸움에서 살아남을 것인가?', 86, '15', 'RELEASED', 203.309000, 6.321000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1129598 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1129598 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1129598 AND g.name = '공포';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '라이언 필립', '/riNUvjLNsa2JDLrgDIBHH9nze6o.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '라이언 필립');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Andrew', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1129598 AND a.name = '라이언 필립';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '에밀 허쉬', '/qxshYNcE9yYBvdY5oXp9v6lglG0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에밀 허쉬');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Grun', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1129598 AND a.name = '에밀 허쉬';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '미나 수바리', '/2hRoibF2WkPyML3PD0ijmJo2OKE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미나 수바리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sue', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1129598 AND a.name = '미나 수바리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Dylan Flashner', '/nMDE5OFcc1cSioewYSlJDdbt9X7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Dylan Flashner');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tyler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1129598 AND a.name = 'Dylan Flashner';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Tristan Thompson', '/sOLyHorcm20lndYmj9LzfUPnLwi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tristan Thompson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Max', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1129598 AND a.name = 'Tristan Thompson';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Mukunda Michael Dewil', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Mukunda Michael Dewil');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1129598 AND d.name = 'Mukunda Michael Dewil';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dcUmzoiHChYmtef2yEe06QcML5o.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1129598;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/n3JeGELHa9V6k9mL81ItMxWLSS6.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1129598;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (14836, '코렐라인: 비밀의 문', '2009-02-05', '소원은 함부로 말하면 안돼!', '새로운 집으로 이사해 모든 것이 낯선 코렐라인은 부모님도 일 때문에 바쁘자, 혼자 집안을 돌아다니던 중 숨겨진 작은 문을 발견한다. 그날 밤 우연히 문을 열어 본 코렐라인은 그 문을 통해 또 다른 세계로 가게 되고, 상상으로만 생각하던 모든 것이 다 실현되는 또 다른 세계에 점점 마음을 뺏기게 된다. 이 곳에는 단추 눈을 한 가족, 친구, 이웃 등 모든 사람이 자신의 말을 들어주는 신나고 완벽한 세상인 것. 하지만 이 곳에 머물기 위해 필요한 무시무시하고 엄청난 비밀을 알게 된 코렐라인이 현실의 세계로 돌아가려 하자, 또 다른 세계의 엄마는 이를 막기 위해 본색을 드러내는데...', 100, 'All', 'RELEASED', 211.952000, 7.891000, 172750668, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 14836 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 14836 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 14836 AND g.name = '판타지';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '다코타 패닝', '/hwcO08SVWkelfvgfIa5HsTMxsK8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다코타 패닝');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Coraline Jones (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 14836 AND a.name = '다코타 패닝';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Teri Hatcher', '/ySmnfZm8ZGabcwp4UwaMDeSzXqx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Teri Hatcher');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mel Jones / Other Mother (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 14836 AND a.name = 'Teri Hatcher';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jennifer Saunders', '/pTgxwHcz9L8SNVYvPJS0o0lgHya.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jennifer Saunders');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'April Spink (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 14836 AND a.name = 'Jennifer Saunders';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '돈 프렌치', '/eLFCJSTEeh7CDRw50RzowKz4h7V.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '돈 프렌치');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miriam Forcible (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 14836 AND a.name = '돈 프렌치';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '키스 데이비드', '/jJLJuR7FNHYL1fB5igjj7IXzOel.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키스 데이비드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cat (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 14836 AND a.name = '키스 데이비드';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Henry Selick', '/2LvtcpV8njWrp2W9eXmTNjsAWev.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Henry Selick');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 14836 AND d.name = 'Henry Selick';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/iGp4wBc0ZBVFd2HPicyDgl6Pn1r.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 14836;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hofnlIyF6bePkgQOpcuRWLvzf15.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 14836;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1329336, '배드 가이즈: 오싹한 핼러윈', '2024-10-02', '', '훔치는 솜씨라면 알아주는 배드 가이즈 일당이 위험한 핼러윈 한탕에 나서기로 한다. 으스스한 저택에 들어가 값비싼 펜던트를 슬쩍할 계획인데. 뭐 잘못되기야 하겠어?', 24, 'ALL', 'RELEASED', 268.330000, 7.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1329336 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1329336 AND g.name = '코미디';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Michael Godere', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Michael Godere');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wolf (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1329336 AND a.name = 'Michael Godere';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Ezekiel Ajeigbe', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ezekiel Ajeigbe');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shark (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1329336 AND a.name = 'Ezekiel Ajeigbe';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Raul Ceballos', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Raul Ceballos');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Piranha (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1329336 AND a.name = 'Raul Ceballos';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '크리스 디어먼토펄러스', '/rD9KI3FYwy3rFJhdTg2K5mhr7W3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 디어먼토펄러스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Snake / Reginald E. Scary (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1329336 AND a.name = '크리스 디어먼토펄러스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Mallory Low', '/amS893X6E4w2n3Go73HkbuYZjI9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mallory Low');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tarantula (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1329336 AND a.name = 'Mallory Low';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Kevin Peaty', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Kevin Peaty');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1329336 AND d.name = 'Kevin Peaty';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oEJC05CqPugMxC4rFu9r6r6vg6m.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1329336;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vGaBqgY8YRzQVUbBMPnd5SmYvL7.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1329336;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1104171, '다음 크리스마스에 만나요', '2024-11-05', '', '낭만에 죽고 사는 골수 로맨티스트. 이상형의 남자를 만나기 위해 뉴욕을 동분서주하는 대장정에 나선다. 그를 만나려면 이미 매진된 펜타토닉스 크리스마스 공연 티켓을 어떻게든 구해야 한다!', 105, '', 'RELEASED', 401.750000, 6.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1104171 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1104171 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1104171 AND g.name = 'TV 영화';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Christina Milian', '/mzqhZVTYbgQd3SBZrb9KGlCuRnu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Christina Milian');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Layla', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1104171 AND a.name = 'Christina Milian';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Devale Ellis', '/5uv5YeS9d1kAnnRpLkh0JdPJTAR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Devale Ellis');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Teddy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1104171 AND a.name = 'Devale Ellis';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Kofi Siriboe', '/uJXuRtPvTlrAfwdVGCziOOXr0N8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kofi Siriboe');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'James', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1104171 AND a.name = 'Kofi Siriboe';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Kalen Allen', '/qWYhQPQCjI82EpySx7LoLCs58Ac.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kalen Allen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1104171 AND a.name = 'Kalen Allen';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Mitch Grassi', '/4JAR45cCmK2JygeGpI1iPsaU3b4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mitch Grassi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mitch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1104171 AND a.name = 'Mitch Grassi';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Rusty Cundieff', '/14re77GRWUNrI3gEGIiCSRGqtVL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Rusty Cundieff');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1104171 AND d.name = 'Rusty Cundieff';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2CpaK4kzfAB4tIUkMV53PizJkKu.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1104171;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8jujdLr4OAQoWGgfNmaE4RR0mqb.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1104171;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (482600, '일본 엄마', '2017-02-09', '', '얼굴은 청순, 가슴은 D컵, 밤 기술은 퍼펙트! ""아들아, 이제부터 네 여친이 아니라 엄마다." 아들 기호가 결혼하겠다며 일본에서 데려온 그녀, 유키. 그러나 기호는 한국에 오자 전 여친을 만나며 바람을 피우기 시작한다. 처음에는 예비 며느리를 달래는 마음으로 유키를 위로하던 민철은 어느 순간부터 자신이 유키를 여자로 보고 있다는 사실을 깨닫는다. 결국, 기호 몰래 민철과 유키의 뜨거운 정사가 펼쳐지는데...', 91, '19+', 'RELEASED', 297.125000, 6.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 482600 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 482600 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jeon Ji-hak', '/6PFRMnyLaHXKrKmDWg7whQicRvf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jeon Ji-hak');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Min-cheol (민철)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 482600 AND a.name = 'Jeon Ji-hak';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Choi Min-ho', '/2sdgTHmfm14RHee5gqoiyC165xR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Choi Min-ho');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gi-ho', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 482600 AND a.name = 'Choi Min-ho';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Saki Mizumi', '/iPTdfxma79VtGy9M3ky0JZwnXhL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Saki Mizumi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yuki', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 482600 AND a.name = 'Saki Mizumi';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Ha Roo', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ha Roo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Minky - Cameo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 482600 AND a.name = 'Ha Roo';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Ahn So-hee', '/7OWRPTEPYi7dV5a97fhXLiiHpPM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ahn So-hee');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eun-ji', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 482600 AND a.name = 'Ahn So-hee';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Kim Moo-won', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Kim Moo-won');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 482600 AND d.name = 'Kim Moo-won';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hq1EaYIqUNrPM3QFYAbnH2UHoX8.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 482600;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 482600;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1079485, '곰돌이 푸: 피와 꿀 2', '2024-03-26', '', '', 93, '', 'RELEASED', 267.955000, 6.201000, 7582541, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1079485 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1079485 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Scott Chambers', '/pANsw8kWaQzSwuVmr1Em5di9u4o.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Scott Chambers');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Christopher Robin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1079485 AND a.name = 'Scott Chambers';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Ryan Oliva', '/8BtMbBj9tdkDkRxeBkK5HdLCaEk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ryan Oliva');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Winnie-the-Pooh', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1079485 AND a.name = 'Ryan Oliva';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Marcus Massey', '/zc9ZKD32JPDLabXWraX43O6BN4c.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marcus Massey');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Owl', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1079485 AND a.name = 'Marcus Massey';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Tallulah Evans', '/51iKIxfVjvVEm1e5L7P9ZpQTPb8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tallulah Evans');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lexy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1079485 AND a.name = 'Tallulah Evans';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Lewis Santer', '/bWI56wKghtybdIbLjOCiDKIIV9D.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lewis Santer');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tigger', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1079485 AND a.name = 'Lewis Santer';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Rhys Frake-Waterfield', '/a0ETg5j54Nca7dO2s9Tfhco0u40.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Rhys Frake-Waterfield');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1079485 AND d.name = 'Rhys Frake-Waterfield';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2sADrLwMQof6yYmrJRSa04tFZuS.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1079485;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/p4INKu77iuTG1o1a5N3Y9vqeEGq.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1079485;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (748783, '가필드 더 무비', '2024-04-30', '환상의 팀플레이 냥가능', '세상귀찮 집냥이, 바쁘고 험난한 세상에 던져졌다! 집사 ‘존’과 반려견 ‘오디’를 기르며 평화로운 나날을 보내던 집냥이 ‘가필드’. 어느 날, 험악한 길냥이 무리에게 납치당해 냉혹한 거리로 던져진다. 돌봐주는 집사가 없는 집 밖 세상은 너무나도 정신없게 돌아가고 길에서 우연히 다시 만난 아빠 길냥이 ‘빅’은 오히려 ‘가필드’를 위기에 빠지게 하는데… 험난한 세상, 살아남아야 한다!', 101, 'ALL', 'RELEASED', 305.249000, 7.100000, 230295748, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 748783 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 748783 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 748783 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 748783 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 748783 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '크리스 프랫', '/6DdoTgW9jdJwDmVFZRP8D0AtVFs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 프랫');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Garfield (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 748783 AND a.name = '크리스 프랫';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '사무엘 L. 잭슨', '/AiAYAqwpM5xmiFrAIeQvUXDCVvo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사무엘 L. 잭슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vic (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 748783 AND a.name = '사무엘 L. 잭슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '해나 워딩엄', '/eHAICyhvjiRZCgzKyJCk9hWnnjr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '해나 워딩엄');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jinx (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 748783 AND a.name = '해나 워딩엄';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '빙 레임스', '/4gpLVNKPZlVucc4fT2fSZ7DksTK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빙 레임스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Otto (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 748783 AND a.name = '빙 레임스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '니콜라스 홀트', '/laeAYQVBV9U3DkJ1B4Cn1XhpT8P.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '니콜라스 홀트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jon (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 748783 AND a.name = '니콜라스 홀트';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Mark Dindal', '/333OWiQBGLBjAWUemWySFzxCbhx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Mark Dindal');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 748783 AND d.name = 'Mark Dindal';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/57g3pHYi3p0JNVO1LkcyYbeMDBf.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 748783;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1wP1phHo2CROOqzv7Azs0MT5esU.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 748783;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (259872, 'Des jours plus belles que la nuit', '2010-02-19', '', '', 60, '', 'RELEASED', 265.525000, 6.500000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 259872 AND g.name = '로맨스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Wim van Damme', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Wim van Damme');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Himself', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 259872 AND a.name = 'Wim van Damme';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Floor Wyns', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Floor Wyns');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Herself', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 259872 AND a.name = 'Floor Wyns';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Jennifer Lyon Bell', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jennifer Lyon Bell');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 259872 AND d.name = 'Jennifer Lyon Bell';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Murielle Scherre', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Murielle Scherre');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 259872 AND d.name = 'Murielle Scherre';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uCkANtG6ezb7hjRKVudY3PUcbvn.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 259872;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dzY2ZYyPRbXcw8UOupHK3V5VQYk.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 259872;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1147710, '하이재킹', '2024-06-21', '목적지가 다른 승객이 탑승했다', '1971년 겨울 속초공항 여객기 조종사 태인과 규식은 김포행 비행에 나선다. 승무원 옥순의 안내에 따라 탑승 중인 승객들의 분주함도 잠시, 이륙한지 얼마 되지 않아 사제폭탄이 터지며 기내는 아수라장이 된다. 여객기를 통째로 납치하려는 용대는 조종실을 장악하고 무작정 북으로 기수를 돌리라 협박한다. 폭발 충격으로 규식은 한 쪽 시력을 잃고 이제 여객기를 조종할 수 있는 사람은 태인 뿐. 이들은 여객기를 무사히 착륙시키기 위한 사투를 시작하는데...', 100, '12', 'RELEASED', 249.260000, 6.100000, 14, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1147710 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1147710 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1147710 AND g.name = '범죄';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '하정우', '/alHcDyLYbc6C2X9yOHw8mNHZVGu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하정우');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tae-in', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1147710 AND a.name = '하정우';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '여진구', '/f9Gj12cCk66vdIaDVjltTGAZPC9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '여진구');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yong-dae', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1147710 AND a.name = '여진구';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '성동일', '/9VLRIvOyQSHkpJaeaBcmHzcEUQn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '성동일');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gyu-sik', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1147710 AND a.name = '성동일';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '채수빈', '/bf38XUHvsgz1IVwtHX6N8HLDMa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '채수빈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ok-soon', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1147710 AND a.name = '채수빈';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '문유강', '/69bOe5fyGaUFZy7JUsq40hWd75F.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '문유강');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chang-bae', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1147710 AND a.name = '문유강';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Kim Sung-han', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Kim Sung-han');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1147710 AND d.name = 'Kim Sung-han';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pLEenJ0I1XqySVezRdETf2n2w7H.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1147710;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4mN2sHsGBR7NEQaUU34S6VAnj97.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1147710;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1075676, '전,란', '2024-10-02', '혼란의 시대, 주어진 운명에 맞서 싸워라', '조선 최고 무신 집안의 아들 종려와 그의 몸종 천영. 함께 자란 두 남자가 왜란의 시대에 적이 되어 다시 만난다. 한 사람은 선조의 최측근 무관으로, 다른 사람은 의병으로, 파란의 세월을 헤쳐간다.', 126, '19', 'RELEASED', 238.909000, 7.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1075676 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1075676 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1075676 AND g.name = '역사';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '강동원', '/xGPT8rgvWuK8Qh7BKNd7fhKs8Sk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '강동원');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cheon-young', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1075676 AND a.name = '강동원';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '박정민', '/4ulrJOpIwgCjYjEsq8zdBoRnDDy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '박정민');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lee Jong-ryeo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1075676 AND a.name = '박정민';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '차승원', '/flO3R7rKFuyoVQkthXIMrI6ESye.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '차승원');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'King Seonjo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1075676 AND a.name = '차승원';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '김신록', '/nR8DnqtTq7PgOjZrZB8F6PuNo6r.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김신록');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Beom-dong', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1075676 AND a.name = '김신록';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '진선규', '/m9kX4DzTOz5kFOVPzfYooPTArRY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '진선규');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kim Ja-ryeong', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1075676 AND a.name = '진선규';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '김상만', '/5KUAUqmGUfyXKdUwBK1pXpoCeW9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '김상만');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1075676 AND d.name = '김상만';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gnfNGXdW7J9HGNeHyaDpkAFJkHK.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1075676;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/64tinBsds1nVp4wOCgYhMbSgsRW.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1075676;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (634649, '스파이더맨: 노 웨이 홈', '2021-12-15', '무너진 세계, 차원을 뛰어넘는 위협', '미스테리오의 계략으로 세상에 정체가 탄로난 스파이더맨 피터 파커는 하루 아침에 평범한 일상을 잃게 된다. 문제를 해결하기 위해 닥터 스트레인지를 찾아가 도움을 청하지만 뜻하지 않게 멀티버스가 열리면서 각기 다른 차원의 불청객들이 나타난다. 닥터 옥토퍼스를 비롯해 스파이더맨에게 깊은 원한을 가진 숙적들의 강력한 공격에 피터 파커는 사상 최악의 위기를 맞게 되는데…', 148, '12', 'RELEASED', 283.365000, 8.000000, 1921847111, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 634649 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 634649 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 634649 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '톰 홀랜드', '/6ZCeGtdrat1n74K7WHpQ90HaZ5Y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 홀랜드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Peter Parker / Spider-Man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 634649 AND a.name = '톰 홀랜드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '젠데이아', '/3WdOloHpjtjL96uVOhFRRCcYSwq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '젠데이아');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'MJ', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 634649 AND a.name = '젠데이아';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '베네딕트 컴버배치', '/fBEucxECxGLKVHBznO0qHtCGiMO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '베네딕트 컴버배치');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Doctor Strange', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 634649 AND a.name = '베네딕트 컴버배치';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jacob Batalon', '/53YhaL4xw4Sb1ssoHkeSSBaO29c.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jacob Batalon');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ned Leeds', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 634649 AND a.name = 'Jacob Batalon';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제이미 폭스', '/zD8Nsy4Xrghp7WunwpCj5JKBPeU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이미 폭스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Max Dillon / Electro', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 634649 AND a.name = '제이미 폭스';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '존 왓츠', '/fkXChMX6CUXY1yOxBehAzvaTCl7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '존 왓츠');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 634649 AND d.name = '존 왓츠';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fvqoI9r1GU2EFkc0xjZ6dKCuDVR.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 634649;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zD5v1E4joAzFvmAEytt7fM3ivyT.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 634649;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1249532, 'Rippy', '2024-10-25', '', '', 83, '', 'RELEASED', 222.432000, 4.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1249532 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1249532 AND g.name = '미스터리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마이클 빈', '/9oFLsADWQm2TvU8XzLIzBbjdMkU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 빈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Uncle Schmitty', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1249532 AND a.name = '마이클 빈';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Tess Haubrich', '/pNvjKa3Rl2q681EM6kQrwbEfJeg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tess Haubrich');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maddy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1249532 AND a.name = 'Tess Haubrich';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Aaron Pedersen', '/3SoOwjIPULquiuo0yBWAwVamJFj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Aaron Pedersen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1249532 AND a.name = 'Aaron Pedersen';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Angie Milliken', '/pfQZoIwFxaPiaxxuxJBHNQNrmQi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Angie Milliken');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Aunt Donna', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1249532 AND a.name = 'Angie Milliken';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Mungo McKay', '/qDINC4HtgaLNNmJXKnbt2SJb1kL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mungo McKay');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Stan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1249532 AND a.name = 'Mungo McKay';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Ryan Coonan', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Ryan Coonan');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1249532 AND d.name = 'Ryan Coonan';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/cZ5U4Ae74g29E02JR5oR98RQhiR.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1249532;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tPfXJcXxQ3MHyvhzNsDgsXoyPEM.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1249532;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (940551, '인투 더 월드', '2023-12-06', '우린 멋진 모험을 하게 될 거야! 하지만 불시착했습니다. 어디로 가야 될까요?', '가족을 과잉보호하는 아빠 ‘맥’ 때문에 평생을 작은 연못에서 안전하게 살아온 말러드 가족. 하지만 호기심 가득한 남매 ‘댁스’와 ‘그웬’을 위해 새로운 세상을 모험하고 싶은 엄마 ‘팸’의 설득으로 가족들은 항상 꿈꿔온 자메이카로 생애 첫 가족 모험을 떠나기로 한다! 설렘 넘치는 시작과 달리 태풍을 만나 길을 잃고, 낯선 친구들을 만나고, 위험 가득한 뉴욕에 불시착하게 된다. 인생 처음으로 모든 계획이 틀어지고 위기에 빠진 말러드 가족은 서툴지만 서로를 의지하며 모험을 계속한다. 새로운 세상, 함께라면 두려울 것 없어!', 83, 'ALL', 'RELEASED', 246.399000, 7.400000, 298776052, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 940551 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 940551 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 940551 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 940551 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 940551 AND g.name = '가족';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '쿠마일 난지아니', '/9EyrK1Cv7ey1h1GgmsVAOn45w6G.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '쿠마일 난지아니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mack Mallard (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 940551 AND a.name = '쿠마일 난지아니';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '엘리자베스 뱅크스', '/q0wvK0Nr6FCpvx9UCMTqTby6kNW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '엘리자베스 뱅크스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pam Mallard (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 940551 AND a.name = '엘리자베스 뱅크스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '카스파르 제닝스', '/hDp0awwLRghXYtXZ4FRrubjrMRa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카스파르 제닝스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dax Mallard (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 940551 AND a.name = '카스파르 제닝스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Tresi Gazal', '/vRatzYeWD5T6Fum52vtfJo0OY03.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tresi Gazal');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gwen Mallard (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 940551 AND a.name = 'Tresi Gazal';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '아콰피나', '/l5AKkg3H1QhMuXmTTmq1EyjyiRb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아콰피나');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chump (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 940551 AND a.name = '아콰피나';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Benjamin Renner', '/yp4ucXRYU5TdMj16glyoYYoxJcw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Benjamin Renner');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 940551 AND d.name = 'Benjamin Renner';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2xE3NI6zElWhwN9WJ92fqbZKmzZ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 940551;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2KGxQFV9Wp1MshPBf8BuqWUgVAz.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 940551;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1064028, '메이드', '2024-08-15', '당신만을 위한 치명적 서비스 ON', '아내 매기의 부재로 인해 AI가 탑재된 메이드를 들이기로 한 닉. 딸이 마음에 들어한 메이드를 집에 입주시키고 ‘앨리스’라는 이름을 붙인다.  청소, 요리, 장보기까지 완벽하게 집안일을 해내는 앨리스. 닉은 편리함을 느끼지만 그것도 잠시, 앨리스는 닉을 위한다는 명목 아래 아슬아슬한 행동을 이어간다.  “마음이 힘들면 능률이 떨어지죠. 제가 도와드릴게요”  아내 매기의 목소리까지 흉내 내는 앨리스와 금단의 선을 넘은 닉. 매기가 집으로 돌아오고 닉은 모든 것을 없었던 일로 하고 싶지만 앨리스는 닉에 대한 집착을 멈추지 않는다. 위험한 일도 서슴지 않으며 그녀는 폭주하기 시작하는데…', 105, '19', 'RELEASED', 249.939000, 6.743000, 159422, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1064028 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1064028 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1064028 AND g.name = '공포';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '메간 폭스', '/9khvk5svs81TLqIGlI3ZJqYtqaY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '메간 폭스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alice', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1064028 AND a.name = '메간 폭스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '미켈레 모로네', '/90IF4aQKrr7zXmtcsNAYbrvcIg2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미켈레 모로네');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nick', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1064028 AND a.name = '미켈레 모로네';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Madeline Zima', '/6hmUs5Q1EETapn32yKNt3c3i1sn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Madeline Zima');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maggie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1064028 AND a.name = 'Madeline Zima';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Matilda Firth', '/vV8kntBeW0zFJS7WvlyFrBYp1py.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Matilda Firth');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Isla', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1064028 AND a.name = 'Matilda Firth';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Andrew Whipp', '/xOwjS0x7I1mCsyFRDWCcb3pnkjd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Andrew Whipp');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Monty', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1064028 AND a.name = 'Andrew Whipp';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'SK Dale', '/8ZwQLeDswGXnnCBpcEdprrUDUZ5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'SK Dale');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1064028 AND d.name = 'SK Dale';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/p0708UyphVhP7PfmAhf3Ds62VBk.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1064028;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/co7oxvpWxgd6FZU24DnljDDHYQA.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1064028;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1114513, '스픽 노 이블', '2024-09-11', '악은 절대 말하지 말 것', '휴양지에서 처음 만나 우연히 함께 휴가를 보내게 된 두 가족. 패트릭(제임스 맥어보이)은 자신의 집으로 루이스(맥켄지 데이비스)의 가족을 초대한다. 다시 만나 즐거운 시간을 보낼 것이라 예상한 것도 잠시, 거절할 수 없는 호의와 불편한 상황들이 계속되며 불길한 두려움을 느끼고 집에 돌아가려 하던 중 숨겨진 진실을 마주하게 되는데…', 110, '15', 'RELEASED', 208.921000, 7.339000, 75711395, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1114513 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1114513 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제임스 맥어보이', '/vB6qYlFXgONGVwwxWXE4gf0F8SQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제임스 맥어보이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paddy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1114513 AND a.name = '제임스 맥어보이';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '맥켄지 데이비스', '/ekQbEIKh26jbz17P0wwLbo6uNs9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '맥켄지 데이비스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Louise Dalton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1114513 AND a.name = '맥켄지 데이비스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Scoot McNairy', '/2rF69vkyzpD2MG0T375RYSiBbpe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Scoot McNairy');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ben Dalton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1114513 AND a.name = 'Scoot McNairy';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Aisling Franciosi', '/qtXgCx5vMlAMIjMbYydDjjzY08T.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Aisling Franciosi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ciara', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1114513 AND a.name = 'Aisling Franciosi';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '알릭스 웨스트 레플러', '/eF3uyAlOjRmzero5b8xYukvu5Mr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '알릭스 웨스트 레플러');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agnes Dalton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1114513 AND a.name = '알릭스 웨스트 레플러';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'James Watkins', '/ik0bbpMrqAaaJlOYB1DbdslQHwh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'James Watkins');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1114513 AND d.name = 'James Watkins';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mXGlp8K10JhiY5ZNY7zMldm2lss.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1114513;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1fL2S8LKxCVE9KoPRBXeagmBtex.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1114513;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (823464, '고질라 X 콩: 뉴 엠파이어', '2024-03-27', '이번에는 한 팀이다', '두 타이탄의 전설적인 대결 이후 할로우 어스에 남은 콩은 드디어 애타게 찾던 동족을 발견하지만 그 뒤에 도사리고 있는 예상치 못한 위협에 맞닥뜨린다. 한편, 깊은 동면에 빠진 고질라는 알 수 없는 신호로 인해 깨어나고 푸른 눈의 폭군 스카 킹의 지배 아래 위기에 처한 할로우 어스를 마주하게 된다. 할로우 어스는 물론, 지구상에도 출몰해 전세계를 초토화시키는 타이탄들의 도발 속에서 고질라와 콩은 사상 처음으로 한 팀을 이뤄 반격에 나서기로 하는데…', 115, '12', 'RELEASED', 248.478000, 7.152000, 567156493, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 823464 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 823464 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 823464 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '레베카 홀', '/coC58ANiDbqRIyle5zEl9QDektf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레베카 홀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ilene Andrews', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 823464 AND a.name = '레베카 홀';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '브라이언 타이리 헨리', '/2MsJh0bpyzwvOUnXOltHp3j85Pb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브라이언 타이리 헨리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bernie Hayes', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 823464 AND a.name = '브라이언 타이리 헨리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '댄 스티븐스', '/fFsgginZKH527o38ZfdDxuzx7Ew.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '댄 스티븐스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Trapper', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 823464 AND a.name = '댄 스티븐스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Kaylee Hottle', '/xpQQZgptOUI6duMMBDyCiaJ4JUv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kaylee Hottle');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 823464 AND a.name = 'Kaylee Hottle';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Alex Ferns', '/3V3L7MJGURXU6lVaqai80zFT4Wa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alex Ferns');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mikael', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 823464 AND a.name = 'Alex Ferns';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '애덤 윈가드', '/csunrewJCACuvM3Ntd9kIi31twa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '애덤 윈가드');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 823464 AND d.name = '애덤 윈가드';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4z1VMmlxHrziG45901esjB4dpIa.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 823464;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/veIyxxi5Gs8gvztLEW1Ysb8rrzs.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 823464;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1059264, 'The Inseparables', '2023-09-01', '', '', 90, '', 'RELEASED', 235.008000, 6.500000, 311198, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1059264 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1059264 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1059264 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1059264 AND g.name = '가족';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Monica Young', '/zHXhNXWoHjNMykEU3DFWnvSdMUn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Monica Young');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dee (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1059264 AND a.name = 'Monica Young';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Danny Fehsenfeld', '/r8QaMkBnatNEwNXuAZQBigNSztl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Danny Fehsenfeld');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dragon (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1059264 AND a.name = 'Danny Fehsenfeld';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Olivier Paris', '/5LeGe0MGRf2YqC3mY3glVOTC3HW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Olivier Paris');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pat (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1059264 AND a.name = 'Olivier Paris';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Dakota West', '/bTeixRUVvEVgidvdQqNMOzYAG8A.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Dakota West');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Don (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1059264 AND a.name = 'Dakota West';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jordan Baird', '/oTznUH155fVgx261rjPrFNnBTCc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jordan Baird');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'DJ Doggy Dog (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1059264 AND a.name = 'Jordan Baird';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Jérémie Degruson', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jérémie Degruson');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1059264 AND d.name = 'Jérémie Degruson';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dmftU2Rnmv9KTteMUwjalOuZHke.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1059264;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vmzauGqSgx25rzavUbuN6c5Vdfc.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1059264;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (98, '글래디에이터', '2000-05-04', '느낄수 있는가, 이 거대한 스펙터클의 전율을', '죽을 날이 머지않은 황제 마르쿠스 아우렐리우스는 막시무스를 총애하여 아들이 아닌 그에게 권력을 넘겨주기로 한다. 황제의 아들 코모두스는 이에 질투와 분노를 느껴 황제를 살해한다. 왕좌를 이어받은 코모두스는 막시무스와 그의 가족을 죽이라고 명령한다. 가족을 모두 잃고 겨우 살아남은 막시무스는 노예로 전락하고, 투기장의 검투사가 된다. 그에게 남은 건 오직 황제 코모두스에 대한 복수 뿐. 검투사로서 매 경기마다 승리로 이끌면서 살아남자 그의 명성은 날로 높아 간다. 그러던 어느 날 오래 전 사랑했던 황제의 누이 루실라를 다시 만나게 되는데...', 154, '15', 'RELEASED', 300.480000, 8.216000, 465361176, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 98 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 98 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 98 AND g.name = '모험';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '러셀 크로우', '/rsxGCRtPu42uKDJZlz7qknvz8h6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '러셀 크로우');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maximus', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 98 AND a.name = '러셀 크로우';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '호아킨 피닉스', '/u38k3hQBDwNX0VA22aQceDp9Iyv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '호아킨 피닉스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Commodus', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 98 AND a.name = '호아킨 피닉스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '코니 닐센', '/lvQypTfeH2Gn2PTbzq6XkT2PLmn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '코니 닐센');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lucilla', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 98 AND a.name = '코니 닐센';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Oliver Reed', '/dWfotc1X71wNCGyPO9hXpv8U9Gw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Oliver Reed');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Proximo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 98 AND a.name = 'Oliver Reed';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '리처드 해리스', '/lCvcVMuxrg1f5A8OMqY9AqkkcZR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리처드 해리스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marcus Aurelius', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 98 AND a.name = '리처드 해리스';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '리들리 스콧', '/zABJmN9opmqD4orWl3KSdCaSo7Q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '리들리 스콧');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 98 AND d.name = '리들리 스콧';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yemF0xxGU56Pf3JXxVr4C6kuKng.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 98;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vlAVk0rdG6oyZ8by6bkE9rFVACf.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 98;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (269509, '캔터빌의 유령', '2023-09-22', '', '', 89, '', 'RELEASED', 371.022000, 6.600000, 2000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 269509 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 269509 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 269509 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 269509 AND g.name = '판타지';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '스티븐 프라이', '/dH7GuUZ8QPM9RN99ak9KKOkSkdS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스티븐 프라이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sir Simon de Canterville (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 269509 AND a.name = '스티븐 프라이';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '휴 로리', '/akArncggHnusP5jxzMBKmJDRrMo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '휴 로리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Grim Reaper / Gardener / Swordsman / Monster / Old Duke (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 269509 AND a.name = '휴 로리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '프레디 하이모어', '/9larfGVg8ALIVFkr7cZzv4Emh1F.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '프레디 하이모어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Henry Duke of Cheshire (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 269509 AND a.name = '프레디 하이모어';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Emily Carey', '/cH93v8Ig7yaVh3QZCVsrDCXjkr1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Emily Carey');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Virginia Otis (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 269509 AND a.name = 'Emily Carey';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이멜다 스턴튼', '/95KKeFajyuRlqc65mBBKgXkXGpL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이멜다 스턴튼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mrs Umney (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 269509 AND a.name = '이멜다 스턴튼';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Kim Burdon', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Kim Burdon');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 269509 AND d.name = 'Kim Burdon';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dFu8oHN805ZRzpQZNOjkiLzMbep.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 269509;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vhbXuEonV3wc8k48qhucWrx49Fv.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 269509;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (588648, 'Dragonkeeper', '2024-04-11', '', '', 99, '', 'RELEASED', 218.548000, 7.404000, 5427272, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 588648 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 588648 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 588648 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 588648 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 588648 AND g.name = '판타지';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Lucía Pérez', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lucía Pérez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ping (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 588648 AND a.name = 'Lucía Pérez';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Mario Gas', '/rJfShkLP8AV9A2sgcTo9olSmJ14.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mario Gas');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Danzi (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 588648 AND a.name = 'Mario Gas';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Fernando Castro', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Fernando Castro');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Diao (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 588648 AND a.name = 'Fernando Castro';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Carlos de Luna', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Carlos de Luna');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wang Chao (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 588648 AND a.name = 'Carlos de Luna';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'José Gómez Adán', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'José Gómez Adán');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kwan (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 588648 AND a.name = 'José Gómez Adán';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Jian-Ping Li', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jian-Ping Li');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 588648 AND d.name = 'Jian-Ping Li';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Salvador Simó', '/gN3PDilh4Fu3OzLcKBVv0V1P80w.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Salvador Simó');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 588648 AND d.name = 'Salvador Simó';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hfdmvuLY8vADVthLNyn5EUO1ria.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 588648;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/h9YlRHAZWOWtGonllmj6JJg1FrE.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 588648;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1306764, '아웃사이드', '2024-10-17', '', '좀비 바이러스 사태에서 살아남기 위해 버려진 농가로 피신한 가족. 하지만 황량한 세상을 헤쳐 나가는 과정에서 수년간 감춰온 고통스러운 비밀이 드러나면서 큰 충격에 빠진다.', 131, '19', 'RELEASED', 202.126000, 5.900000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1306764 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1306764 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '시드 루세로', '/aQO18wSvyfIZUMKTUvk4ceEw2AT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시드 루세로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Francis', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1306764 AND a.name = '시드 루세로';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Beauty Gonzalez', '/3idu5IUTSEfJQ6usqyYmtrvzjld.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Beauty Gonzalez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Iris', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1306764 AND a.name = 'Beauty Gonzalez';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Marco Antonio Masa', '/4DdskufJNteNaJRO503YpOMMzob.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marco Antonio Masa');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Josh', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1306764 AND a.name = 'Marco Antonio Masa';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Aiden Patdu', '/40ofnFkkxTIDM2v748xs2DIrdCP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Aiden Patdu');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lucas', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1306764 AND a.name = 'Aiden Patdu';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'James Blanco', '/gOiW5CYWt2aIirl8ST31oak3yHS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'James Blanco');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Diego', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1306764 AND a.name = 'James Blanco';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Carlo Ledesma', '/8qMLTlk1YnOnSL4DLc25TamgdbH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Carlo Ledesma');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1306764 AND d.name = 'Carlo Ledesma';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pghYvzRA9BgeXguO1ndB9qpoqmx.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1306764;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fy5HuDMPAwiGtRQlRP0zqLN3zM4.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1306764;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (786892, '퓨리오사: 매드맥스 사가', '2024-05-22', '분노가 깨어나다', '문명 붕괴 45년 후, 황폐해진 세상 속 누구에게도 알려지지 않은 풍요가 가득한 녹색의 땅에서 자란 퓨리오사는 바이커 군단의 폭군 디멘투스의 손에 모든 것을 잃고 만다. 가족도 행복도 모두 빼앗기고 세상에 홀로 내던져진 퓨리오사는 반드시 고향으로 돌아가겠다는 어머니와의 약속을 지키기 위해 인생 전부를 건 복수를 시작하는데...', 149, '15', 'RELEASED', 244.289000, 7.500000, 172775791, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 786892 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 786892 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 786892 AND g.name = '모험';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '안야 테일러조이', '/qYNofOjlRke2MlJVihmJmEdQI4v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '안야 테일러조이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Furiosa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 786892 AND a.name = '안야 테일러조이';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '크리스 헴스워스', '/piQGdoIQOF3C1EI5cbYZLAW1gfj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 헴스워스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dementus', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 786892 AND a.name = '크리스 헴스워스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '톰 버크', '/9L2O1mAwFQcfEbaB5CHIZUvnqUW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 버크');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Praetorian Jack', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 786892 AND a.name = '톰 버크';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '알릴라 브라운', '/tcAQAzqk1z0PsVXqi8HODOVPQoY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '알릴라 브라운');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Young Furiosa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 786892 AND a.name = '알릴라 브라운';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '조지 셰프소브', '/cuOoCZShfvNrOvrWqH2dPyBfrZS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조지 셰프소브');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The History Man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 786892 AND a.name = '조지 셰프소브';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '조지 밀러', '/35NQ8HjFXQlGYDz9UkhT08lKl5C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조지 밀러');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 786892 AND d.name = '조지 밀러';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zaUFDdJidS4Nyyd6jb2Ok3Kq4Vo.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 786892;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wNAhuOZ3Zf84jCIlrcI6JhgmY5q.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 786892;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1014505, '극장판 오버로드 성왕국', '2024-09-20', '지극히 흉악한 정의, 왕림', '성왕녀 칼카가 통치하는 로블 성왕국은 길고 거대한 성벽을 쌓고 그 안에서 평화로운 시대를 구가해 왔다. 하지만, 갑자기 나타난 마황 얄다바오트와 아인 연합군의 침공으로 평화는 너무나도 쉽게 붕괴되고 말았다. 성기사 단장 레메디오스, 신관 단장 케랄트를 시작으로 성왕국은 전력을 모아 맞섰지만 얄다바오트와의 압도적인 힘의 차이에 손쓸 도리 없이 국가는 붕괴 위기에 직면하게 됐다. 레메디오스는 얄다바오트에게 대항할 힘을 얻기 위해 직접 성기사단과 종자 네이아를 이끌고 어떤 나라에 도움을 요청하러 갔다. 그 나라의 이름은 아인즈 울 고운 마도국. 성왕국의 사람들이 꺼림칙하게 여기는 언데드가 통치하는 이형의 국가였는데.', 136, '15', 'NOW_PLAYING', 225.421000, 7.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1014505 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1014505 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1014505 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1014505 AND g.name = '판타지';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '히노 사토시', '/8ZJIiwIVF2zDyyFr7oXewj0eEuu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '히노 사토시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ainz Ooal Gown / Momonga (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1014505 AND a.name = '히노 사토시';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '하라 유미', '/dbMtB3stkZarEbHSulpzXXp0un0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하라 유미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Albedo (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1014505 AND a.name = '하라 유미';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '加藤将之', '/1BKgxx1FXJ99WanpgWCBRG6YOHT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '加藤将之');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Demiurge (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1014505 AND a.name = '加藤将之';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '아오야마 요시노', '/18nwTfvgurEelSQqPKbMMtUnKja.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아오야마 요시노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Neia Baraja (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1014505 AND a.name = '아오야마 요시노';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '나바타메 히토미', '/jidfw5qDgZjC4TPY3YunJQxlEmr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나바타메 히토미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Remedios Custodio (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1014505 AND a.name = '나바타메 히토미';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '伊藤尚往', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '伊藤尚往');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1014505 AND d.name = '伊藤尚往';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9tQfPUNd1KA2u55zA81BNXrXuZu.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1014505;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hkJhGayONXn96CqIRM9GhWKnlCf.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1014505;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1042657, 'Latency', '2024-06-14', '', '', 94, '', 'RELEASED', 213.733000, 5.500000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1042657 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1042657 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1042657 AND g.name = '공포';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Sasha Luss', '/pviPtS13SzKiUCGIjBO4cUnQ2XE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sasha Luss');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hana', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1042657 AND a.name = 'Sasha Luss';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Alexis Ren', '/qYQi1B12afoIgbQxAQGT0fIpxtY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alexis Ren');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jen', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1042657 AND a.name = 'Alexis Ren';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Ava Caryofyllis', '/nZBnwdPshKxeqqjzUFVkMuITin7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ava Caryofyllis');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Young Girl (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1042657 AND a.name = 'Ava Caryofyllis';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Robert Coleby', '/uEKduzndAp23MNJqNHEeHzHABRg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Robert Coleby');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Landlord', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1042657 AND a.name = 'Robert Coleby';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Kelly B. Jones', '/q9dCfirS0zzOtYsdOCvmC4AHAp8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kelly B. Jones');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Officer #1', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1042657 AND a.name = 'Kelly B. Jones';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'James Croke', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'James Croke');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1042657 AND d.name = 'James Croke';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oeSUxCFa0LFsExzTvuz2wjaObyU.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1042657;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9GzQ4bT6gdeq4fKMrzpJLwx40sI.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1042657;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1215162, '죽음의 암살자 2', '2024-09-24', '', '총격 사건 후, 간호사 수잔은 심한 상처를 입은 의문의 남자 필립을 정성껏 돌본다. 어느 날, 필립을 죽이기 위해 무장한 갱들이 병원에 들이닥치고, 필립은 살아남기 위해 그들과 맞선다.', 85, '', 'RELEASED', 230.666000, 6.737000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1215162 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1215162 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1215162 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '장클로드 반담', '/7DP3bm3MS0qa0L8tBLHGebbCu6H.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '장클로드 반담');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Philip', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1215162 AND a.name = '장클로드 반담';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '재클린 페르난데즈', '/x7RQ5uI2WFaXOPW1kIe0yUQ0jbe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '재클린 페르난데즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vanessa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1215162 AND a.name = '재클린 페르난데즈';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Andrei Lenart', '/5n1S06vvL7YgurFYfG9QNgRV5yM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Andrei Lenart');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vlad Petrovic', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1215162 AND a.name = 'Andrei Lenart';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '피터 스토메어', '/5muzSVt66Qxc8KuVbq0phZIN9tj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '피터 스토메어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agent Holman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1215162 AND a.name = '피터 스토메어';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Talia Asseraf', '/w177HiELyQRAum0MpSrEheTqSvn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Talia Asseraf');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lydia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1215162 AND a.name = 'Talia Asseraf';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Valeri Milev', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Valeri Milev');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1215162 AND d.name = 'Valeri Milev';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hgA5hN3NjNNSTXYOmAI6KNKOzbp.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1215162;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wh1IhMWkW7u5c5bkzSGFylF9G8r.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1215162;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1357459, 'Tatsulok: Tatlo Magkasalo', '2024-10-11', '', '', 61, '', 'RELEASED', 260.141000, 6.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1357459 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1357459 AND g.name = '로맨스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Mariane Saint', '/8JaQnDOA5nBLr6TTUb8X02z05rg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mariane Saint');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Iza', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1357459 AND a.name = 'Mariane Saint';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Marlon Marcia', '/9LEfMCMhN0KX3XGANJggXLKx8fJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marlon Marcia');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Roland', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1357459 AND a.name = 'Marlon Marcia';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Skye Gonzaga', '/sU8yAC7mptg5argRh46ccaZAz2B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Skye Gonzaga');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Raquel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1357459 AND a.name = 'Skye Gonzaga';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Daniela Carolino', '/k9YKk2mX1D65p9bkyg8is7AgLHT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Daniela Carolino');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Myra', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1357459 AND a.name = 'Daniela Carolino';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Mianne Agualada', '/wJKOWmoZMgEoh96yWKuJ3AQ4XJS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mianne Agualada');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Doctor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1357459 AND a.name = 'Mianne Agualada';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Jojo Nadela', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jojo Nadela');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1357459 AND d.name = 'Jojo Nadela';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zcmPxGIBxxsGVyYuzNWPCWjlQ8X.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1357459;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/eFlx3fW8FHXOktGa7Tzy57RajtG.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1357459;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1226578, '롱레그스', '2024-05-31', '지난 10년간 가장 무서운 영화 ‘롱레그스’가 찾아온다.', 'FBI 요원 리 하커는 찾기 힘든 연쇄 살인범의 미해결 사건에 배정된 재능 있는 신입 요원이다. 사건이 복잡하고, 오컬트 관습과의 연관성을 밝혀내는 증거가 사라지면서, 하커는 무자비한 살인범과의 개인적 연관성을 발견하고, 그가 다시 공격하기 전에 그를 막기 위해 시간과 경주해야 한다.', 101, '15', 'NOW_PLAYING', 205.510000, 6.663000, 102469694, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1226578 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1226578 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마이카 먼로', '/x4yiKkMnCdf8g4eOrDoqla9FYEA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이카 먼로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agent Lee Harker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1226578 AND a.name = '마이카 먼로';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '니콜라스 케이지', '/iqqNNhPMrd1jMPWNiVACURaDwii.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '니콜라스 케이지');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Longlegs', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1226578 AND a.name = '니콜라스 케이지';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '블레어 언더우드', '/3e6my8gZYS3L2OP4ZTN1psQDYIT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '블레어 언더우드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agent Carter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1226578 AND a.name = '블레어 언더우드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '얼리샤 윗', '/vQ2McAjHjY3A7oDrPMx6aLSsvkW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '얼리샤 윗');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ruth Harker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1226578 AND a.name = '얼리샤 윗';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '미셸 최 리', '/WOlWIDRFwHdNWO3y2wXuYW89ug.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미셸 최 리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agent Browning', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1226578 AND a.name = '미셸 최 리';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '오즈 퍼킨스', '/olBiDWBll8xlfcvcPUusODun6cP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '오즈 퍼킨스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1226578 AND d.name = '오즈 퍼킨스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/maGzdLxWjgLgr4iOZ26Rfpst29A.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1226578;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4CmxmxgiFdTaNmsscochV9rBcnF.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1226578;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (507241, '더 킬러스 게임', '2024-09-12', '승리는 실행에 달려 있다.', '최고의 청부 살인업자 조 플러드는 말기 질환 진단을 받자, 스스로에게 청부를 의뢰하며 자신의 운명을 직접 결정하기로 한다. 그러나 그가 고용한 암살자들이 그의 전 여자친구까지 노리게 되면서, 조는 동료 암살자들의 공격을 막아내고 인생의 사랑을 되찾기 위해 시간과 싸워야 한다.', 104, '', 'RELEASED', 210.336000, 6.500000, 5090881, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 507241 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 507241 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 507241 AND g.name = '범죄';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '데이브 바티스타', '/ymn6iQBJbQZN6BYI60YJDXVP4gF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이브 바티스타');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joe Flood', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 507241 AND a.name = '데이브 바티스타';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '소피아 부텔라', '/lGFhhjcjARQCM8AiGidyyyfDowh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '소피아 부텔라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maize Arnaud', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 507241 AND a.name = '소피아 부텔라';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '테리 크루즈', '/pxTY4SglLo5hFcMH00MxPeC5u55.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '테리 크루즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Creighton Lovedahl', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 507241 AND a.name = '테리 크루즈';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '폼 클레멘티에프', '/hfUKAI2kXTMMWjno0i4sLPJud5N.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '폼 클레멘티에프');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Antoinette', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 507241 AND a.name = '폼 클레멘티에프';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '벤 킹슬리', '/vQtBqpF2HDdzbfXHDzR4u37i1Ac.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '벤 킹슬리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zvi Rabinowitz', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 507241 AND a.name = '벤 킹슬리';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'J.J. Perry', '/57assDPZceZ4x7YWrkPE5FqVn1f.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'J.J. Perry');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 507241 AND d.name = 'J.J. Perry';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4bKlTeOUr5AKrLky8mwWvlQqyVd.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 507241;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zGLQmrmIB56kMZPnzqReIOBay1B.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 507241;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (569094, '스파이더맨: 어크로스 더 유니버스', '2023-05-31', '한 명을 구할 것인가, 모두를 구할 것인가', '여러 성장통을 겪으며 새로운 스파이더맨이 된 마일스 모랄레스. 그 앞에 다른 평행세계의 스파이더우먼 그웬이 다시 나타난다. 모든 차원의 멀티버스 속 스파이더맨들을 만나게 되지만, 질서에 대한 신념이 부딪히며 예상치 못한 균열이 생기는데… 상상 그 이상을 넘어서는 멀티버스의 세계가 열린다!', 140, 'All', 'RELEASED', 304.253000, 8.356000, 690897910, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 569094 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 569094 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 569094 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 569094 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '셔믹 무어', '/ovUKfVOwJ7CadEHaG3NDsfA5xRq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '셔믹 무어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miles Morales (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 569094 AND a.name = '셔믹 무어';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '헤일리 스타인펠드', '/dxSDWkiVaC6JYjrV3XRAZI7HOSS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헤일리 스타인펠드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gwen Stacy (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 569094 AND a.name = '헤일리 스타인펠드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '브라이언 타이리 헨리', '/2MsJh0bpyzwvOUnXOltHp3j85Pb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브라이언 타이리 헨리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jeff Morales (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 569094 AND a.name = '브라이언 타이리 헨리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '로런 벨레스', '/98BvmTJCZHx0jPv0oNcv04Jkmfb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로런 벨레스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rio Morales (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 569094 AND a.name = '로런 벨레스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제이크 존슨', '/3UNfW2qZgRkW81neNVfQvaRC92K.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이크 존슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Peter B. Parker (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 569094 AND a.name = '제이크 존슨';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '켐프 파워스', '/oE4TcENMQw25t4UTAjrnl0m4JyH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '켐프 파워스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 569094 AND d.name = '켐프 파워스';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '저스틴 톰슨', '/mRMi8Q2fmlfbDYkE7A63gzFtGsZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '저스틴 톰슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 569094 AND d.name = '저스틴 톰슨';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '조아킴 도스 샌토스', '/w45GPb3cW6TqPw4FxB5Hc6zzAwx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조아킴 도스 샌토스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 569094 AND d.name = '조아킴 도스 샌토스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lMWTlGr9jVUC18T515hPRKym5QQ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 569094;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kVd3a9YeLGkoeR50jGEXM6EqseS.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 569094;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (76600, '아바타: 물의 길', '2022-12-14', '판도라의 바다, 새로운 세계가 펼쳐진다', '판도라 행성에서 제이크 설리와 네이티리가 이룬 가족이 겪게 되는 무자비한 위협과 살아남기 위해 떠나야 하는 긴 여정과 전투, 그리고 견뎌내야 할 상처에 대한 이야기를 그렸다. 살아남기 위해 설리 가족이 숲에서 바다로 터전을 옮기면서 겪게 되는 화합의 과정, 그리고 곳곳에서 도사리는 새로운 위협까지 역경 속에서 더 아름답게 펼쳐진다.', 192, '', 'RELEASED', 217.727000, 7.620000, 2320250281, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 76600 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 76600 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 76600 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '샘 워싱턴', '/mflBcox36s9ZPbsZPVOuhf6axaJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '샘 워싱턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jake Sully', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 76600 AND a.name = '샘 워싱턴';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '조 샐다나', '/snQ1rfO9Bb2LRG9MAOQnn3JXVHy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조 샐다나');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Neytiri', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 76600 AND a.name = '조 샐다나';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '시고니 위버', '/wTSnfktNBLd6kwQxgvkqYw6vEon.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시고니 위버');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kiri', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 76600 AND a.name = '시고니 위버';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '스티븐 랭', '/xEBuFWrCKDQD6r6CZK71GYIc4UW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스티븐 랭');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Colonel Miles Quaritch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 76600 AND a.name = '스티븐 랭';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '케이트 윈슬렛', '/e3tdop3WhseRnn8KwMVLAV25Ybv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케이트 윈슬렛');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ronal', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 76600 AND a.name = '케이트 윈슬렛';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '제임스 카메론', '/9NAZnTjBQ9WcXAQEzZpKy4vdQto.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '제임스 카메론');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 76600 AND d.name = '제임스 카메론';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/z56bVX93oRG6uDeMACR7cXCnAbh.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 76600;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8rpDcsfLJypbO6vREc0547VKqEv.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 76600;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (975022, '유아 킬링 미', '2023-04-07', '', '꿈에 그리던 아이비리그 대학교 대기자 명단에 올라와 있는 이든은 고등학교 졸업을 앞두고 친구 자라와 함께 대학교에 입학하기 위해 계획을 세운다. 부유하고 인기 있는 동급생 슈로더에게 접근하여 그의 국회의원 아버지에게 추천서를 받는 것이다. 하지만 이든의 요청에도 ''슈로더의 반응은 시큰둥하고 이든은 마지못해  슈로더의 저택에서 열리는 파티에 참석하기로 한다. 파티에서 슈로더의 친구 구치가 기괴한 행동을 하는 것을 목격하고, 그의 휴대폰을 손에 넣게 된다. 하지만 이 휴대폰에서 실종된 동급생의 흔적을 발견하면서 예상치 못한 상황에 휘말리게 되는데...', 95, '', 'RELEASED', 181.771000, 5.900000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 975022 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 975022 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 975022 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'McKaley Miller', '/qOOtarE3Qo42LySHveOPl38s1bs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'McKaley Miller');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eden', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 975022 AND a.name = 'McKaley Miller';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '더멋 멀로니', '/oWQFwlkRWl9xmuRDI5pHu4ZKnL8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '더멋 멀로니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Congressman Schroder', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 975022 AND a.name = '더멋 멀로니';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Anne Heche', '/65LVuA01bmKCmr8yqY2Ae3IgeC4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Anne Heche');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Astrid', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 975022 AND a.name = 'Anne Heche';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Wil Deusner', '/uIo2SXuel3aeVRq6NX3AivuWCo5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Wil Deusner');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gooch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 975022 AND a.name = 'Wil Deusner';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Brice Anthony Heller', '/df4FcjRlRoqE8Cxejs7IHAckiMD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Brice Anthony Heller');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Schroder', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 975022 AND a.name = 'Brice Anthony Heller';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Jerren Lauder', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jerren Lauder');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 975022 AND d.name = 'Jerren Lauder';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Beth Hanna', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Beth Hanna');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 975022 AND d.name = 'Beth Hanna';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tAnwQKYkRlXS6Lgaq5XQ7JqS58x.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 975022;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/cX3Vs8pVD2FbFuFPkF7OMgswmq7.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 975022;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (762509, '무파사: 라이온 킹', '2024-12-18', '하나의 왕좌, 엇갈린 운명', '길을 잃고 혼자가 된 새끼 사자 ‘무파사’는 광활한 야생을 떠돌던 중 왕의 혈통이자 예정된 후계자 ‘타카(스카)’와 우연히 만나게 된다. 마치 친형제처럼 끈끈한 우애를 나누며 함께 자란 ‘무파사’와 ‘타카’는 운명을 개척하기 위해 거대한 여정을 함께 떠난다. 한 치 앞을 알 수 없는 적들의 위협 속에서 두 형제의 끈끈했던 유대에 금이 가기 시작하고 예상치 못한 위기까지 맞닥뜨리게 되는데…', 0, '', 'UPCOMING', 184.637000, 0.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 762509 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 762509 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 762509 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '에런 피어', '/z2cMMZyWzv5ztT6pFdAAjB3u7CQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에런 피어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mufasa (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762509 AND a.name = '에런 피어';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '케빈 해리슨 주니어', '/bQC7SUnUiLw2wxnXGYr9tm7wDLW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케빈 해리슨 주니어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Taka (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762509 AND a.name = '케빈 해리슨 주니어';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '티파니 분', '/9LwqRFdSzxVtnutDUg98YLq0bSz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '티파니 분');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sarabi (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762509 AND a.name = '티파니 분';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Kagiso Lediga', '/nfqx3CqFVsAMelk6ry560SuN7Y0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kagiso Lediga');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Young Rafiki (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762509 AND a.name = 'Kagiso Lediga';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Preston Nyman', '/eidKvLDCRw68tG3CN6fGhvHUnW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Preston Nyman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zazu (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762509 AND a.name = 'Preston Nyman';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '배리 젠킨스', '/6nld5eQwiJmuLmyesk4EUeCaoo3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '배리 젠킨스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 762509 AND d.name = '배리 젠킨스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1VUExee8iFohFTwYVi4IOArYyaM.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 762509;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/c6nouvFYnmNO50WQDLcKMI3p0jA.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 762509;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (155, '다크 나이트', '2008-07-16', '이 도시에 정의는 죽었다', '범죄와 부정부패를 제거하여 고담시를 지키려는 배트맨. 그는 짐 고든 형사와 패기 넘치는 고담시 지방 검사 하비 덴트와 함께 도시를 범죄 조직으로부터 영원히 구원하고자 한다. 세 명의 의기투합으로 위기에 처한 악당들이 모인 자리에 보라색 양복을 입고 얼굴에 짙게 화장을 한 괴이한 존재가 나타나 배트맨을 죽이자는 사상 초유의 제안을 한다. 그는 바로 어떠한 룰도, 목적도 없는 사상 최악의 악당 미치광이 살인광대 조커. 배트맨을 죽이고 고담시를 끝장내버리기 위한 조커의 광기 어린 행각에 도시는 혼란에 빠지는데...', 152, '15', 'RELEASED', 191.301000, 8.516000, 1004558444, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 155 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 155 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 155 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 155 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '크리스찬 베일', '/7Pxez9J8fuPd2Mn9kex13YALrCQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스찬 베일');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruce Wayne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 155 AND a.name = '크리스찬 베일';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '히스 레저', '/p2z2bURSg7nuMsN9P2s61e2RvNz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '히스 레저');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 155 AND a.name = '히스 레저';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '에런 엑하트', '/6rI3cYhdxOaOFSRB4C29MalpwDC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에런 엑하트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Harvey Dent', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 155 AND a.name = '에런 엑하트';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마이클 케인', '/bVZRMlpjTAO2pJK6v90buFgVbSW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 케인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alfred', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 155 AND a.name = '마이클 케인';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '메기 질렌할', '/vsfkWdYWmA9CpzMHTJzrFxlDnEZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '메기 질렌할');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rachel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 155 AND a.name = '메기 질렌할';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '크리스토퍼 놀란', '/xuAIuYSmsUzKlUMBFGVZaWsY3DZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스토퍼 놀란');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 155 AND d.name = '크리스토퍼 놀란';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/f6dNinWX8rBM79JXKcShkfSh2oA.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 155;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oOv2oUXcAaNXakRqUPxYq5lJURz.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 155;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (929563, '빅 시티 그린 무비: 우주방학', '2024-06-06', '', '짜릿한 모험을 즐기는 크리켓 그린은 자신의 시골 가족을 속여 우주로 ''자동차 여행''을 떠나고, 그 결과 빅 시티 전체가 위험에 빠진다.', 82, '12', 'RELEASED', 199.464000, 7.900000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 929563 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 929563 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 929563 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 929563 AND g.name = '음악';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 929563 AND g.name = 'TV 영화';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Chris Houghton', '/zHzNLynNwXbAVqmU6F1hWG9sLPk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Chris Houghton');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cricket Green (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 929563 AND a.name = 'Chris Houghton';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '린제이 토렌스', '/hahOfW8PG20pTXtNF8FtZd5pqd4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '린제이 토렌스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tilly Green (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 929563 AND a.name = '린제이 토렌스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '밥 졸스', '/ohczCcTm5u8Grlf5KGxjDZiQkI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '밥 졸스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bill Green (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 929563 AND a.name = '밥 졸스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '아티미스 페브다니', '/ctwVQYbcOuTIQJ866fi3AhzqKBM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아티미스 페브다니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alice ''Gramma'' Green (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 929563 AND a.name = '아티미스 페브다니';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '웬디 매클렌던커비', '/d8VKC8Ms3u9XiW4e4jsy2grP02d.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '웬디 매클렌던커비');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nancy Green (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 929563 AND a.name = '웬디 매클렌던커비';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Anna O''Brian', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Anna O''Brian');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 929563 AND d.name = 'Anna O''Brian';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rAzrGHgBl8m32MC2RlrwlnErB7t.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 929563;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hu6bwaSRG8GZwH3yEVtRxrgAnjq.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 929563;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (122, '반지의 제왕: 왕의 귀환', '2003-12-17', '곤도르의 진정한 왕이 돌아왔다', '사우론이 인간들의 마지막 요새인 곤도르를 향해 야욕을 드러내고 있는 한편, 아라곤은 쇠락해가고 있는 곤도르의 재건을 위해 왕위 계승을 신중하게 결정지어야만 하는 상황. 이제 중간대륙의 미래는 그의 어깨에 달려있는 것. 사우론이 이끄는 어둠의 군대와의 마지막 전투를 위해 간달프는 곤도르에 흩어져 있던 병사들을 모으고, 로한의 왕 세오덴에게 도움을 받기도 하지만 사우론의 군대에 비하면 열세를 면치 못한다. 그러나 그들은 중간대륙을 사우론의 야욕으로부터 지키려는 사명감과, 마지막 반지 운반자에게 임무를 끝낼 기회를 주기 위해 어둠의 군대를 향해 돌진하게 되는데...', 199, '12', 'RELEASED', 189.399000, 8.483000, 1118888979, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 122 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 122 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 122 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '일라이저 우드', '/7UKRbJBNG7mxBl2QQc5XsAh6F8B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '일라이저 우드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frodo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122 AND a.name = '일라이저 우드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이안 맥켈런', '/5cnnnpnJG6TiYUSS7qgJheUZgnv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이안 맥켈런');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gandalf', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122 AND a.name = '이안 맥켈런';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '비고 모텐슨', '/vH5gVSpHAMhDaFWfh0Q7BG61O1y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '비고 모텐슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Aragorn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122 AND a.name = '비고 모텐슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '숀 애스틴', '/ywH1VvdwqlcnuwUVr0pV0HUZJQA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '숀 애스틴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sam', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122 AND a.name = '숀 애스틴';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '앤디 서키스', '/eNGqhebQ4cDssjVeNFrKtUvweV5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앤디 서키스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gollum / Smeagol', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122 AND a.name = '앤디 서키스';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '피터 잭슨', '/bNc908d59Ba8VDNr4eCcm4G1cR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피터 잭슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 122 AND d.name = '피터 잭슨';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/n8BPIRqvj1SdTRND828ANXhmSng.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 122;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5JrZAtyk3LwiiAWLW0kwz41XZJC.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 122;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (402431, '위키드', '2024-11-20', '마법 같은 운명의 시작', '자신의 진정한 힘을 아직 발견하지 못한 엘파바와 자신의 진정한 본성을 발견하지 못한 글린다, 전혀 다른 두 인물이 우정을 쌓아가며 맞닥뜨리는 예상치 못한 위기와 모험을 그린 이야기', 160, 'ALL', 'NOW_PLAYING', 325.040000, 0.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 402431 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 402431 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 402431 AND g.name = '로맨스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '신시아 에리보', '/4cpvSGrJg2hwddkTPMyDKj0c3O.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '신시아 에리보');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elphaba', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 402431 AND a.name = '신시아 에리보';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '아리아나 그란데', '/cslFyOh3sTWDeWXgsxmjJ1uqE0P.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아리아나 그란데');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Galinda / Glinda', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 402431 AND a.name = '아리아나 그란데';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '조나단 베일리', '/mZNzekZo8eaHMuXKgDTNLp0EvYM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조나단 베일리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fiyero', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 402431 AND a.name = '조나단 베일리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '양자경', '/1X64WNBSitgqUPcZXxMoIo7143W.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '양자경');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Madame Morrible', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 402431 AND a.name = '양자경';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제프 골드블룸', '/o3PahuK7OmCI0RAQUq38CUBWYZ9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제프 골드블룸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Wonderful Wizard of Oz', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 402431 AND a.name = '제프 골드블룸';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '존 M. 추', '/yuspEo9AXGbdCYcrWfnbhG7U5Jo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '존 M. 추');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 402431 AND d.name = '존 M. 추';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4FKnORrMQZtvk96YM4zdJLDwC9E.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 402431;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ljNVBysYnPCwLqP3HXL7T1thZxu.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 402431;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (269149, '주토피아', '2016-02-11', '정글의 도시에 오신것을 환영합니다', '어릴 적부터 경찰이 꿈이었던 토끼 주디 홉스는 주변의 만류에도 불구하고 경찰학교에 들어가 당당히 수석으로 졸업한다. 온갖 동물들이 모여 살며 교양 있고 세련된 라이프 스타일을 주도하는 대도시 주토피아에 자원한 주디는 의욕을 안고 출근하지만, 상사는 작은 토끼라는 이유로 주차관리 같은 소일거리만 시킨다. 따분하게 업무를 보던 주디는 아이스크림 불법 판매를 일삼는 사기꾼 여우 닉 와일드를 알게 되고, 그와 함께  48시간 안에 주토피아에서 벌어지고 있는 연쇄 실종사건을 추적해야만 하는데...', 108, 'ALL', 'RELEASED', 145.193000, 7.800000, 1023784195, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 269149 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 269149 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 269149 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 269149 AND g.name = '코미디';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제이슨 베이트먼', '/8e6mt0vGjPo6eW52gqRuXy5YnfN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이슨 베이트먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nick Wilde (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 269149 AND a.name = '제이슨 베이트먼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '지니퍼 굿윈', '/xOCA2WN5MRfXmJmlzEbFEhIbfIQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '지니퍼 굿윈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Judy Hopps (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 269149 AND a.name = '지니퍼 굿윈';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이드리스 엘바', '/be1bVF7qGX91a6c5WeRPs5pKXln.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이드리스 엘바');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chief Bogo (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 269149 AND a.name = '이드리스 엘바';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제니 슬레이트', '/iNpXig5Djkh5moYG4TCekIATs5B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제니 슬레이트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Assistant Mayor Dawn Bellwether (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 269149 AND a.name = '제니 슬레이트';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Nate Torrence', '/yT9o149xPygdY0NsF9sNgiQwuru.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nate Torrence');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Officer Benjamin Clawhauser (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 269149 AND a.name = 'Nate Torrence';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '바이런 하워드', '/ePJXkxrD44nM0VB7Xx9Q4ityzfT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '바이런 하워드');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 269149 AND d.name = '바이런 하워드';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Rich Moore', '/oIAmkZf9LuJuMqR8zSchoD3FJT8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Rich Moore');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 269149 AND d.name = 'Rich Moore';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fZcab1yiKXsjx3S8D4KRHZsnMGC.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 269149;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/p2fRZzxla6NoRbIH2KOZq0gHb5S.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 269149;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (299536, '어벤져스: 인피니티 워', '2018-04-25', '영화의 역사를 뒤바꿀 마블의 클라이맥스!', '타노스는 6개의 인피니티 스톤을 획득해 신으로 군림하려 한다. 그것은 곧 인류의 절반을 학살해 우주의 균형을 맞추겠다는 뜻. 타노스는 닥터 스트레인지가 소유한 타임 스톤, 비전의 이마에 박혀 있는 마인드 스톤을 차지하기 위해 지구를 침략한다. 아이언맨과 스파이더맨은 가디언즈 오브 갤럭시의 멤버들과 타노스를 상대한다. 지구에선 캡틴 아메리카, 완다, 블랙 위도우, 블랙 팬서 등이 비전을 지키기 위해 뭉친다.', 149, '12', 'RELEASED', 217.298000, 8.243000, 2052415039, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 299536 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 299536 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 299536 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '로버트 다우니 주니어', '/5qHNjhtjMD4YWH3UP0rm4tKwxCL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 다우니 주니어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tony Stark / Iron Man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299536 AND a.name = '로버트 다우니 주니어';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '크리스 에반스', '/3bOGNsHlrswhyW79uvIHH1V43JI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 에반스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Steve Rogers / Captain America', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299536 AND a.name = '크리스 에반스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '크리스 헴스워스', '/piQGdoIQOF3C1EI5cbYZLAW1gfj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 헴스워스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Thor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299536 AND a.name = '크리스 헴스워스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '조쉬 브롤린', '/sX2etBbIkxRaCsATyw5ZpOVMPTD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조쉬 브롤린');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Thanos', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299536 AND a.name = '조쉬 브롤린';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마크 러팔로', '/5GilHMOt5PAQh6rlUKZzGmaKEI7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마크 러팔로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruce Banner / Hulk', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299536 AND a.name = '마크 러팔로';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '안소니 루소', '/xbINBnWn28YygYWUJ1aSAw0xPRv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '안소니 루소');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 299536 AND d.name = '안소니 루소';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '조 루소', '/o0OXjFzL10jCy89iAs7UzzSbyoK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조 루소');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 299536 AND d.name = '조 루소';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kmP6viwzcEkZeoi1LaVcQemcvZh.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 299536;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mDfJG3LC3Dqb67AZ52x3Z0jU0uB.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 299536;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (346698, '바비', '2023-07-19', '바비는 무엇이든 될 수 있어', '원하는 무엇이든 될 수 있는 바비랜드에서 살아가던 바비가 현실 세계와 이어진 포털의 균열을 발견하게 되고, 이를 해결하기 위해 켄과 예기치 못한 여정을 떠나면서 펼쳐지는 이야기', 114, '12', 'RELEASED', 184.978000, 7.007000, 1445638421, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 346698 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 346698 AND g.name = '모험';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마고 로비', '/euDPyqLnuwaWMHajcU3oZ9uZezR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마고 로비');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Barbie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 346698 AND a.name = '마고 로비';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '라이언 고슬링', '/lyUyVARQKhGxaxy0FbPJCQRpiaW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '라이언 고슬링');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ken', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 346698 AND a.name = '라이언 고슬링';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '아메리카 페레라', '/7F84Lh2lKpvkM3EiOvqqvlOmw93.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아메리카 페레라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gloria', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 346698 AND a.name = '아메리카 페레라';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '아리아나 그린블랫', '/3Y3Xk8jwE1Ju0zIn31zBMuD7Fkn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아리아나 그린블랫');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sasha', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 346698 AND a.name = '아리아나 그린블랫';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이사 레이', '/yGnwkmwA0hJsVx2qzImxsoRSelS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이사 레이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Barbie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 346698 AND a.name = '이사 레이';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '그레타 거윅', '/3H0xzU12GTNJyQTpGysEuI9KyiQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '그레타 거윅');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 346698 AND d.name = '그레타 거윅';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/h3mUJ9WEJ8PzA450ad4hrjsaiqG.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 346698;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ctMserH8g2SeOAnCw5gFjdQF8mo.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 346698;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (989662, '어 디프런트 맨', '2024-08-24', '', '', 112, '', 'RELEASED', 197.953000, 7.386000, 1169365, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 989662 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 989662 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 989662 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 989662 AND g.name = '공포';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '세바스찬 스탠', '/nKZgixTbHFXpkzzIpMFdLX98GYh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '세바스찬 스탠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Edward Lemuel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 989662 AND a.name = '세바스찬 스탠';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '레나테 레인스베', '/wAXYfmwSWBb885WYejXcVqNBBHO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레나테 레인스베');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ingrid Vold', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 989662 AND a.name = '레나테 레인스베';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Adam Pearson', '/49QdMfuyzmhIDsyMPk0suOCEdip.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Adam Pearson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Oswald', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 989662 AND a.name = 'Adam Pearson';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Miles G. Jackson', '/3RK7Ze3Z83kgcl93gUTqgKQURkx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Miles G. Jackson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sean', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 989662 AND a.name = 'Miles G. Jackson';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Patrick Wang', '/oj8vjG3wZ1ZY3NIUc4SGuLY606R.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Patrick Wang');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Director', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 989662 AND a.name = 'Patrick Wang';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Aaron Schimberg', '/h3B3m62HD1YAyky3gWEIvOB7FN0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Aaron Schimberg');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 989662 AND d.name = 'Aaron Schimberg';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lZZKTEvo92u1J5pm7QoEA5yN3du.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 989662;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bv9tOAIACAdQioCs80dKytYV3G7.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 989662;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (929590, '시빌 워: 분열의 시대', '2024-04-10', '', '극단적 분열로 나눠진 세상, 역사상 최악의 미국 내전 한복판에서 숨막히는 전쟁의 순간들을 생생하게 담아낸 영화', 110, '15', 'RELEASED', 233.617000, 6.909000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 929590 AND g.name = '전쟁';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 929590 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 929590 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '커스틴 던스트', '/5dI5s8Oq2Ook5PFzTWMW6DCXVjm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '커스틴 던스트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lee', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 929590 AND a.name = '커스틴 던스트';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '바그네르 모라', '/6gcfwvOueJKhDpTP9KLGuWz0Hk4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '바그네르 모라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 929590 AND a.name = '바그네르 모라';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '케일리 스패니', '/nquUc6o2dK4Pg4zjvl2HmZOfiRS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케일리 스패니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jessie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 929590 AND a.name = '케일리 스패니';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '스티븐 맥킨리 헨더슨', '/z2weSPo4sdMNj47tP5o0me41r2z.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스티븐 맥킨리 헨더슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sammy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 929590 AND a.name = '스티븐 맥킨리 헨더슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '넬슨 리', '/3zKvaCGrZnxQLnlUxnCITeMp86K.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '넬슨 리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tony', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 929590 AND a.name = '넬슨 리';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '알렉스 가랜드', '/qSWzYnDw68xm4i5xprH9BwQ6q25.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '알렉스 가랜드');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 929590 AND d.name = '알렉스 가랜드';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/t2RpGQOvemrV7NtbEyRWiy9tYA0.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 929590;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/en3GU5uGkKaYmSyetHV4csHHiH3.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 929590;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (567811, '10 라이브즈', '2024-04-18', '어디서도 본 적 없는 냥아치의 환생!', '9번째 냥생을 살고 있는 거만한 고양이 ‘베킷’은  완벽한 집사 ‘로즈’의 사랑 덕분에 더할 나위 없이 행복한 냥생을 보내던 중  어이없는 사고로 마지막 목숨을 잃게 된다.  천국의 천사에게 원래의 삶으로 되돌아가게 해달라고  간절하게 빌어 다시 한번 목숨을 얻게 되지만 조건이 하나 있었는데?!  고양이가 아닌 엉뚱한 동물로 환생하게 되는 ‘베킷’은  과연 ‘로즈’의 품으로 다시 돌아갈 수 있을까?!', 87, 'ALL', 'RELEASED', 221.464000, 8.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 567811 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 567811 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 567811 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 567811 AND g.name = '판타지';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Mo Gilligan', '/i6heWKdRr6QJYO9VZ3ag2kFsE9H.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mo Gilligan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Beckett (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 567811 AND a.name = 'Mo Gilligan';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '시몬 애슐리', '/NoWUSMGBrQrX23XK7eVjHlfaqY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시몬 애슐리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rose (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 567811 AND a.name = '시몬 애슐리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '소피 오코네도', '/fpqohSUUSs1hjc9aHo5x6ypDr5Y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '소피 오코네도');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Grace (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 567811 AND a.name = '소피 오코네도';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Zayn Malik', '/nzCk09tN15NOMpKPoCwegcJnx3j.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Zayn Malik');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kirk / Cameron (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 567811 AND a.name = 'Zayn Malik';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Dylan Llewellyn', '/1NAgIljZXDGwTrzKEQEIWNqGSfe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Dylan Llewellyn');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Larry (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 567811 AND a.name = 'Dylan Llewellyn';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Christopher Jenkins', '/vAP7L1vMOhm7LArXGESmL7WsPD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Christopher Jenkins');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 567811 AND d.name = 'Christopher Jenkins';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/m4WQh0iMxTnMbsI31GPUcAlzSxO.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 567811;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/FzntbxhtPGp5gVmie16ry3k7Ow.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 567811;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (138843, '컨저링', '2013-07-18', '믿을 수 없겠지만… 이것은 실화다!', '1971년 로드 아일랜드, 해리스빌. 페론 가족은 꿈에 그리던 새 집으로 이사를 간다. 물론 1863년에 그 집에서 일어난 끔찍한 살인 사건을 전혀 몰랐다. 또한 그 이후에 일어난 많은 무서운 사건에 대해서도 알지 못했다. 이 가족은 그 집에서 겪은 일이 너무 무서워서 한 마디라도 외부에 언급하는 것을 거절했었다. 지금까지는…', 112, '15', 'RELEASED', 140.141000, 7.500000, 320415166, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 138843 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 138843 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '패트릭 윌슨', '/tc1ezEfIY8BhCy85svOUDtpBFPt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '패트릭 윌슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ed Warren', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 138843 AND a.name = '패트릭 윌슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '베라 파미가', '/k4hf7VitJ38amqwYURZIvxNw9lJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '베라 파미가');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lorraine Warren', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 138843 AND a.name = '베라 파미가';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Lili Taylor', '/if8rbaj1TXlzg0Oq4g0bpU3b5rh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lili Taylor');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Carolyn Perron', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 138843 AND a.name = 'Lili Taylor';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '론 리빙스턴', '/pr5CjWnkaf5WKTIYh8wtNufjmyb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '론 리빙스턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Roger Perron', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 138843 AND a.name = '론 리빙스턴';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '맥켄지 포이', '/6n8yZKJ3YHkm4Ds3zNjJpankHUk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '맥켄지 포이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cindy Perron', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 138843 AND a.name = '맥켄지 포이';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '제임스 완', '/mMYVuGyP74c7sFJHFrc5YPwj4Wd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '제임스 완');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 138843 AND d.name = '제임스 완';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pWpTToZ32bG09PaZ1rvYG5mpOyV.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 138843;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aQCCpAIdWAp6wyFgjMry4okwrZo.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 138843;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1066262, '더 컨버트', '2024-03-14', '평화를 위한 싸움. 전쟁에 휩싸인 마음.', '병사에서 평신도 설교자로 변신한 먼로는 첫 번째 영국 이주민들에게 설교하기 위해 뉴질랜드로 오지만, 강력한 추장 마이아누이에 의해 다른 목적을 섬기도록 변화된다.', 119, '', 'RELEASED', 181.344000, 6.200000, 692018, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1066262 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1066262 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '가이 피어스', '/vTqk6Nh3WgqPubkS23eOlMAwmwa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '가이 피어스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Thomas Munro', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1066262 AND a.name = '가이 피어스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Tioreore Ngatai-Melbourne', '/ap57F4wZtopJ38ORdjleC0yVg6R.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tioreore Ngatai-Melbourne');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rangimai', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1066262 AND a.name = 'Tioreore Ngatai-Melbourne';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Antonio Te Maioha', '/zqefmIKmQK4z3sixxJIX0haLY7n.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Antonio Te Maioha');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maianui', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1066262 AND a.name = 'Antonio Te Maioha';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jacqueline McKenzie', '/hH93PT4yKLtrXyBVw7AF7DbCh3p.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jacqueline McKenzie');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Charlotte', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1066262 AND a.name = 'Jacqueline McKenzie';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Te Kohe Tuhaka', '/uZOpFSMX3XRuU6JOja3MKZHlaCP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Te Kohe Tuhaka');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Captive Warrior', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1066262 AND a.name = 'Te Kohe Tuhaka';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '리 타마호리', '/lkivtT9U7gLXVnhq5qF9GL3k7NN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '리 타마호리');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1066262 AND d.name = '리 타마호리';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mR8sjStC6M4kQRC7cPrCfv4XzgD.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1066262;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tqSg1hHiSWhHAhnjDhhevaFGsP0.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1066262;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1160018, '킬', '2024-07-03', '1명의 특수 요원, 40명의 무장 강도, 52개의 무기!', '질주하는 야간열차에 잠입한 무장 강도 집단.열차 승객들을 구하기 위해 나선 특수 요원. 문, 커튼, 손잡이. 손에 잡히는 모든 것이 무기가 된다!  40명의 빌런, 52개의 무기, 9번의 위기! 용서도, 자비도 없다! 짜릿하고 무자비한 복수가 시작된다!', 105, '19', 'RELEASED', 224.036000, 7.100000, 5400000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1160018 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1160018 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1160018 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1160018 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Lakshya Lalwani', '/iabAj9GCIkGnAMvzyIvdUXeCPTo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lakshya Lalwani');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Amrit Rathod', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1160018 AND a.name = 'Lakshya Lalwani';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Raghav Juyal', '/dX1hoTwnZnT8qnFIsXxoDTRgoDt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Raghav Juyal');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fani', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1160018 AND a.name = 'Raghav Juyal';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Tanya Maniktala', '/hW0q6MjqGzPEZKx6OftGcvxeheo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tanya Maniktala');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tulika Singh', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1160018 AND a.name = 'Tanya Maniktala';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Abhishek Chauhan', '/4AlRwGSxWfcJdG0T65NuMh43zs3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Abhishek Chauhan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Viresh Chatwal / Bhukhan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1160018 AND a.name = 'Abhishek Chauhan';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Ashish Vidhyarthi', '/iBUUpfHZIfpC5afHrHwcyGTHKQF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ashish Vidhyarthi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Beni', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1160018 AND a.name = 'Ashish Vidhyarthi';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Nikhil Nagesh Bhat', '/rY4WDYSWktZ7QlBr2o9NT0GiInr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Nikhil Nagesh Bhat');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1160018 AND d.name = 'Nikhil Nagesh Bhat';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hJxdfkQVSzM67uKjInnZA2mJTua.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1160018;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/okVLmXL5y18dfN2R4ufMZEGaeCd.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1160018;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (772, '나 홀로 집에 2: 뉴욕을 헤매다', '1992-11-15', '', '시카고에 살고 있는 케빈의 가족은 크리스마스에 플로리다에 가기로 되어있다. 그러나 공항의 소란 속에, 홀로 뉴욕행 비행기에 오르게 되어 거대한 도시에 혼자 남게 된 케빈은 기지를 발휘하여 아버지 카드로 플로리자 호텔에 묶게되고, 의심스러워 하는 종업원들을 멋지게 따돌린다. 한편, 감옥을 탈출한 2인조 강도 마브와 해리는 뉴욕의 장난감 가게를 털어 한 몫 잡을 꿈에 부풀어 있는데...', 115, 'ALL', 'RELEASED', 193.710000, 6.700000, 358994850, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 772 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 772 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 772 AND g.name = '모험';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '맥컬리 컬킨', '/5lSoFnWb4HmxEREqcFvBGgXu5H.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '맥컬리 컬킨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kevin McCallister', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 772 AND a.name = '맥컬리 컬킨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '다니엘 스턴', '/939oerf8bJPrqT2a0N0oGuM1bjn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다니엘 스턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marv Murchins', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 772 AND a.name = '다니엘 스턴';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '조 페시', '/4AO0Rwdg2ky8Usmgzgj0dvhy7Zw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조 페시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Harry Lyme', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 772 AND a.name = '조 페시';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '캐서린 오하라', '/cMBxHeztNVc8YXKcj084Mdd3f3U.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '캐서린 오하라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kate McCallister', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 772 AND a.name = '캐서린 오하라';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'John Heard', '/ltTHVEGuLbtHSndFNDzWHttFJ1Z.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'John Heard');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Peter McCallister', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 772 AND a.name = 'John Heard';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '크리스 콜럼버스', '/yCyEz90NqjEXKZ7HYcEhDXlLlPc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스 콜럼버스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 772 AND d.name = '크리스 콜럼버스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8lxJrcl24SWRAbLxOJNsvgFlSGa.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 772;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kjby7cr8JnIPkfqMGKutOFrM2at.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 772;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1337309, '방콕 브레이킹: 천국과 지옥', '2024-09-26', '', '한 응급 구조대원이 목숨을 위협하는 방콕의 지하 세계 갱단과 엮이게 되면서 생존을 위한 사투를 벌인다.', 147, '19', 'RELEASED', 183.385000, 6.600000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1337309 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1337309 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1337309 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1337309 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'ศุกลวัฒน์ คณารศ', '/v0tNea70dRSyOqC6OtIL8MuWEIq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'ศุกลวัฒน์ คณารศ');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wanchai', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1337309 AND a.name = 'ศุกลวัฒน์ คณารศ';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Atitaya Tribudarak', '/k1qWYWTT38PLWY5HmXv4sOOm8hz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Atitaya Tribudarak');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Meiji', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1337309 AND a.name = 'Atitaya Tribudarak';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Sanya Kunakorn', '/3DQGTDFdAvWMf8XTp8GsOG2VNR1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sanya Kunakorn');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1337309 AND a.name = 'Sanya Kunakorn';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Natthaya Ongsritragul', '/i2EefIqNyCdAn7smey8rxYxOmgj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Natthaya Ongsritragul');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Duangkamol', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1337309 AND a.name = 'Natthaya Ongsritragul';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Day Thaitanium', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Day Thaitanium');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Darlie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1337309 AND a.name = 'Day Thaitanium';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'ก้องเกียรติ โขมศิริ', '/dAjEAoTXXpmZ1ZgbJ31fiHejW6b.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'ก้องเกียรติ โขมศิริ');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1337309 AND d.name = 'ก้องเกียรติ โขมศิริ';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/HFtb46fmiNtbYboIuS6vn27LdS.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1337309;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/igtm12Wy9EUlxFeyb4v8bRyuYSY.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1337309;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (238, '대부', '1972-03-14', '영화사상 최고의 걸작', '시실리에서 이민온 뒤, 정치권까지 영향력을 미치는 거물로 자리잡은 돈 꼴레오네는 갖가지 고민을 호소하는 사람들의 문제를 해결해주며 대부라 불리운다. 한편 솔로소라는 인물은 꼴레오네가와 라이벌인 탓타리아 패밀리와 손잡고 새로운 마약 사업을 제안한다. 돈 꼴레오네가 마약 사업에 참여하지 않기로 하자, 돈 꼴레오네를 저격해 그는 중상을 입고 사경을 헤매게 된다. 그 뒤, 돈 꼴레오네의 아들 소니는 조직력을 총 동원해 다른 패밀리들과 피를 부르는 전쟁을 시작하는데... 가족의 사업과 상관없이 대학에 진학한 뒤 인텔리로 지내왔던 막내 아들 마이클은 아버지가 총격을 당한 뒤, 아버지를 구하기 위해 위험천만한 협상 자리에 나선다.', 175, '19', 'RELEASED', 212.344000, 8.700000, 245066411, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 238 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 238 AND g.name = '범죄';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '말론 브란도', '/fuTEPMsBtV1zE98ujPONbKiYDc2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '말론 브란도');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Don Vito Corleone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 238 AND a.name = '말론 브란도';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '알 파치노', '/2dGBb1fOcNdZjtQToVPFxXjm4ke.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '알 파치노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Michael Corleone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 238 AND a.name = '알 파치노';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제임스 칸', '/oRTyqWg0LReELvjms8WwkeTsDFS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제임스 칸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sonny Corleone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 238 AND a.name = '제임스 칸';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '로버트 듀발', '/ybMmK25h4IVtfE7qrnlVp47RQlh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 듀발');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tom Hagen', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 238 AND a.name = '로버트 듀발';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Richard S. Castellano', '/1vr75BdHWret81vuSJ3ugiCBkxw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Richard S. Castellano');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Clemenza', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 238 AND a.name = 'Richard S. Castellano';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '프랜시스 포드 코폴라', '/3Pblihd6KjXliie9vj4iQJwbNPU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '프랜시스 포드 코폴라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 238 AND d.name = '프랜시스 포드 코폴라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/I1fkNd5CeJGv56mhrTDoOeMc2r.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 238;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tmU7GeKVybMWFButWEGl2M4GeiP.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 238;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1359227, '레고 마블 어벤져스: 미션 데몰리션', '2024-10-17', '', '완전히 새로운 애니메이션 스페셜 ‘레고 마블: 미션 데몰리션’은 독창적인 매력이 확실한 유명 시리즈의 10번째 작품이다. 마블과 레고 그룹이 선보이는 이 최신 스페셜의 주인공은 히어로가 되고자 하는 젊은 슈퍼히어로 팬으로, 어벤져스의 세상을 파괴할 기회를 노리고 있는 강력한 새 악당을 우연한 계기로 해방시키고 만다.', 44, 'ALL', 'RELEASED', 175.367000, 7.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1359227 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1359227 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1359227 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Will Friedle', '/Ao3fp9f4loVQ1Vvk6ph8HU5p0Lu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Will Friedle');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dennis / Demolition Man (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1359227 AND a.name = 'Will Friedle';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '케빈 스미스', '/g8sC36zUTkSTh7y9HjWa4Rbr0JP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케빈 스미스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Terry / Terrax (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1359227 AND a.name = '케빈 스미스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'David Kaye', '/fAK9KpVtPeZ9MTUXamfVqwUGBId.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'David Kaye');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vision / Hot Dog Suit Vendor (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1359227 AND a.name = 'David Kaye';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'John Stamos', '/5hFEsxkqI6uGa9ltX2soVqt8r1M.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'John Stamos');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Iron Man (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1359227 AND a.name = 'John Stamos';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Roger Craig Smith', '/6oE356GbRHAf91Llw7LDpvsAf5L.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Roger Craig Smith');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Steve Rogers / Captain America / Frank Castle / The Thing (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1359227 AND a.name = 'Roger Craig Smith';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Ken Cunningham', '/8e2qCGzpDXvAsLdPpzrUyDamyqD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Ken Cunningham');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1359227 AND d.name = 'Ken Cunningham';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2gLpCJNao2AgHhCuuhwwlvL5hb1.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1359227;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/Al127H6f1RXpESdg0MGNL2g8mzO.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1359227;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (447365, '가디언즈 오브 갤럭시 Volume 3', '2023-05-03', '이 느낌 그대로, 다시 한번 볼륨 업!', '가모라를 잃고 슬픔에 빠져 있던 피터 퀼이 위기에 처한 은하계와 동료를 지키기 위해 다시 한 번 가디언즈 팀과 힘을 모으고, 성공하지 못할 경우 그들의 마지막이 될지도 모르는 미션에 나서는 이야기.', 150, '12', 'RELEASED', 177.507000, 7.967000, 845600000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 447365 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 447365 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 447365 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '크리스 프랫', '/6DdoTgW9jdJwDmVFZRP8D0AtVFs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 프랫');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Peter Quill / Star-Lord', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447365 AND a.name = '크리스 프랫';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '조 샐다나', '/snQ1rfO9Bb2LRG9MAOQnn3JXVHy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조 샐다나');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gamora', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447365 AND a.name = '조 샐다나';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '데이브 바티스타', '/ymn6iQBJbQZN6BYI60YJDXVP4gF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이브 바티스타');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Drax', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447365 AND a.name = '데이브 바티스타';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '카렌 길런', '/52kqB0Bei1TaTBx2rABrijVhhTG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카렌 길런');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nebula', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447365 AND a.name = '카렌 길런';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '폼 클레멘티에프', '/hfUKAI2kXTMMWjno0i4sLPJud5N.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '폼 클레멘티에프');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mantis', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447365 AND a.name = '폼 클레멘티에프';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '제임스 건', '/pnKqZub3IlKYbyH9RRTMDOoqEn0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '제임스 건');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 447365 AND d.name = '제임스 건';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zK0FTsXvkWVS3yubZkbenbAFcnY.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 447365;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5YZbUmjbMa3ClvSW1Wj3D6XGolb.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 447365;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (360920, '그린치', '2018-11-08', '크리스마스 훔치기 대작전이 시작된다!', '모두가 행복한 크리스마스를 참을 수 없는 그린치는 크리스마스를 훔치기 위해 산타가 되기로 결심한다. 그린치는 만능집사 맥스, 덩치만 큰 소심 루돌프 프레드와 함께 슈퍼배드한 크리스마스 훔치기 대작전에 돌입하는데…', 85, 'ALL', 'RELEASED', 176.420000, 6.860000, 508600000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 360920 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 360920 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 360920 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 360920 AND g.name = '판타지';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '베네딕트 컴버배치', '/fBEucxECxGLKVHBznO0qHtCGiMO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '베네딕트 컴버배치');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Grinch (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 360920 AND a.name = '베네딕트 컴버배치';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '라시다 존스', '/jjp33eRM6oavyesW0UM6XBCxQSa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '라시다 존스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Donna Lou Who (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 360920 AND a.name = '라시다 존스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '키넌 톰슨', '/vHPhDGc1om91TzoIQ4zMscpNmxF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키넌 톰슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bricklebaum (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 360920 AND a.name = '키넌 톰슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Cameron Seely', '/btT8UCFUlhDR1NE4bFc2kj9gYWF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Cameron Seely');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cindy Lou Who (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 360920 AND a.name = 'Cameron Seely';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '안젤라 랜즈베리', '/oOu8IaWtrn6d0NEbsWtZPnpfohv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '안젤라 랜즈베리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mayor McGerkle (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 360920 AND a.name = '안젤라 랜즈베리';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Yarrow Cheney', '/3j0F9ViGOUdGbszLKWKgK1hvWbp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Yarrow Cheney');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 360920 AND d.name = 'Yarrow Cheney';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Scott Mosier', '/oEQcuNy9uYGMNq3e49VSJ7oPsJw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Scott Mosier');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 360920 AND d.name = 'Scott Mosier';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/clJYtRBUhDtvKhPk2HNfXouviKF.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 360920;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5lWIYxYEqWi8j3ZloxXntw3ImBo.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 360920;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (278, '쇼생크 탈출', '1994-09-23', '두려움은 너를 죄수로 가두고 희망은 너를 자유롭게 하리라', '촉망받는 은행 간부 앤디 듀프레인은 아내와 그녀의 정부를 살해했다는 누명을 쓴다. 주변의 증언과 살해 현장의 그럴듯한 증거들로 그는 종신형을 선고받고 악질범들만 수용한다는 지옥같은 교도소 쇼생크로 향한다. 인간 말종 쓰레기들만 모인 그곳에서 그는 이루 말할 수 없는 억압과 짐승보다 못한 취급을 당한다. 그러던 어느 날, 간수의 세금을 면제받게 해 준 덕분에 그는 일약 교도소의 비공식 회계사로 일하게 된다. 그 와중에 교도소 소장은 죄수들을 이리저리 부리면서 검은 돈을 긁어 모으고 앤디는 이 돈을 세탁하여 불려주면서 그의 돈을 관리하는데...', 142, '15', 'RELEASED', 212.057000, 8.707000, 28341469, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 278 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 278 AND g.name = '범죄';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '팀 로빈스', '/djLVFETFTvPyVUdrd7aLVykobof.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '팀 로빈스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Andy Dufresne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 278 AND a.name = '팀 로빈스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '모건 프리먼', '/905k0RFzH0Kd6gx8oSxRdnr6FL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '모건 프리먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ellis Boyd ''Red'' Redding', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 278 AND a.name = '모건 프리먼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Bob Gunton', '/ulbVvuBToBN3aCGcV028hwO0MOP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bob Gunton');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Warden Norton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 278 AND a.name = 'Bob Gunton';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'William Sadler', '/rWeb2kjYCA7V9MC9kRwRpm57YoY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'William Sadler');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Heywood', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 278 AND a.name = 'William Sadler';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '클랜시 브라운', '/1JeBRNG7VS7r64V9lOvej9bZXW5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '클랜시 브라운');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Captain Byron T. Hadley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 278 AND a.name = '클랜시 브라운';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '프랭크 다라본트', '/7LqmE3p1XTwCdNCOmBxovq210Qk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '프랭크 다라본트');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 278 AND d.name = '프랭크 다라본트';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oAt6OtpwYCdJI76AVtVKW1eorYx.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 278;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zfbjgQE1uSd9wiPTX4VzsLi0rGG.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 278;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (238, '대부', '1972-03-14', '영화사상 최고의 걸작', '시실리에서 이민온 뒤, 정치권까지 영향력을 미치는 거물로 자리잡은 돈 꼴레오네는 갖가지 고민을 호소하는 사람들의 문제를 해결해주며 대부라 불리운다. 한편 솔로소라는 인물은 꼴레오네가와 라이벌인 탓타리아 패밀리와 손잡고 새로운 마약 사업을 제안한다. 돈 꼴레오네가 마약 사업에 참여하지 않기로 하자, 돈 꼴레오네를 저격해 그는 중상을 입고 사경을 헤매게 된다. 그 뒤, 돈 꼴레오네의 아들 소니는 조직력을 총 동원해 다른 패밀리들과 피를 부르는 전쟁을 시작하는데... 가족의 사업과 상관없이 대학에 진학한 뒤 인텔리로 지내왔던 막내 아들 마이클은 아버지가 총격을 당한 뒤, 아버지를 구하기 위해 위험천만한 협상 자리에 나선다.', 175, '19', 'RELEASED', 212.344000, 8.700000, 245066411, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 238 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 238 AND g.name = '범죄';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '말론 브란도', '/fuTEPMsBtV1zE98ujPONbKiYDc2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '말론 브란도');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Don Vito Corleone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 238 AND a.name = '말론 브란도';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '알 파치노', '/2dGBb1fOcNdZjtQToVPFxXjm4ke.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '알 파치노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Michael Corleone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 238 AND a.name = '알 파치노';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제임스 칸', '/oRTyqWg0LReELvjms8WwkeTsDFS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제임스 칸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sonny Corleone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 238 AND a.name = '제임스 칸';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '로버트 듀발', '/ybMmK25h4IVtfE7qrnlVp47RQlh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 듀발');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tom Hagen', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 238 AND a.name = '로버트 듀발';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Richard S. Castellano', '/1vr75BdHWret81vuSJ3ugiCBkxw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Richard S. Castellano');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Clemenza', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 238 AND a.name = 'Richard S. Castellano';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '프랜시스 포드 코폴라', '/3Pblihd6KjXliie9vj4iQJwbNPU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '프랜시스 포드 코폴라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 238 AND d.name = '프랜시스 포드 코폴라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/I1fkNd5CeJGv56mhrTDoOeMc2r.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 238;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tmU7GeKVybMWFButWEGl2M4GeiP.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 238;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (240, '대부 2', '1974-12-20', '대부가 암시하고 예고한 모든 것', '아버지의 장례식 도중에 맏아들 파올로가 총에 맞아 죽고, 비토(로버트 드니로)는 겨우 도망쳐 미국으로 건너온다. 대부로 성장한 후 비토는 다시 치치오를 찾아 복수를 한다. 새롭게 등장한 젊은 대부 마이클(알 파치노)은 본거지를 라스베가스로 옮기고 가족의 사업을 가능한 합법적인 것으로 바꾸려고 애쓴다. 그런 과중 중에 자신을 제거하려는 음모를 알게되고 그는 냉혹하고 신속하게 반대파들을 제거, 조직을 더욱 확대해 나간다. 이를 위해 마이클은 배신한 형마저 죽이고, 일 때문에 아내와 헤어지는 등 인간적으로는 계속 외로워져 가는데...', 202, '19', 'RELEASED', 102.761000, 8.600000, 102600000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 240 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 240 AND g.name = '범죄';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '알 파치노', '/2dGBb1fOcNdZjtQToVPFxXjm4ke.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '알 파치노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Don Michael Corleone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 240 AND a.name = '알 파치노';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '로버트 듀발', '/ybMmK25h4IVtfE7qrnlVp47RQlh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 듀발');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tom Hagen', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 240 AND a.name = '로버트 듀발';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '다이앤 키튼', '/tuLGQLb2IVWtar4MU3Hg5z9damM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다이앤 키튼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kay Corleone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 240 AND a.name = '다이앤 키튼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '로버트 드 니로', '/cT8htcckIuyI1Lqwt1CvD02ynTh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 드 니로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vito Corleone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 240 AND a.name = '로버트 드 니로';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '존 카제일', '/ff2MXG4OpO5wJCu75l3iE5Xxjm7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '존 카제일');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frederico ''Fredo'' Corleone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 240 AND a.name = '존 카제일';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '프랜시스 포드 코폴라', '/3Pblihd6KjXliie9vj4iQJwbNPU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '프랜시스 포드 코폴라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 240 AND d.name = '프랜시스 포드 코폴라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bhqvqYuAgrTGwyNAmMR0ZVmjXel.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 240;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kGzFbGhp99zva6oZODW5atUtnqi.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 240;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (424, '쉰들러 리스트', '1993-12-15', '한 생명을 구한 자는 세계를 구한 것이다', '2차 세계대전 당시 독일군이 점령한 폴란드. 시류에 맞춰 자신의 성공을 추구하는 기회주의자 쉰들러는 유태인이 경영하는 그릇 공장을 인수한다. 그는 공장을 인수하기 위해 나찌 당원이 되고 독일군에게 뇌물을 바치는 등 갖은 방법을 동원한다. 그러나 냉혹한 기회주의자였던 쉰들러는 유태인 회계사인 스턴과 친분을 맺으면서 냉혹한 유태인 학살에 대한 양심의 소리를 듣기 시작한다. 마침내 그는 강제 수용소로 끌려가 죽음을 맞게될 유태인들을 구해내기로 결심하고, 독일군 장교에게 빼내는 사람 숫자대로 뇌물을 주는 방법으로 유태인들을 구해내려는 계획을 세우는데...', 195, '15', 'RELEASED', 88.122000, 8.565000, 321365567, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 424 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 424 AND g.name = '역사';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 424 AND g.name = '전쟁';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '리암 니슨', '/sRLev3wJioBgun3ZoeAUFpkLy0D.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리암 니슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Oskar Schindler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 424 AND a.name = '리암 니슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '벤 킹슬리', '/vQtBqpF2HDdzbfXHDzR4u37i1Ac.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '벤 킹슬리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Itzhak Stern', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 424 AND a.name = '벤 킹슬리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '레이프 파인스', '/tJr9GcmGNHhLVVEH3i7QYbj6hBi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레이프 파인스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Amon Goeth', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 424 AND a.name = '레이프 파인스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Caroline Goodall', '/4cagGtMqACvkuw6Llq8Li8UJ1AR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Caroline Goodall');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Emilie Schindler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 424 AND a.name = 'Caroline Goodall';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jonathan Sagall', '/waxNDsgfw7CXXO3LH8EdKi8z7VV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jonathan Sagall');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Poldek Pfefferberg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 424 AND a.name = 'Jonathan Sagall';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '스티븐 스필버그', '/tZxcg19YQ3e8fJ0pOs7hjlnmmr6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '스티븐 스필버그');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 424 AND d.name = '스티븐 스필버그';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oyyUcGwLX7LTFS1pQbLrQpyzIyt.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 424;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zb6fM1CX41D9rF9hdgclu0peUmy.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 424;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (389, '12명의 성난 사람들', '1957-04-10', '', '뉴욕시의 법정에 아버지를 칼로 찌른 한 소년의 살인혐의를 두고, 12인의 배심원들은 만장일치 합의를 통해 소년의 유무죄 여부를 가려줄 것을 요구받는다. 판사는 유죄일 경우 이 소년은 사형이 불가피하다는 것을 이들에게 미리 일러둔다.  배심원 방에 모인 이들은 투표를 통해 유무죄 여부를 가리기로 한다. 사람들이 전부 소년이 유죄로 판단하는 가운데, 오직 한 배심원만이 소년이 무죄라고 주장하는데...', 97, '', 'RELEASED', 71.351000, 8.500000, 4360000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 389 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마틴 발삼', '/2j4LJJfTPQtvnjp8LfSGOvWFATO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마틴 발삼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Juror 1', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 389 AND a.name = '마틴 발삼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'John Fiedler', '/6vfLLGeGuO6Ko0VRnyhgE2v6RUu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'John Fiedler');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Juror 2', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 389 AND a.name = 'John Fiedler';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '리J.콥', '/dMpk9Xd3BqGOGHyOA1wQCcF8v1I.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리J.콥');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Juror 3', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 389 AND a.name = '리J.콥';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'E.G. Marshall', '/psimeVoRk64DV7UNm4cLQylRFy2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'E.G. Marshall');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Juror 4', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 389 AND a.name = 'E.G. Marshall';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jack Klugman', '/oJxveOxlunD8C9OczqKeryU0k6D.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jack Klugman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Juror 5', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 389 AND a.name = 'Jack Klugman';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '시드니 루멧', '/hjj3V2DkPJ46zo5uz9bsZQzAk6R.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '시드니 루멧');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 389 AND d.name = '시드니 루멧';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xzh6Rq9cKnE1M309PzC5S5QWF9S.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 389;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qqHQsStV6exghCM7zbObuYBiYxw.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 389;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (129, '센과 치히로의 행방불명', '2001-07-20', '금지된 세계의 문이 열렸다', '평범한 열 살 짜리 소녀 치히로 식구는 이사 가던 중 길을 잘못 들어 낡은 터널을 지나가게 된다. 터널 저편엔 폐허가 된 놀이공원이 있었고 그곳엔 이상한 기운이 흘렀다. 인기척 하나 없는 이 마을의 낯선 분위기에 불길한 기운을 느낀 치히로는 부모님에게 돌아가자고 조르지만 부모님은 호기심에 들떠 마을 곳곳을 돌아다니기 시작한다. 어느 음식점에 도착한 치히로의 부모님은 그 곳에 차려진 음식들을 보고 즐거워하며 허겁지겁 먹어대다가 돼지로 변해버린다. 겁에 질려 당황하는 치히로에게 낯선 소년 하쿠가 나타나 빨리 이곳을 나가라고 소리치는데...', 124, 'All', 'RELEASED', 126.665000, 8.500000, 274925095, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 129 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 129 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 129 AND g.name = '판타지';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '히이라기 루미', '/zITaVtFyc4xSM3mxSoPRWHbqgJI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '히이라기 루미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chihiro Ogino / Sen (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 129 AND a.name = '히이라기 루미';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이리노 미유', '/8qEEhHUObNvGQr4e6eqLu5z4qTz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이리노 미유');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Haku (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 129 AND a.name = '이리노 미유';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '나츠키 마리', '/aRs3dGqA2bCuGSZ7lJGhQKe8rhp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나츠키 마리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yubaba / Zeniba (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 129 AND a.name = '나츠키 마리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '나이토 타카시', '/zfs63NZKNG3Uy6WqqXSQWYMQXKZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나이토 타카시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Akio Ogino (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 129 AND a.name = '나이토 타카시';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '사와구치 야스코', '/rWspusb13VeJowmctnniXYYTcqq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사와구치 야스코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yuko Ogino (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 129 AND a.name = '사와구치 야스코';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '미야자키 하야오', '/mG3cfxtA5jqDc7fpKgyzZMKoXDh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '미야자키 하야오');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 129 AND d.name = '미야자키 하야오';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aZuBfbR0PnCb2up7lqHDsgJlLjs.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 129;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6oaL4DP75yABrd5EbC4H2zq5ghc.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 129;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (19404, '용감한 자가 신부를 데려가리', '1995-10-20', '', '영국에서 유학중인 라즈(샤룩 칸)와 인도 처녀 심란(까졸).  심란은 부모님이 정해주신 약혼자가 있는데 약혼을 앞두고 친구들과 유럽 여행을 떠나게 된다.  여행 중 우연히 만남 샤룩과 까졸. 두 남녀의 연속된 우연과 좌충우돌 사랑 만들기.  그렇게 사랑하게 된 그들이지만 까졸은 약혼자가 있는 몸. 인도로 돌아가게 된다.  샤룩 또한 그녀를 못 잊어 인도로 뒤 따라 들어가지만 엄격한 까졸의 부모를 설득하기가 힘이 든다. 도망가자는 까졸의 제안을 거부하고 샤룩은 끝내 그녀의 부모님의 허락을 얻어 내기 위해 고군분투한다.', 190, '', 'RELEASED', 40.639000, 8.529000, 100000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 19404 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 19404 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 19404 AND g.name = '로맨스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '카졸', '/akoZskln7QqmH0vgDppprc67ZbM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카졸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Simran Singh', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 19404 AND a.name = '카졸';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '샤 룩 칸', '/tCEppfUu0g2Luu0rS5VKMoL4eSw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '샤 룩 칸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Raj Malhotra', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 19404 AND a.name = '샤 룩 칸';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Amrish Puri', '/uhMGFS7tuG71LDv2wk9LfZZ4EG6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Amrish Puri');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chaudhry Baldev Singh', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 19404 AND a.name = 'Amrish Puri';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Farida Jalal', '/qLlAHvTwQw6A91G2CLptlcUMYQZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Farida Jalal');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lajwanti ''Lajjo'' Singh', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 19404 AND a.name = 'Farida Jalal';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Anupam Kher', '/f7hWJ4tvzR7uXmYoTiB41TpQ2NZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Anupam Kher');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dharamvir Malhotra', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 19404 AND a.name = 'Anupam Kher';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Aditya Chopra', '/eXYKfA6bg12pn9LPrWeRfxYQwcb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Aditya Chopra');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 19404 AND d.name = 'Aditya Chopra';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2CAL2433ZeIihfX1Hb2139CX0pW.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 19404;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/90ez6ArvpO8bvpyIngBuwXOqJm5.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 19404;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (155, '다크 나이트', '2008-07-16', '이 도시에 정의는 죽었다', '범죄와 부정부패를 제거하여 고담시를 지키려는 배트맨. 그는 짐 고든 형사와 패기 넘치는 고담시 지방 검사 하비 덴트와 함께 도시를 범죄 조직으로부터 영원히 구원하고자 한다. 세 명의 의기투합으로 위기에 처한 악당들이 모인 자리에 보라색 양복을 입고 얼굴에 짙게 화장을 한 괴이한 존재가 나타나 배트맨을 죽이자는 사상 초유의 제안을 한다. 그는 바로 어떠한 룰도, 목적도 없는 사상 최악의 악당 미치광이 살인광대 조커. 배트맨을 죽이고 고담시를 끝장내버리기 위한 조커의 광기 어린 행각에 도시는 혼란에 빠지는데...', 152, '15', 'RELEASED', 191.301000, 8.516000, 1004558444, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 155 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 155 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 155 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 155 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '크리스찬 베일', '/7Pxez9J8fuPd2Mn9kex13YALrCQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스찬 베일');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruce Wayne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 155 AND a.name = '크리스찬 베일';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '히스 레저', '/p2z2bURSg7nuMsN9P2s61e2RvNz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '히스 레저');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 155 AND a.name = '히스 레저';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '에런 엑하트', '/6rI3cYhdxOaOFSRB4C29MalpwDC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에런 엑하트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Harvey Dent', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 155 AND a.name = '에런 엑하트';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마이클 케인', '/bVZRMlpjTAO2pJK6v90buFgVbSW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 케인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alfred', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 155 AND a.name = '마이클 케인';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '메기 질렌할', '/vsfkWdYWmA9CpzMHTJzrFxlDnEZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '메기 질렌할');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rachel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 155 AND a.name = '메기 질렌할';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '크리스토퍼 놀란', '/xuAIuYSmsUzKlUMBFGVZaWsY3DZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스토퍼 놀란');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 155 AND d.name = '크리스토퍼 놀란';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/f6dNinWX8rBM79JXKcShkfSh2oA.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 155;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oOv2oUXcAaNXakRqUPxYq5lJURz.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 155;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1184918, '와일드 로봇', '2024-09-12', '너를 통해 더 넓은 세상을 만나다', '우연한 사고로 거대한 야생에 불시착한 로봇 로즈는 주변 동물들의 행동을 배우며 낯선 환경 속에 적응해 가던 중, 사고로 세상에 홀로 남겨진 아기 기러기 브라이트빌의 보호자가 된다. 로즈는 입력되어 있지 않은 새로운 역할과 관계에 낯선 감정을 마주하고 겨울이 오기 전에 남쪽으로 떠나야 하는 브라이트빌을 위해 동물들의 도움을 받아 이주를 위한 생존 기술을 가르쳐준다. 그러나 선천적으로 몸집이 작은 브라이트빌은 짧은 비행도 힘겨워 하는데...', 102, 'ALL', 'RELEASED', 2214.674000, 8.491000, 292583746, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1184918 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1184918 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1184918 AND g.name = '가족';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '루피타 뇽오', '/y40Wu1T742kynOqtwXASc5Qgm49.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루피타 뇽오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Roz / Rummage (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1184918 AND a.name = '루피타 뇽오';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '페드로 파스칼', '/9VYK7oxcqhjd5LAH6ZFJ3XzOlID.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '페드로 파스칼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fink (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1184918 AND a.name = '페드로 파스칼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '킷 코너', '/gCIdbnV9D3lzTaOB0YtuKDz6Nt0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '킷 코너');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brightbill (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1184918 AND a.name = '킷 코너';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '빌 나이', '/ixFI2YCGNGJfwlpI8iyhvVZRg8C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빌 나이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Longneck (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1184918 AND a.name = '빌 나이';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '스테파니 수', '/8gb3lfIHKQAGOQyeC4ynQPsCiHr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스테파니 수');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vontra (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1184918 AND a.name = '스테파니 수';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '크리스 샌더스', '/6CtrIOCxggJ5eIAWeFQqd4Hs9FP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스 샌더스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1184918 AND d.name = '크리스 샌더스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8dkuf9IuVh0VZjDTk7kAY67lU0U.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1184918;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/v9acaWVVFdZT5yAU7J2QjwfhXyD.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1184918;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (497, '그린 마일', '1999-12-10', '', '미국 루이지애나의 콜드 마운틴 교도소. 폴은 사형수 감방의 간수장으로 일하고 있다. 그의 일은 사형수들을 감독하고, 그린 마일이라 불리는 초록색 복도를 거쳐 그들을 사형 집행장까지 안내하는 것. 폴은 그들이 죽음을 맞이하는 순간까지 평화롭게 지낼 수 있도록 최선을 다한다. 어느 날 존 커피라는 사형수가 이송되어 온다. 그는 쌍둥이 여자아이를 살해한 흉악범. 하지만 순진한 눈망울에 겁을 잔뜩 집어먹은 그의 모습에 폴은 당혹감을 느낀다. 게다가 그는 초자연적 능력으로 폴의 지병을 깨끗하게 치료해주기까지 한다. 존을 전기 의자로 데려가야 할 날이 다가오면서 폴은 그가 무죄라는 확신을 갖게 되는데...', 189, '18', 'RELEASED', 80.701000, 8.500000, 286801374, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 497 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 497 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 497 AND g.name = '범죄';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '톰 행크스', '/eKF1sGJRrZJbfBG1KirPt1cfNd3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 행크스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paul Edgecomb', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 497 AND a.name = '톰 행크스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '데이비드 모스', '/A6zGbkFjM3uajIakgsSeNTmSKqY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이비드 모스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brutus ''Brutal'' Howell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 497 AND a.name = '데이비드 모스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Bonnie Hunt', '/tT9C6uLztgN8OxJULq6F9iEzqlA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bonnie Hunt');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jan Edgecomb', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 497 AND a.name = 'Bonnie Hunt';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마이클 클라크 덩컨', '/3RX8OBqt3gbvFwKYZqiom4O3Ta6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 클라크 덩컨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'John Coffey', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 497 AND a.name = '마이클 클라크 덩컨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제임스 크롬웰', '/vpNQQbM5PtxsYmVm4oh79SGFyUK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제임스 크롬웰');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Warden Hal Moores', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 497 AND a.name = '제임스 크롬웰';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '프랭크 다라본트', '/7LqmE3p1XTwCdNCOmBxovq210Qk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '프랭크 다라본트');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 497 AND d.name = '프랭크 다라본트';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yuSpRhrTIJa5JN8oESrfD2bndp1.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 497;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vxJ08SvwomfKbpboCWynC3uqUg4.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 497;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (496243, '기생충', '2019-05-30', '행복은 나눌수록 커지잖아요', '전원 백수로 살 길 막막하지만 사이는 좋은 기택 가족. 장남 기우에게 명문대생 친구가 연결시켜 준 고액 과외 자리는 모처럼 싹튼 고정수입의 희망이다. 온 가족의 도움과 기대 속에 박 사장 집으로 향하는 기우. 글로벌 IT기업의 CEO인 박 사장의 저택에 도착하자 젊고 아름다운 사모님 연교와 가정부 문광이 기우를 맞이한다. 큰 문제 없이 박 사장의 딸 다혜의 과외를 시작한 기우. 그러나 이렇게 시작된 두 가족의 만남 뒤로, 걷잡을 수 없는 사건이 기다리고  있는데.....', 131, '15', 'RELEASED', 133.458000, 8.505000, 257591776, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 496243 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 496243 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 496243 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '송강호', '/7dw9wIpFZ5nJZ3zqrue8t7hUUgQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '송강호');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kim Ki-taek', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 496243 AND a.name = '송강호';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이선균', '/mwF2HgyEF2UzxSvNRJEtbWlKbAj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이선균');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Park Dong-ik', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 496243 AND a.name = '이선균';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '조여정', '/5MgWM8pkUiYkj9MEaEpO0Ir1FD9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조여정');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yeon-kyo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 496243 AND a.name = '조여정';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '최우식', '/gVICVa6IypG6BMLsPhscrYICptn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '최우식');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ki-woo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 496243 AND a.name = '최우식';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '박소담', '/fGVOikpvivopeATDy6ZzLdKYXDu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '박소담');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ki-jung', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 496243 AND a.name = '박소담';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '봉준호', '/tKLJBqbdH6HFj2QxLA5o8Zk7IVs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '봉준호');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 496243 AND d.name = '봉준호';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/eRM0PykovgtK4lin1D4BUql8TBa.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 496243;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hiKmpZMGZsrkA3cdce8a7Dpos1j.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 496243;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (680, '펄프 픽션', '1994-09-10', '쿠엔틴 타란티노만의 블랙 코미디', '펌프킨와 허니 버니가 레스토랑에서 강도 행각을 벌이기 시작한다. 빈센트와 그 동료 쥴스는 두목의 금가방을 찾기 위해 다른 건달이 사는 아파트를 찾아간다. 마르셀러스는 부치에게 돈을 주며 상대 선수에게 져 주라고 하지만 부치는 상대 선수를 때려 눕히고 도망치다, 어릴 때 아버지에게 물려받은 시계를 찾기 위해 아파트로 향한다. 아무런 상관 없이 보이는 이 사건들이 서로 얽히고 섥히면서 예상치 못한 인과관계가 만들어지는데...', 154, '18', 'RELEASED', 104.457000, 8.500000, 213928762, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 680 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 680 AND g.name = '범죄';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '존 트래볼타', '/eVWcevrvGLLqt9gkDMruqgLJPsp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '존 트래볼타');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vincent Vega', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 680 AND a.name = '존 트래볼타';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '사무엘 L. 잭슨', '/AiAYAqwpM5xmiFrAIeQvUXDCVvo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사무엘 L. 잭슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jules Winnfield', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 680 AND a.name = '사무엘 L. 잭슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '우마 서먼', '/lg04iEqT6TC40H1jz10Z99OFMXx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '우마 서먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mia Wallace', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 680 AND a.name = '우마 서먼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '브루스 윌리스', '/w3aXr1e7gQCn8MSp1vW4sXHn99P.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브루스 윌리스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Butch Coolidge', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 680 AND a.name = '브루스 윌리스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '빙 레임스', '/4gpLVNKPZlVucc4fT2fSZ7DksTK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빙 레임스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marsellus Wallace', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 680 AND a.name = '빙 레임스';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '쿠엔틴 타란티노', '/1gjcpAa99FAOWGnrUvHEXXsRs7o.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '쿠엔틴 타란티노');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 680 AND d.name = '쿠엔틴 타란티노';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6lXRHGoEbnnBUKsuqpL9JxD4DzT.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 680;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/suaEOtk1N1sgg2MTM7oZd2cfVp3.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 680;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (372058, '너의 이름은.', '2016-08-26', '아직 만난 적 없는 너를, 찾고 있어', '시골에 사는 소녀 미츠하(가미시라이시 모네)는 어느 날 잠에서 깬 후 자신의 몸이 남자로 바뀐 걸 알게 된다. 같은 시간, 도쿄에 사는 소년 타키(가미키 류노스케) 역시 이 기이한 상황을 겪고 있다. 낯선 가족, 낯선 친구들, 낯선 풍경들... 서로에게 이어진 끈을 알게 된 둘은 둘만의 규칙을 정하고 점차 상황을 받아들이기 시작한다. 서로에게 남긴 메모를 확인하며  점점 친구가 되어가는 타키와 미츠하. 언제부턴가 더 이상 몸이 바뀌지 않자  자신들이 특별하게 이어져있었음을 깨달은  타키는 미츠하를 만나러 가는데...', 106, '', 'RELEASED', 122.545000, 8.485000, 358000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 372058 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 372058 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 372058 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '카미키 류노스케', '/ut7ewXjdgUmgkhJ1EtbOo9tbc7s.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카미키 류노스케');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Taki Tachibana (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 372058 AND a.name = '카미키 류노스케';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '카미시라이시 모네', '/cPydoy2sSqFDsbXeBPmzQGPmq0R.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카미시라이시 모네');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mitsuha Miyamizu (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 372058 AND a.name = '카미시라이시 모네';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '나리타 료', '/2EFimbwi4lf9B19cgu2bJaNJiVq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나리타 료');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Katsuhiko Teshigawara (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 372058 AND a.name = '나리타 료';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '유우키 아오이', '/4kHNZSUIux52UU2BD3H6b5c5ymZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '유우키 아오이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sayaka Natori (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 372058 AND a.name = '유우키 아오이';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '시마자키 노부나가', '/iJFlSanoNgJMP31qBGCT9HzxFbi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시마자키 노부나가');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tsukasa Fujii (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 372058 AND a.name = '시마자키 노부나가';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '신카이 마코토', '/mSCk6PmAR99bCsKJYlMx94vq5qe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '신카이 마코토');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 372058 AND d.name = '신카이 마코토';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2DJCufz3Oa703PbLjNX1pM6MCG2.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 372058;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dIWwZW7dJJtqC6CgWzYkNVKIUm8.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 372058;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (122, '반지의 제왕: 왕의 귀환', '2003-12-17', '곤도르의 진정한 왕이 돌아왔다', '사우론이 인간들의 마지막 요새인 곤도르를 향해 야욕을 드러내고 있는 한편, 아라곤은 쇠락해가고 있는 곤도르의 재건을 위해 왕위 계승을 신중하게 결정지어야만 하는 상황. 이제 중간대륙의 미래는 그의 어깨에 달려있는 것. 사우론이 이끄는 어둠의 군대와의 마지막 전투를 위해 간달프는 곤도르에 흩어져 있던 병사들을 모으고, 로한의 왕 세오덴에게 도움을 받기도 하지만 사우론의 군대에 비하면 열세를 면치 못한다. 그러나 그들은 중간대륙을 사우론의 야욕으로부터 지키려는 사명감과, 마지막 반지 운반자에게 임무를 끝낼 기회를 주기 위해 어둠의 군대를 향해 돌진하게 되는데...', 199, '12', 'RELEASED', 189.399000, 8.483000, 1118888979, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 122 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 122 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 122 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '일라이저 우드', '/7UKRbJBNG7mxBl2QQc5XsAh6F8B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '일라이저 우드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frodo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122 AND a.name = '일라이저 우드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이안 맥켈런', '/5cnnnpnJG6TiYUSS7qgJheUZgnv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이안 맥켈런');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gandalf', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122 AND a.name = '이안 맥켈런';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '비고 모텐슨', '/vH5gVSpHAMhDaFWfh0Q7BG61O1y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '비고 모텐슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Aragorn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122 AND a.name = '비고 모텐슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '숀 애스틴', '/ywH1VvdwqlcnuwUVr0pV0HUZJQA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '숀 애스틴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sam', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122 AND a.name = '숀 애스틴';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '앤디 서키스', '/eNGqhebQ4cDssjVeNFrKtUvweV5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앤디 서키스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gollum / Smeagol', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122 AND a.name = '앤디 서키스';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '피터 잭슨', '/bNc908d59Ba8VDNr4eCcm4G1cR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피터 잭슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 122 AND d.name = '피터 잭슨';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/n8BPIRqvj1SdTRND828ANXhmSng.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 122;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5JrZAtyk3LwiiAWLW0kwz41XZJC.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 122;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (13, '포레스트 검프', '1994-06-23', '인생은 초콜릿 상자와 같은 거야. 네가 무엇을 고를지 아무도 모른단다', '불편한 다리, 남들보다 조금 떨어지는 지능을 가진 포레스트 검프는 헌신적인 어머니의 보살핌과 첫사랑 제니와의 만남으로 편견과 괴롭힘 속에서도 따뜻한 마음을 지니고 성장한다. 또래들의 괴롭힘을 피해 도망치던 포레스트는 누구보다 빠르게 달릴 수 있는 자신의 재능을 깨닫는다. 그의 재능을 알아 본 대학에서 그를 미식축구 선수로 발탁하고, 졸업 후에도 뛰어난 신체능력으로 군에 들어가 무공훈장을 수여받는 등 탄탄한 인생 가도에 오르게 된 포레스트. 하지만 어머니가 병에 걸려 죽음을 맞이하고, 첫사랑 제니 역시 그의 곁을 떠나가며 다시 한 번 인생의 전환점을 맞이하게 되는데...', 142, '12', 'RELEASED', 127.617000, 8.471000, 677387716, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 13 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 13 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 13 AND g.name = '로맨스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '톰 행크스', '/eKF1sGJRrZJbfBG1KirPt1cfNd3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 행크스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Forrest Gump', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 13 AND a.name = '톰 행크스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '로빈 라이트', '/d3rIv0y2p0jMsQ7ViR7O1606NZa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로빈 라이트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jenny Curran', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 13 AND a.name = '로빈 라이트';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '게리 시나이즈', '/olRjiV8ZhBixQiTvrGwXhpVXxsV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '게리 시나이즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lieutenant Dan Taylor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 13 AND a.name = '게리 시나이즈';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '샐리 필드', '/iMeq1j9Xwvaf6PbTJ0FQz69fpuA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '샐리 필드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mrs. Gump', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 13 AND a.name = '샐리 필드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Mykelti Williamson', '/e5f7XCZAUEQ55rVhdphqzdMMI8b.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mykelti Williamson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bubba Blue', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 13 AND a.name = 'Mykelti Williamson';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '로버트 저메키스', '/lPYDQ5LYNJ12rJZENtyASmVZ1Ql.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '로버트 저메키스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 13 AND d.name = '로버트 저메키스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xdJxoq0dtkchOkUz5UVKuxn7a2V.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 13;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ghgfzbEV7kbpbi1O8eIILKVXEA8.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 13;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (346, '7인의 사무라이', '1954-04-26', '위대한 7인', '일본의 전국시대. 주민들은 황폐한 땅에서 어렵게 수확한 식량으로 한해 한해를 넘기는 빈촌에 살고 있다. 이 빈촌엔 보리 수확이 끝날 무렵이면 어김없이 산적들이 찾아와 모든 식량을 모조리 약탈해 간다. 싸워도 애원해도 소용이 없었다. 가만히 있을 수만은 없던 촌장의 결단으로 사무라이들을 모집하는데, 이들은 풍부한 전쟁 경험을 가진 시마다 칸베에를 포함한 7명이었다. 시마다의 지휘하에 마을은 방위태세를 갖추고 전투훈련도 시작한다. 이윽고 산적들의 공격이 시작되어 치열한 사투가 벌어진다.', 207, '15', 'RELEASED', 46.381000, 8.500000, 2626918, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 346 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 346 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '미후네 토시로', '/3A9PqrtiXHLp8B2JL7m3YvVXrmL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미후네 토시로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kikuchiyo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 346 AND a.name = '미후네 토시로';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '시무라 타카시', '/ydyAm2vyBbEPZRICIMqqjDm0NM9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시무라 타카시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kambei Shimada', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 346 AND a.name = '시무라 타카시';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이나바 요시오', '/5qIAqM5PegWTNq67qNofz78fb6U.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이나바 요시오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gorobei Katayama', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 346 AND a.name = '이나바 요시오';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '미야구치 세이지', '/97XiJh1TSdu4hmJUp4Am5afgBZx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미야구치 세이지');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kyuzo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 346 AND a.name = '미야구치 세이지';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '치아키 미노루', '/4uqny8n2OmGixVVdzqUBA5zJ9aW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '치아키 미노루');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Heihachi Hayashida', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 346 AND a.name = '치아키 미노루';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '구로사와 아키라', '/eGexa6MZ22T1MZxce1qR3RcAYaS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '구로사와 아키라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 346 AND d.name = '구로사와 아키라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6Y8Q5t79ybiDA7XubUTneqZhjA3.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 346;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sJNNMCc6B7KZIY3LH3JMYJJNH5j.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 346;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (429, '석양의 무법자', '1966-12-22', '', '미국의 남북전쟁이 한창인 때, 블론디는 멕시코인 총잡이 투코와 함께 동업 중이다. 블론디는 현상범 투코를 잡아 현상금을 받고, 투코가 교수형을 당하는 순간 구해주는 역할. 한편 세텐자라 불리우는 범죄자는 엄청나 돈이 묻힌 비밀장소를 추적 중이다. 그런데, 투코와 실랑이를 벌이던 블론디는 돈이 묻힌 장소를 죽어가는 사람에게 듣게 되고, 결국 둘은 돈을 찾아 나서는데...', 161, '15', 'RELEASED', 108.135000, 8.500000, 38900000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 429 AND g.name = '서부';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '클린트 이스트우드', '/dU35NnjZ4aGw5abIJe3WXVf3Eey.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '클린트 이스트우드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Blondie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 429 AND a.name = '클린트 이스트우드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '일라이 월릭', '/s452wxFLaOwAIs6juD0rrvxaFxL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '일라이 월릭');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tuco Ramirez', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 429 AND a.name = '일라이 월릭';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '리 밴클리프', '/yQc5wjNCdRZzPp5E2wRPRYsEq9a.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리 밴클리프');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sentenza / Angel Eyes', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 429 AND a.name = '리 밴클리프';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Aldo Giuffrè', '/aT6eECl1R3YGYL4KatyIQrq0zG8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Aldo Giuffrè');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alcoholic Union Captain', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 429 AND a.name = 'Aldo Giuffrè';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Luigi Pistilli', '/bH5vmD2CMBHzJyBe0P0bL6iTUNL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Luigi Pistilli');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Father Pablo Ramirez', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 429 AND a.name = 'Luigi Pistilli';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '세르조 레오네', '/2576qoW8l9Z1nKGM10ar60aIwUu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '세르조 레오네');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 429 AND d.name = '세르조 레오네';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/s7qPuoj4liolAtmx9vcL6AyaZzR.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 429;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/Adrip2Jqzw56KeuV2nAxucKMNXA.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 429;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (769, '좋은 친구들', '1990-09-12', '마피아 영화의 분수령', '아일랜드계 이탈리아인 헨리 힐와 토미는 13살에 마피아에 입문해 지미와 함께 트럭이나 공항 화물을 훔치는 일을 한다. 결혼 후에도 마피아 생활을 계속하는 헨리는 이제 조직에서도 안정된 위치와 경제적 여유를 갖는다.  어느 날 헨리와 지미는 공항터미널 사건을 모의해 현금 6백만 달러라는 엄청한 돈을 훔친다. 이 사건을 은폐하기 위해 혈안이 된 지미는 모의에 참여했던 사람들을 죽이고, 토미는 마피아 조직에 가담했다가 살해당한다. 엎친데 덮친격으로 헨리마저 마약거래로 경찰서에 잡혀 들어가는데...', 146, '18', 'RELEASED', 146.232000, 8.500000, 46800000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 769 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 769 AND g.name = '범죄';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '로버트 드 니로', '/cT8htcckIuyI1Lqwt1CvD02ynTh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 드 니로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'James Conway', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 769 AND a.name = '로버트 드 니로';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '레이 리오타', '/rhaCUi04uEXDFvuPM5Drj1AprE6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레이 리오타');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Henry Hill', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 769 AND a.name = '레이 리오타';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '조 페시', '/4AO0Rwdg2ky8Usmgzgj0dvhy7Zw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조 페시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tommy DeVito', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 769 AND a.name = '조 페시';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '로렌 브라코', '/tAtpCzN4sTOy1RHpMpJj52zTO4S.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로렌 브라코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Karen Hill', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 769 AND a.name = '로렌 브라코';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '폴 소비노', '/4gDEo0wty5ixtrpV0U17PlHoFik.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '폴 소비노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paul Cicero', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 769 AND a.name = '폴 소비노';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '마틴 스콜세지', '/9U9Y5GQuWX3EZy39B8nkk4NY01S.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '마틴 스콜세지');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 769 AND d.name = '마틴 스콜세지';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zF9hSBS1t7PVFLo01GrJ3OjGi67.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 769;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7TF4p86ZafnxFuNqWdhpHXFO244.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 769;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (12477, '반딧불이의 묘', '1988-04-16', '14살 오빠, 4살 여동생... 오누이는 함께라서 행복했습니다.', '2차 세계대전, 일본의 한 마을에 폭격기로 인한 대공습이 일어난다. 마을이 화염으로 휩싸이자, 14살인 세이타는 부모님과 따로 만나기로 약속한 채 4살짜리 여동생 세츠코를 업고 피신한다. 결국 집과 어머니를 잃고 먼 친척아주머니의 집으로 향하는 세이타와 세츠코. 힘들고 어려운 환경에서도 오빠 세이타는 천진하고 착한 여동생 세츠코를 보면서 희망과 용기를 잃지 않는다. 하지만 시간이 지날수록 친척아주머니의 남매에 대한 냉대는 더욱 심해지고, 세이타는 어머니가 남겨주었던 마지막 여비를 챙겨 세츠코와 함께 산 속에 있는 방공호로 거처를 옮긴다. 두 남매는 산 속 동굴에서 반딧불이를 잡아 불을 밝히고, 물고기와 개구리를 잡아먹으며 살아가는데...', 89, '12', 'RELEASED', 0.052000, 8.456000, 516962, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 12477 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 12477 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 12477 AND g.name = '전쟁';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '辰巳努', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '辰巳努');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Seita (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12477 AND a.name = '辰巳努';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '白石綾乃', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '白石綾乃');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Setsuko (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12477 AND a.name = '白石綾乃';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '志乃原良子', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '志乃原良子');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mother (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12477 AND a.name = '志乃原良子';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '山口朱美', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '山口朱美');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Auntie (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12477 AND a.name = '山口朱美';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Masayo Sakai', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Masayo Sakai');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Woman who takes care of Setsuko (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12477 AND a.name = 'Masayo Sakai';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '다카하타 이사오', '/xTkZOWe1VU4xNba1lO0T9trFLHm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '다카하타 이사오');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 12477 AND d.name = '다카하타 이사오';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uN0x0G4uuRjFJIFN57iYihBV2Qh.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 12477;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gwj4R8Uy1GwejKqfofREKI9Jh7L.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 12477;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (11216, '시네마 천국', '1988-11-17', '영화가 세상의 전부인 소년 토토와 낡은 마을 극장의 영사기사 알프레도의 애틋한 우정', '어린 시절 영화가 세상의 전부였던 소년 토토는 학교 수업을 마치면 마을 광장에 있는 낡은 시네마 천국이라는 극장으로 달려가 영사 기사 알프레도와 친구로 지내며 어깨너머로 영사기술을 배운다. 어느 날 관객들을 위해 광장에서 야외 상영을 해주던 알프레도가 그만 화재 사고로 실명하게 되고, 토토가 그의 뒤를 이어 시네마 천국의 영상기사로 일하게 된다. 실명한 후에도 토토의 친구이자 아버지로 든든한 정신적 지주가 되어준 알프레도는 청년이 된 토토가 사랑하는 여자 엘레나의 부모님의 반대로 좌절하자 넓은 세상으로 나가서 더 많은 것을 배우라며 권유하는데...', 124, 'ALL', 'RELEASED', 41.343000, 8.500000, 11990401, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11216 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11216 AND g.name = '로맨스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '필립 느와레', '/mWPa6A0JK3tfVRQDIzCQGEao19B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '필립 느와레');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alfredo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11216 AND a.name = '필립 느와레';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '자끄 페렝', '/IbMtXB1Sy6JaLsSKrJiplZqKTO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '자끄 페렝');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Salvatore ''Totò'' Di Vita (adult)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11216 AND a.name = '자끄 페렝';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마르코 레오나르디', '/5VVhO9rPvRgKsZME2gZKtG9WgWD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마르코 레오나르디');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Salvatore ''Totò'' Di Vita (teen)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11216 AND a.name = '마르코 레오나르디';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '살바토레 카스치오', '/7t59ZGfLUv30DBgoUcqXXhK0t6Y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '살바토레 카스치오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Salvatore ''Totò'' Di Vita (child)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11216 AND a.name = '살바토레 카스치오';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '아그네즈 나노', '/gUbvX3dm8rIq58phY8jSl3oPgUe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아그네즈 나노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elena Mendola (teen) / Elena''s daughter (in Director''s cut)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11216 AND a.name = '아그네즈 나노';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '주세페 토르나토레', '/pjVrtNGsCSNs5IeRVr34PMn1hVR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '주세페 토르나토레');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 11216 AND d.name = '주세페 토르나토레';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/r782z4H7GzkyNaf3hAtBB4pVkOj.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 11216;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7lyq8hK0MhPHpUXdnqbFvZYSfkk.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 11216;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (637, '인생은 아름다워', '1997-12-20', '깐느가 그랑프리를 헌사한 이탈리아 영화천재의 걸작', '로마에 갓 상경한 시골 총각 귀도는 운명처럼 만난 여인 도라에게 첫눈에 반한다. 넘치는 재치와 유머로 약혼자가 있던 그녀를 사로잡은 귀도는 가정을 꾸리며 분신과도 같은 아들 조수아를 얻는다. 조수아의 다섯 살 생일, 갑작스레 들이닥친 군인들은 귀도와 조수아를 수용소 행 기차에 실어버리고, 소식을 들은 도라 역시 기차에 따라 오른다. 귀도는 아들을 달래기 위해 무자비한 수용소 생활을 단체게임이라 속이고 1,000점을 따는 우승자에게는 진짜 탱크가 주어진다고 말한다. 하루하루가 지나 어느덧 전쟁이 끝났다는 말을 들은 귀도는 조수아를 창고에 숨겨둔 채 아내를 찾아 나서는데...', 116, 'All', 'RELEASED', 97.340000, 8.448000, 230098753, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 637 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 637 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '로베르토 베니니', '/noelOhwX1oaNSvU9NLKhPrHTFI3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로베르토 베니니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Guido', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637 AND a.name = '로베르토 베니니';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Nicoletta Braschi', '/9IeE3Iz9HXZVTrvhjSCKlR4FLxB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nicoletta Braschi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dora', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637 AND a.name = 'Nicoletta Braschi';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Giorgio Cantarini', '/ezOFvAPMQ535M0EhIkoUKW8JIwo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Giorgio Cantarini');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Giosué', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637 AND a.name = 'Giorgio Cantarini';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Giustino Durano', '/o302wA8DHLHDLhTXOF5wEi3C99G.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Giustino Durano');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zio', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637 AND a.name = 'Giustino Durano';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Sergio Bini Bustric', '/crnlLn1SxP2LqbsXNr8CQrvaiNc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sergio Bini Bustric');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ferruccio', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637 AND a.name = 'Sergio Bini Bustric';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '로베르토 베니니', '/noelOhwX1oaNSvU9NLKhPrHTFI3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '로베르토 베니니');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 637 AND d.name = '로베르토 베니니';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yjOqQsQHdsEZfAosZERqHiwjaty.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 637;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gavyCu1UaTaTNPsVaGXT6pe5u24.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 637;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (157336, '인터스텔라', '2014-11-05', '우린 답을 찾을 것이다, 늘 그랬듯이', '세계 각국의 정부와 경제가 완전히 붕괴된 미래가 다가온다. 지난 20세기에 범한 잘못이 전 세계적인 식량 부족을 불러왔고, NASA도 해체되었다. 나사 소속 우주비행사였던 쿠퍼는 지구에 몰아친 식량난으로 옥수수나 키우며 살고 있다. 거센 황사가 몰아친 어느 날 알 수 없는 힘에 이끌려 딸과 함께 도착한 곳은 인류가 이주할 행성을 찾는 나사의 비밀본부. 이 때 시공간에 불가사의한 틈이 열리고, 이 곳을 탐험해 인류를 구해야 하는 임무를 위해 쿠퍼는 만류하는 딸을 뒤로한 채 우주선에 탑승하는데...', 169, '12', 'RELEASED', 247.217000, 8.441000, 701729206, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 157336 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 157336 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 157336 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '매튜 매커너히', '/rUxLWWCDUF8RnDaocSqrVDJ2MS1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '매튜 매커너히');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cooper', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 157336 AND a.name = '매튜 매커너히';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '앤 해서웨이', '/kRYxBuUtN3vNz5pLfqCf32ZYlw2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앤 해서웨이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brand', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 157336 AND a.name = '앤 해서웨이';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마이클 케인', '/bVZRMlpjTAO2pJK6v90buFgVbSW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 케인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Professor Brand', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 157336 AND a.name = '마이클 케인';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제시카 차스테인', '/xRvRzxiiHhgUErl0yf9w8WariRE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제시카 차스테인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Murph', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 157336 AND a.name = '제시카 차스테인';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '케이시 애플렉', '/vD5MtCjHPHpmU9XNn74EPGMHT7o.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케이시 애플렉');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tom', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 157336 AND a.name = '케이시 애플렉';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '크리스토퍼 놀란', '/xuAIuYSmsUzKlUMBFGVZaWsY3DZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스토퍼 놀란');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 157336 AND d.name = '크리스토퍼 놀란';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/evoEi8SBSvIIEveM3V6nCJ6vKj8.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 157336;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xJHokMbljvjADYdit5fK5VQsXEG.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 157336;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (550, '파이트 클럽', '1999-10-15', '믿어왔던 상식과 규칙에 통렬한 카운터를 날리는 스타일리시 액션 무비!', '자동차 회사의 리콜 심사관으로 일하는 주인공(에드워드 노튼)은 일상의 무료함과 공허함 속에서 늘 새로운 탈출을 꿈꾼다. 그는 비행기에서 자신을 비누 제조업자라고 소개하는 타일러 더든(브래드 피트)을 만난다. 집에 돌아온 주인공은 아파트가 누군가에 의해 폭파되었음을 발견하고, 타일러에게 도움을 청해 함께 생활하게 된다. 어느 날 밤 타일러는 주인공에게 자신을 때려달라고 부탁한다. 사람은 싸워봐야 진정한 자신을 알 수 있다는 것이다. 결국 이들은 매주 토요일 밤 술집 지하에서 맨주먹으로 격투를 벌이는 파이트 클럽을 결성하기에 이르는데...', 139, '19', 'RELEASED', 126.907000, 8.438000, 100853753, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 550 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '에드워드 노튼', '/8nytsqL59SFJTVYVrN72k6qkGgJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에드워드 노튼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Narrator', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 550 AND a.name = '에드워드 노튼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '브래드 피트', '/9OfnD7lxgIj3BNQpJFnwxnwl6w5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브래드 피트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tyler Durden', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 550 AND a.name = '브래드 피트';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '헬레나 본햄 카터', '/hJMbNSPJ2PCahsP3rNEU39C8GWU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헬레나 본햄 카터');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marla Singer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 550 AND a.name = '헬레나 본햄 카터';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Meat Loaf', '/7gKLR1u46OB8WJ6m06LemNBCMx6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Meat Loaf');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Robert Paulson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 550 AND a.name = 'Meat Loaf';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '자레드 레토', '/ca3x0OfIKbJppZh8S1Alx3GfUZO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '자레드 레토');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Angel Face', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 550 AND a.name = '자레드 레토';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '데이비드 핀처', '/tpEczFclQZeKAiCeKZZ0adRvtfz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '데이비드 핀처');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 550 AND d.name = '데이비드 핀처';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/eKZ07Ted7VHxQjbuZrRBFOamcKJ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 550;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hZkgoQYus5vegHoetLkCJzb17zJ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 550;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (667257, '불가능한 것들', '2021-06-17', '', '폭력적인 남편의 사망 후, 마틸데는 여전히 트라우마와 외로움 그리고 유령같이 그녀의 주변을 맴도는 남편의 흔적에 시달린다. 이웃집 소년 미겔과 가까워진 마틸데는 미겔의 마약 판매에 가담하면서, 이전까지 경험하지 못했던 새로운 삶에 눈을 뜨기 시작한다. 나이 차에도 불구하고 두 사람이 나누는 평범하지 않은 우정은 서로의 상처를 보듬고 치유해 준다. 삶의 막다른 골목에서, 불가능해 보였던 희망을 향해 나아가는 마틸데와 미겔의 용기 어린 선택이 감동으로 다가온다.', 88, '', 'RELEASED', 23.922000, 8.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 667257 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 667257 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Nora Velázquez', '/lh3fpLrabTkEuJ6rDGaighy1N1C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nora Velázquez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Matilde', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 667257 AND a.name = 'Nora Velázquez';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Benny Emmanuel', '/rSqiumttAOg08Auypm5Z7FpdvMS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Benny Emmanuel');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miguel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 667257 AND a.name = 'Benny Emmanuel';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Luisa Huertas', '/6GuQjQESw4RBadSElqaunwKhOKE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Luisa Huertas');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eugenia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 667257 AND a.name = 'Luisa Huertas';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Salvador Garcini', '/Rc6tcF11oAcglEpl4AOxK9e9lU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Salvador Garcini');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Porfirio', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 667257 AND a.name = 'Salvador Garcini';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Andrés Delgado', '/gq7nwfzsF9R81qGCc2tlzgO2FI7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Andrés Delgado');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lalo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 667257 AND a.name = 'Andrés Delgado';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '에르네스토 콘트레라스', '/57RDgBYP5qkQ5LHUdFJdABpq5yw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '에르네스토 콘트레라스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 667257 AND d.name = '에르네스토 콘트레라스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/eaf7GQj0ieOwm08rrvjJQNbN0kN.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 667257;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bxSBOAD8AuMHYMdW3jso9npAkgt.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 667257;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (539, '싸이코', '1960-06-22', '그들은 알게 될 거야, 난 파리 한 마리도 해치지 못하는 사람이란 걸', '마리온 크레인은 그녀의 애인 샘과 결혼하길 원하지만 샘은 빚을 갚을 때까지 기다리라고 말한다. 그래서 그녀는 자신이 다니고 있는 회사 사장이 은행에 입금하라고 맡긴 돈을 들고 도망친다. 도주 첫날 밤 묵게 된 도로변의 낡은 모텔 주인인 노만 베이츠는 그녀에게 친절하게 대해주며 자신은 모텔 바로 뒤쪽 저택에서 몸이 불편한 어머니와 함께 살고 있다고 말한다. 잠자리에 들기 전 마리온이 샤워를 하는 도중, 난데없이 검은 형상이 욕실에 나타나고 마리온은 실종된다. 마리온을 찾기 위해 그녀의 언니 릴라와 샘, 그리고 보험회사 측에서 고용한 탐정 등 세 사람이 추적에 나서는데...', 109, '18', 'RELEASED', 44.449000, 8.431000, 32000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 539 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 539 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 539 AND g.name = '미스터리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '안소니 퍼킨스', '/sqZeCzoFYd482whmnBFQU9vHc2s.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '안소니 퍼킨스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Norman Bates', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 539 AND a.name = '안소니 퍼킨스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '자넷 리', '/2dv9IqJEx31RSoH7xAHlJZXF5uB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '자넷 리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marion Crane', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 539 AND a.name = '자넷 리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '베라 마일스', '/9PDTsJnBfrAlvVPOBBFS3ehN8lD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '베라 마일스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lila Crane', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 539 AND a.name = '베라 마일스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'John Gavin', '/n8vlG1PRtNzv6vlwjTNK7UnoKr0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'John Gavin');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sam Loomis', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 539 AND a.name = 'John Gavin';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마틴 발삼', '/2j4LJJfTPQtvnjp8LfSGOvWFATO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마틴 발삼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Private Det. Milton Arbogast', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 539 AND a.name = '마틴 발삼';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '알프레드 히치콕', '/108fiNM6poRieMg7RIqLJRxdAwG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '알프레드 히치콕');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 539 AND d.name = '알프레드 히치콕';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vC3P8hH4r3I3fHiRFa1kj6yzeaN.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 539;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uif5fUshJrXyyDzfpzp1DLw3N0S.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 539;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (598, '시티 오브 갓', '2002-08-30', '신이 버린 도시, 끝까지 남는 자만이 군림할 수 있다', '빈민가가 막 형성되기 시작한 1960년대, 마을을 지나가는 배달 트럭을 털면서 가족을 부양하는 텐더 삼총사가 주름잡던 그 시기에는 엄연한 룰이 존재했다. 돈은 훔치되 살인은 삼가는 것이다. 이들은 엉뚱한 용의자를 사살하고도 지갑을 챙기는 악질 경찰에 비하면 약자에 불과했다. 텐더 트리오 시대에 종지부를 찍은 제빼게노는 큰 돈을 만지기 위해서는 마약을 다뤄야 함을 알게 된다. 단짝친구 베네는 악랄하기만 할 뿐 주변을 다독일 줄 모르던 제빼게노를 보좌하며 또 다른 룰을 만들어내지만, 위태로운 평화의 유효기간은 그리 길지 않다.', 129, '18', 'RELEASED', 41.895000, 8.400000, 30641770, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 598 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 598 AND g.name = '범죄';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Alexandre Rodrigues', '/sN0o245HMVYTnEWPBYt3qdiQupq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alexandre Rodrigues');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Buscapé - Rocket', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 598 AND a.name = 'Alexandre Rodrigues';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Leandro Firmino', '/aEzWJgEzId04EP8C2UFQaF28WTW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Leandro Firmino');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zé Pequeno - Li''l Zé', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 598 AND a.name = 'Leandro Firmino';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Phellipe Haagensen', '/3dxy4unadLTAb6aUQUyX2r3AkE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Phellipe Haagensen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bené - Benny', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 598 AND a.name = 'Phellipe Haagensen';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Douglas Silva', '/8GAtzTf0qjTf9HgePUFwsFbQVbn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Douglas Silva');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dadinho - Li''l Dice', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 598 AND a.name = 'Douglas Silva';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jonathan Haagensen', '/cha3GxI1MfbCjc973iUNKUvopQF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jonathan Haagensen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cabeleira - Shaggy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 598 AND a.name = 'Jonathan Haagensen';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '페르난도 메이렐레스', '/at0fRZl4fJwqaytXOfvgs1lOM9E.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '페르난도 메이렐레스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 598 AND d.name = '페르난도 메이렐레스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/iKXrQB16sxeXoc6GlnYjeeZKsOW.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 598;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uvitbjFU4JqvMwIkMWHp69bmUzG.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 598;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (311, '원스 어폰 어 타임 인 아메리카', '1984-05-23', '인간은 결국 인간이다', '1921년, 좀도둑질을 일삼던 누들스는 친구들과 함께 밀수품 운반 일을 하며 돈을 벌어들인다. 누들스 무리에 위협을 느낀 벅시는 누들스의 친구를 죽이고, 분노한 누들스는 벅시를 살해한 후 감옥에 들어가게 된다. 1932년, 출소한 누들스는 어린 시절 첫사랑 데보라와 밀주 사업으로 크게 성공한 맥스를 다시 만나지만, 금주법 철폐로 밀주 사업도 위기를 맞는다. 맥스는 누들스에게 연방준비은행을 털 것을 제안하지만 누들스는 거절한다. 1968년, 베일리 재단 파티에 초대 받은 누들스는 재단 창립 기념 사진 속에서 데보라를 발견하고 그녀를 찾아가는데...', 229, '18', 'RELEASED', 66.866000, 8.417000, 5500000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 311 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 311 AND g.name = '범죄';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '로버트 드 니로', '/cT8htcckIuyI1Lqwt1CvD02ynTh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 드 니로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'David ''Noodles'' Aaronson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 311 AND a.name = '로버트 드 니로';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제임스 우즈', '/tLH7mpH4KqkWL5VgjueTbewGsfK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제임스 우즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maximilian ''Max'' Bercovicz', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 311 AND a.name = '제임스 우즈';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '엘리자베스 맥거번', '/llMb5BfJhWnDqBjmoKDogZaoyer.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '엘리자베스 맥거번');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Deborah Gelly', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 311 AND a.name = '엘리자베스 맥거번';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Treat Williams', '/bQ3zECF7TRpF8cwCmxqn4Qv2zHD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Treat Williams');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'James Conway O''Donnell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 311 AND a.name = 'Treat Williams';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '튜스데이 웰드', '/wAHhvoII75VeT5OGpHoTGf1hJ7w.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '튜스데이 웰드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Carol', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 311 AND a.name = '튜스데이 웰드';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '세르조 레오네', '/2576qoW8l9Z1nKGM10ar60aIwUu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '세르조 레오네');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 311 AND d.name = '세르조 레오네';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xbuc6sjIIopkA1Ep24rR6yCw0DK.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 311;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uPYa165sraN2c8gZBM9C47g3JoU.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 311;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (120, '반지의 제왕: 반지 원정대', '2001-12-18', '마지막 반지를 차지하는 자, 모든 힘을 지배하게 될 것이다', '호빗이라 불리우는 난장이 종족 중의 한 명인 프로도는 자신의 삼촌에게서 우연히 절대 반지를 물려받게 되고, 마법사 간달프를 통해서 절대반지가 사우론의 손에 들어가면 악의 세력이 세상을 지배하게 된다는 것을 알게 된다. 하지만 절대반지를 영원히 파괴할 수 있는 유일한 방법은 반지가 만들어진 불의 산의 용암에 그것을 던져 넣는 길 뿐이다. 마침내 프로도와 그의 친구들, 엘프족인 레골라스, 난장이족 김리, 두명의 인간 전사 아라곤과 보로미르, 그리고 마법사 간달프로 구성된 반지 원정대가 길고도 험난한 여정을 떠나게 되는데...', 227, '12', 'RELEASED', 171.266000, 8.416000, 871368364, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 120 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 120 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 120 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '일라이저 우드', '/7UKRbJBNG7mxBl2QQc5XsAh6F8B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '일라이저 우드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frodo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 120 AND a.name = '일라이저 우드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이안 맥켈런', '/5cnnnpnJG6TiYUSS7qgJheUZgnv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이안 맥켈런');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gandalf', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 120 AND a.name = '이안 맥켈런';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '비고 모텐슨', '/vH5gVSpHAMhDaFWfh0Q7BG61O1y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '비고 모텐슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Aragorn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 120 AND a.name = '비고 모텐슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '숀 애스틴', '/ywH1VvdwqlcnuwUVr0pV0HUZJQA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '숀 애스틴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sam', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 120 AND a.name = '숀 애스틴';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이안 홈', '/cOJDgvgj4nMec6Inzj1H5nugTO5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이안 홈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bilbo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 120 AND a.name = '이안 홈';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '피터 잭슨', '/bNc908d59Ba8VDNr4eCcm4G1cR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피터 잭슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 120 AND d.name = '피터 잭슨';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/r18JdjImbWDRwkbVDIzWoLQqkCo.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 120;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/x2RS3uTcsJJ9IfjNPcgDmukoEcQ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 120;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (510, '뻐꾸기 둥지 위로 날아간 새', '1975-11-19', '감시와 처벌, 그리고 휴머니즘', '많은 죄를 짓고 수감중이던 맥머피는 교도소에서 정신 병원으로 후송되는데, 감옥보다는 자유로울 것으로 생각했지만 전혀 그렇지 않다는 것을 깨닫는다. 정신 병원의 여러 환자들과 생활하면서 맥머피는 그들이 겉으로는 전혀 문제가 없어 보이지만 보이지 않는 병원내의 압력에 의해 짓눌려 사는 죽은 인간들임을 간파한다. 그리고 그러한 압력의 주범이 간호사 레취드임을 알게 된다. 맥머피는 환자들을 끌고 병원을 빠져나가 낚시를 다녀오거나 파티를 여는 등 의도적인 반항을 시도하다 결국 탈출을 결심하게 되는데...', 133, '19', 'RELEASED', 40.129000, 8.400000, 108981275, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 510 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '잭 니콜슨', '/6h12pZsgj3WWjMtykUgfLkLEBWz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '잭 니콜슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Randle Patrick McMurphy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 510 AND a.name = '잭 니콜슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Brad Dourif', '/o9f0fHMF1Jo0PDCjz2r1dneolwS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Brad Dourif');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Billy Bibbit', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 510 AND a.name = 'Brad Dourif';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '루이즈 플레쳐', '/hN15em5LqXqDe1QgDa6lXK9fx3z.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루이즈 플레쳐');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nurse Mildred Ratched', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 510 AND a.name = '루이즈 플레쳐';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '대니 드비토', '/6kO4IN7ndoIGw2JhyhAQN3SFmdx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '대니 드비토');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Martini', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 510 AND a.name = '대니 드비토';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'William Redfield', '/6w7BRi6bTRZq263Bxkfogy4ekLB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'William Redfield');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dale Harding', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 510 AND a.name = 'William Redfield';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '밀로스 포먼', '/ypWY2o3oikT2LTAQcCPAcUi4zqG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '밀로스 포먼');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 510 AND d.name = '밀로스 포먼';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/g6TD3q0aunRN5VveKauoH8FdxQw.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 510;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qUq3QTr2KLvGIcN0GaaaYx9bbyH.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 510;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (696374, '가브리엘의 지옥', '2020-05-29', '', '', 122, '', 'RELEASED', 16.571000, 8.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 696374 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 696374 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Melanie Zanetti', '/lbUQ7ilvBtWMU23reKsHg3jRmsf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Melanie Zanetti');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Julianne Mitchell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 696374 AND a.name = 'Melanie Zanetti';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Giulio Berruti', '/cCOWVvjQ1TblPvM7TgMBqMczkOX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Giulio Berruti');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gabriel Emerson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 696374 AND a.name = 'Giulio Berruti';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Kurt McKinney', '/ebkMXPJXAGsPpfzysNmht6NVtR6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kurt McKinney');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tom Mitchell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 696374 AND a.name = 'Kurt McKinney';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Agnes Albright', '/39laAb3lRSVQv4NtXzIwuowuFry.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Agnes Albright');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 696374 AND a.name = 'Agnes Albright';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Margaux Brooke', '/leLl5l6KnjMdg5O48FhDfB7GquI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Margaux Brooke');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 696374 AND a.name = 'Margaux Brooke';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Tosca Musk', '/1tWccsh9uR9mK3Q0e4PZKe0e6eB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Tosca Musk');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 696374 AND d.name = 'Tosca Musk';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oyG9TL7FcRP4EZ9Vid6uKzwdndz.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 696374;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/w2uGvCpMtvRqZg6waC1hvLyZoJa.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 696374;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (40096, '어 독스 윌', '2000-09-15', '', '', 104, '', 'RELEASED', 10.059000, 8.406000, 4903192, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 40096 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 40096 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 40096 AND g.name = '판타지';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Matheus Nachtergaele', '/zgTT5AP7NYa2hN0jUqHIHkNyp2v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Matheus Nachtergaele');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'João Grilo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 40096 AND a.name = 'Matheus Nachtergaele';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Selton Mello', '/2kMNDxslDMiWORhrwlzenq0hbMj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Selton Mello');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chicó', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 40096 AND a.name = 'Selton Mello';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Rogério Cardoso', '/ertp7Yo3BhAA9FXaXJo4LDK9Out.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rogério Cardoso');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Padre João', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 40096 AND a.name = 'Rogério Cardoso';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Denise Fraga', '/oLn1Av1qF0vbip8WKnTb4EQkaZ5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Denise Fraga');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dora', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 40096 AND a.name = 'Denise Fraga';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Diogo Vilela', '/hsAky8EzEgWMlbCr9YgJJ69B5lt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Diogo Vilela');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eurico', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 40096 AND a.name = 'Diogo Vilela';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Guel Arraes', '/frBx9AAVbssDIaVh1wzfqnNEJ8b.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Guel Arraes');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 40096 AND d.name = 'Guel Arraes';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/imcOp1kJsCsAFCoOtY5OnPrFbAf.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 40096;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/alQqTpmEkxSLgajfEYTsTH6nAKB.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 40096;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (14537, '하라키리', '1962-09-15', '', '사소한 잘못으로 상부로부터 할복 명령을 하달받은 사무라이가 그것에 저항하는 이야기. 인습과 전통에 대해 순응하는 일본 사회에 저항하는 메세지를 담은 작품.', 135, '', 'RELEASED', 29.697000, 8.398000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 14537 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 14537 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 14537 AND g.name = '역사';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '나카다이 타츠야', '/4LygOe0vFQplLIft5IUWI5OewPX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나카다이 타츠야');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hanshiro Tsugumo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 14537 AND a.name = '나카다이 타츠야';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이시하마 아키라', '/sQC3XSIR0LeYPz11VJt8nJoeRKY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이시하마 아키라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Motome Chijiiwa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 14537 AND a.name = '이시하마 아키라';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이와시타 시마', '/rW0pj69GsEQoQjeYt5WdX7bPxYP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이와시타 시마');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miho Tsugumo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 14537 AND a.name = '이와시타 시마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '丹波哲郎', '/ihugQ2afio03fcKSGXdkcQKTVmt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '丹波哲郎');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hikokuro Omodaka', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 14537 AND a.name = '丹波哲郎';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '三島雅夫', '/bfPdwV4TCWJ7jjf16MFNsOndHWB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '三島雅夫');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tango Inaba', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 14537 AND a.name = '三島雅夫';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '고바야시 마사키', '/5epZ39mf1Ii7xOjqYx2YYq39y5X.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '고바야시 마사키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 14537 AND d.name = '고바야시 마사키';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/juRMHEWUbk2kM9RdxjjcVjj7T1a.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 14537;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/nC3IjYhUgZWgfKfFX0ygMigFwgc.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 14537;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (704264, 'Primal: Tales of Savagery', '2019-11-21', '', '', 85, '', 'RELEASED', 17.858000, 8.403000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 704264 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 704264 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 704264 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 704264 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Aaron LaPlante', '/9o42oeMwvAfoJq2E5H83hdvTrxj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Aaron LaPlante');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Spear / Big Gorilla / Monkey #3 (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 704264 AND a.name = 'Aaron LaPlante';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jon Olson', '/crkYY5wcjoDn04BFlkF5WiR3d1A.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jon Olson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Krog / Shaman (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 704264 AND a.name = 'Jon Olson';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Bryan Andrews', '/28gfwWcp0961McmxFld5nKdNXV3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bryan Andrews');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 704264 AND a.name = 'Bryan Andrews';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Darrick Bachman', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Darrick Bachman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 704264 AND a.name = 'Darrick Bachman';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Genndy Tartakovsky', '/neLR8ws82ezlbhOyUvhtLXwQZWL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Genndy Tartakovsky');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 704264 AND d.name = 'Genndy Tartakovsky';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9NBBkdxH0TjQEBSN2AzeE1sgsF9.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 704264;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uBZQOYZLIU9dBmd62fdzBAoropu.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 704264;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (4935, '하울의 움직이는 성', '2004-09-09', '소녀가 마법에 걸린 순간 마법사의 성문이 열렸다', '19세기 말 마법과 과학이 공존하고 있는 세계 앵거리. 소피는 돌아가신 아버지의 모자상점에서 쉴틈없이 일하는 18살 소녀이다. 어느 날 오랫만에 마을로 나간 소피는 우연히 하울을 만나게 된다. 하울은 왕실 마법사로서 핸섬하지만 조금 겁이 많은 청년이다. 황무지 마녀는 두 사람의 사이를 오해, 주문을 걸어 소피를 90살의 늙은 할머니로 만들어 버린다. 가족을 걱정한 소피는 집을 나오게 되고 황무지를 헤매다가 하울이 사는 성에서 가정부로 낯선 생활을 시작한다. 4개의 다리로 걷는 기괴한 움직이는 성 안에서 하울과 소피의 기묘한 사랑과 모험이 시작되는데...', 119, 'All', 'RELEASED', 79.240000, 8.400000, 236049757, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 4935 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 4935 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 4935 AND g.name = '모험';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '바이쇼 치에코', '/b8ANR4WfdUZtoU4ktlnMFzbq759.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '바이쇼 치에코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sophie (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 4935 AND a.name = '바이쇼 치에코';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '기무라 타쿠야', '/sswCg8kvFsgSaVJwcIKKe4K7jOe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '기무라 타쿠야');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Howl (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 4935 AND a.name = '기무라 타쿠야';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '미와 아키히로', '/pCfBeLJigKnUWOAy7hsdBR7K0UV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미와 아키히로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Witch of the Waste (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 4935 AND a.name = '미와 아키히로';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '가슈인 타츠야', '/fLqIdkShknsJmZy4EfBWuWyHN4C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '가슈인 타츠야');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Calcifer (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 4935 AND a.name = '가슈인 타츠야';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '카미키 류노스케', '/ut7ewXjdgUmgkhJ1EtbOo9tbc7s.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카미키 류노스케');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Markl (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 4935 AND a.name = '카미키 류노스케';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '미야자키 하야오', '/mG3cfxtA5jqDc7fpKgyzZMKoXDh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '미야자키 하야오');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 4935 AND d.name = '미야자키 하야오';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3sVFlmzBCZpwlsosKHxyK4d9oDw.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 4935;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xqaN2WYQclQlqvKvsOcNgOx2vRn.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 4935;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (121, '반지의 제왕: 두 개의 탑', '2002-12-18', '새로운 힘이 떠오른다', '9명의 반지원정대는 사우론의 세력에 맞서 반지를 지켜냈지만 반지 원정대는 뿔뿔이 흩어지게 된다. 메리와 피핀을 구하기 위해 우르크하이 군대를 추격하던 아라곤과 레골라스, 김리는 유령 숲에서 백색의 마법사로 부활한 마법사 간달프를 만나게 되고 사우론이 암흑세계의 두 개의 탑을 통합하여 점점 그 세력을 넓혀가고 있다는 사실을 듣게 된다. 이에 아라곤과 원정대는 중간계의 선한 무리의 통합을 이뤄 사우론의 세력을 견제해야 하는 큰 임무를 맡게 된다. 하지만 원수지간인 곤도르와 로한으로 나뉜 인간 종족의 통합은 쉽지 않고 게다가 로한의 왕마저 사루만에게 동화되는데...', 177, '12', 'RELEASED', 125.049000, 8.401000, 926287400, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 121 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 121 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 121 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '일라이저 우드', '/7UKRbJBNG7mxBl2QQc5XsAh6F8B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '일라이저 우드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frodo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 121 AND a.name = '일라이저 우드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이안 맥켈런', '/5cnnnpnJG6TiYUSS7qgJheUZgnv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이안 맥켈런');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gandalf', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 121 AND a.name = '이안 맥켈런';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '비고 모텐슨', '/vH5gVSpHAMhDaFWfh0Q7BG61O1y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '비고 모텐슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Aragorn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 121 AND a.name = '비고 모텐슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '숀 애스틴', '/ywH1VvdwqlcnuwUVr0pV0HUZJQA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '숀 애스틴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sam', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 121 AND a.name = '숀 애스틴';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '앤디 서키스', '/eNGqhebQ4cDssjVeNFrKtUvweV5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앤디 서키스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gollum', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 121 AND a.name = '앤디 서키스';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '피터 잭슨', '/bNc908d59Ba8VDNr4eCcm4G1cR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피터 잭슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 121 AND d.name = '피터 잭슨';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zxZdTi3fA7aDxEOivmzZAY2bmTu.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 121;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mshaKLtPUxcDBhzau6qiObEblhL.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 121;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (324857, '스파이더맨: 뉴 유니버스', '2018-12-06', '새로운 스파이더맨 평행세계의 시작', '평범한 10대 마일스 모랄레스는 우연히 방사능 거미에 물려 스파이더맨 능력을 가지게 된다. 혼란스러워하던 마일스는 악당과 싸우고 있는 피터 파커를 마주치게 되고 피터 파커는 마일스가 자신과 같은 능력을 가지고 있음을 직감한다. 여러 개의 평행세계가 존재한다는 것을 알게 된 마일스와 피터 파커는 이후 스파이더우먼 스파이더 그웬, 스파이더맨 누아르, 스파이더햄 등 평행세계 속 공존하는 모든 스파이더맨들을 만나게 되는데... 하나의 유니버스에서 만나 팀을 결성한 스파이더맨들은 과연 세계를 구할 수 있을까?', 117, '12', 'RELEASED', 113.413000, 8.400000, 384298736, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 324857 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 324857 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 324857 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 324857 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '셔믹 무어', '/ovUKfVOwJ7CadEHaG3NDsfA5xRq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '셔믹 무어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miles Morales (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324857 AND a.name = '셔믹 무어';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제이크 존슨', '/3UNfW2qZgRkW81neNVfQvaRC92K.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이크 존슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Peter B. Parker (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324857 AND a.name = '제이크 존슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '헤일리 스타인펠드', '/dxSDWkiVaC6JYjrV3XRAZI7HOSS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헤일리 스타인펠드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gwen Stacy (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324857 AND a.name = '헤일리 스타인펠드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마허샬라 알리', '/j0c8X3ieYolm9UgOMDV4Ty5kf5M.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마허샬라 알리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Uncle Aaron (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324857 AND a.name = '마허샬라 알리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '브라이언 타이리 헨리', '/2MsJh0bpyzwvOUnXOltHp3j85Pb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브라이언 타이리 헨리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jefferson Davis (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324857 AND a.name = '브라이언 타이리 헨리';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '밥 퍼시케티', '/cNd5VyMI3sNgiHOwLIB7WDiH128.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '밥 퍼시케티');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 324857 AND d.name = '밥 퍼시케티';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '피터 램지', '/eAL9QdCEYyxiMP9cl9lQddg8zEa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피터 램지');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 324857 AND d.name = '피터 램지';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '로드니 로스먼', '/75yKuJr1wL8qesEDYL2IHK67BEx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '로드니 로스먼');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 324857 AND d.name = '로드니 로스먼';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/d9V6Q9vpVpmaca7vwSUbCajtDb3.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 324857;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qGQf2OHIkoh89K8XeKQzhxczf96.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 324857;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (255709, '소원', '2013-10-02', '가장 아픈 곳에서 피어난 가장 따뜻한 이야기', '어느 비 오는 아침, 학교를 가던 9살 소녀 소원은 술에 취한 아저씨에게 끌려가 믿고 싶지 않은 사고를 당한다. 이 일로 몸과 마음에 지울 수 없는 상처를 받은 소원이네 가족. 하지만 절망 끝에서 희망을 찾아 나서는데...', 123, '12', 'RELEASED', 18.740000, 8.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 255709 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '설경구', '/9SqQcvVUPUziK37i5jIeUoqSOMB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '설경구');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dong-hoon', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 255709 AND a.name = '설경구';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '엄지원', '/tpWZnjZUREwMSzCbKbGPI6DVUdw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '엄지원');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mi-hee', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 255709 AND a.name = '엄지원';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이레', '/i1A5E4v5xRFammipC3H4jeOwczv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이레');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'So-won', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 255709 AND a.name = '이레';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '김상호', '/jGo5mG7OEj9LAGh55UPEwL4cEQl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김상호');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gwang-sik', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 255709 AND a.name = '김상호';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '김해숙', '/dt5bmKeG7qbvDwHrxFZFxiGc9fZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김해숙');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Psychiatrist Jung-sook', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 255709 AND a.name = '김해숙';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '이준익', '/smZU1xzsTBThtM7Rp6vjaJUpchm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '이준익');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 255709 AND d.name = '이준익';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/PZlNvDwKwHeHUsXnd6SEDXWZNn.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 255709;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4Nx40jwpoTHPjCWNGoaZ6kaoGxa.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 255709;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1891, '스타워즈 에피소드 5: 제국의 역습', '1980-05-20', '모험은 계속된다', '제국군은 데스스타를 잃은 뒤에도 여전히 강력한 화력으로 반란군을 수세로 몰아넣었고, 반란군은 게릴라전을 위해 얼음으로 뒤덮인 행성 호스에 은신한다. 하지만 결국 제국군에 의해 호스의 반란군 기지마저 탄로나게 되고, 일행은 필사적으로 호스를 탈출해 다시 정처없는 피난길에 오른다. 반란군의 피난길에 함께 오르던 루크는 포스의 영이 된 오비완으로부터 제다이 마스터 요다를 찾아가라는 메시지를 받고 요다가 있는 정글 행성 대고바로 향한다. 루크는 요다를 만나 제다이가 되기 위한 훈련을 시작하고 솔로 일행은 제국군을 따돌리기 위해 옛 친구 랜도를 찾아가는데...', 124, '12', 'RELEASED', 34.419000, 8.392000, 538400000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1891 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1891 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1891 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마크 해밀', '/2ZulC2Ccq1yv3pemusks6Zlfy2s.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마크 해밀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Luke Skywalker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1891 AND a.name = '마크 해밀';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '해리슨 포드', '/n4dwIg6NbQzeMaS1yEKKlfNJH7a.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '해리슨 포드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Han Solo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1891 AND a.name = '해리슨 포드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '캐리 피셔', '/2vmMjXMFW9ebX9VNKPW7WD6HLOR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '캐리 피셔');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Princess Leia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1891 AND a.name = '캐리 피셔';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '빌리 디 윌리엄스', '/q1pi6gpoKyRlIJuUlDXsqFqgIZA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빌리 디 윌리엄스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lando Calrissian', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1891 AND a.name = '빌리 디 윌리엄스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '안소니 다니엘스', '/c876ZM5ObwYgXksrRWNNrL9KeZg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '안소니 다니엘스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'C-3PO', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1891 AND a.name = '안소니 다니엘스';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '어빈 케쉬너', '/imtFUtcASoh2e1Emtt62UuFkIWA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '어빈 케쉬너');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1891 AND d.name = '어빈 케쉬너';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/icaO5w8uLVm4JxMew71JJrQE2YX.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1891;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aJCtkxLLzkk1pECehVjKHA2lBgw.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1891;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (724089, '가브리엘의 지옥 파트 2', '2020-07-31', '', '', 105, '', 'RELEASED', 7.695000, 8.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 724089 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 724089 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Melanie Zanetti', '/lbUQ7ilvBtWMU23reKsHg3jRmsf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Melanie Zanetti');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Julia Mitchell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 724089 AND a.name = 'Melanie Zanetti';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Giulio Berruti', '/cCOWVvjQ1TblPvM7TgMBqMczkOX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Giulio Berruti');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gabriel Emerson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 724089 AND a.name = 'Giulio Berruti';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'James Andrew Fraser', '/bMHD0ezBKKNRLr8fLkWgIWpkqNs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'James Andrew Fraser');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paul Norris', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 724089 AND a.name = 'James Andrew Fraser';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Margaux Brooke', '/leLl5l6KnjMdg5O48FhDfB7GquI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Margaux Brooke');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Christa Peterson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 724089 AND a.name = 'Margaux Brooke';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Agnes Albright', '/39laAb3lRSVQv4NtXzIwuowuFry.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Agnes Albright');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paulina', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 724089 AND a.name = 'Agnes Albright';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Tosca Musk', '/1tWccsh9uR9mK3Q0e4PZKe0e6eB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Tosca Musk');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 724089 AND d.name = 'Tosca Musk';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/x5o8cLZfEXMoZczTYWLrUo1P7UJ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 724089;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jtAI6OJIWLWiRItNSZoWjrsUtmi.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 724089;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (372754, '동급생', '2016-02-20', '', '밴드 활동을 하며 여자에게도 인기가 많은 쿠사카베 히카루.  고교 입시에서 만점을 받은 인재 사죠 리히토. 도무지 접점이 없어 보이는 두 남학생은 합창 대회 연습을 계기로 친해진다. 음을 느끼고 목소리에 귀를 기울이고 화음을 만들어가며 둘의 마음은 공명하기 시작하는데… 느긋하게 고조되다 뜻밖의 순간에 터져버리는 사랑의 감정. 순수하고 솔직한 쿠사카베 히카루와 그를 밀어내면서도 조금씩 마음을 열어가는 사죠 리히토.  청춘의 풋풋함 속에서 고민하고, 망설이며 앞으로 나아가고자 하는 그들이 깨달은 마음이란…', 61, '', 'RELEASED', 19.345000, 8.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 372754 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 372754 AND g.name = '애니메이션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '노지마 켄지', '/nRSPVjDkdpnrQabnK5mENH118zN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '노지마 켄지');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rihito Sajo (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 372754 AND a.name = '노지마 켄지';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '카미야 히로시', '/u2r0u8tOa0cyh7nawcEOPpcEZr1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카미야 히로시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hikaru Kusakabe (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 372754 AND a.name = '카미야 히로시';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '石川英郎', '/gEjEDNGt3CHsyzFQdNqewZVbh0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '石川英郎');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Manabu Hara (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 372754 AND a.name = '石川英郎';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Yurino', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Yurino');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mikipon (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 372754 AND a.name = 'Yurino';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '나카무라 쇼코', '/lIPoHRbL7JKBwwf9FeR36utOUfO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '나카무라 쇼코');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 372754 AND d.name = '나카무라 쇼코';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jNJ9shLhjRavjrCGRnoTmYB18d2.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 372754;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3RMLbSEXOn1CzLoNT7xFeLfdxhq.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 372754;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (378064, '목소리의 형태', '2016-09-17', '나는 네가 정말 싫었다. 너를 다시 만나기 전까진…', '따분한 게 질색인 아이, 이시다 쇼야.  간디가 어떤 사람인지, 인류의 진화과정이라든지, 알게뭐람.  어느 날 쇼야의 따분함을 앗아갈 전학생이 나타났다. 니시미야 쇼코. 그 아이는 귀가 들리지 않는다고 한다.  쇼야의 짓궂은 장난에도 늘, 생글생글 웃고만 있다. 짜증난다.  그의 괴롭힘에 쇼코는 결국 전학을 갔고, 이시다 쇼야는 외톨이가 되었다.  6년 후, 더 이상 이렇게 살아봐야 의미가 없음을 느낀 쇼야는 마지막으로 쇼코를 찾아간다.  처음으로 전해진 두 사람의 목소리. 두 사람의 만남이 교실을, 학교를,  그리고 쇼야의 인생, 쇼코의 인생을 바꾸기 시작한다.', 130, '', 'RELEASED', 44.842000, 8.400000, 30504476, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 378064 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 378064 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이리노 미유', '/8qEEhHUObNvGQr4e6eqLu5z4qTz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이리노 미유');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shouya Ishida (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 378064 AND a.name = '이리노 미유';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '하야미 사오리', '/c3We0sp2oTaONcOX5UHA461vFla.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하야미 사오리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shouko Nishimiya (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 378064 AND a.name = '하야미 사오리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '유우키 아오이', '/4kHNZSUIux52UU2BD3H6b5c5ymZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '유우키 아오이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yuzuru Nishimiya (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 378064 AND a.name = '유우키 아오이';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '오노 켄쇼', '/wUYJ3HIeygHfh4rAqupE4RPoG3W.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오노 켄쇼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tomohiro Nagatsuka (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 378064 AND a.name = '오노 켄쇼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '카네코 유키', '/pqbqe4CxC6t94ptUW2tJfK5j2J2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카네코 유키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Naoka Ueno (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 378064 AND a.name = '카네코 유키';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '야마다 나오코', '/esksK3sGJN1gWwj8HhMJN6s27UG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '야마다 나오코');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 378064 AND d.name = '야마다 나오코';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aUF10sSW5OVfpK6Ma3vJYd3Tp3A.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 378064;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5lAMQMWpXMsirvtLLvW7cJgEPkU.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 378064;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (761053, '가브리엘의 지옥 파트 3', '2020-11-19', '', '', 105, '', 'RELEASED', 40.392000, 8.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 761053 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 761053 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Melanie Zanetti', '/lbUQ7ilvBtWMU23reKsHg3jRmsf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Melanie Zanetti');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Julia Mitchell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 761053 AND a.name = 'Melanie Zanetti';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Giulio Berruti', '/cCOWVvjQ1TblPvM7TgMBqMczkOX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Giulio Berruti');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gabriel Emerson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 761053 AND a.name = 'Giulio Berruti';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Rhett Wellington Ramirez', '/3WWleE8I95hzi3VxH6TunlfyT7j.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rhett Wellington Ramirez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Simon Talbot', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 761053 AND a.name = 'Rhett Wellington Ramirez';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'James Andrew Fraser', '/bMHD0ezBKKNRLr8fLkWgIWpkqNs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'James Andrew Fraser');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paul Norris', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 761053 AND a.name = 'James Andrew Fraser';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Margaux Brooke', '/leLl5l6KnjMdg5O48FhDfB7GquI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Margaux Brooke');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Christa Peterson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 761053 AND a.name = 'Margaux Brooke';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Tosca Musk', '/1tWccsh9uR9mK3Q0e4PZKe0e6eB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Tosca Musk');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 761053 AND d.name = 'Tosca Musk';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fYtHxTxlhzD4QWfEbrC1rypysSD.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 761053;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fQq1FWp1rC89xDrRMuyFJdFUdMd.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 761053;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (244786, '위플래쉬', '2014-10-10', '천재를 갈망하는 광기가 폭발한다', '최고의 드러머가 되기 위해서라면 무엇이든 할 각오가 되어있는 음악대학 신입생 앤드류는 아무도 없는 지하실에서 혼자 드럼을 연습하던 중 우연한 기회로 누구든지 성공으로 이끄는 최고의 실력자이지만, 또한 동시에 최악의 폭군인 플렛처 교수에게 발탁되어 그의 밴드에 들어가게 된다. 설레는 마음으로 참가한 첫 연습에서, 그는 플렛처 교수의 진짜 얼굴을 마주치게 된다. 폭언과 학대 속에 좌절과 성취를 동시에 안겨주는 플렛처의 지독한 교육방식은 천재가 되길 갈망하는 앤드류의 집착을 끌어내며 그를 점점 광기로 몰아넣는데...', 106, '15', 'RELEASED', 135.179000, 8.400000, 50307484, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 244786 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 244786 AND g.name = '음악';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마일스 텔러', '/cg3LW0xX6RKr8dmescxq1bepcb5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마일스 텔러');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Andrew', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 244786 AND a.name = '마일스 텔러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'J.K. 시몬스', '/ScmKoJ9eiSUOthAt1PDNLi8Fkw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'J.K. 시몬스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fletcher', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 244786 AND a.name = 'J.K. 시몬스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Paul Reiser', '/xncLbAjPXooyETKriMUUlZJkGn9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Paul Reiser');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jim', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 244786 AND a.name = 'Paul Reiser';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '멜리사 베노이스트', '/1F0fCPNhb5W0WyFe8Tszfbx1DEp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '멜리사 베노이스트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nicole', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 244786 AND a.name = '멜리사 베노이스트';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Austin Stowell', '/At09XQpVXnChgedNsxu4ceR5W9i.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Austin Stowell');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ryan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 244786 AND a.name = 'Austin Stowell';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '데이미언 셔젤', '/14kRZ3XxNMyBv717YQSXr3wCucy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '데이미언 셔젤');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 244786 AND d.name = '데이미언 셔젤';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sNoZ3DAjOtCtpGvaEubMELDNtaS.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 244786;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5h8VtV4oh2qkO8Iqz7gypIYJPAr.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 244786;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (423, '피아니스트', '2002-09-17', '영혼을 움직이는 감동의 선율', '1939년 폴란드 바르샤바, 유명한 유대계 피아니스트 블라디슬로프 스필만은 한 인기 라디오 프로그램에서 쇼팽의 야상곡을 연주하다 폭격을 당한다. 이후 유태인인 스필만과 가족들은 게토에서 생활하지만, 결국 수용소로 향하는 기차에 몸을 싣게 된다. 가족들을 죽음으로 내보내고 간신히 목숨을 구한 스필만은 허기와 추위, 고독과 공포 속에서 마지막까지 생존해 나간다. 자신을 도와주던 몇몇의 사람마저 떠나고, 자신만의 은신처에서 끈질기게 생존을 유지하는 스필만. 어둠과 추위로 가득한 폐건물 속에서 은신생활 중 스필만은 우연찮게 순찰을 돌던 독일 장교에게 발각되는데...', 150, '12', 'RELEASED', 50.453000, 8.400000, 120098945, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 423 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 423 AND g.name = '전쟁';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '에이드리언 브로디', '/qBc7ahQrpVpcllaZ5hkivsOEb3C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에이드리언 브로디');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Władysław ''Władek'' Szpilman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 423 AND a.name = '에이드리언 브로디';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '토마스 크레치만', '/p1XYiekXjaUxHMztBALrez1Ud4J.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '토마스 크레치만');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Captain Wilm Hosenfeld', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 423 AND a.name = '토마스 크레치만';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Frank Finlay', '/fO7CYAaGydu9d3s5numYRi1BRvL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Frank Finlay');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Father', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 423 AND a.name = 'Frank Finlay';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Maureen Lipman', '/kx26NOAw9GnsHjJIJ4l40YHblJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Maureen Lipman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mother', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 423 AND a.name = 'Maureen Lipman';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Emilia Fox', '/lZpNRsHAOW8m0f7bRfgUDmRRjo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Emilia Fox');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dorota', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 423 AND a.name = 'Emilia Fox';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '로만 폴란스키', '/yHwHSXdZatkoLgIjPeW14GKlrZs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '로만 폴란스키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 423 AND d.name = '로만 폴란스키';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/t7L2YDpu635qKT3ehqZxry4yvTX.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 423;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hchJ0PTREmXveasCBsT4SdPY3JF.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 423;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (807, '세븐', '1995-09-22', '계획적인 시나리오, 벗어날 수 없는 트릭', '은퇴를 7일 앞둔 관록의 형사 윌리엄 소머셋(모건 프리먼)과 새로 전근 온 신참내기 형사 밀스(브래드 피트)가 팀이 된 바로 다음날, 강압에 의해 위가 찢어질 때까지 먹다가 죽은 초고도 비만 남자와 역시 강압에 의해 식칼로 자기 살을 베어내 죽은 악덕 변호사의 사건과 마주한다. 식탐, 탐욕, 그리고 나태, 분노, 교만, 욕정, 시기. 소머셋은 현장에 남은 흔적들로 단테의 신곡과 쵸서의 캔터베리 서사시를 근거로 한 기나긴 연쇄 살인이 시작되었음을 직감하고 성서의 7가지 죄악을 따라 발생하는 사건들을 추적하기 시작하는데...', 127, '18', 'RELEASED', 89.592000, 8.400000, 327311859, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 807 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 807 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 807 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '모건 프리먼', '/905k0RFzH0Kd6gx8oSxRdnr6FL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '모건 프리먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Somerset', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 807 AND a.name = '모건 프리먼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '브래드 피트', '/9OfnD7lxgIj3BNQpJFnwxnwl6w5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브래드 피트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mills', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 807 AND a.name = '브래드 피트';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '기네스 팰트로', '/m2xcWJvhRdfbHxDj13gTAQ5Is0d.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '기네스 팰트로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tracy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 807 AND a.name = '기네스 팰트로';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '존 카시니', '/kn2Rtn0I8ivCR7ydZTY74XUBh1K.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '존 카시니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Officer Davis', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 807 AND a.name = '존 카시니';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '피터 크롬비', '/pMvhE1wwQo3eTSp4vwq8Hb22CwN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '피터 크롬비');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. O''Neill', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 807 AND a.name = '피터 크롬비';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '데이비드 핀처', '/tpEczFclQZeKAiCeKZZ0adRvtfz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '데이비드 핀처');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 807 AND d.name = '데이비드 핀처';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/izzk8dbmrLowcoGbFaebqJvzyXg.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 807;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/p1PLSI5Nw2krGxD7X4ulul1tDAk.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 807;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1058694, '래디컬', '2023-10-19', '', '', 126, '', 'RELEASED', 47.539000, 8.400000, 21761164, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1058694 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '에우헤니오 데르베스', '/6o1w3mYF947N6TTakQXcs3NNy4w.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에우헤니오 데르베스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sergio', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1058694 AND a.name = '에우헤니오 데르베스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Daniel Haddad', '/tCZAs7jDAjOl5545eL93C1mcIsa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Daniel Haddad');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chucho', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1058694 AND a.name = 'Daniel Haddad';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jennifer Trejo', '/kjKptBXj7z3VJlzUJA9dJZmpFrO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jennifer Trejo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paloma', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1058694 AND a.name = 'Jennifer Trejo';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Mia Fernanda Solis', '/rGzl5vQM2CG4SfFl2MJK7BAlJ7u.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mia Fernanda Solis');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lupe', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1058694 AND a.name = 'Mia Fernanda Solis';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Danilo Guardiola Escobar', '/rlceus4FE90OWZ71rOFo2P0zQOF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Danilo Guardiola Escobar');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nico', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1058694 AND a.name = 'Danilo Guardiola Escobar';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Christopher Zalla', '/90jkloUBJroXXUPGhykAOdgXzBg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Christopher Zalla');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1058694 AND d.name = 'Christopher Zalla';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gyUfBeZ0XpHPouwGt53oq7Oaqr0.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1058694;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gutU32BiBxJvJdzLv5RWC9hQhNh.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1058694;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (27205, '인셉션', '2010-07-15', '생각을 훔치는 거대한 전쟁', '타인의 꿈에 들어가 생각을 훔치는 특수 보안요원 코브. 그를 이용해 라이벌 기업의 정보를 빼내고자 하는 사이토는 코브에게 생각을 훔치는 것이 아닌, 생각을 심는 ‘인셉션’ 작전을 제안한다. 성공 조건으로 국제적인 수배자가 되어있는 코브의 신분을 바꿔주겠다는 거부할 수 없는 제안을 하고, 사랑하는 아이들에게 돌아가기 위해 그 제안을 받아들인다. 최강의 팀을 구성, 표적인 피셔에게 접근해서 ‘인셉션’ 작전을 실행하지만 예기치 못한 사건들과 마주하게 되는데… 꿈 VS 현실! 시간, 규칙, 타이밍 모든 것이 완벽해야만 하는, 단 한 번도 성공한 적 없는 ‘인셉션’ 작전이 시작된다!', 148, '12', 'RELEASED', 118.917000, 8.369000, 825532764, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 27205 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 27205 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 27205 AND g.name = '모험';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '레오나르도 디카프리오', '/wo2hJpn04vbtmh0B9utCFdsQhxM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레오나르도 디카프리오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dom Cobb', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 27205 AND a.name = '레오나르도 디카프리오';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '조셉 고든레빗', '/msb9UCBqBjGC95r7jns9K0C820h.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조셉 고든레빗');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Arthur', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 27205 AND a.name = '조셉 고든레빗';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '와타나베 켄', '/w2t30L5Cmr34myAaUobLoSgsLfS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '와타나베 켄');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Saito', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 27205 AND a.name = '와타나베 켄';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '톰 하디', '/d81K0RH8UX7tZj49tZaQhZ9ewH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 하디');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eames', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 27205 AND a.name = '톰 하디';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '엘리엇 페이지', '/eCeFgzS8dYHnMfWQT0oQitCrsSz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '엘리엇 페이지');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ariadne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 27205 AND a.name = '엘리엇 페이지';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '크리스토퍼 놀란', '/xuAIuYSmsUzKlUMBFGVZaWsY3DZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스토퍼 놀란');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 27205 AND d.name = '크리스토퍼 놀란';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oYuLEt3zVCKq57qu2F8dT7NIa6f.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 27205;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8ZTVqvKDQ8emSGUEMjsS4yHAwrp.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 27205;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (620249, '나소흑전기: 첫만남편', '2019-08-27', '요정과 인간이 공존하는 환상적인 세계가 열린다!', '요정과 인간이 공존하는 환상적인 세계가 열린다! 숲속의 집을 잃고 홀로 떠돌던 검은 고양이 요정 ‘소흑’은 도시 뒷골목에서 미스터리한 능력의 요정 ‘풍식’을 만나 위기를 모면한다. ‘풍식’의 무리와 버려진 섬에서 행복한 시간을 보내는 ‘소흑’. 그러던 중 최강 능력의 집행자 ‘무한’이 ‘풍식’을 쫓아 섬에 오자 ‘풍식’ 일행은 달아나고, ‘소흑’만 남게 된다. 홀로 남은 ‘소흑’을 요정들의 회관으로 데려가려는 ‘무한’과 ‘무한’을 무서운 인간이라 여겨 도망치려는 ‘소흑’. 둘은 여정 속에서 점점 마음을 열게 되고, ‘무한’은 ‘소흑’에게 특별한 능력이 있음을 알게 된다. 한편, 요정들이 공격받는 의문의 사건이 곳곳에서 일어나고, 엄청난 능력을 지닌 존재들이 ‘소흑’과 ‘무한’의 앞을 막아서는데... 함께하면 두려울 것 없는 우리들의 이야기는 지금부터!', 102, 'All', 'RELEASED', 14.958000, 8.400000, 48045728, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 620249 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 620249 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 620249 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Shan Xin', '/fm3Hpzr4Fb8g43Oo8TvDfv7O3O1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Shan Xin');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Luo Xiaohei / Nezha (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 620249 AND a.name = 'Shan Xin';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '劉朙月', '/kqh1vBsQ35b617dvd9jtvQ2ii7l.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '劉朙月');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wuxian (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 620249 AND a.name = '劉朙月';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '郝祥海', '/mDGtY44WlZbk8pMmuzPToIommx4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '郝祥海');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fengxi (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 620249 AND a.name = '郝祥海';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '叮当', '/vXMuscwMmOjVgv5tZMILhjguLWd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '叮当');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Luozhu (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 620249 AND a.name = '叮当';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Yuntu Cao', '/9qSDFftuxOJh2vKw255g0RsAV3h.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Yuntu Cao');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Xuhuai (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 620249 AND a.name = 'Yuntu Cao';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'MTJJ', '/efpX3wZCpQ24uzUpKrWHxQXhc2m.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'MTJJ');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 620249 AND d.name = 'MTJJ';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4VhlO8O5COmkz3XBwrbfnunTnzK.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 620249;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aVFx1VtlOxR3v0ADEatalXOvwbu.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 620249;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1160164, '테일러 스위프트: 디 에라스 투어', '2023-10-13', '', '이 문화적 현상이 대형 스크린에서 계속됩니다! 역사에 남을 숨 막히는 장면을 영화처럼 감상하며 일생일대의 콘서트 영화 체험에 푹 빠져보세요', 168, 'All', 'RELEASED', 47.757000, 8.400000, 261656269, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1160164 AND g.name = '음악';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '테일러 스위프트', '/w4ylYgLcA8uyShgX3XBipnbRniZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '테일러 스위프트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Self', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1160164 AND a.name = '테일러 스위프트';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Mike Meadows', '/gjo2N7FkUKVQBaX8b2edsWSSWoI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mike Meadows');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Self - Co-Band Leader, Guitar, Keyboards', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1160164 AND a.name = 'Mike Meadows';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Max Bernstein', '/k09iQQgXDJeDdNp2T3kNRWvca8Z.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Max Bernstein');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Self - Co-Band Leader, Guitar, Keyboards', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1160164 AND a.name = 'Max Bernstein';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Paul Sidoti', '/an7p5Qs3ArA4MMII5IrV6PKtdgP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Paul Sidoti');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Self - Guitar', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1160164 AND a.name = 'Paul Sidoti';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Amos Heller', '/eovE2w7vdl2NoNhc4JIhKgQwKD1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Amos Heller');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Self - Bass, Keyboard Bass', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1160164 AND a.name = 'Amos Heller';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Sam Wrench', '/odEmgv7BYazCIMgwuMHRZ3ZIwpy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Sam Wrench');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1160164 AND d.name = 'Sam Wrench';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pm6cudRCaKofVRDQBTgl5kzejK1.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1160164;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uRKhh7JYMD6QWNt0NjmMfh7uLdm.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1160164;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (569094, '스파이더맨: 어크로스 더 유니버스', '2023-05-31', '한 명을 구할 것인가, 모두를 구할 것인가', '여러 성장통을 겪으며 새로운 스파이더맨이 된 마일스 모랄레스. 그 앞에 다른 평행세계의 스파이더우먼 그웬이 다시 나타난다. 모든 차원의 멀티버스 속 스파이더맨들을 만나게 되지만, 질서에 대한 신념이 부딪히며 예상치 못한 균열이 생기는데… 상상 그 이상을 넘어서는 멀티버스의 세계가 열린다!', 140, 'All', 'RELEASED', 304.253000, 8.356000, 690897910, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 569094 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 569094 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 569094 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 569094 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '셔믹 무어', '/ovUKfVOwJ7CadEHaG3NDsfA5xRq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '셔믹 무어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miles Morales (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 569094 AND a.name = '셔믹 무어';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '헤일리 스타인펠드', '/dxSDWkiVaC6JYjrV3XRAZI7HOSS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헤일리 스타인펠드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gwen Stacy (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 569094 AND a.name = '헤일리 스타인펠드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '브라이언 타이리 헨리', '/2MsJh0bpyzwvOUnXOltHp3j85Pb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브라이언 타이리 헨리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jeff Morales (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 569094 AND a.name = '브라이언 타이리 헨리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '로런 벨레스', '/98BvmTJCZHx0jPv0oNcv04Jkmfb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로런 벨레스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rio Morales (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 569094 AND a.name = '로런 벨레스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제이크 존슨', '/3UNfW2qZgRkW81neNVfQvaRC92K.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이크 존슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Peter B. Parker (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 569094 AND a.name = '제이크 존슨';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '켐프 파워스', '/oE4TcENMQw25t4UTAjrnl0m4JyH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '켐프 파워스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 569094 AND d.name = '켐프 파워스';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '저스틴 톰슨', '/mRMi8Q2fmlfbDYkE7A63gzFtGsZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '저스틴 톰슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 569094 AND d.name = '저스틴 톰슨';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '조아킴 도스 샌토스', '/w45GPb3cW6TqPw4FxB5Hc6zzAwx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조아킴 도스 샌토스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 569094 AND d.name = '조아킴 도스 샌토스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lMWTlGr9jVUC18T515hPRKym5QQ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 569094;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kVd3a9YeLGkoeR50jGEXM6EqseS.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 569094;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (567, '이창', '1954-08-01', '', '사진 작가인 제프리스는 촬영 도중 다리가 부러져 휠체어에서 꼼짝할 수 없는 처지이다. 무료함을 견디지 못하는 그는 자신의 그리니치 빌리지에 있는 독신자 아파트에서 뜰 건너편에 사는 사람들의 행동을 관찰하는 것으로 시간을 보낸다. 어느날 건너편 아파트에 사는 한 사람이 아내를 살해한 것으로 의심받을 만한 짓을 한 것을 본 그는 이를 모델인 애인 리사와 친구인 형사 도일에게 말하지만 아무도 그의 말을 믿지 않는다. 그러나 결국 그의 의심이 전혀 근거없는 것은 아니라는 것을 알게 된 리사와 간호부 스텔라는 그의 지시에 따라 범행의 증거를 찾아 부부의 집을 조사하기 시작하는데...', 115, '19', 'RELEASED', 49.525000, 8.400000, 37042336, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 567 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 567 AND g.name = '미스터리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제임스 스튜어트', '/yId5fdDqShOkr0YjCoJbUOZipcX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제임스 스튜어트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'L.B. ''Jeff'' Jefferies', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 567 AND a.name = '제임스 스튜어트';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '그레이스 켈리', '/aMist7cww3a8FxJDg1eXoUNJCDM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '그레이스 켈리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lisa Fremont', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 567 AND a.name = '그레이스 켈리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Wendell Corey', '/tD2USnh2ItYSviS3L9dHKeztNGQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Wendell Corey');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Det. Lt. Thomas J. Doyle', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 567 AND a.name = 'Wendell Corey';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Thelma Ritter', '/q48Cf2evvi73qJULqhIotGrszaA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Thelma Ritter');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Stella', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 567 AND a.name = 'Thelma Ritter';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Raymond Burr', '/gsmckogOXPIk6lce2qnNMAFF901.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Raymond Burr');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lars Thorwald', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 567 AND a.name = 'Raymond Burr';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '알프레드 히치콕', '/108fiNM6poRieMg7RIqLJRxdAwG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '알프레드 히치콕');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 567 AND d.name = '알프레드 히치콕';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jU5Fe7n9rsEBa0uaV5dqGjJGwmX.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 567;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8aEe01VfGtYG2dFy9V5MqyyNPlh.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 567;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (568332, '테일러 스위프트의 레퓨테이션 스타디움 투어', '2018-12-31', '팝의 여왕이 선사하는 매혹적인 음악과 화려한 볼거리의 모든 것', '세계가 열광한 테일러 스위프트의 ''레퓨테이션’ 스타디움 투어. 텍사스 댈러스에서 그 대미를 장식한다. 무슨 말이 더 필요하랴? 팝의 여왕, 테일러 스위프트. 그녀가 새로운 전설을 만든다. 장대한 투어의 정점이 될 화려한 무대. 그 위에서 눈부시게 빛나는 그녀를 맞이하라!', 125, '', 'RELEASED', 17.884000, 8.350000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 568332 AND g.name = '음악';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '테일러 스위프트', '/w4ylYgLcA8uyShgX3XBipnbRniZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '테일러 스위프트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Self', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 568332 AND a.name = '테일러 스위프트';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '찰리 XCX', '/fbO6t6n5PJJmqw8xzZruriyRfrY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '찰리 XCX');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Self', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 568332 AND a.name = '찰리 XCX';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '카밀라 카베요', '/wZXOudOjynsARZJwGhwGyupWMf2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카밀라 카베요');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Self', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 568332 AND a.name = '카밀라 카베요';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'David Cook', '/lSE8EfIiwFFcVaFMUlT2SkN17EL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'David Cook');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Self', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 568332 AND a.name = 'David Cook';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Amos Heller', '/eovE2w7vdl2NoNhc4JIhKgQwKD1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Amos Heller');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Self', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 568332 AND a.name = 'Amos Heller';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Paul Dugdale', '/bWM0X1OMVml3FhDph4EGcs3QtHC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Paul Dugdale');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 568332 AND d.name = 'Paul Dugdale';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/u6oXUTtOuJRPdUgUuPAVVJPSKCo.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 568332;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ySaK6hpbCc2OE13ac7ovhgWwR5u.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 568332;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (274, '양들의 침묵', '1991-02-14', '이제 양들의 울음은 멈추었는가', 'FBI 요원 스탈링은 몸집이 비대한 여자들의 살을 도려내는 변태 살인마를 추적하라는 상부의 명령을 받는다. 스탈링은 사건 해결의 단서를 얻기 위해 인육을 먹은 죄로 감옥에 수감된 정신과 의사 렉터 박사를 찾아간다. 지능범인 렉터와 침착하게 대처하는 스탈링은 긴장감 속에서 협상을 한다. 이러한 와중에 상원 의원의 딸 캐더린이 납치된다. 결국 범인의 정체를 알려준다던 렉터는 다른 감옥으로 이송되고 스탈링은 수사에서 제외된다. 범인에 대한 단서를 알아낸 범죄 심리 전문가인 렉터는 이송 중에 도주하고, 스탈링은 렉터와 나눈 마지막 대화를 기억하고 수사를 계속하는데...', 118, '18', 'RELEASED', 17.375000, 8.300000, 272742922, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 274 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 274 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 274 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '조디 포스터', '/5emVgsLFlU6SmeBIFsF2Y7aqwtG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조디 포스터');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Clarice Starling', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 274 AND a.name = '조디 포스터';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '안소니 홉킨스', '/9ukJS2QWTJ22HcwR1ktMmoJ6RSL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '안소니 홉킨스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Hannibal Lecter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 274 AND a.name = '안소니 홉킨스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '스콧 글렌', '/8DHORod2l6ZFS9KR0gNAAM3WZfI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스콧 글렌');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jack Crawford', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 274 AND a.name = '스콧 글렌';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '테드 러바인', '/qRFq8y842T1uq51iQCwsEmQI3UT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '테드 러바인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jame Gumb', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 274 AND a.name = '테드 러바인';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '앤서니 힐드', '/e0E6Z1Y0debr4mAHgj0HO7MYyXG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앤서니 힐드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Frederick Chilton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 274 AND a.name = '앤서니 힐드';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '조나단 드미', '/w9Lw3xTEFQUYELkl9AH5i3p5OhJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조나단 드미');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 274 AND d.name = '조나단 드미';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2hBAfjDlRbamiX7TuzLes2EcnCM.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 274;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aYcnDyLMnpKce1FOYUpZrXtgUye.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 274;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (73, '아메리칸 히스토리 X', '1998-07-01', '화만 내며 살기에는 인생이 너무 짧다', '3년 전 강도 사건으로 소방수였던 아버지를 잃은 데렉은 백인 우월주의자들의 모임인 DOC에 관심을 갖게 되면서 유색인종에게 그 분노와 증오를 터트린다. 그는 혐오스러운 유색인종들을 이 땅에서 몰아내야 한다고 주장하면서 강렬한 카리스마로 동료들 사이에서 영웅이 된다. 가족들은 그런 그의 모습을 걱정하여 만류하지만, 단 한 사람, 동생 대니만은 그를 전적으로 믿고 따른다. 어느 날, 데렉에게 적대감을 품은 흑인들이 아버지의 낡은 밴을 훔치러 왔을 때 그는 서슴없이 그들에게 총을 겨눈다. 그리고는 총을 맞고 신음하는 그를 참혹하게 죽이고 마는데...', 119, '18', 'RELEASED', 30.791000, 8.344000, 23900000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 73 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '에드워드 노튼', '/8nytsqL59SFJTVYVrN72k6qkGgJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에드워드 노튼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Derek', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 73 AND a.name = '에드워드 노튼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '에드워드 펄롱', '/e221dMIBgb6Lk092GIkHB9ohQF1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에드워드 펄롱');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Danny', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 73 AND a.name = '에드워드 펄롱';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Beverly D''Angelo', '/zbt4AyVWfgCPt5bvsfPS4anD2r4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Beverly D''Angelo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Doris', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 73 AND a.name = 'Beverly D''Angelo';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jennifer Lien', '/5wafpjORY55TY5OC6d9Cyb36O2r.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jennifer Lien');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Davina', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 73 AND a.name = 'Jennifer Lien';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Ethan Suplee', '/jF4WZWrjyiV284nOy4RyigWzHwf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ethan Suplee');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Seth', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 73 AND a.name = 'Ethan Suplee';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Tony Kaye', '/6LoSxSGfeCvdLkYFeM3op00OBeq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Tony Kaye');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 73 AND d.name = 'Tony Kaye';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/nm4XkYBt79ZjUQj6Rqxxzl1Wt3c.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 73;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mBdZ5rOB8RxluHwBfS64ZzaVanB.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 73;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (128, '모노노케 히메', '1997-07-12', '대자연의 수호신 원령공주가 온다', '북쪽의 끝, 에미시족의 마을에 어느 날 갑자기 재앙신이 나타나 마을을 위협한다. 이에 강한 힘을 소유한 에미시족의 후계자인 아시타카는 결투 끝에 포악해진 재앙신을 쓰러트리지만 싸움 도중 오른팔에 저주의 상처를 받고 죽어야 할 운명에 처하게 된다. 결국 재앙신의 탄생 원인을 밝혀 자신의 저주를 없애기 위해 서쪽으로 길을 떠난 아시카타는 여행 중에 지코라는 미스테리한 수도승을 만나 재앙 신이 생겨나게 된 이유가 서쪽 끝에 있는 시시신의 숲과 관련이 깊다는 이야기를 듣게 되고 한시 바삐 서쪽으로 향한다.', 135, 'ALL', 'RELEASED', 51.344000, 8.300000, 169000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 128 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 128 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 128 AND g.name = '애니메이션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '松田洋治', '/42WeHwCymsgJh3mLAyknCdRcef8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '松田洋治');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ashitaka (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 128 AND a.name = '松田洋治';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '石田ゆり子', '/cADoBCi603Chz2IaxcwWT2mNwCf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '石田ゆり子');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'San (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 128 AND a.name = '石田ゆり子';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '다나카 유코', '/fMonAnp3OQ16FmGy5SGhEJRcuVI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다나카 유코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eboshi Gozen (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 128 AND a.name = '다나카 유코';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '코바야시 카오루', '/pJSt6nRgcIsli0hw2aOCzc2l622.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '코바야시 카오루');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jikobo (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 128 AND a.name = '코바야시 카오루';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '西村雅彥', '/2fXvxAI4KySYgp9KZMzkK4q2TkY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '西村雅彥');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kouroku (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 128 AND a.name = '西村雅彥';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '미야자키 하야오', '/mG3cfxtA5jqDc7fpKgyzZMKoXDh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '미야자키 하야오');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 128 AND d.name = '미야자키 하야오';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gEVSN7rzQsypG4YfYObsPmMtYpP.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 128;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gl0jzn4BupSbL2qMVeqrjKkF9Js.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 128;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (12493, '천국과 지옥', '1963-03-01', '', '신발 제조 회사의 중역인 곤도는 회사의 주도권을 잡기 위해 자신의 전 재산을 회사에 투자한 상태다. 어느 날 그는 자신의 아들이 납치됐으며 범인이 엄청난 몸값을 요구하고 있다는 통보를 받고 회사냐 아들이냐 하는 선택의 기로에 서게 된다. 하지만 정작 납치된 것은 그의 아들이 아니라 그의 운전사의 아들이란 사실이 밝혀지면서 곤도는 또 다른 고민에 빠지게 되는데...', 142, '', 'RELEASED', 25.683000, 8.336000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 12493 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 12493 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 12493 AND g.name = '미스터리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '미후네 토시로', '/3A9PqrtiXHLp8B2JL7m3YvVXrmL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미후네 토시로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kingo Gondo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12493 AND a.name = '미후네 토시로';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '나카다이 타츠야', '/4LygOe0vFQplLIft5IUWI5OewPX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나카다이 타츠야');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chief Detective Tokura', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12493 AND a.name = '나카다이 타츠야';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '카가와 쿄코', '/q47wPwySJvhj6HQoYb7ON1TjbcV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카가와 쿄코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Reiko Gondo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12493 AND a.name = '카가와 쿄코';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '미하시 타츠야', '/s33XOrwOEEVoWeScWMK2Afs7Njl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미하시 타츠야');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kawanishi, Gondo''s secretary', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12493 AND a.name = '미하시 타츠야';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '키무라 이사오', '/afLPuf3x7UYXryAbqAGqmRcVNNW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키무라 이사오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Detective Arai', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12493 AND a.name = '키무라 이사오';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '구로사와 아키라', '/eGexa6MZ22T1MZxce1qR3RcAYaS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '구로사와 아키라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 12493 AND d.name = '구로사와 아키라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/d2o2Bc9ViaGN5llJc7mobxPIwH5.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 12493;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gSCT6oP2Sbm71naW28Lh7afcMgY.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 12493;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (820067, '극장판 5등분의 신부', '2022-05-20', '학교 축제 첫날 15시에 교실에 와줘', '「낙제 직전」「공부가 싫은」미소녀 다섯 쌍둥이를  아르바이트 가정 교사로서 「졸업」까지 이끈 후타로.  배우에 전념하기 위해 휴학하기로 한 이치카의 공부를 봐주면서  「학교 축제」 준비에 힘쓰는 후타로와,  후회 없는 「학교 축제」를 만들기 위해 평소 이상으로 노력하는 요츠바.  어지러운 날들이 지나고 정신을 차려보니 「학교 축제」 전날.  후타로는 포기하지 않고 힘쓰는 이츠키의 모습에 힘입어,  니노의 각오와 미쿠의 결의, 그리고 이치카·요츠바·이츠키에 대한 마음의 답을 찾는다.  저마다의 생각을 안고 있는 와중,  드디어 시작된 고교 생활 최후의(마지막) 이벤트인 「학교 축제」 첫날.  『학교 축제 첫날 15시에 교실에 와줘』  교실에 모인 다섯 쌍둥이는, 후타로에게 어떠한 마음을 고백 받게 될까?', 136, '', 'RELEASED', 30.253000, 8.300000, 17288993, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 820067 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 820067 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 820067 AND g.name = '로맨스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마츠오카 요시츠구', '/ugDwdWEXnmv43jcbnfAi4XwiQ8C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마츠오카 요시츠구');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fuutarou Uesugi (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 820067 AND a.name = '마츠오카 요시츠구';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '하나자와 카나', '/5bK9ttcRydQBWmyZp7gXDmJYOPF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하나자와 카나');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ichika Nakano (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 820067 AND a.name = '하나자와 카나';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '타케타츠 아야나', '/8vGKUIJrpbdURA7XSyGnkbi1Qqg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '타케타츠 아야나');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nino Nakano (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 820067 AND a.name = '타케타츠 아야나';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이토 미쿠', '/kP7JBvveQO9ucYpmOvUNcW5RLAp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이토 미쿠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miku Nakano (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 820067 AND a.name = '이토 미쿠';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '사쿠라 아야네', '/yPbTmntASE9psPIMhNGU5oo6vIH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사쿠라 아야네');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yotsuba Nakano (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 820067 AND a.name = '사쿠라 아야네';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '진보 마사토', '/azZeT4v6OREIiW3zvNzlKaVGwjT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '진보 마사토');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 820067 AND d.name = '진보 마사토';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/shtqSAsB8snS3iww99iksu2QaoZ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 820067;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jBIMZ0AlUYuFNsKbd4L6FojWMoy.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 820067;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (15804, '고령가 소년 살인 사건', '1991-07-27', '소년, 소녀를 만나다', '14살 소년 샤오쓰는 국어 성적이 나쁘다는 이유로 중학교 주간부에서 야간부로 반을 옮기게 되고 ‘소공원’파와 어울려 다닌다. 그러던 중 샤오쓰는 양호실에서 밍이라는 이름의 소녀를 만나게 된다. 소녀는 ‘소공원’파의 보스 허니의 여자로 허니는 샤오밍을 차지하기 위해 경쟁조직인 ‘217’파의 보스를 죽이고 은둔 중이다. 보스의 부재로 통제력을 상실한 ‘소공원’파는 보스 자리를 두고 혼란에 빠지고 돌연 허니가 돌아오게 되면서 ‘소공원’파 내부와 ‘217’파간의 대립이 격해진다. 그리고 밍을 사랑하게 된 샤오쓰도 이들의 싸움에 휘말리게 되는데...', 237, '15', 'RELEASED', 21.367000, 8.316000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 15804 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 15804 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 15804 AND g.name = '로맨스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '장첸', '/7GHGozSsjERpQwvVwIhd1i6Yl7Y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '장첸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Xiao Si''r', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 15804 AND a.name = '장첸';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Lisa Yang', '/gt34a707NZaDfzF8pYWqBwZagth.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lisa Yang');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ming', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 15804 AND a.name = 'Lisa Yang';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Chang Kuo-Chu', '/6hGLo2VE970oi3LMPr9QcmiaDSG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Chang Kuo-Chu');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Father', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 15804 AND a.name = 'Chang Kuo-Chu';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Elaine Jin', '/eXhTJ8vMsflpvoU4lOWeFTahbVY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Elaine Jin');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mother', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 15804 AND a.name = 'Elaine Jin';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Chuan Wang', '/yJq73sOtT5NGXGXhqscXcGSfmpA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Chuan Wang');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eldest Sister', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 15804 AND a.name = 'Chuan Wang';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '에드워드 양', '/mvQ0oSfPgyohdTpr3hETXQy7ilz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '에드워드 양');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 15804 AND d.name = '에드워드 양';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bCDbodBnA9A8k5bhwBc8Lh3j0mB.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 15804;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2LMgkmtnmhjUHvFXNDruHzrUFKK.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 15804;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (105, '빽 투 더 퓨쳐', '1985-07-03', '과거로!', '마티 맥플라이(마이클 J. 폭스)는 평범한 고등학생이다. 그런데 평소 친하게 지내던 괴상한 발명가 에메트 브라운 박사(크리스토퍼 로이드)가 스포츠카 드로리안을 개조해 타임머신을 만들고, 뜻밖의 사고로 브라운 박사가 테러범들에게 총을 맞고 위험해진 상황에서 마티는 30년 전으로 가게 된다. 극장 간판에는 2류 배우인 로널드 레이건이 보이고 청년인 아버지와 어머니를 보게 된다. 젊은 아버진 멍청하고, 어머니는 미래의 아들인 마티를 좋아해 야단이다. 마티가 미래로 가는 것을 도와 줄 사람은 30년 전인 젊은 브라운 박사뿐인데...', 120, '12', 'RELEASED', 91.738000, 8.317000, 381109762, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 105 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 105 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 105 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마이클 J. 폭스', '/2JB4FMgQmnhbBlQ4SxWFN9EIVDi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 J. 폭스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marty McFly', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 105 AND a.name = '마이클 J. 폭스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '크리스토퍼 로이드', '/nxVjpyb3UrfbPZnEyDNlQVlFAs5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스토퍼 로이드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Emmett Brown', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 105 AND a.name = '크리스토퍼 로이드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '크리스핀 글로버', '/e6lbvXOnVEGDLn9OpaLQpwMSWe3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스핀 글로버');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'George McFly', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 105 AND a.name = '크리스핀 글로버';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '리 톰슨', '/85E9NTEfkRdUdK4kTrrnk5of25w.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리 톰슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lorraine Baines', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 105 AND a.name = '리 톰슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '클로디아 웰즈', '/2VOsPvoV2vmEUd1O2KjW3kcN8JD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '클로디아 웰즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jennifer Parker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 105 AND a.name = '클로디아 웰즈';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '로버트 저메키스', '/lPYDQ5LYNJ12rJZENtyASmVZ1Ql.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '로버트 저메키스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 105 AND d.name = '로버트 저메키스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7gGicAJdHRzaUd6qLjH5bSW4Cgi.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 105;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5bzPWQ2dFUl2aZKkp7ILJVVkRed.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 105;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1139087, '원스 어폰 어 스튜디오', '2023-09-24', '디즈니 100년, 그 모든 순간이 여기에', '월트 디즈니 컴퍼니의 모태인 월트 디즈니 애니메이션 스튜디오가 창립 100주년을 기념해 제작한 단편 애니메이션이다. 월트 디즈니 애니메이션 스튜디오 창립 100주년을 기념하고자 디즈니 애니메이션의 캐릭터들이 모두 모여 단체 사진을 찍는 에피소드를 다루고 있으며,  500명이 넘는 캐릭터들이 등장한다.', 9, 'All', 'RELEASED', 67.269000, 8.315000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1139087 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1139087 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1139087 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1139087 AND g.name = '코미디';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '크리스 디어먼토펄러스', '/rD9KI3FYwy3rFJhdTg2K5mhr7W3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 디어먼토펄러스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mickey Mouse (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1139087 AND a.name = '크리스 디어먼토펄러스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Kaitlyn Robrock', '/1joOQrgyU9ap9W1cvimh01XmKcO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kaitlyn Robrock');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Minnie Mouse (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1139087 AND a.name = 'Kaitlyn Robrock';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Tony Anselmo', '/7SQqLwI3ysrFD6KEMGzvfgIVZJc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tony Anselmo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Donald Duck (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1139087 AND a.name = 'Tony Anselmo';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Bill Farmer', '/lhezx68R12s5Bsv7d77BrQb7tWA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bill Farmer');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Goofy / Pluto (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1139087 AND a.name = 'Bill Farmer';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '짐 커밍스', '/c0sQPRCM5Ri3F4gVyxPr4AcPmIq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '짐 커밍스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Baloo / Winnie-the-Pooh (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1139087 AND a.name = '짐 커밍스';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Trent Correy', '/kzaOz9jtkFg9YcyvGO5CUOdf1fF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Trent Correy');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1139087 AND d.name = 'Trent Correy';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Dan Abraham', '/xGUGaHy5HcshpJKclGGUvTqeVlW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Dan Abraham');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1139087 AND d.name = 'Dan Abraham';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qLOcYTVg5YXY7FwrGXUeYa2itaH.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1139087;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8KJMOKyl9rpgb9ELEwhfBMIaTHw.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1139087;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (10494, '퍼펙트 블루', '1998-02-28', '나는 피해자이자, 목격자이며 범인이다. 나는 누구인가?', '아이돌 소녀 그룹인 Charm의 리더인 미마는 본격적인 연기를 시작하기 위해 아이돌의 그늘을 벗어나려고 하지만,첫 출연작부터 난관에 부딪힌다. 누드 등을 통한 과격적인 홍보로 그녀를 더욱 알리려는 소속사 대표와 미마를 지켜주려고 노력하는 그녀의 담당 매니저의 갈등. 그리고 아직까지도 아이돌로서의 그녀를 그리워하는 팬들. 그 모든 것의 중심에 선 미마는 비록 대사는 한마디에 불과한 단역이지만 그래도 주어진 역할에 충실히 하기 위해 노력한다. 드라마에서 광기어린 살인을 저지르고 다니는 소녀 역할을 맡은 미마는 현실과 허구의 경계선에서 자신을 쫓아다니던 스토커를 해친다. 그러나 그 일 역시 사실인지 허구인지는 불분명하다. 이제 미마의 눈에는 또 다른 미마가 보이기 시작한다. 아이돌 시절 그대로의 모습으로 미마의 눈 앞에 나타난 또 다른 미마는 그녀에게 과거 인기 스타로의 회귀를 강요한다. 니가 나고, 내가 너야. 라고 말하는 또 다른 자아 앞에서 미마는 혼란에 빠진다. 그러던 중, 미마의 주변을 둘러싼 사람들이 하나 둘 살해당하고 범인을 알 수 없는 상황에서 극도의 불안감을 느끼는 미마는 누군가 끊임없이 자신을 지켜보고 있다는 것을 느끼는데...', 82, '', 'RELEASED', 50.921000, 8.300000, 112536, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 10494 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 10494 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '岩男潤子', '/bKyMLT1MgDTnXafsq2ur32VMwY5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '岩男潤子');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mima Kirigoe (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10494 AND a.name = '岩男潤子';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마츠모토 리카', '/ykm6ZpLcX5wblCNp7rOAoZpCh3L.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마츠모토 리카');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rumi (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10494 AND a.name = '마츠모토 리카';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '新山志保', '/eUmzsJ0wqHYuzEBTviYy2MlXWw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '新山志保');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rei (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10494 AND a.name = '新山志保';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '大倉正章', '/lQmV0Nzww7i3cmbr2ToqGJ5q6qr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '大倉正章');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mamoru Uchida (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10494 AND a.name = '大倉正章';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '辻親八', '/af5ILJbixauO84bsuLOr8XSU9yd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '辻親八');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tadokoro (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10494 AND a.name = '辻親八';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '콘 사토시', '/b7Oqg1bjS0e2iEzEjYWnsyVVagt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '콘 사토시');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 10494 AND d.name = '콘 사토시';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bJ0frBuuvQpvuic1saVMcfQZdTx.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 10494;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/A1Larywbw79kZQqkvCEiPHJqdLN.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 10494;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (92321, '반딧불이의 숲으로', '2011-09-17', '', '미도리카와 유키의 동명만화를 원작으로 한 작품으로 숲에서 길을 잃은 주인공이 요술로 사람의 눈에 보이는 힘이 있는 요괴와 만난 이야기를 그리고 있다.', 45, '', 'RELEASED', 0.025000, 8.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 92321 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 92321 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 92321 AND g.name = '판타지';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '沢田泉', '/A59nyfer38Q2J84Fy1lUbqgIFN1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '沢田泉');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hotaru''s Mother (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 92321 AND a.name = '沢田泉';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '타야 하야토', '/nwar5Rk5HZwl1YxggzGp207h4Y6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '타야 하야토');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ryouta (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 92321 AND a.name = '타야 하야토';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '사쿠라 아야네', '/yPbTmntASE9psPIMhNGU5oo6vIH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사쿠라 아야네');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hotaru Takegawa (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 92321 AND a.name = '사쿠라 아야네';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '우치야마 고키', '/sllSm3iZZWVLTBrDZQRtWrZUfEj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '우치야마 고키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gin (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 92321 AND a.name = '우치야마 고키';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '辻親八', '/af5ILJbixauO84bsuLOr8XSU9yd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '辻親八');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hotaru''s Grandfather (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 92321 AND a.name = '辻親八';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '大森貴弘', '/ajJaks8HkgfdNWHPRSayCqZOeH9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '大森貴弘');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 92321 AND d.name = '大森貴弘';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ijAOOOrcLViYPkXIauhRhCj2ySf.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 92321;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qknxyRgP6UTmwJ4B9tDAmzHMq7u.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 92321;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (599, '선셋 대로', '1950-08-10', '', '캘리포니아주 로스앤젤레스의 선셋 대로에 위치한 대저택에서 살인사건이 발생한다. 유명 여배우의 풀장에서 한 시나리오 작가가 총에 맞은 채 죽어서 발견된 것이다. 경찰이 출동한 가운데 세상 사람들은 이 사건에 눈과 귀를 기울인다. 사건이 일어나기 정확히 6개월 전. 주로 B급 영화의 시나리오를 썼던 조셉 길리스는 벌이가 좋지 않아 차까지 압류당할 위기에 처한다. 해결사들의 추격을 받던 조셉은 선셋 대로에 위치한 대저택에 숨어들었다가 그 곳의 주인이자 과거 무성영화 시절 스타인 노마 데스몬드을 만나게 된다. 노마는 조셉에게 자신이 쓴 시나리오를 보여주며 유혹하는데...', 110, '', 'RELEASED', 20.220000, 8.300000, 5000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 599 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '윌리엄 홀든', '/qEuJZiPXKFm1LdtbnHKGj2hQm8a.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '윌리엄 홀든');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joe Gillis', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 599 AND a.name = '윌리엄 홀든';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '글로리아 스완슨', '/akmlp75ESHjtGOVtOCfJYxkX4eo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '글로리아 스완슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Norma Desmond', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 599 AND a.name = '글로리아 스완슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Erich von Stroheim', '/lUoSEdmX6Cl7lLUnV4ewLkVDnhY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Erich von Stroheim');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Max von Mayerling', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 599 AND a.name = 'Erich von Stroheim';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Nancy Olson', '/419ZEkm8PQSp9RS7NXb4yJPDRm4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nancy Olson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Betty Schaefer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 599 AND a.name = 'Nancy Olson';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Fred Clark', '/yBjSwb6xma9ukYpbSe75C0eqNTx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Fred Clark');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sheldrake', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 599 AND a.name = 'Fred Clark';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '빌리 와일더', '/tfVte6h2dlLn59Q0Mi6AvWAyRLP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '빌리 와일더');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 599 AND d.name = '빌리 와일더';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sC4Dpmn87oz9AuxZ15Lmip0Ftgr.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 599;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7itwVx4ucSluBZZ1vQfnZGx7LjA.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 599;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (207, '죽은 시인의 사회', '1989-06-02', '“오 캡틴, 나의 캡틴”', '1859년에 창립된 미국의 명문 사립학교인 웰튼 고등학교의 새 학기를 맞아 신입생들도 들어오고, 이 학교 출신인 새로운 영어 교사 존 키팅(로빈 윌리엄스)도 부임한다. 키팅 선생은 학생들에게 관습에 맞서고 자신의 삶을 남다르게 가꾸라며 새로운 학습 방법으로 학생들을 지도하며 학생들에게 신선한 충격을 준다. 닐(로버트 숀 레오나드)은 키팅 선생을 캡틴이라 부르며 따르게 되고, 몇몇 학생들과 함께 죽은 시인의 사회라는 시낭독 클럽을 조직한다. 닐과 그의 친구들은 엄격한 학교 규율을 어기고 서클에 참여하면서 키팅 선생을 통해 참된 인생이 무엇인지를 조금씩 느끼게 되는데...', 128, '12', 'RELEASED', 59.388000, 8.300000, 235900000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 207 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '로빈 윌리엄스', '/iYdeP6K0qz44Wg2Nw9LPJGMBkQ5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로빈 윌리엄스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'John Keating', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 207 AND a.name = '로빈 윌리엄스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Robert Sean Leonard', '/hLtG4weEX8PT9zHAi0DyNNYPS3K.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Robert Sean Leonard');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Neil Perry', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 207 AND a.name = 'Robert Sean Leonard';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '에단 호크', '/hCA0AICMt782F5sXdG7vdEysyLJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에단 호크');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Todd Anderson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 207 AND a.name = '에단 호크';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '조쉬 찰스', '/xmFdIoFKVRNUmXaslBlErA3UHfF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조쉬 찰스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Knox Overstreet', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 207 AND a.name = '조쉬 찰스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Gale Hansen', '/gVZ9TFvseA3I0fLLJiXKInzBygp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gale Hansen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Charlie Dalton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 207 AND a.name = 'Gale Hansen';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '피터 위어', '/4GxIZX5gtbMpW4ZgHwvGmLSIHOE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피터 위어');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 207 AND d.name = '피터 위어';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/41AJ4X5TRWpECsiMIKS8so4MSsD.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 207;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8Lt9ljQ5IruNXtci03Hm7VcDZKe.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 207;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (644479, 'Dedicada A Mi Ex', '2019-11-01', '', '', 94, '', 'RELEASED', 22.060000, 8.308000, 1315376, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 644479 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 644479 AND g.name = '코미디';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Raúl Santana', '/t2JoMFV1XIIzcDL4iSplPSxOo1m.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Raúl Santana');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ariel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 644479 AND a.name = 'Raúl Santana';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Nataly Valencia', '/nXa2JH5shLuF18mh954xRPdHI3y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nataly Valencia');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Felicia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 644479 AND a.name = 'Nataly Valencia';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Carlos Alcántara', '/kOA49MEbLUCvkob99Ju13H1eYFS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Carlos Alcántara');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Néstor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 644479 AND a.name = 'Carlos Alcántara';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Biassini Segura', '/6X539lTqRd52rA0uhUoLJbiQgNb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Biassini Segura');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ortega', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 644479 AND a.name = 'Biassini Segura';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Mariana Treviño', '/d1N3CLQzrARgFLTLTJdKNgtlapB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mariana Treviño');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Victoria', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 644479 AND a.name = 'Mariana Treviño';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Jorge Ulloa', '/aTRa0w2KlUCFsIhyg1UUSLpJcdg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jorge Ulloa');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 644479 AND d.name = 'Jorge Ulloa';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xc4bTXVwYNXi10jG9dwcaYt5IpU.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 644479;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1fOsyhVz5qyX2rl1qqX6KImVhTx.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 644479;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (101, '레옹', '1994-09-14', '소녀와 킬러의 만남', '한 손엔 우유 2팩이 든 가방, 다른 한 손엔 화분을 들고 뿌리 없이 떠도는 킬러 레옹은 어느 날 옆 집 소녀 마틸다의 일가족이 몰살 당하는 것을 목격한다. 그 사이 심부름을 갔다 돌아 온 마틸다는 가족들이 처참히 몰살 당하자 레옹에게 도움을 청한다. 가족의 원수를 갚기 위해 킬러가 되기로 결심한 12세 소녀 마틸다는 레옹에게 글을 알려주는 대신 복수하는 법을 배우고, 그 사이 레옹에 대한 사랑을 키워나간다. 드디어 그녀는 가족을 죽인 사람이 부패한 마약 경찰 스탠스임을 알게 되고, 홀로 그의 사무실로 향하게 되는데...', 111, '18', 'RELEASED', 77.015000, 8.300000, 45284974, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 101 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 101 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 101 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '장 르노', '/dEQGpWhgRAN1xU8O1jyOVuQTHwo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '장 르노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Léon Montana', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 101 AND a.name = '장 르노';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '나탈리 포트만', '/edPU5HxncLWa1YkgRPNkSd68ONG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나탈리 포트만');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mathilda Lando', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 101 AND a.name = '나탈리 포트만';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '게리 올드만', '/2v9FVVBUrrkW2m3QOcYkuhq9A6o.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '게리 올드만');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Norman Stansfield', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 101 AND a.name = '게리 올드만';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '데니 에일로', '/e7Q6hgWilShqGZ572ByWF9eshMm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데니 에일로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tony', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 101 AND a.name = '데니 에일로';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '피터 에펠', '/AvOZjWVwklfJHNHD2AwLmYRhSXw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '피터 에펠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Malky', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 101 AND a.name = '피터 에펠';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '뤽 베송', '/bLVPnHMVFZ7wrF6ovMVF5U1UX89.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '뤽 베송');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 101 AND d.name = '뤽 베송';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/cVNasmF1Egd3v3mpq747Hizxx4x.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 101;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jynfI114q3kOAbIiVjVfFFmttU2.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 101;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (914, '위대한 독재자', '1940-10-15', '평화를 사랑하는 평범한 유태인 이발사 vs 세계 정복을 꿈꾸는 악명 높은 독재자 힌켈', '세계대전에서 패배한 토매니아국에 힌켈이라는 독재자가 나타나 악명을 떨친다. 한편, 힌켈과 닮은꼴 외모의 이발사 찰리는 국가의 유태인 탄압정책으로 인해 곤경에 처하지만 병사로 참전했던 전쟁에서 우연히 구해줬던 슐츠 장교의 도움을 받아 위기를 모면한다. 독재자 힌켈의 악행은 갈수록 도를 더해가고, 찰리는 유태인 수용소에 끌려가게 되지만 기지를 부려 탈옥에 성공한다. 하지만 이발사와 똑같은 얼굴을 한 힌켈이 탈옥범으로 오해 받아 감옥에 잡혀 들어가게 되는데…', 125, 'ALL', 'RELEASED', 44.947000, 8.300000, 11000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 914 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 914 AND g.name = '전쟁';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '찰리 채플린', '/qQZ2qDAyX9aw8KCkj9VZAQLKysK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '찰리 채플린');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Adenoid Hynkel, Dictator of Tomania / A Jewish Barber', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 914 AND a.name = '찰리 채플린';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Paulette Goddard', '/780Hc9Mjk99b8Ucap4f6GMa6Qob.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Paulette Goddard');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hannah', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 914 AND a.name = 'Paulette Goddard';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jack Oakie', '/9oWdEicbTjfpfiCtvvYuxi0UseU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jack Oakie');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Benzino Napaloni, Dictator of Bacteria', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 914 AND a.name = 'Jack Oakie';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Reginald Gardiner', '/yufdzor5RheT4FYx1Ywm4mo2TlG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Reginald Gardiner');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Commander Schultz', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 914 AND a.name = 'Reginald Gardiner';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Henry Daniell', '/5g4V2fKBAI5TGjqfItfsnPjqZN9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Henry Daniell');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Garbitsch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 914 AND a.name = 'Henry Daniell';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '찰리 채플린', '/qQZ2qDAyX9aw8KCkj9VZAQLKysK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '찰리 채플린');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 914 AND d.name = '찰리 채플린';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uw26mSTaA10hg2yuQfNaFLSeY3h.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 914;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/c8Pi8F1FzpNebtgXcSjC9nWCdSW.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 914;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (18491, '엔드 오브 에반게리온', '1997-07-19', '신세기 에반게리온’ TV 시리즈의 완결판', '‘카오루’의 죽음 이후 공황 상태에 빠진 ‘신지’. 한편, 네르프 총사령관 ‘겐도’는 ‘서드 임팩트’ 즉, ‘인류보완계획’을 놓고 ‘제레’와 갈등을 벌인다. 이에 ‘제레’는 양산형 에바를 투입해 네르프 본부와 에바 파일럿들을 향해 총공격을 감행하고 맹공에 혼수 상태였던 ‘아스카’까지 완전히 폭주한다. ‘신지’는 ‘미사토’의 도움으로 겨우 초호기에 오르지만, 인류의 운명을 결정해야 하는 상황에 한계에 부딪히게 되는데…', 87, '18', 'RELEASED', 47.187000, 8.300000, 20563523, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 18491 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 18491 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 18491 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 18491 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '오가타 메구미', '/eNdfMUyZgG5P4TNIZpbTAu8gBs9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오가타 메구미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shinji Ikari (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 18491 AND a.name = '오가타 메구미';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '하야시바라 메구미', '/jyWpocz6aNRQFgEv0mRD5VA9ff5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하야시바라 메구미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rei Ayanami / Yui Ikari (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 18491 AND a.name = '하야시바라 메구미';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '미츠이시 코토노', '/mvKgkuAVVMmjkFWlwVQu8KCa80O.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미츠이시 코토노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Misato Katsuragi (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 18491 AND a.name = '미츠이시 코토노';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '미야무라 유코', '/lVxXWzREWxixZ51EK4gmz9LqCV9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미야무라 유코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Asuka Langley Soryu (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 18491 AND a.name = '미야무라 유코';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '타치키 후미히코', '/9nHFGrvdT5c4klZOiFQElybNy7h.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '타치키 후미히코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gendo Ikari (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 18491 AND a.name = '타치키 후미히코';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '츠루마키 카즈야', '/vhf9zmNK3HcDkB0fH3RULJoCU9b.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '츠루마키 카즈야');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 18491 AND d.name = '츠루마키 카즈야';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '안노 히데아키', '/AfV9h1RW6uALpx751APdUoX8ONc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '안노 히데아키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 18491 AND d.name = '안노 히데아키';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rS97sHvlsUAp8F6tkC78YjRU8wl.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 18491;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xLMJCCSatxENpHO9rLW9yD8A12C.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 18491;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (3782, '이키루', '1952-10-09', '죽음 앞에서 다시 생각하게 되는 삶의 의미', '공무원인 와타나베 칸지는 어느 날 자신이 간암에 걸렸으며 남은 시간이 많이 않다는 사실을 알게 된다. 지금까지 그는 대단히 규칙적인 삶을 살아왔고 한번도 원칙에서 벗어난 적이 없었다. 그에게는 두 명의 자식이 있지만 그들은 이미 그에게서 한참 멀어져 있다. 남겨진 시간은 길어야 1년. 무엇을 할 것인가? 지금까지의 삶에 회의를 느낀 그는 자신의 삶이 가치 있었다는 증거가 될만한 무언가를 하기로 결심하고 버려진 땅을 공원으로 만들 계획을 세운다.', 143, '', 'RELEASED', 19.298000, 8.300000, 55240, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 3782 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '시무라 타카시', '/ydyAm2vyBbEPZRICIMqqjDm0NM9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시무라 타카시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kanji Watanabe', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3782 AND a.name = '시무라 타카시';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '田中春男', '/eziah9QZcIs3SVPgTS3iuyUpiW3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '田中春男');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sakai', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3782 AND a.name = '田中春男';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '金子信雄', '/iKcZ0rtO5sCfOSEBvyAdCk68EzY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '金子信雄');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mitsuo, son of Kanji', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3782 AND a.name = '金子信雄';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '左卜全', '/qYUGXKAwhLuVrJGiAmnBWAxToQb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '左卜全');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ohara', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3782 AND a.name = '左卜全';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '小田切みき', '/9pfgepQ89gE9wZyHLnMM3tMRV1Y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '小田切みき');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Toyo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3782 AND a.name = '小田切みき';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '구로사와 아키라', '/eGexa6MZ22T1MZxce1qR3RcAYaS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '구로사와 아키라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 3782 AND d.name = '구로사와 아키라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uMaLKmpxepW4Uq8lcCpels656u0.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 3782;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/stiGp1XzkLSYdUUEWTyQOZRkr49.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 3782;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (3082, '모던 타임즈', '1936-02-05', '찰리와 소녀의 행복을 찾아가는 아름다운 여정', '산업의 기계화와 대공황이 맞물려 힘든 시절, 공장의 컨베이어 벨트 위에서 하루 종일 나사못 조이는 일을 하는 찰리. 찰리는 반복되는 작업에 착란 현상을 일으키고, 눈에 보이는 모든 것을 조여버리는 강박 관념에 빠지고 만다. 그는 급기야 정신 병원에 가게 되고, 거리를 방황하다 시위 군중에 휩쓸려 감옥살이까지 하게 된다. 몇 년 후 감옥에서 풀려난 찰리는 부모를 잃고 고아가 된 한소녀를 만난다. 그녀의 도움으로 카페에서 일하게 되고 서로를 의지하며 새로운 희망을 가진다. 둘은 행복하고 단란한 가정을 꿈꾸며 일자리를 찾아 헤매지만 매번 다시 거리로 내몰리고 마는데...', 87, 'All', 'RELEASED', 35.923000, 8.300000, 1800000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 3082 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 3082 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 3082 AND g.name = '로맨스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '찰리 채플린', '/qQZ2qDAyX9aw8KCkj9VZAQLKysK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '찰리 채플린');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Tramp (A Factory Worker)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3082 AND a.name = '찰리 채플린';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Paulette Goddard', '/780Hc9Mjk99b8Ucap4f6GMa6Qob.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Paulette Goddard');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'A Gamin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3082 AND a.name = 'Paulette Goddard';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Henry Bergman', '/x41Z1XOGnBg6xnFhxunVQBmcJ36.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Henry Bergman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cafe Proprietor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3082 AND a.name = 'Henry Bergman';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Tiny Sandford', '/dsfbvZOIb1rdBx8eUGa2QTYyqGE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tiny Sandford');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Big Bill', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3082 AND a.name = 'Tiny Sandford';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Chester Conklin', '/qaEgtSQU4eTX2fMng7Grc7G2xzq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Chester Conklin');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mechanic', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3082 AND a.name = 'Chester Conklin';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '찰리 채플린', '/qQZ2qDAyX9aw8KCkj9VZAQLKysK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '찰리 채플린');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 3082 AND d.name = '찰리 채플린';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/51tKLNNKi8fKZq9DTcGpFAJ7IPc.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 3082;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kSlO1pHpwQfPQdgVPr7dJiJNtJ8.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 3082;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1084736, '몬테크리스토 백작', '2024-06-28', '', '에드먼드 단테스는  음모에 빠져 결혼식 날 자신이 저지르지도 않은 범죄로 체포된다. 샤토 디프에서 14년 동안의 수감 생활을 끝으로 탈옥에 성공하고  꿈에 그리던 부자가 된다. 단테스는 몬테크리스토 백작으로 신분을 위장하고 세 남자에게 복수를 실행에 옮긴다.', 178, '', 'RELEASED', 1040.657000, 8.300000, 73924182, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '역사';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '피에르 니네이', '/aMsGsnRPet7pZ2ppAxaRdBz4yGU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '피에르 니네이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Edmond Dantès / le Comte de Monte-Cristo / Lord Halifax', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1084736 AND a.name = '피에르 니네이';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Bastien Bouillon', '/NNaftwlsU8rvBY4e4LX25ZTKgB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bastien Bouillon');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fernand de Morcerf', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1084736 AND a.name = 'Bastien Bouillon';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '아나이스 드무스티에', '/kObYOu3UYkNcQGg1gnl4xitwhNc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아나이스 드무스티에');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mercédès Herrera', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1084736 AND a.name = '아나이스 드무스티에';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '아나마리아 바르톨로메이', '/oU56hySuXi4Q51gX6nPcplWybQo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아나마리아 바르톨로메이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Haydée', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1084736 AND a.name = '아나마리아 바르톨로메이';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Laurent Lafitte', '/lpF5sb1aEMEmxxfZT3u8PWGEipC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Laurent Lafitte');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gérard de Villefort', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1084736 AND a.name = 'Laurent Lafitte';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Alexandre de La Patellière', '/er7ZbU5inozZfFmvpwswjujxBos.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Alexandre de La Patellière');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1084736 AND d.name = 'Alexandre de La Patellière';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Matthieu Delaporte', '/ofOMIBoC3FyRgfPRWhQxzJMCeLy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Matthieu Delaporte');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1084736 AND d.name = 'Matthieu Delaporte';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4MlHj9EWOFIDoa4uXwcQhnf66w5.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1084736;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/llIXQAndg5kB6SWlp6ouUdO7Zxd.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1084736;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (335, '옛날 옛적 서부에서', '1968-12-21', '스파게티 웨스턴 장르를 총정리한 걸작', '프랭크가 보낸 세명의 총잡이가 기차역에서 누군가를 기다린다. 드디어 그들이 기다리던 한 남자가 하모니카를 불며 기차역에 도착하고, 그들 세 총잡이는 모두 이름 없는 그 남자의 총에 쓰러진다. 한편, 프랭크와 그 부하들은 아일랜드 출신인 맥베인 일가를 잔인하게 살해하는데, 뉴올리언즈에서 이제 막 도착한 맥베인의 새 아내 질로서는 황망할 수밖에 없다. 두 사람은 한달 전 이미 결혼을 한 상태였다.  다시 뉴올리언즈로 돌아가려던 질은 마음을 고쳐먹고 맥베인과 아이들의 시체만 있는 그 집에서 혼자 생활을 시작한다.', 166, '15', 'RELEASED', 52.783000, 8.300000, 5380118, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 335 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 335 AND g.name = '서부';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '클라우디아 카르디날레', '/gbTVdZGrOwteJ7qYSzyn8XpUk0H.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '클라우디아 카르디날레');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jill', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 335 AND a.name = '클라우디아 카르디날레';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '헨리 폰다', '/6wXWsqSXF3wCsGcwVqiszy6RX9X.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헨리 폰다');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frank', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 335 AND a.name = '헨리 폰다';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jason Robards', '/sUmHudqlipfviXwKNqSv5T9PQt6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jason Robards');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '''Cheyenne''', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 335 AND a.name = 'Jason Robards';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '찰스 브론슨', '/w0C2Xa6PCQX83Iu2TxPjOCv8ufm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '찰스 브론슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '''Harmonica''', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 335 AND a.name = '찰스 브론슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '가브리엘레 페르제티', '/pcMZHk3qfgBB26Ih9yBeMDCUUt3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '가브리엘레 페르제티');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Morton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 335 AND a.name = '가브리엘레 페르제티';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '세르조 레오네', '/2576qoW8l9Z1nKGM10ar60aIwUu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '세르조 레오네');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 335 AND d.name = '세르조 레오네';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mmGzMJonNDvhPiI9a5JM9mLhDUH.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 335;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/P3dkkDkRCd1CU7MT1cs0mGmH1s.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 335;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (901, '시티 라이트', '1931-02-06', '찰리 채플린의 하얀 거짓말', '일자리가 없어 도시를 배회하는 떠돌이는 어느날 아침 산책길에서 꽃 파는 눈먼 소녀(를 만난다. 떠돌이는 마지막 동전을 털어서 꽃을 사주고, 육중한 차문 닫히는 소리에 소녀는 그를 부자로 오인한다. 소녀에게 애정을 느낀 떠돌이는 부자 행세를 하며 가깝게 지내고, 그녀의 눈을 수술할 비용을 마련해 주기로 약속한다. 어느 날 술에 취해 물에 빠진 백만장자를 구해준 떠돌이는 그와 친구가 되는데, 백만장자는 술에 취했을 때만 그를 알아보고 술이 깨면 그를 도둑으로 오인한다. 백만장자가 술에 취했을 때 소녀의 수술비를 얻어낸 떠돌이는 그가 술이 깨기 전에 달아나 소녀에게 돈을 전해주고 사라지는데...', 87, 'ALL', 'RELEASED', 24.046000, 8.300000, 4250000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 901 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 901 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 901 AND g.name = '로맨스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '찰리 채플린', '/qQZ2qDAyX9aw8KCkj9VZAQLKysK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '찰리 채플린');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'A Tramp', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 901 AND a.name = '찰리 채플린';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Virginia Cherrill', '/dUesDEOkQGsCK0FXQSjRW6QayMw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Virginia Cherrill');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'A Blind Girl', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 901 AND a.name = 'Virginia Cherrill';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Florence Lee', '/e07DhorE4qs6dz3MwZcPTHIXNgt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Florence Lee');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Her Grandmother', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 901 AND a.name = 'Florence Lee';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Harry Myers', '/v2Y70uGlW7FQV8khBqRUOUEdy4n.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Harry Myers');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'An Eccentric Millionaire', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 901 AND a.name = 'Harry Myers';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Al Ernest Garcia', '/pz1VDUCBCvNiZ8qAHg9N4ejXmSX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Al Ernest Garcia');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'His Butler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 901 AND a.name = 'Al Ernest Garcia';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '찰리 채플린', '/qQZ2qDAyX9aw8KCkj9VZAQLKysK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '찰리 채플린');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 901 AND d.name = '찰리 채플린';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7oI6KKZDxEuxhIm5m9VpOF2Yi9N.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 901;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/n0Cju2Eu3VyrUFl32thblHFWznA.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 901;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (77338, '언터처블: 1%의 우정', '2011-11-02', '', '상위 1% 귀족남과 하위 1% 무일푼이 만났다.  2주간의 내기로 시작된 상상초월 특별한 동거 스토리  하루 24시간 내내 돌봐주는 손길이 없으면 아무 것도 할 수 없는 전신불구의 상위 1% 백만장자 필립(프랑수아 클루제). 어느 날 우연히, 가진 것이라곤 건강한 신체가 전부인 하위 1% 무일푼 백수 드리스(오마 사이)를 만나게 된 그는 거침없이 자유로운 성격의 드리스에게 호기심을 느껴 특별한 내기를 제안한다. 바로 2주 동안 필립의 손발이 되어 한시도 떨어지지 않고 자신을 간호하며 버틸 수 있는지 시험해보겠다는 것. 참을성이라곤 눈꼽 만큼도 찾아 볼 수 없던 드리스는 오기가 발동해 엉겁결에 내기를 수락한다. 이렇게, 전혀 어울릴 것 같지 않던 극과 극, 두 남자의 예측불허 기막힌 동거가 시작 되는데…', 112, '12', 'RELEASED', 77.030000, 8.278000, 426590315, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 77338 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 77338 AND g.name = '코미디';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '프랑수아 클루제', '/4ioxRGRJdSjItLxAQ2pp7byWkd3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '프랑수아 클루제');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Philippe', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 77338 AND a.name = '프랑수아 클루제';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '오마르 시', '/laNZay6AfEzvEvY1NUH9UFiSD0a.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오마르 시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Driss', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 77338 AND a.name = '오마르 시';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Dominique Henry', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Dominique Henry');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pilote Parapente', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 77338 AND a.name = 'Dominique Henry';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Anne Le Ny', '/cTFJ87eHjaU8EHsQt2TMcsedeut.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Anne Le Ny');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yvonne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 77338 AND a.name = 'Anne Le Ny';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Clotilde Mollet', '/2eR1tpq9zEger1JdANUpehzaSa3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Clotilde Mollet');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marcelle', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 77338 AND a.name = 'Clotilde Mollet';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Olivier Nakache', '/cLfpk5eIT8h7NnZcz6Iti3DPkRu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Olivier Nakache');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 77338 AND d.name = 'Olivier Nakache';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Éric Toledano', '/9axN13gdsRpQLKqmvibsc9jqK2q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Éric Toledano');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 77338 AND d.name = 'Éric Toledano';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4oOf3pmDD5rMNQGgsf7zMbFKtKC.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 77338;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bGksau9GGu0uJ8DJQ8DYc9JW5LM.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 77338;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (28, '지옥의 묵시록', '1979-08-15', '전쟁의 폭염, 피 끓는 광기', '미국 특수부대의 윌라드 대위는 고향에 돌아갔다가 아내가 내민 이혼장에 도장을 찍고 다시 정글로 돌아온다. 혼돈과 막연한 갈망에 시달리던 윌라드에게 떨어진 임무는 캄보디아에 자신의 왕국을 건설한 커츠 대령을 암살하라는 것. 커츠 대령은 한때 가장 뛰어난 군인으로 인정받았으나 미국의 통제를 벗어나 캄보디아에서 독자적인 왕국을 거느리고 있다. 윌라드 대위는 4명의 병사들과 함께 커츠 대령을 찾아 나선다. 폭염과 광기로 가득한 전투를 겪으면서 두려움과 공포로 이성을 잃어가던 그들은 마침내 커츠 대령의 왕국에 도착한다. 그리고 그곳에서 윌라드 대위는 상상을 초월하는 진실을 마주하게 되는데...', 147, '', 'RELEASED', 96.595000, 8.300000, 150000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 28 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 28 AND g.name = '전쟁';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마틴 쉰', '/m2Y3Q0uyuW6htrn2W9UWCWMkpZu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마틴 쉰');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Captain Benjamin Willard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 28 AND a.name = '마틴 쉰';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Frederic Forrest', '/gxHgIe9swYgCcxSSCewQTF4J4VO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Frederic Forrest');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jay ''Chef'' Hicks', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 28 AND a.name = 'Frederic Forrest';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Albert Hall', '/jvcOpEO0vSNy3KaDkhIldI1CoaU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Albert Hall');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chief Phillips', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 28 AND a.name = 'Albert Hall';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '로렌스 피시번', '/aBRISux1AGCqkFNTKHYfLcJunWA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로렌스 피시번');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tyrone ''Clean'' Miller', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 28 AND a.name = '로렌스 피시번';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Sam Bottoms', '/82ACmkTCHtKAuw42Jwx4JbjuVw0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sam Bottoms');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lance B. Johnson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 28 AND a.name = 'Sam Bottoms';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '프랜시스 포드 코폴라', '/3Pblihd6KjXliie9vj4iQJwbNPU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '프랜시스 포드 코폴라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 28 AND d.name = '프랜시스 포드 코폴라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/giP5yeJBrsqglkM05pbiTyRsoBa.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 28;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9Qs9oyn4iE8QtQjGZ0Hp2WyYNXT.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 28;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1585, '멋진 인생', '1946-12-20', '친구가 있는 한 실패한 인생은 아니다', '조지 베일리는 베드폴드 마을 사람들을 위해 평생을 봉사하며 살아온 인물. 그는 항상 여행을 원했지만 마을 전체를 인수하려는 구두쇠 포터의 계략을 막기 위해서 그 기회를 버릴 수 밖에 없었다. 그를 저지하기 위해 그와 그의 아버지가 만든 대출회사는 애를 쓰지만, 크리스마스 이브에 빌리 삼촌이 사업비 8000달러를 은행에 예금하려던 중 돈을 잃어버린다. 포터는 돈의 위치를 알아내고 이를 숨긴다. 조지는 책임을 떠안고 감옥에 구속되고, 회사는 파산한다. 마침내 포터는 도시를 인수한 것이다. 사랑하는 아내, 자식 그리고 마을 사람들을 생각하며 조지는 자살을 생각하지만, 그의 앞에 수호천사 클라란스가 나타나는데...', 130, '', 'RELEASED', 72.990000, 8.276000, 9644124, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1585 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1585 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1585 AND g.name = '판타지';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제임스 스튜어트', '/yId5fdDqShOkr0YjCoJbUOZipcX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제임스 스튜어트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'George Bailey', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1585 AND a.name = '제임스 스튜어트';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '도나 리드', '/aCRMYYMs3zxLvmUgxBytuCgTElQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '도나 리드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mary Hatch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1585 AND a.name = '도나 리드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Lionel Barrymore', '/j7UjmpRAZ7imblut0WHqjS13mmg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lionel Barrymore');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Potter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1585 AND a.name = 'Lionel Barrymore';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Thomas Mitchell', '/uOhcftGVj7tPrCKBYHYtYPlQKUP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Thomas Mitchell');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Uncle Billy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1585 AND a.name = 'Thomas Mitchell';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Henry Travers', '/7qsZdxnngfOqXVaJOodfzeH6OGx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Henry Travers');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Clarence', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1585 AND a.name = 'Henry Travers';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '프랭크 카프라', '/ekvnffPsTGHyukMHpxprNxRt3g5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '프랭크 카프라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1585 AND d.name = '프랭크 카프라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/quszlUONTUqKlfm8PnsMJKgSiL9.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1585;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3q35nBLCIdEbxYfsr7D5ocYQXKz.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1585;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (995133, '''소년과 두더지와 여우와 말'' - The Boy, the Mole, the Fox and the Horse', '2022-12-25', '', '논모어와 배드 로봇 프로덕션을 만나 아름다운 애니메이션으로 재탄생한 찰리 맥커시의 베스트셀러. 친절과 용기, 희망의 의미를 찾아가는 네 친구들의 낯설지만 깊은 유대를 만나보세요.', 35, 'All', 'RELEASED', 39.660000, 8.273000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 995133 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 995133 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 995133 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 995133 AND g.name = '판타지';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jude Coward Nicoll', '/eifbyTAxneBQhrZ594gwTizrYBE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jude Coward Nicoll');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Boy (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 995133 AND a.name = 'Jude Coward Nicoll';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '톰 홀랜더', '/fs5EyDuxcE1s3hFijTSnVhpwYPO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 홀랜더');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Mole (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 995133 AND a.name = '톰 홀랜더';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이드리스 엘바', '/be1bVF7qGX91a6c5WeRPs5pKXln.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이드리스 엘바');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Fox (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 995133 AND a.name = '이드리스 엘바';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '가브리엘 번', '/vZ5amSGl8iSSK7C7WLKCN4EewnM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '가브리엘 번');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Horse (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 995133 AND a.name = '가브리엘 번';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Charlie Mackesy', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Charlie Mackesy');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 995133 AND d.name = 'Charlie Mackesy';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Peter Baynton', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Peter Baynton');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 995133 AND d.name = 'Peter Baynton';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rtrXpardqbtPtkWDtCQOX7218LM.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 995133;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jGKQks1bd3rmltqaXbEbS9DnsPv.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 995133;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (533514, '극장판 바이올렛 에버가든', '2020-09-18', '', '친애하는 길베르트 소령님, 오늘도 또 당신을 떠올리고 말았습니다.  무엇을 보든 무엇을 하든 당신이 떠오릅니다.  시간이 지나도 당신과 보냈던 기억은 선명하게 되살아납니다. 당신은 날 곁에 두었고 아무것도 모르는 제게 살아가는 방법을 가르쳐 주셨고 처음으로 사랑이라는 감정을 알려주셨습니다.  그래서 이렇게 또 편지를 쓰게 됩니다.  -언젠가 이 편지가 당신에게 닿기를 바라며-', 140, 'ALL', 'RELEASED', 21.550000, 8.300000, 20339624, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 533514 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 533514 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 533514 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 533514 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이시카와 유이', '/zptGIN1iklKJL1xrfHKOpxR2qJ9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이시카와 유이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Violet Evergarden (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 533514 AND a.name = '이시카와 유이';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '나미카와 다이스케', '/iw0X8oDutxaBAri3Ifga8nhdUJK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나미카와 다이스케');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gilbert Bougainvillea (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 533514 AND a.name = '나미카와 다이스케';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '코야스 타케히토', '/8uBkNDKPNmp9JWgMUI02NVyfhi1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '코야스 타케히토');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Claudia Hodgins (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 533514 AND a.name = '코야스 타케히토';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '기우치 히데노부', '/SpxriXj1RnC7av28Ee47YL3bS2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '기우치 히데노부');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dietfried Bougainvillea (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 533514 AND a.name = '기우치 히데노부';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '토마츠 하루카', '/geVvuA2zMGE5xzfc20aDelJSelu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '토마츠 하루카');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Iris Cannary (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 533514 AND a.name = '토마츠 하루카';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '이시다테 타이치', '/nBPuRvo9oWFWqzZiS8U4P9j0qtg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '이시다테 타이치');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 533514 AND d.name = '이시다테 타이치';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mBUy2lCwk6fpByQ7GBFKRApKEHb.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 533514;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aLqtWLA6NQHBwQHvHDq5z4EKUm0.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 533514;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (975, '영광의 길', '1957-10-25', '', '총사령관 브롤라드는 프랑스군의 용맹함을 보여주고 싶은 열망에 독일군이 점령하고 있는 ''개미고지''를 탈환하라고 명령한다. 승진을 바라고 있던 사단장 미로는 그것이 자살행위라는 것을 알면서도 자신의 명예를 위해 부하들을 희생시키기로 한다.  결국 군대의 명령 계통에 충실한 닥스 대령이 부대원들을 이끌고 작전을 수행하지만 무모한 작전은 사병들의 끔찍한 희생을 부른다. 동료들의 끔찍한 죽음을 목격한 군인들은 참호를 떠나 공격하기를 거부하기에 이른다. 이에 화가 난 미로 장군은 포병대에게 자신의 부하들이 있는 참호를 향해 대포를 발사하라고 명령한다.  그렇게 작전은 실패로 끝나고, 공격 계획이 잘못된 것이었다는 사실을 인정할 수 없는 미로장군은 작전의 실패가 부하들의 비겁함 때문이라고 스스로를 합리화하고 사단에서 병사 한명씩을 무단으로 색출해, 실패한 임무에 대한 희생양으로 이들을 군법회의에 회부해 기자들이 지켜보는 가운데 처형하려 한다.  닥스 대령은 미로장군의 처사에 분노를 느끼며 병사들을 위해 필사적인 변호를 펼치는데...', 88, '', 'RELEASED', 33.744000, 8.300000, 1200000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 975 AND g.name = '전쟁';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 975 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 975 AND g.name = '역사';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '커크 더글라스', '/yvunzQgnILw6uNBFMyld5nhkBCX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '커크 더글라스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Col. Dax', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 975 AND a.name = '커크 더글라스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Ralph Meeker', '/3gxXZRouc813WFmA6zVUl3ciq0P.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ralph Meeker');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cpl. Philippe Paris', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 975 AND a.name = 'Ralph Meeker';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Adolphe Menjou', '/88FfjxT3cFDIbCIK0UmwyjEF6tU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Adolphe Menjou');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gen. George Broulard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 975 AND a.name = 'Adolphe Menjou';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'George Macready', '/gGtegV82TMbcd5psHx6w7by5FgO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'George Macready');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gen. Paul Mireau', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 975 AND a.name = 'George Macready';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Wayne Morris', '/2HFQHQrPdlr8eRca5x9BAfeQnjc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Wayne Morris');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lt. Roget/Singing man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 975 AND a.name = 'Wayne Morris';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '스탠리 큐브릭', '/yFT0VyIelI9aegZrsAwOG5iVP4v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '스탠리 큐브릭');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 975 AND d.name = '스탠리 큐브릭';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/382xZKXOfuILUQ4HsqCGPLk8fgA.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 975;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/354kfjVb96mtFALMhBE6jzHGiA2.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 975;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (652837, '조제, 호랑이 그리고 물고기들', '2020-12-25', '“이름이 뭐야?”  “조제”', '지체장애인인 조제는 그림 그리기를 좋아하며, 미처 경험해 보지 못한 세상에 대한 호기심과 두려움을 동시에 가지고 살아간다. 해양생물학을 전공하며 유학을 준비 중인 츠네오는 바다를 사랑하는 대학생으로 조제와 비슷한 또래이다. 조제를 온실 속 화초처럼 키워온 할머니는 츠네오를 아르바이트생으로 고용하여 조제를 일정 시간 돌보게 한다. 조제는 할머니의 눈을 피해, 혹은 할머니의 묵인하에, 츠네오와 함께 바깥나들이를 시작하고 조금씩 세상을 향해 마음을 열어간다.', 99, '', 'RELEASED', 32.525000, 8.265000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 652837 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 652837 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 652837 AND g.name = '로맨스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '나카가와 타이시', '/7Vo2ywkfbQufXkIGrsOQDhC0Da8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나카가와 타이시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tsuneo Suzukawa (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 652837 AND a.name = '나카가와 타이시';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '키요하라 카야', '/a0tDsusfKXPSbVGO9zBSSAoCcAP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키요하라 카야');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kumiko ''Josee'' Yamamura (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 652837 AND a.name = '키요하라 카야';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '미야모토 유메', '/1bpMweFhnzx40CbVP8aU05H8iaJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미야모토 유메');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mai Ninomiya (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 652837 AND a.name = '미야모토 유메';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '오키츠 카즈유키', '/vgyaK5dAxhvzAi6LJM3ZyaJd4mJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오키츠 카즈유키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hayato Matsuura (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 652837 AND a.name = '오키츠 카즈유키';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Lynn', '/kFyuszD3uS5rX4GGf1U5OM5exur.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lynn');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kana Kishimoto (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 652837 AND a.name = 'Lynn';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '타무라 코타로', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '타무라 코타로');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 652837 AND d.name = '타무라 코타로';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/v60S8rPRCQRYSeCtmLiuRpQqIfC.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 652837;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/i1GT0e6Crg6UezT3ibXnMS3pBAd.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 652837;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (637920, '7번방의 기적', '2019-10-10', '', '교도소 7번 방. 지능이 예닐곱 살 수준인 남자가 이곳에 들어왔다. 아동 살해 누명을 쓰고 사형을 기다리지만 그에겐 아끼는 딸이 있다. 감방 동료들이 준비한 특별 선물로 딸과 재회한 남자. 하지만 계속 함께하려면 무죄를 밝혀야 한다.', 132, '', 'RELEASED', 64.128000, 8.264000, 28000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 637920 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Aras Bulut İynemli', '/2NCpNhJm30eR0S73VPzUjLaPApD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Aras Bulut İynemli');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Memo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637920 AND a.name = 'Aras Bulut İynemli';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Nisa Sofiya Aksongur', '/rGdkhirqwprZAJDlPTZiQgFY5rk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nisa Sofiya Aksongur');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ova', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637920 AND a.name = 'Nisa Sofiya Aksongur';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'İlker Aksum', '/dY4ggg91mwr2OglePtYowUtzEVh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'İlker Aksum');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Askorozlu', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637920 AND a.name = 'İlker Aksum';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Mesut Akusta', '/6YIczTLrwCiohfQB6cSBcWxX57H.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mesut Akusta');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yusuf', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637920 AND a.name = 'Mesut Akusta';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Yıldıray Şahinler', '/4RVOox9vz1q9y0n6Cevw7klkH5t.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Yıldıray Şahinler');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hafız', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637920 AND a.name = 'Yıldıray Şahinler';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Mehmet Ada Öztekin', '/SkHanCAwbjb8U9YLJnYIvw5wG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Mehmet Ada Öztekin');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 637920 AND d.name = 'Mehmet Ada Öztekin';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sOfUbzu6OUL5cscGODPdpHn9C1g.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 637920;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/inEy3A5OPgeYW4rjRiGycfEeQzA.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 637920;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (632632, '극장판 기븐', '2020-08-22', '좀더 노래하고 싶어, 너의 곁에서', '고등학생 우에노야마 리츠카는 사토 마후유의 노랫소리에 충격을 받아 나카야마 하루키, 카지 아키히코와 함께 활동하는 밴드에 보컬로 마후유를 영입한다. 마후유 영입 후 첫 공연을 성공시키면서 밴드 ''기븐''의 활동을 시작하려는 와중에 마후유를 향한 마음을 자각한 리츠카는 그와 사귀기 시작한다. 한편, 하루키는 오랫동안 품고 있던 아키히코에 대한 호감이 커져만 가고 아키히코는 동거인인 바이올리니스트 우게츠와 관계를 계속 유지하려 하는데... 하루키와 아키히코, 우게츠의 사랑이 스크린에서 삐걱대며 움직인다!', 60, '', 'RELEASED', 15.726000, 8.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 632632 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 632632 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 632632 AND g.name = '음악';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 632632 AND g.name = '로맨스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '에구치 타쿠야', '/hPPhUp0mM65Lc87Q8WXUEmGQAXx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에구치 타쿠야');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Akihiko Kaji (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 632632 AND a.name = '에구치 타쿠야';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '나카자와 마사토모', '/3pezOVWCMKWdqAzwSo0eKNtso95.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나카자와 마사토모');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Haruki Nakayama (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 632632 AND a.name = '나카자와 마사토모';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '矢野奨吾', '/kKN7qwnPCheARPuLZLYTUUj9A7Q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '矢野奨吾');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mafuyu Satou (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 632632 AND a.name = '矢野奨吾';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '우치다 유우마', '/k5yOai4JnkjpTVzSwIFzXxQ2LBP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '우치다 유우마');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ritsuka Uenoyama (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 632632 AND a.name = '우치다 유우마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '浅沼晋太郎', '/5D2YC0c4zg9TXyOi0PpIXRugvzb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '浅沼晋太郎');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ugetsu Murata (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 632632 AND a.name = '浅沼晋太郎';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Hikaru Yamaguchi', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Hikaru Yamaguchi');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 632632 AND d.name = 'Hikaru Yamaguchi';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tVP1DjnljT1it6cAnn353cdVXDe.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 632632;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/u1wHUA0R48FH4WV3sGqjwx3aNZm.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 632632;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (10376, '피아니스트의 전설', '1998-10-28', '“피아노를 봐. 건반은 시작과 끝이 있지. 그건 무섭지가 않아. 무서운 건 세상이야“', '1900년, 유럽과 미국을 오가는 버지니아 호에서 태어나 평생을 바다 위에서 살아온 천재 피아니스트 ‘나인틴 헌드레드’. 유일한 친구인 트럼펫 연주자 ‘맥스’와 첫사랑이자 마지막 사랑 ‘퍼든’, 그의 소문을 듣고 찾아온 재즈 피아니스트를 만나며 조금씩 바다 밖 세상을 배워가던 그의 인생에 새로운 변화가 찾아오는데...', 170, '15', 'RELEASED', 22.021000, 8.263000, 21057208, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 10376 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 10376 AND g.name = '음악';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '팀 로스', '/qSizF2i9gz6c6DbAC5RoIq8sVqX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '팀 로스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Danny Boodmann T.D. Lemon Nineteen Hundred ''1900''', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10376 AND a.name = '팀 로스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '프루이트 테일러 빈스', '/jqC1v8tF92QcmkQycnaLSuJiQfl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '프루이트 테일러 빈스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Max Tooney', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10376 AND a.name = '프루이트 테일러 빈스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '멜라니 티에리', '/dtzfVWfyWgnlgwpzgA4uXDrBcTI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '멜라니 티에리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Girl', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10376 AND a.name = '멜라니 티에리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '빌 넌', '/trxNvS6g5yvwbXzx2LK6JqutE5z.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빌 넌');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Danny Boodmann', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10376 AND a.name = '빌 넌';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '가브리엘 라비아', '/xjLiYd6fHszM8w5NiGBcSKd1mk9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '가브리엘 라비아');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Farmer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10376 AND a.name = '가브리엘 라비아';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '주세페 토르나토레', '/pjVrtNGsCSNs5IeRVr34PMn1hVR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '주세페 토르나토레');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 10376 AND d.name = '주세페 토르나토레';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/78wbKjbdIG11hVIv55g6rwgLG3l.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 10376;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6rmb35g7XoMCMQtnbH0rUecFZlV.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 10376;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (29259, '구멍', '1960-03-18', '', '라 상테 형무소에서도 특히 경계가 삼엄한 감방 안에는 ‘신부’라는 별명을 가진 보슬랭, 세 차례 탈옥 경력이 있는 롤랑, 눈초리가 날카로운 마뉴, 그리고 여자를 좋아하는 조가 있다. 지하에 구멍을 파고 탈옥한다는 계획을 모의하던 네 사람은 형무소 풋내기 가스파를 계획에 가담시킨다.', 132, '', 'RELEASED', 17.699000, 8.300000, 33187, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 29259 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 29259 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 29259 AND g.name = '범죄';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Michel Constantin', '/A9rrvk2DkpCcE2LJ18NhCEv6Wfa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Michel Constantin');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Geo Cassine', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 29259 AND a.name = 'Michel Constantin';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jean Keraudy', '/bb4FBj9koEbGCfFYzykw9TLIQ8N.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jean Keraudy');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Roland Darban', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 29259 AND a.name = 'Jean Keraudy';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Philippe Leroy', '/d4hTg6vJpsUuzDz8iByBXs6B3Mv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Philippe Leroy');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Manu Borelli', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 29259 AND a.name = 'Philippe Leroy';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Raymond Meunier', '/vwtlx1ot45fduxnyRInhiMxnnvK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Raymond Meunier');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vossellin / Monseigneur', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 29259 AND a.name = 'Raymond Meunier';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Marc Michel', '/b7QbG4DDom3uPv6FMaVgV9HlAAc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marc Michel');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Claude Gaspard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 29259 AND a.name = 'Marc Michel';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Jacques Becker', '/wamZsli0mJPyWeZ6bwSgdzsvHyi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jacques Becker');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 29259 AND d.name = 'Jacques Becker';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/e0jiNoXdEi2ilGRvhqcaoNCSglg.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 29259;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/f72GEQF2lKsdmEULSI9bWCbQylH.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 29259;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (42269, '우리는 그토록 사랑했네', '1974-12-21', '', '2차 대전 당시 연합군으로 참전했다가 친구가 된 세 남자와 한 여자의 사랑과 우정을 그린 작품.', 124, '', 'RELEASED', 15.177000, 8.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 42269 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 42269 AND g.name = '코미디';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Nino Manfredi', '/iFJ9i6GGJ4romvuF922mZNROPKW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nino Manfredi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Antonio', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 42269 AND a.name = 'Nino Manfredi';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Vittorio Gassman', '/eIcPpL8OlAMlIr9ZMvFTY7ni7LX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Vittorio Gassman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gianni Perego', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 42269 AND a.name = 'Vittorio Gassman';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '스테파니아 산드렐리', '/91OvQqmb1QGxOft0Pzjs11XVQs9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스테파니아 산드렐리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Luciana Zanon', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 42269 AND a.name = '스테파니아 산드렐리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Stefano Satta Flores', '/9PifLAPYRIcEbeqj5WPb7bk3w9k.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Stefano Satta Flores');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nicola Palumbo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 42269 AND a.name = 'Stefano Satta Flores';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Giovanna Ralli', '/6dvHHF5JoFhQg6vD6rG8vyME4zK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Giovanna Ralli');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elide', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 42269 AND a.name = 'Giovanna Ralli';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '에토레 스콜라', '/f4Y5YwFwgvTSGHuYqiAKuvCapI8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '에토레 스콜라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 42269 AND d.name = '에토레 스콜라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/skGhz4SJrVzegKy4Xo7kVh8mpus.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 42269;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2Kkqmy3EpXqBDqv1vvsNXX3pwww.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 42269;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (630566, '클라우즈', '2020-10-09', '', '실화를 배경으로 만들어진 영감을 주는 이야기. 청년 음악가 잭 소비엑은 자신의 몸에 암세포가 퍼져, 이제 남은 시간이 몇 달밖에 없다는 것을 알게 된다. 이제 얼마 남지 않는 시간 동안 그는 자신의 꿈꾸어오던 대로 음악앨범을 만들기로 한다. 그러나 이 음악이 전 세상에 감동을 주는 엄청난 곡이 될 거라는 것을 그때는 알지 못했다. 결국 음악은 잭의 삶에 새로운 의미를 주었고, 그는 세상과 가장 아름답게 이별 인사를 할 수 있게 된다. 전 세계 사람들이 함께할 노래를 남긴 것이다.', 121, '12', 'RELEASED', 19.004000, 8.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 630566 AND g.name = '음악';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 630566 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 630566 AND g.name = '로맨스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Fin Argus', '/3aDbVpQga0Bhcx7GGh3jKVaeJN6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Fin Argus');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zach Sobiech', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 630566 AND a.name = 'Fin Argus';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '사브리나 카펜터', '/o0anvGEg34MzoNh6hbJHthB3paF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사브리나 카펜터');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sammy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 630566 AND a.name = '사브리나 카펜터';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Madison Iseman', '/5JVhacnNhqLcWpGPH1fqL7Ovq7g.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Madison Iseman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Amy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 630566 AND a.name = 'Madison Iseman';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '니브 캠벨', '/eMKwFwUXMFji1omPePrtHGm24R8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '니브 캠벨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Laura Sobiech', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 630566 AND a.name = '니브 캠벨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '톰 에버렛 스콧', '/nVDihOvsSm7kmeyHLtAcEzrrSYC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 에버렛 스콧');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rob Sobiech', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 630566 AND a.name = '톰 에버렛 스콧';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Justin Baldoni', '/2sc6iUWljADnqtjsaKU3s6f0DGW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Justin Baldoni');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 630566 AND d.name = 'Justin Baldoni';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2XyVG0QUnPrukgV5Frpn40kkIky.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 630566;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/nbAbAk80aWCpOS5kOPYJ1L9kE1R.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 630566;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (8587, '라이온 킹', '1994-06-24', '아름다우며 장엄한 디즈니 최고의 명작.', '아프리카의 평화로운 왕국 프라이드랜드. 이곳을 다스리는 사자 무파사의 아들 심바가 태어난다. 왕의 동생 스카는 자신이 왕위를 차지하기 위해 하이에나들과 결탁하여 무파사를 죽이고 심바에게 죄를 뒤집어 씌워 멀리 내쫓는다. 간신히 목숨을 건진 심바는 유쾌한 미어캣 티몬과 멧돼지 품바와 함께 생활하며 어른이 된다. 어느 날 심바는 옛 친구 날라를 만나 프라이드랜드가 파괴되고 있다는 소식을 듣게 된다. 하지만 자신이 저지른 실수 때문에 고향으로 돌아가기를 거부하는 심바. 결국 아버지의 가르침과 자신의 운명을 깨달은 심바는 스카와 하이에나들을 물리치고 평화를 되찾기 위해 왕국으로 돌아가는데...', 89, 'ALL', 'RELEASED', 104.827000, 8.258000, 763455561, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 8587 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 8587 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 8587 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '매튜 브로더릭', '/q3Qe6LODvoKF3AKElVAmxBFpTGd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '매튜 브로더릭');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Simba (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 8587 AND a.name = '매튜 브로더릭';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Moira Kelly', '/3yQRnGSfbPWQDInZHTzzXsrAhUR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Moira Kelly');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nala (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 8587 AND a.name = 'Moira Kelly';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '네이선 레인', '/nEYS0KO1qVO3y0RAt8V8pFxnPb7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '네이선 레인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Timon (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 8587 AND a.name = '네이선 레인';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Ernie Sabella', '/dBit6gkZfxXqdxO0Ic8CsnLpxyQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ernie Sabella');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pumbaa (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 8587 AND a.name = 'Ernie Sabella';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제임스 얼 존스', '/oqMPIsXrl9SZkRfIKN08eFROmH6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제임스 얼 존스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mufasa (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 8587 AND a.name = '제임스 얼 존스';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Roger Allers', '/sdFyM5FNcJuMv7knrz6swaIHXIJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Roger Allers');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 8587 AND d.name = 'Roger Allers';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Rob Minkoff', '/fn5QA0bqJn6tk4Wt1QonjojFPjd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Rob Minkoff');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 8587 AND d.name = 'Rob Minkoff';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9Y048zYw66TWvpUtsiNK0uReiVX.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 8587;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wXfAvsPZqBDJ8U78F2IAzsUxtNh.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 8587;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (670, '올드보이', '2003-11-21', '15년의 감금, 5일의 추적', '오대수는 어느 날 술이 거나하게 취해 집에 돌아가는 길에 누군가에게 납치, 사설 감금방에 갇히게 된다. 중국집 군만두만을 먹으며 8평이라는 제한된 공간에서 그가 할 수 있는 일이라곤 텔레비전 보는 게 전부. 1년이 지났을 무렵, 뉴스를 통해 나오는 아내의 살해소식. 게다가 아내의 살인범으로 자신이 지목되고 있음을 알게 된 오대수는 복수와 탈출을 위해 감금방 한쪽 구석을 쇠젓가락으로 파기 시작한다. 감금 15년을 맞이하는 해, 마침내 사람 몸 하나 빠져나갈 만큼의 탈출구가 생겼을 때, 어이없게도 15년 전 납치됐던 바로 그 장소로 풀려나 있는 자신을 발견하게 된다.', 120, '18', 'RELEASED', 48.198000, 8.257000, 17500000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 670 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 670 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 670 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 670 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '최민식', '/sd7gIA6nEkq6zumkDCfxSE0YSSV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '최민식');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Oh Dae-su', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 670 AND a.name = '최민식';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '유지태', '/gGGV2gc0orgssYJ0Q9MSomdYo2I.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '유지태');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lee Woo-jin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 670 AND a.name = '유지태';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '강혜정', '/46RDs0JLTEmI9Fp6hzU50LmJqId.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '강혜정');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mi-do', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 670 AND a.name = '강혜정';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '김병옥', '/oGVs2OmYTyXR0KT9xvzVWCAKx8t.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김병옥');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Han', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 670 AND a.name = '김병옥';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '지대한', '/9aoOX8p2oxUAwOaT8jT6GWfjs01.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '지대한');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'No Joo-hwan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 670 AND a.name = '지대한';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '박찬욱', '/jsSFCVB7MhuVbSLwTgESiXEiNjt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '박찬욱');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 670 AND d.name = '박찬욱';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xpa9ybm6tYGna5LseqSXvKpSSJn.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 670;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sdwjQEM869JFwMytTmvr6ggvaUl.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 670;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (447362, '우리의 마지막 1년', '2020-11-27', '', '17살 달린은 아버지의 계획에 따라서 하버드 가기 위해서 계획대로 삶을 살게 된다. 우연히 친구들과 함꼐 간 콘서트에서 만난 이자벨에게서 강한 끌림을 느끼고, 그녀에게 데이트 신청을 하게 되는데...', 107, '', 'RELEASED', 48.571000, 8.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 447362 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 447362 AND g.name = '로맨스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제이든 스미스', '/meraACSN0LYwLeZlaXN9YW6JCZT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이든 스미스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Daryn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447362 AND a.name = '제이든 스미스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '카라 델레바인', '/lEIFRIR8EohwOVe7PQu4zvIl850.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카라 델레바인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Isabelle', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447362 AND a.name = '카라 델레바인';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '쿠바 구딩 주니어', '/j4gPj92SP3Rj5xxSUe1CIkFCXhB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '쿠바 구딩 주니어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Xavier', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447362 AND a.name = '쿠바 구딩 주니어';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Chris D''Elia', '/hfstFQUoIeOidHTHX9UHIGRTrmc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Chris D''Elia');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Phil', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447362 AND a.name = 'Chris D''Elia';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'JT Neal', '/619XoheJeeajNAUQd9hwnPSoUCB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'JT Neal');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sammy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447362 AND a.name = 'JT Neal';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Mitja Okorn', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Mitja Okorn');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 447362 AND d.name = 'Mitja Okorn';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rJvw9aHDwaYVjnIZkKUbdsNJ7dB.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 447362;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/88J6waYVTta8Qz3iX3qUeWNA5d5.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 447362;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (25237, '컴 앤 씨', '1985-10-17', '', '소년 플로리아는 나치 독일의 침공을 받고 있는 벨라루스에 살고 있다. 그런데 첫 장면에서 그는 모래밭의 흙을 파고 있는 중이다. 제대로 매장되지 못한 죽은 병사들의 시체들이 나오지만, 어떻게든 쓸 만한 총을 찾아낸다. 플로리아는 독일군과의 전투에 참여하길 원하지만 어른들은 그를 무시한다. 더 경험 많은 군인에게 그의 총은 인계되고, 그는 군인들의 행진을 지켜볼 뿐이다. 이윽고 플로리아는 글로샤라는 독특한 매력의 소녀와 함께 뒤에 처져 있음을 깨닫는다. 이들은 숲으로 가지만 거기서 나치 독일의 엄청난 폭격을 당하고, 그 바람에 플로리아의 청력에 문제가 생긴다. 정신이 혼미해진 플로리아는 마을로 돌아가는데, 거기서 엄청난 대량 학살의 흔적과 널부러진 시신들을 보고 경악한다. 문득 어머니의 생사가 궁금해져 필사적으로 찾아다니던 그는 비극적인 장면을 목격하게 되는데..', 142, '', 'RELEASED', 20.450000, 8.254000, 20929648, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 25237 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 25237 AND g.name = '전쟁';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Алексей Кравченко', '/o7UD6o30iJ29dTHPCbtOScv9s5E.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Алексей Кравченко');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Flyora Gayshun', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 25237 AND a.name = 'Алексей Кравченко';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Olga Mironova', '/wSeCtQNuWVVUlHMAAkxVRSCYh7s.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Olga Mironova');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Glasha', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 25237 AND a.name = 'Olga Mironova';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Liubomiras Laucevičius', '/fcbpgPotpuZhiV6Aa08bQYYEiyc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Liubomiras Laucevičius');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kosach', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 25237 AND a.name = 'Liubomiras Laucevičius';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Vladas Bagdonas', '/bWUXFrgjaSgXx3UcQqEciWE3jHv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Vladas Bagdonas');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rubezh', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 25237 AND a.name = 'Vladas Bagdonas';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jüri Lumiste', '/eXfApAOnEH9mxHWruHsDx2od5Jm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jüri Lumiste');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'German Officer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 25237 AND a.name = 'Jüri Lumiste';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Elem Klimov', '/vzed7lMJ3ADWm2DnF9C0bSIbiaO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Elem Klimov');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 25237 AND d.name = 'Elem Klimov';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/baK79h2An0J8mzTue13KThAeYC5.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 25237;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6C1U0cKK5zGjyUSwNc5GLSVCr7Y.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 25237;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (527641, '파이브 피트', '2019-03-14', '접근 금지! 허그 금지! 키스 금지! 이 로맨스 성공할 수 있을까?', '같은 병을 가진 사람끼리 6피트 이상 접근해서도, 접촉도 해선 안되는 CF(낭포성 섬유증)를 가진 ‘스텔라’와 ‘윌’. 첫눈에 반한 두 사람은 서로를 위해 안전거리를 유지하려고 하지만 그럴수록 더욱 빠져든다. 손을 잡을 수도 키스를 할 수도 없는 그들은 병 때문에 지켜야 했던 6피트에서 1피트 더 가까워지는 걸 선택하고 처음으로 용기를 내 병원 밖 데이트를 결심한다. 그러나 갑자기 숨을 쉬지 못하는 ‘스텔라’. ‘윌’은 그녀를 살리기 위해 안전거리를 어기게 되는데…', 116, '15', 'RELEASED', 72.509000, 8.252000, 92600000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 527641 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 527641 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '헤일리 루 리처드슨', '/3jWAFINe8W4KoHInnwxrPAsVc4Q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헤일리 루 리처드슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Stella Grant', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 527641 AND a.name = '헤일리 루 리처드슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '콜 스프라우스', '/mQAXL0rUGwX316d1FBBQmloZzHu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '콜 스프라우스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Will Newman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 527641 AND a.name = '콜 스프라우스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '모이세스 아리아스', '/fc7krDmEA4VkIY4KOJjpMXGdsfg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '모이세스 아리아스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Poe Ramírez', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 527641 AND a.name = '모이세스 아리아스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Kimberly Hebert Gregory', '/qHhb8bU2oWscATbSwsxPz1NVwGZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kimberly Hebert Gregory');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nurse Barb', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 527641 AND a.name = 'Kimberly Hebert Gregory';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Parminder Nagra', '/6c8NU6wlvfoaOshohQCBX52ycud.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Parminder Nagra');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Noor Hamid', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 527641 AND a.name = 'Parminder Nagra';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Justin Baldoni', '/2sc6iUWljADnqtjsaKU3s6f0DGW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Justin Baldoni');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 527641 AND d.name = 'Justin Baldoni';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8bXlrAzTJKwedmUDKBhiaU7OkqW.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 527641;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/27ZkYMWynuK2qiDP6awc3MsCaOs.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 527641;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (299534, '어벤져스: 엔드게임', '2019-04-24', '운명을 바꿀 최후의 전쟁이 펼쳐진다', '어벤져스의 패배 이후 지구는 초토화됐고 남은 절반의 사람들은 정신적 고통을 호소하며 하루하루를 근근이 버텨나간다. 와칸다에서 싸우다 생존한 히어로들과 우주의 타이탄 행성에서 싸우다 생존한 히어로들이 뿔뿔이 흩어졌는데, 아이언맨과 네뷸라는 우주를 떠돌고 있고 지구에 남아 있는 어벤져스 멤버들은 닉 퓨리가 마지막에 신호를 보내다 만 송신기만 들여다보며 혹시 모를 우주의 응답을 기다리는 중이다. 애초 히어로의 삶을 잠시 내려놓고 가족과 시간을 보내던 호크아이 역시 헤아릴 수 없는 마음의 상처를 입은 채 사라지고 마는데...', 181, '12', 'RELEASED', 140.127000, 8.200000, 2799439100, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 299534 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 299534 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 299534 AND g.name = '액션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '로버트 다우니 주니어', '/5qHNjhtjMD4YWH3UP0rm4tKwxCL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 다우니 주니어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tony Stark / Iron Man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299534 AND a.name = '로버트 다우니 주니어';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '크리스 에반스', '/3bOGNsHlrswhyW79uvIHH1V43JI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 에반스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Steve Rogers / Captain America', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299534 AND a.name = '크리스 에반스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마크 러팔로', '/5GilHMOt5PAQh6rlUKZzGmaKEI7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마크 러팔로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruce Banner / Hulk', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299534 AND a.name = '마크 러팔로';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '크리스 헴스워스', '/piQGdoIQOF3C1EI5cbYZLAW1gfj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 헴스워스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Thor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299534 AND a.name = '크리스 헴스워스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '스칼렛 요한슨', '/6NsMbJXRlDZuDzatN2akFdGuTvx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스칼렛 요한슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Natasha Romanoff / Black Widow', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299534 AND a.name = '스칼렛 요한슨';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '조 루소', '/o0OXjFzL10jCy89iAs7UzzSbyoK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조 루소');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 299534 AND d.name = '조 루소';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '안소니 루소', '/xbINBnWn28YygYWUJ1aSAw0xPRv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '안소니 루소');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 299534 AND d.name = '안소니 루소';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/z7ilT5rNN9kDo8JZmgyhM6ej2xv.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 299534;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7RyHsO4yDXtBv1zUU3mTpHeQ0d5.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 299534;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (283566, '신 에반게리온 극장판 :||', '2021-03-08', '안녕, 모든 에반게리온', '‘에반게리온’ 신극장판 시리즈의 제4부이자 완결편  미사토가 이끄는 반네르프 조직 ‘빌레’는 코어화로 붉게 물든 파리 구시가에 있다.  기함 AAA 분더에서 선발대가 강하하여, 남겨져 있던 봉인주에 안착한다.  복원 작전의 작업 가능 시간은 고작 720초.  결사의 작전 수행 중 ‘네르프’의 EVA가 대량으로 무리를 이루고 접근하여,  마리의 개(改) 8호기가 요격을 개시한다.  한편 신지, 아스카, 아야나미 레이 (가칭) 세 사람은 일본의 대지를 떠돌고 있다…….', 155, '15', 'RELEASED', 35.300000, 8.247000, 93882453, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 283566 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 283566 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 283566 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 283566 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '오가타 메구미', '/eNdfMUyZgG5P4TNIZpbTAu8gBs9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오가타 메구미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shinji Ikari (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 283566 AND a.name = '오가타 메구미';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '미야무라 유코', '/lVxXWzREWxixZ51EK4gmz9LqCV9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미야무라 유코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Asuka Shikinami Langley (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 283566 AND a.name = '미야무라 유코';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '사카모토 마아야', '/hPz2oEQui8a4q9aXdBugQf93ONq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사카모토 마아야');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mari Illustrious Makinami (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 283566 AND a.name = '사카모토 마아야';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '하야시바라 메구미', '/jyWpocz6aNRQFgEv0mRD5VA9ff5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하야시바라 메구미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rei Ayanami / Yui Ikari (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 283566 AND a.name = '하야시바라 메구미';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '미츠이시 코토노', '/mvKgkuAVVMmjkFWlwVQu8KCa80O.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미츠이시 코토노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Misato Katsuragi (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 283566 AND a.name = '미츠이시 코토노';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '츠루마키 카즈야', '/vhf9zmNK3HcDkB0fH3RULJoCU9b.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '츠루마키 카즈야');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 283566 AND d.name = '츠루마키 카즈야';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '마에다 마히로', '/dwqETG4XzUO0zGMYluXfLVIrdDu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '마에다 마히로');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 283566 AND d.name = '마에다 마히로';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '나카야마 카츠이치', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '나카야마 카츠이치');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 283566 AND d.name = '나카야마 카츠이치';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '안노 히데아키', '/AfV9h1RW6uALpx751APdUoX8ONc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '안노 히데아키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 283566 AND d.name = '안노 히데아키';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vpfX1mGVobWlrUGqEzbA2RNPdZF.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 283566;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1EAxNqdkVnp48a7NUuNBHGflowM.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 283566;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (299536, '어벤져스: 인피니티 워', '2018-04-25', '영화의 역사를 뒤바꿀 마블의 클라이맥스!', '타노스는 6개의 인피니티 스톤을 획득해 신으로 군림하려 한다. 그것은 곧 인류의 절반을 학살해 우주의 균형을 맞추겠다는 뜻. 타노스는 닥터 스트레인지가 소유한 타임 스톤, 비전의 이마에 박혀 있는 마인드 스톤을 차지하기 위해 지구를 침략한다. 아이언맨과 스파이더맨은 가디언즈 오브 갤럭시의 멤버들과 타노스를 상대한다. 지구에선 캡틴 아메리카, 완다, 블랙 위도우, 블랙 팬서 등이 비전을 지키기 위해 뭉친다.', 149, '12', 'RELEASED', 217.298000, 8.243000, 2052415039, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 299536 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 299536 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 299536 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '로버트 다우니 주니어', '/5qHNjhtjMD4YWH3UP0rm4tKwxCL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 다우니 주니어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tony Stark / Iron Man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299536 AND a.name = '로버트 다우니 주니어';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '크리스 에반스', '/3bOGNsHlrswhyW79uvIHH1V43JI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 에반스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Steve Rogers / Captain America', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299536 AND a.name = '크리스 에반스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '크리스 헴스워스', '/piQGdoIQOF3C1EI5cbYZLAW1gfj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 헴스워스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Thor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299536 AND a.name = '크리스 헴스워스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '조쉬 브롤린', '/sX2etBbIkxRaCsATyw5ZpOVMPTD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조쉬 브롤린');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Thanos', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299536 AND a.name = '조쉬 브롤린';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마크 러팔로', '/5GilHMOt5PAQh6rlUKZzGmaKEI7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마크 러팔로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruce Banner / Hulk', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299536 AND a.name = '마크 러팔로';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '안소니 루소', '/xbINBnWn28YygYWUJ1aSAw0xPRv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '안소니 루소');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 299536 AND d.name = '안소니 루소';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '조 루소', '/o0OXjFzL10jCy89iAs7UzzSbyoK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조 루소');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 299536 AND d.name = '조 루소';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kmP6viwzcEkZeoi1LaVcQemcvZh.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 299536;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mDfJG3LC3Dqb67AZ52x3Z0jU0uB.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 299536;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (508965, '클라우스', '2019-11-08', '', '공기도 인심도 꽁꽁 얼어붙은 마을. 활기 넘치는 젊은 우체부와 세상을 등지고 장난감을 만드는 목수. 작은 장난감 선물로 냉기가 사라질 수 있을까. 전혀 어울리지 않는 둘의 우정이 차디찬 세상에 온기를 불어넣는다. 《슈퍼배드》 작가의 산타 탄생 이야기.', 96, 'ALL', 'RELEASED', 34.792000, 8.241000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 508965 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 508965 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 508965 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 508965 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 508965 AND g.name = '판타지';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제이슨 슈워츠먼', '/gCjMdmW1DiPAClHVl4zHEIffIsE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이슨 슈워츠먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jesper (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 508965 AND a.name = '제이슨 슈워츠먼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'J.K. 시몬스', '/ScmKoJ9eiSUOthAt1PDNLi8Fkw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'J.K. 시몬스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Klaus (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 508965 AND a.name = 'J.K. 시몬스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '라시다 존스', '/jjp33eRM6oavyesW0UM6XBCxQSa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '라시다 존스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alva (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 508965 AND a.name = '라시다 존스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '조앤 쿠삭', '/59UIeHZFYrKyP20lXqijtfTXglO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조앤 쿠삭');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mrs. Krum (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 508965 AND a.name = '조앤 쿠삭';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Norm Macdonald', '/pGOpdt9Xy9YO2nUEWgp8G89KC5r.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Norm Macdonald');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mogens (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 508965 AND a.name = 'Norm Macdonald';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Sergio Pablos', '/gef101kaaTev5OxLSYnrC3ev9F1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Sergio Pablos');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 508965 AND d.name = 'Sergio Pablos';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1mtsyXMbMdaC5Oc1Jqy8pD0xZLA.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 508965;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mlxKite1x1PgmIhJgAxNS9eHmH8.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 508965;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (490132, '그린 북', '2018-11-16', '삶을 변화시키는 인생가이드', '1962년 미국, 입담과 주먹만 믿고 살아가던 토니 발레롱가는 교양과 우아함 그 자체인 천재 피아니스트 돈 셜리의 운전기사 면접을 보게 된다. 백악관에도 초청되는 등 미국 전역에서 콘서트 요청을 받으며 명성을 떨치고 있는 돈 셜리는 위험하기로 소문난 미국 남부 투어 공연을 떠나기로 결심하고, 투어 기간 동안 자신의 보디가드 겸 운전기사로 토니를 고용한다. 거친 인생을 살아온 토니와 교양과 기품을 지키며 살아온 돈. 생각, 행동, 말투, 취향까지 달라도 너무 다른 두 사람은 그들을 위한 여행안내서 그린북에 의존해 특별한 남부 투어를 시작하는데...', 130, '12', 'RELEASED', 63.605000, 8.200000, 319700000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 490132 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 490132 AND g.name = '역사';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '비고 모텐슨', '/vH5gVSpHAMhDaFWfh0Q7BG61O1y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '비고 모텐슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tony Lip', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 490132 AND a.name = '비고 모텐슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마허샬라 알리', '/j0c8X3ieYolm9UgOMDV4Ty5kf5M.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마허샬라 알리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Don Shirley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 490132 AND a.name = '마허샬라 알리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '린다 카델리니', '/bcycvynDprC1rrhBNrnBjn5uOUd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '린다 카델리니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dolores', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 490132 AND a.name = '린다 카델리니';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Sebastian Maniscalco', '/8TvA9HEwURJmY9MkkUruB4Sl0lR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sebastian Maniscalco');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Johnny Venere', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 490132 AND a.name = 'Sebastian Maniscalco';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Dimiter D. Marinov', '/lZwHZ27xqsPsuswcxyx6uWSh5VP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Dimiter D. Marinov');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Oleg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 490132 AND a.name = 'Dimiter D. Marinov';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '피터 패럴리', '/3PDYOFfk5NLmNcEz6SFZmdmqVZr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피터 패럴리');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 490132 AND d.name = '피터 패럴리';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dyqQ12gZGwl5Y0R9UsLBDkZWOUA.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 490132;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2Xe9lISpwXKhvKiHttbFfVRERQX.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 490132;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (265177, '마미', '2014-09-19', '“엄마 우리 여전히 사랑하지?”  “우리가 제일 잘하는 게 사랑이잖아.”', '불 같은 성격이지만 유쾌하고 당당한 엄마 디안은 거칠지만 사랑스러운 사고뭉치 아들 스티브가 보호 시설에서 사고를 쳐 쫓겨나자 홈스쿨링을 시작한다. 엄마가 행복하다면 무엇이든 할 수 있는 아들 스티브와 함께 행복한 생활을 꿈꾸는 디안. 하지만 홀로 생계를 책임지며 불안정한 성격의 스티브를 돌보기란 쉽지 않다. 이때 이들 앞에 이웃집 여인 카일라가 나타난다. 카일라의 등장으로 세 사람은 유일하게 서로에게 의지하며 지금까지 느껴보지 못한 작은 행복을 찾아가게 된다. 그러던 어느 날, 디안 앞으로 한 장의 편지가 날아오는데...', 138, '15', 'RELEASED', 17.730000, 8.238000, 3494070, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 265177 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Anne Dorval', '/qepLsxlg2p5qai1y2bwI2zUM5iz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Anne Dorval');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Diane ''Die'' Després', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 265177 AND a.name = 'Anne Dorval';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Suzanne Clément', '/kNANyCoqGqiYd5meAGfCDvzkzIF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Suzanne Clément');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kyla', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 265177 AND a.name = 'Suzanne Clément';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Antoine Olivier Pilon', '/3E5nVYXYVe70Zdd7TRUfekpncIu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Antoine Olivier Pilon');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Steve O''Connor Després', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 265177 AND a.name = 'Antoine Olivier Pilon';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Patrick Huard', '/neN84KoE3s48CTkrNReYQ3z1HED.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Patrick Huard');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paul', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 265177 AND a.name = 'Patrick Huard';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Alexandre Goyette', '/oB99Qcalcmvbp5EtFz6xc4xqey2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alexandre Goyette');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Patrick', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 265177 AND a.name = 'Alexandre Goyette';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '자비에 돌란', '/sKvDmg9HQ6zauWo5XpsBVR8xBf4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '자비에 돌란');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 265177 AND d.name = '자비에 돌란';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8AcQTHscYw8iUQ73GYlWKDPBxt7.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 265177;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dIHezuC3AmylT8mkXQiWSjz2wJR.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 265177;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (572154, '청춘 돼지는 꿈꾸는 소녀의 꿈을 꾸지 않는다', '2019-06-15', '', '하늘과 바다가 반짝이는 마을 "후지사와"에 사는 고등학생 아즈사가와 사쿠타는 같은 학교 선배이자 연인인 사쿠라지마 마이와 설레는 일상을 보내고 있다. 하지만 어느 날 첫사랑인 마키노하라 쇼코가 등장하면서 그 일상은 완전히 뒤바뀌어 버린다. 알 수 없는 이유로 ''중학생''과 ''어른'', 두 명이 존재하는 쇼코와 부득이한 동거를 하면서 사쿠타와 마이의 관계가 삐걱거리기 시작한다. 그러던 중 ''중학생 쇼코''가 위중한 병을 앓고 있다는 것을 알고 사쿠타의 가슴 흉터는 다시 벌어지는데...', 89, '12', 'RELEASED', 32.169000, 8.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 572154 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 572154 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 572154 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 572154 AND g.name = '판타지';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이시카와 카이토', '/fzjIkotjUHHs3wgftM9tqdsG8ph.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이시카와 카이토');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sakuta Azusagawa (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 572154 AND a.name = '이시카와 카이토';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '세토 아사미', '/oDmxr5gprWrj6osczaWUJURq1i8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '세토 아사미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mai Sakurajima (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 572154 AND a.name = '세토 아사미';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '쿠보 유리카', '/ujXrmpArnC1ARxfe71181WVXp3F.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '쿠보 유리카');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kaede Azusagawa (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 572154 AND a.name = '쿠보 유리카';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '토야마 나오', '/fwPIbMjmdRWbjdf0F39fNxrR5xo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '토야마 나오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tomoe Koga (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 572154 AND a.name = '토야마 나오';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '타네자키 아츠미', '/6tM8GU7QvrdUCvR4kxqVUZivtvO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '타네자키 아츠미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rio Futaba (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 572154 AND a.name = '타네자키 아츠미';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '마스이 소이치', '/eRCRldZdRnflFnzRJbSs6QNEmwm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '마스이 소이치');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 572154 AND d.name = '마스이 소이치';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hqNkm15rQI6049Pg3XPSE8PMW98.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 572154;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tyxqfALuq02khuKNCwmeMxrqt8T.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 572154;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (110420, '늑대아이', '2012-07-21', '내가 사랑하게 된 사람은 늑대인간이었습니다', '평범한 여대생 하나는 강의실에서 우연히 만나게 된 그에게 반하게 되고, 곧 사랑에 빠지게 된다. 하지만 그는 평범한 사람이 아닌 늑대인간이었다. 늑대인간과의 동화 같은 사랑 후에 남은 것은 두 아이뿐. 눈 내리는 날에 태어난 누이 유키, 비 내리는 날 태어난 동생 아메. 두 아이에게는 커다란 비밀이 있는데, 바로 흥분하면 귀가 쫑긋, 꼬리가 쏘옥 나오는 늑대아이라는 것. 남들과 조금 다른 육아, 남들과 살짝 다른 고민을 하며 신비로운 운명을 살아가는 남매와 특별한 두 아이를 키우는 엄마의 이야기가 시작된다.', 117, 'All', 'RELEASED', 23.894000, 8.200000, 55060661, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 110420 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 110420 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 110420 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 110420 AND g.name = '판타지';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '쿠로키 하루', '/rTxASkiwbxohT0UVHORLmECo53Y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '쿠로키 하루');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yuki (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 110420 AND a.name = '쿠로키 하루';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '西井幸人', '/papPYfWpj7lrpS6eGSQYH1bM4Hy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '西井幸人');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ame (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 110420 AND a.name = '西井幸人';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '미야자키 아오이', '/8J2i8Da2FmqMsDqSlndEpzkPQYd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미야자키 아오이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hana (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 110420 AND a.name = '미야자키 아오이';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '오오사와 타카오', '/uyPERBAMY14zntHF4iEH1sVjkOX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오오사와 타카오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wolf Man (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 110420 AND a.name = '오오사와 타카오';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '大野百花', '/8Ts2UoALyqs0c5rRFzBkSNlrBmf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '大野百花');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yuki as a Child (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 110420 AND a.name = '大野百花';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '호소다 마모루', '/5QIWSzXHioDMHk2UMOqz2wbaWMr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '호소다 마모루');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 110420 AND d.name = '호소다 마모루';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2mF1IKMeB9JGstJqismy5AoamrV.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 110420;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/eNWjMbuhGxJdzaIY9ZZ2KvWx2sQ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 110420;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (504253, '너의 췌장을 먹고 싶어', '2018-09-01', '이름조차 부르지 못했던 너와 나. 2018년 가을, 다시 우리의 이야기', '어느 날, 우연히 주운 한 권의 「공병문고」를 통해 ‘나’는 학급 최고의 인기인 ‘사쿠라’의 비밀과 마주하게 된다. 비밀을 숨긴 채 살아가는 ‘사쿠라’와 그 비밀을 아는 유일한 클래스메이트 ‘나’', 109, '', 'RELEASED', 30.104000, 8.226000, 33748006, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 504253 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 504253 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 504253 AND g.name = '로맨스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '高杉真宙', '/8SHi5gVZEukRAwzhryZmE7RPPnk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '高杉真宙');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Haruki Shiga (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 504253 AND a.name = '高杉真宙';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Lynn', '/kFyuszD3uS5rX4GGf1U5OM5exur.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lynn');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sakura Yamauchi (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 504253 AND a.name = 'Lynn';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '후지이 유키요', '/tLG4K1iix3QNHFexf98mrZ25jT6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '후지이 유키요');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kyoko Takimoto (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 504253 AND a.name = '후지이 유키요';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '우치다 유우마', '/k5yOai4JnkjpTVzSwIFzXxQ2LBP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '우치다 유우마');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Takahiro (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 504253 AND a.name = '우치다 유우마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '후쿠시마 준', '/gHv2Nw6LAC6OdNuC8tzmW36CHpM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '후쿠시마 준');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Issei Miyata (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 504253 AND a.name = '후쿠시마 준';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '牛嶋新一郎', '/vNrNNafv5hM1EW3CMqY32F1peV6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '牛嶋新一郎');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 504253 AND d.name = '牛嶋新一郎';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/g1ucSvfDnV3HEVt8x7YeZ0fAIs2.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 504253;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/YLyORLsYIjC0d1TFBSpJKk7piP.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 504253;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (441130, '''울프워커스'' - Wolfwalkers', '2020-10-26', '두근두근, 야생으로의 모험', '미신과 마법의 시대, 어린 사냥 견습생 로빈 굿펠로우는 최후의 늑대 무리를 제거하기 위해 아버지와 함께 아일랜드로 간다. 도시 성벽 바깥의 금지된 땅을 탐험하던 로빈은 밤이면 늑대로 변하는 능력을 지녔다고 전해지는 수수께끼 부족의 일원인 자유분방한 소녀 메브와 친구가 된다. 함께 메브의 사라진 어머니를 찾던 중, 로빈은 놀라운 비밀을 발견한다. 그 비밀로 인해 로빈의 아버지는 마법의 울프워커스 세계로 들어오게 되고, 로빈은 아버지가 없애려 하는 바로 그 존재로 변신하는 위험에 빠지게 된다.', 103, 'All', 'RELEASED', 58.570000, 8.223000, 1310720, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 441130 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 441130 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 441130 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 441130 AND g.name = '판타지';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Honor Kneafsey', '/pgk3qwXCUjYReOwrGCLWm8qCbBx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Honor Kneafsey');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Robyn Goodfellowe (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 441130 AND a.name = 'Honor Kneafsey';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Eva Whittaker', '/hvDckVSrRCW5Rb4OpDWN17oGvR7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Eva Whittaker');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mebh Óg MacTíre (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 441130 AND a.name = 'Eva Whittaker';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '숀 빈', '/kTjiABk3TJ3yI0Cto5RsvyT6V3o.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '숀 빈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Robyn''s Father, Bill Goodfellowe (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 441130 AND a.name = '숀 빈';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '사이먼 맥버니', '/wwN02i4RBoPHDdOKXBV5AhFALdT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사이먼 맥버니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lord Protector (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 441130 AND a.name = '사이먼 맥버니';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Tommy Tiernan', '/6n8jJZRfkcxTPFPELLU9n3N9Tkh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tommy Tiernan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sean Óg (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 441130 AND a.name = 'Tommy Tiernan';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Tomm Moore', '/gqUcu5yEtNgnCaA2jtSOs8DV1Gg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Tomm Moore');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 441130 AND d.name = 'Tomm Moore';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Ross Stewart', '/1O6yRqoPBqvZabLgzUK9LmzQEUN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Ross Stewart');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 441130 AND d.name = 'Ross Stewart';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/53VE3Iv9NiCOJfFMWwQuRUQMaXZ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 441130;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yeJhRNtE4XW2lOoVVFO9iuDr3AL.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 441130;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (24188, '이지 라이프', '1962-12-05', '', '쨍쨍 내리쬐는 태양 아래 텅 빈 듯한 로마의 8월 어느 휴일 아침. 창 밖을 내다보던 소심한 법대생 로베르토는 한 40대 남자의 부탁을 들어준다. 브루노라는 이 남자가 로베르토에게 전화를 쓸 수 있겠냐고 부탁하고, 로베르토는 그에게 집으로 올라와서 직접 걸어보라고 한다. 붙임성 좋고 사람을 끄는 매력을 가진 브루노는 어디로 튈지 모르는 철부지다. 로베르토의 무료하던 휴일은 브루노와 얽히며 정신없이 흘러간다.  이탈리안 코미디의 걸작으로 일컬어지는 작품으로, 1960년대 초 고도의 경제적 성장을 이어가는 한편 천박하고 이기적인 자본주의에 물들어가는 이탈리아 사회에 대한 통렬한 풍자적 묘사가 돋보인다.', 105, '', 'RELEASED', 12.986000, 8.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 24188 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 24188 AND g.name = '코미디';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Vittorio Gassman', '/eIcPpL8OlAMlIr9ZMvFTY7ni7LX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Vittorio Gassman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruno Cortona', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 24188 AND a.name = 'Vittorio Gassman';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '장루이 트랭티냥', '/xZjgsgOGVo8sub6tf0CxclwJ9wR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '장루이 트랭티냥');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Roberto Mariani', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 24188 AND a.name = '장루이 트랭티냥';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Catherine Spaak', '/5WILB2hN0BUCz4HgmoLu7OVq2Hn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Catherine Spaak');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lilli Cortona', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 24188 AND a.name = 'Catherine Spaak';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Claudio Gora', '/e7L9EMVnOxpaW7zTpWfcl86e0BK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Claudio Gora');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Danilo Borelli ''Bibi''', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 24188 AND a.name = 'Claudio Gora';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Luciana Angiolillo', '/8QQAQORpPaAWmV730yeRqcwVDaR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Luciana Angiolillo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gianna Cortona', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 24188 AND a.name = 'Luciana Angiolillo';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Dino Risi', '/rD3rSFa6gvjIJpXa8MQo8fHYFpS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Dino Risi');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 24188 AND d.name = 'Dino Risi';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9vumJKydNxcFtcFNYPIvFeHXVBQ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 24188;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uUrV5KSjnZx47Dq7e6STr73iN4N.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 24188;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (618344, '저스티스 리그 다크: 아포콜립스 워', '2020-05-05', '', '''다크 사이드''가 지구 근처에 접근하고 있는 중임을 알게 된 ''저스티스 리그''는 ’슈퍼맨''이 지구를 공격하기 전에 먼저 선제공격을 주장하고. 이미 우주에 있는 ''슈퍼맨''을 비롯한 ''콘스탄틴'', ''배트맨''등이 공격. 이후 지구에 남은 ''틴타이탄즈''를 비롯한 멤버들이 대응하기로 했으나, ''사이보그''를 해킹하여 먼저 공격할 것을 알게 된 ''다크 사이드''가 ''저스티스 리그''가  오길 기다렸다가 먼저 선방을 날리게 되고. 이로 인해 ''저스티스 리그'' 뿐만 아니라 지구까지 ''다크 사이드''와 ’파라데몬''에게 떼몰살 당하는데...', 90, '', 'RELEASED', 33.097000, 8.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 618344 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 618344 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 618344 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Matt Ryan', '/qLx6rzn6MMcJtTals5Z7Mb6z4Y9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Matt Ryan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'John Constantine (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 618344 AND a.name = 'Matt Ryan';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제리 오코널', '/p2zcFeDIKUrPrbT5ODqoLifdN3Q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제리 오코널');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Clark Kent / Superman (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 618344 AND a.name = '제리 오코널';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '타이사 파미가', '/kC2Movbs6uEF8DdDhvyHizQHuru.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '타이사 파미가');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rachel Roth / Raven (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 618344 AND a.name = '타이사 파미가';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jason O''Mara', '/hYylPvwMALoQU09r7tvCU24thh0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jason O''Mara');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruce Wayne / Batman (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 618344 AND a.name = 'Jason O''Mara';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '로사리오 도슨', '/iBSoM4Fw6ACNFMwG2NkBtTzrWAa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로사리오 도슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Diana Prince / Wonder Woman (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 618344 AND a.name = '로사리오 도슨';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Matt Peters', '/twz7t4EyHuC3aTwQPedQI7ZBQXs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Matt Peters');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 618344 AND d.name = 'Matt Peters';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Christina Sotta', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Christina Sotta');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 618344 AND d.name = 'Christina Sotta';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/c01Y4suApJ1Wic2xLmaq1QYcfoZ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 618344;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sQkRiQo3nLrQYMXZodDjNUJKHZV.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 618344;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (315162, '장화신은 고양이: 끝내주는 모험', '2022-11-26', '당신의 소원을 이루어 줄 2023년 새해 첫 어드벤처', '아홉 개의 목숨 중 단 하나의 목숨만 남은 장화신은 고양이.  마지막 남은 목숨을 지키기 위해 히어로의 삶 대신 반려묘의 삶을 선택한 그에게 찾아온 마지막 기회, 바로 소원을 들어주는 소원별이 있는 곳을 알려주는 지도!  잃어버린 목숨을 되찾고 다시 히어로가 되기를 꿈꾸는 장화신은 고양이는 뜻밖에 동료가 된 앙숙 파트너 ''키티 말랑손'', 그저 친구들과 함께라면 모든 게 행복한 강아지 ''페로''와 함께 소원별을 찾기 위해 길을 떠난다.  그리고 소원별을 노리는 또 다른 빌런들과 마주치게 되는데…', 103, 'All', 'RELEASED', 172.491000, 8.200000, 484700000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 315162 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 315162 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 315162 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 315162 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 315162 AND g.name = '가족';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '안토니오 반데라스', '/fce7zl6elUzsv7wudHFc7RgFtjD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '안토니오 반데라스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Puss in Boots (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 315162 AND a.name = '안토니오 반데라스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '셀마 헤이엑', '/1qfYF7NGRObmeKR7IVXUFVIC0CN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '셀마 헤이엑');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kitty Softpaws (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 315162 AND a.name = '셀마 헤이엑';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '하비 길렌', '/yiNBonobPwqMVweB02JWufzp2l9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하비 길렌');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Perrito (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 315162 AND a.name = '하비 길렌';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '바그네르 모라', '/6gcfwvOueJKhDpTP9KLGuWz0Hk4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '바그네르 모라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wolf (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 315162 AND a.name = '바그네르 모라';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '플로렌스 퓨', '/6Sjz9teWjrMY9lF2o9FCo4XmoRh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '플로렌스 퓨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Goldilocks (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 315162 AND a.name = '플로렌스 퓨';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Joel Crawford', '/3F60mZB4sGgB51jAIglwn6OrUgB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Joel Crawford');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 315162 AND d.name = 'Joel Crawford';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rKgvctIuPXyuqOzCQ16VGdnHxKx.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 315162;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jr8tSoJGj33XLgFBy6lmZhpGQNu.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 315162;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (16869, '바스터즈: 거친 녀석들', '2009-08-02', '가장 쿨한 녀석들의 통쾌한 복수', '2차 세계 대전, 나치의 잔인하고 폭력적인 행태에 분개한 미군 알도 레인 중위는 당한 만큼 돌려준다는 강렬한 신념으로 최고의 재능을 가진 8명의 대원을 모아 바스터즈란 군단을 만들어 나치가 점령한 프랑스에 잠입해 복수를 시작한다. 어느 날 알도 레인 중위는 독일의 여배우이자 영국의 더블 스파이인 브리짓에게 뜻밖의 소식을 듣는다. 나치 수뇌부가 모두 참석하는 독일 전쟁 영화의 프리미어에 히틀러도 참석을 한다는 것. 한 번에 나치를 모두 쓸어버릴 계획으로 바스터즈는 이탈리아 영화 관계자로 분장해 극장으로 향하는데...', 152, '18', 'RELEASED', 109.164000, 8.200000, 321457747, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 16869 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 16869 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 16869 AND g.name = '전쟁';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '브래드 피트', '/9OfnD7lxgIj3BNQpJFnwxnwl6w5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브래드 피트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'LT. Aldo Raine', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 16869 AND a.name = '브래드 피트';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '멜라니 로랑', '/pKV3XJ6mlzfj0B0MGS8uMcMI9cl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '멜라니 로랑');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shosanna', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 16869 AND a.name = '멜라니 로랑';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '크리스토프 발츠', '/jMvLGCVXLaBqjRLf5olyvEucZob.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스토프 발츠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'COL. Hans Landa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 16869 AND a.name = '크리스토프 발츠';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '일라이 로스', '/qQTkpxzh1FlBGL1HD5hzdUMxv49.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '일라이 로스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'SGT. Donny Donowitz', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 16869 AND a.name = '일라이 로스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마이클 패스벤더', '/xvbnUiB2ZBR3QIt595OzNy657Vw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 패스벤더');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'LT. Archie Hicox', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 16869 AND a.name = '마이클 패스벤더';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '쿠엔틴 타란티노', '/1gjcpAa99FAOWGnrUvHEXXsRs7o.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '쿠엔틴 타란티노');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 16869 AND d.name = '쿠엔틴 타란티노';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rl8DDqnafx5kRnw50uwlLGzr7Qt.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 16869;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1Jpkm9qZcsT0mSyVXgs4VlGjPNI.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 16869;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (603, '매트릭스', '1999-03-31', '서기 2199년, 인공지능 AI에 의해 인류가 재배되고 있다', '인간의 기억마저 AI에 의해 입력되고 삭제되는 세상, 진짜보다 더 진짜 같은 가상 현실 매트릭스. 그 속에서 진정한 현실을 인식할 수 없게 재배되는 인간들. 그 매트릭스를 빠져 나오면서 AI에게 가장 위험한 인물이 된 모피어스는 몇 안 되는 동료들과 함께 기계와의 전쟁 전후의의 폐허를 떠돌며 인류를 구할 마지막 영웅을 찾아 헤맨다. 마침내 모피어스는 낮에는 평범한 회사원 앤더슨으로, 밤에는 해커로 활동하는 청년 네오를 그로 지목한다. 모피어스의 지시대로 그를 만나게 된 네오는 두개의 알약 중 하나를 고르는 선택을 하게 되는데...', 136, '12', 'RELEASED', 85.287000, 8.200000, 463517383, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 603 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 603 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '키아누 리브스', '/4D0PpNI0kmP58hgrwGC3wCjxhnm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키아누 리브스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Neo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 603 AND a.name = '키아누 리브스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '로렌스 피시번', '/aBRISux1AGCqkFNTKHYfLcJunWA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로렌스 피시번');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Morpheus', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 603 AND a.name = '로렌스 피시번';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '캐리 앤 모스', '/xD4jTA3KmVp5Rq3aHcymL9DUGjD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '캐리 앤 모스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Trinity', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 603 AND a.name = '캐리 앤 모스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '휴고 위빙', '/t4ScpYIHlXVD41scEyiGdQDYflX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '휴고 위빙');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agent Smith', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 603 AND a.name = '휴고 위빙';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Gloria Foster', '/AriGXtC9fjBOia9Zr8CZjn4o3rx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gloria Foster');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Oracle', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 603 AND a.name = 'Gloria Foster';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '라나 워쇼스키', '/5KNV7YBSPTBUAIXGfIcPmbhho9w.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '라나 워쇼스키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 603 AND d.name = '라나 워쇼스키';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '릴리 워쇼스키', '/rCScAjSpeKA19BLNR07MqNNeeTT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '릴리 워쇼스키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 603 AND d.name = '릴리 워쇼스키';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yI9r0iz2XvlevxUzxvdoQmv3yce.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 603;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lrtSb1skJayPydZk0OSMAKjBOVe.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 603;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (290098, '아가씨', '2016-06-01', '가짜한테 마음을 빼앗겼다', '어릴 적 부모를 잃고 후견인 이모부의 보호 아래 살아가는 귀족 아가씨에게 백작이 추천한 새로운 하녀가 찾아온다. 이모부의 서재에서 책을 읽는 것이 일상의 전부인 아가씨는  순박해 보이는 하녀에게 조금씩 의지하기 시작한다. 하지만 하녀의 정체는 유명한 여도둑의 딸인 소매치기 고아 소녀 숙희. 막대한 재산을 상속받게 될 아가씨를 유혹하여 돈을 가로채겠다는 사기꾼 백작의 제안을 받고  아가씨가 백작을 사랑하게 만들기 위해 하녀가 된 것. 드디어 백작이 등장하고, 백작과 숙희는 자신만의 방식으로 아가씨의 마음을 흔들기 시작하는데...', 144, '', 'RELEASED', 61.242000, 8.200000, 38600000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 290098 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 290098 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 290098 AND g.name = '로맨스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '김민희', '/zZ41nW0GJqesHB75hFP6qllPS9y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김민희');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lady Hideko', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 290098 AND a.name = '김민희';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '김태리', '/gFofVUeVlIvBJMUv7maHQwWdfsk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김태리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sook-hee', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 290098 AND a.name = '김태리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '하정우', '/alHcDyLYbc6C2X9yOHw8mNHZVGu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하정우');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Count Fujiwara', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 290098 AND a.name = '하정우';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '조진웅', '/r3o7eKsqVCQu0ppIY88d16VLCsj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조진웅');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Uncle Kouzuki', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 290098 AND a.name = '조진웅';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '김해숙', '/dt5bmKeG7qbvDwHrxFZFxiGc9fZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김해숙');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ms. Sasaki', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 290098 AND a.name = '김해숙';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '박찬욱', '/jsSFCVB7MhuVbSLwTgESiXEiNjt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '박찬욱');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 290098 AND d.name = '박찬욱';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kRrNGYnnJqyMjJJgCPuuQKSKMqn.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 290098;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jlMic05JZQQY7t7DhXoYKaRHh2b.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 290098;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (857, '라이언 일병 구하기', '1998-07-24', '임무는 단 한 사람', '1944년 6월 6일 노르망디 상륙 작전. 오마하 해변에 대기하고 있던 병사들은 한치 앞도 내다볼 수 없는 긴장된 상황에 두려움을 감출 수 없다. 노르망디 해변을 응시하는 밀러 대위와 가장 어려운 임무를 수행해야할 두려움에 지친 그의 대원들. 몇 번의 죽을 고비를 넘기고 맡은 바 임무를 완수하지만 3형제가 전사하고 적진에서 실종된 유일한 생존자인 막내 라이언 일병을 위한 미 행정부의 특별한 임무를 맡게 된다.단 한명의 목숨을 구하기 위해 여덟 명이 위험을 감수해야할 상황에서 대원들은 과연 라이언 일병 한 명의 생명이 그들 여덟 명의 생명보다 더 가치가 있는 것인지 끊임없는 혼란에 빠지는데...', 169, '15', 'RELEASED', 80.719000, 8.216000, 481840909, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 857 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 857 AND g.name = '역사';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 857 AND g.name = '전쟁';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '톰 행크스', '/eKF1sGJRrZJbfBG1KirPt1cfNd3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 행크스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Captain Miller', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 857 AND a.name = '톰 행크스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '톰 시즈모어', '/cXikL7I0e2geGVvcM2RT8gQq3Nb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 시즈모어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sergeant Horvath', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 857 AND a.name = '톰 시즈모어';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Edward Burns', '/pTLdPUSxDUcdmvy91LGCF3pk0AM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Edward Burns');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Private Reiben', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 857 AND a.name = 'Edward Burns';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Barry Pepper', '/pmdNUqrpsoozh7QYqUgEgZQ69cA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Barry Pepper');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Private Jackson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 857 AND a.name = 'Barry Pepper';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Adam Goldberg', '/xEbqDqTWlSSCi4v8FI3S9YSEPJz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Adam Goldberg');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Private Mellish', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 857 AND a.name = 'Adam Goldberg';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '스티븐 스필버그', '/tZxcg19YQ3e8fJ0pOs7hjlnmmr6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '스티븐 스필버그');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 857 AND d.name = '스티븐 스필버그';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2ATMbU4EljWkWcEJT9TElbQOMYY.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 857;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rW2xRFlJRbTnBJlQTSjQmjevIwb.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 857;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (98, '글래디에이터', '2000-05-04', '느낄수 있는가, 이 거대한 스펙터클의 전율을', '죽을 날이 머지않은 황제 마르쿠스 아우렐리우스는 막시무스를 총애하여 아들이 아닌 그에게 권력을 넘겨주기로 한다. 황제의 아들 코모두스는 이에 질투와 분노를 느껴 황제를 살해한다. 왕좌를 이어받은 코모두스는 막시무스와 그의 가족을 죽이라고 명령한다. 가족을 모두 잃고 겨우 살아남은 막시무스는 노예로 전락하고, 투기장의 검투사가 된다. 그에게 남은 건 오직 황제 코모두스에 대한 복수 뿐. 검투사로서 매 경기마다 승리로 이끌면서 살아남자 그의 명성은 날로 높아 간다. 그러던 어느 날 오래 전 사랑했던 황제의 누이 루실라를 다시 만나게 되는데...', 154, '15', 'RELEASED', 300.480000, 8.216000, 465361176, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 98 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 98 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 98 AND g.name = '모험';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '러셀 크로우', '/rsxGCRtPu42uKDJZlz7qknvz8h6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '러셀 크로우');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maximus', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 98 AND a.name = '러셀 크로우';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '호아킨 피닉스', '/u38k3hQBDwNX0VA22aQceDp9Iyv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '호아킨 피닉스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Commodus', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 98 AND a.name = '호아킨 피닉스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '코니 닐센', '/lvQypTfeH2Gn2PTbzq6XkT2PLmn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '코니 닐센');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lucilla', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 98 AND a.name = '코니 닐센';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Oliver Reed', '/dWfotc1X71wNCGyPO9hXpv8U9Gw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Oliver Reed');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Proximo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 98 AND a.name = 'Oliver Reed';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '리처드 해리스', '/lCvcVMuxrg1f5A8OMqY9AqkkcZR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리처드 해리스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marcus Aurelius', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 98 AND a.name = '리처드 해리스';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '리들리 스콧', '/zABJmN9opmqD4orWl3KSdCaSo7Q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '리들리 스콧');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 98 AND d.name = '리들리 스콧';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yemF0xxGU56Pf3JXxVr4C6kuKng.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 98;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vlAVk0rdG6oyZ8by6bkE9rFVACf.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 98;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (694, '샤이닝', '1980-05-23', '당신을 해치지 않아, 그냥 머리통을 부숴버리기만 할 거야', '소설가인 잭 토랜스는 콜로라도 산맥에 있는 오버룩 호텔의 관리인으로 취직한다. 다음 시즌 준비를 하는 이곳은 겨울 동안 폐쇄되기 때문에 토랜스의 가족들만 호텔에 머물게 된다. 갑자기 몰아친 폭설로 잭과 아내 웬디와 아들과 함께 호텔에 고립되고, 투시와 텔레파시 능력이 있는 잭의 아들 대니는 호텔에 유령이 있으며 유령들이 천천히 아버지를 미치게 하고 있음을 알게 된다. 잭은 과거에 스스로 자신의 아내와 두 딸을 죽인 이곳의 예전 관리인 그레이디의 유령을 만난다. 과거에 있었던 살인사건의 악령에 휘말린 잭은 호텔을 공포의 도가니로 몰아가는데...', 144, '18', 'RELEASED', 69.130000, 8.215000, 44781695, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 694 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 694 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '잭 니콜슨', '/6h12pZsgj3WWjMtykUgfLkLEBWz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '잭 니콜슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jack Torrance', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 694 AND a.name = '잭 니콜슨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '셜리 듀발', '/6lG3fmyhXatvyAG4X9WxwMWoPUS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '셜리 듀발');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wendy Torrance', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 694 AND a.name = '셜리 듀발';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '대니 로이드', '/5pEmugZ6m25RB0cXbL4t5D4kZAO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '대니 로이드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Danny', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 694 AND a.name = '대니 로이드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '스캣맨 크로더스', '/jf2ooubjE5tjBJwDI9Nla0M57m2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스캣맨 크로더스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hallorann', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 694 AND a.name = '스캣맨 크로더스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '베리 넬슨', '/fSrHmvOxZJbeKpNM0uWGvha1aK9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '베리 넬슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ullman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 694 AND a.name = '베리 넬슨';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '스탠리 큐브릭', '/yFT0VyIelI9aegZrsAwOG5iVP4v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '스탠리 큐브릭');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 694 AND d.name = '스탠리 큐브릭';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/e3pxD5asVzFMcH3UvmGxolZ7wS.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 694;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mmd1HnuvAzFc4iuVJcnBrhDNEKr.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 694;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (635302, '극장판 귀멸의 칼날: 무한열차편', '2020-10-16', '그 칼로 악몽을 끊어라', '혈귀로 변해버린 여동생 네즈코를 인간으로 되돌릴 단서를 찾아 비밀조직 귀살대에 들어간 탄지로. 젠이츠, 이노스케와 새로운 임무 수행을 위해 무한열차에 탑승 후 귀살대 최강 검사 염주 렌고쿠와 합류한다. 달리는 무한열차에서 승객들이 하나 둘 흔적 없이 사라지자 숨어있는 식인 혈귀의 존재를 직감하는 렌고쿠. 귀살대 탄지로 일행과 최강 검사 염주 렌고쿠는 어둠 속을 달리는 무한열차에서 모두의 목숨을 구하기 위해 예측불가능한 능력을 가진 혈귀와 목숨을 건 혈전을 시작하는데...', 117, '15', 'RELEASED', 94.988000, 8.200000, 507119058, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 635302 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 635302 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 635302 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 635302 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '하나에 나츠키', '/A1lGrpBEdAUxZA7RoAw4Zr4ved3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하나에 나츠키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tanjiro Kamado (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 635302 AND a.name = '하나에 나츠키';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '키토 아카리', '/43SgANYtj7vpsHmz68hgPDlxC15.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키토 아카리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nezuko Kamado (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 635302 AND a.name = '키토 아카리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '시모노 히로', '/i5CaaqKmHH0vKCloqZyrCwn5mWy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시모노 히로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zenitsu Agatsuma (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 635302 AND a.name = '시모노 히로';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마츠오카 요시츠구', '/ugDwdWEXnmv43jcbnfAi4XwiQ8C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마츠오카 요시츠구');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Inosuke Hashibira (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 635302 AND a.name = '마츠오카 요시츠구';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '히노 사토시', '/8ZJIiwIVF2zDyyFr7oXewj0eEuu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '히노 사토시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kyojuro Rengoku (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 635302 AND a.name = '히노 사토시';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '外崎春雄', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '外崎春雄');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 635302 AND d.name = '外崎春雄';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mxdVTei65ymzhJlalIEtR1qSgV2.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 635302;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qjGrUmKW78MCFG8PTLDBp67S27p.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 635302;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (50014, '헬프', '2011-08-09', '', '1963년, 미국 남부 미시시피 잭슨  흑인 가정부는 백인 주인과 화장실도 같이 쓸 수 없다?!  아무도 가정부의 삶에 대해 묻지 않았다. 그녀가 책을 쓰기 전까지는…  돈 많은 남자와 결혼해 정원과 가정부가 딸린 집의 안주인이 되는 게 최고의 삶이라 여기는 친구들과 달리 대학 졸업 후 작가의 꿈을 이루기 위해 지역 신문사에 취직한 ‘스키터(엠마 스톤)’. 살림 정보 칼럼의 대필을 맡게 된 그녀는 베테랑 가정부 ‘에이빌린(바이올라 데이비스)’에게 도움을 요청한다.  다른 인생은 꿈꿔보지도 못한 채 가정부가 되어 17명의 백인 아이를 헌신적으로 돌봤지만 정작 자신의 아들은 사고로 잃은 ‘에이빌린’. ‘스키터’에게 살림 노하우를 알려주던 그녀는 어느 누구도 관심 갖지 않았던 자신과 흑인 가정부들의 인생을 책으로 써보자는 위험한 제안을 받는다.  때 마침 주인집의 화장실을 썼다는 황당한 이유로 쫓겨난 가정부 ‘미니(옥타비아 스펜서)’가 두 여자의 아슬아슬하지만 유쾌한 반란에 합류한다. 차별과 불만을 이야기 하는 것조차 불법이 되고 생명을 위협받는 일이 되는 시대에, 태어나 처음으로 누군가에게 자신들의 이야기를 털어 놓기 시작하는 ‘에이빌린’과 ‘미니’. 그녀들의 용기 있는 고백은 세상을 발칵 뒤집을 만한 책을 탄생시키는데…', 146, 'All', 'RELEASED', 100.088000, 8.213000, 216600000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 50014 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '엠마 스톤', '/3UaYw9KF4fEXRMRWhf25aGJpAW2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '엠마 스톤');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Skeeter Phelan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 50014 AND a.name = '엠마 스톤';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '비올라 데이비스', '/y6Qq5FP3AlnDDQ5s0cOhOnNFrPh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '비올라 데이비스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Aibileen Clark', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 50014 AND a.name = '비올라 데이비스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '브라이스 댈러스 하워드', '/qQX1rhQaJ1G8eMG2RknFKiXfNRc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브라이스 댈러스 하워드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hilly Holbrook', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 50014 AND a.name = '브라이스 댈러스 하워드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '옥타비아 스펜서', '/35SOy4yQZ9xRSJ0q1L5RLhXfhqN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '옥타비아 스펜서');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Minny Jackson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 50014 AND a.name = '옥타비아 스펜서';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제시카 차스테인', '/xRvRzxiiHhgUErl0yf9w8WariRE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제시카 차스테인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Celia Foote', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 50014 AND a.name = '제시카 차스테인';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '테이트 테일러', '/iupMPA0UwdFAO66fjlsHF1iZlT5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '테이트 테일러');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 50014 AND d.name = '테이트 테일러';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qMVZtwZIU9oussRb8al2Gb0YPQL.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 50014;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wyvUmyzqGOBDyqLHRSukGDjI7bH.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 50014;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (37257, '검찰 측 증인', '1957-12-17', '', '남편 레너드를 사랑하는 부인 크리스틴은 살인죄로 구속되자 검사측 증인이 되어 남편 레너드의 범죄를 증언한다. 그 때 정체불명의 여인이 나타나법정에 크리스틴 필적의 편지를 공개해 크리스틴은 위증죄로 걸리게 되고 남편은 석방된다. 하지만 이것은 남편을 구하기 위해 크리스틴이 꾸민 계략이다. 그렇지만 석방된 남편은 애인 다이애너와 달아나 버린다.  세계적인 추리소설가 애거서 크리스티의 <검찰 측 증인>을 각색하여, 인간의 추잡한 욕망을 지능적이고 긴장감 넘치는 법정 스릴러로 밀도 있게 그려낸 걸작이다. 배우들의 탄탄한 연기력이 돋보이지만, 단연 1930~40년대 섹스 심벌로 유명했던 마를렌 디트리히의 악녀 연기가 압권이다.', 116, '', 'RELEASED', 40.699000, 8.200000, 9000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 37257 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 37257 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 37257 AND g.name = '범죄';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '타이론 파워', '/zHKNyYKkWIQBwhqxCMNBns1eoXR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '타이론 파워');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Leonard Vole', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 37257 AND a.name = '타이론 파워';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마를레네 디트리히', '/9AxXKUr9CLfy5Lcg3JaNRbWD6Be.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마를레네 디트리히');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Christine', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 37257 AND a.name = '마를레네 디트리히';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Charles Laughton', '/lhk6flmWDZMOLwq8VILMD6jH71F.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Charles Laughton');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sir Wilfrid', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 37257 AND a.name = 'Charles Laughton';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Elsa Lanchester', '/sG1otCRGe2gHrMzkv5HE68a9KJH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Elsa Lanchester');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miss Plimsoll', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 37257 AND a.name = 'Elsa Lanchester';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'John Williams', '/gsg1KjcGnZK76LGIYm8lMpSM1Oq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'John Williams');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brogan-Moore', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 37257 AND a.name = 'John Williams';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '빌리 와일더', '/tfVte6h2dlLn59Q0Mi6AvWAyRLP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '빌리 와일더');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 37257 AND d.name = '빌리 와일더';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9JdugjNWy0Qet7G29yXXX72cp7c.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 37257;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ppKDBRK4TMHxjLPRGx3MQEtJWC0.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 37257;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (354912, '코코', '2017-10-27', '죽은 자들의 세상은 더욱 화려하다', '미구엘은 멕시코의 자랑인 에르네스토 델라 크루즈 같은 뮤지션이 되길 꿈꾸지만 미구엘 집안 사람들에게 음악은 금기다. 먼 옛날 조상 중에 음악 때문에 가족을 버린 인물이 있었기 때문. 미구엘은 죽은 자의 날이 되자 실력으로 인정받겠다는 결심을 하고 경연 무대에 오르려 하는데, 우연히 에르네스토의 기타에 손을 댔다가 죽은 자들의 세상에 들어서게 된다. 이승과 저승을 이어주는 마리골드 꽃길을 건너 죽은 자들의 세상에 도착한 미구엘은 거짓말과 위변조가 장기인 헥터를 만난다. 그리고 꿈에 그리던 우상 에르네스토를 만나러 가는 여정에서 가족의 비밀을 알게 된다.', 105, 'All', 'RELEASED', 288.160000, 8.209000, 807816196, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 354912 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 354912 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 354912 AND g.name = '음악';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 354912 AND g.name = '모험';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Anthony Gonzalez', '/WF7bn6t0LkxwBWyDMWvomVujn7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Anthony Gonzalez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miguel Rivera (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 354912 AND a.name = 'Anthony Gonzalez';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '가엘 가르시아 베르날', '/7mq3EQN1oJfYNXkv9xKXKu6Ccw5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '가엘 가르시아 베르날');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Héctor (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 354912 AND a.name = '가엘 가르시아 베르날';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '벤저민 브랫', '/hBenHPT4iJEG2kt5z2TOGnkRZwh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '벤저민 브랫');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ernesto de la Cruz (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 354912 AND a.name = '벤저민 브랫';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Alanna Ubach', '/ffyBAEoW3bDgVJQV3GaHsZ9x29W.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alanna Ubach');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mamá Imelda Rivera (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 354912 AND a.name = 'Alanna Ubach';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Renee Victor', '/wAVDqwFhQsRQgO6VIYq6T9Wbbx8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Renee Victor');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elena Rivera (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 354912 AND a.name = 'Renee Victor';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '리 언크리치', '/crb297utC6W4HSstOe5djDPTwEN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '리 언크리치');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 354912 AND d.name = '리 언크리치';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pQu93NuwR90AaCULzglVD5Ge4Ml.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 354912;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/askg3SMvhqEl4OL52YuvdtY40Yb.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 354912;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (654299, 'Como caído del cielo', '2019-12-24', '', '', 112, '', 'RELEASED', 24.988000, 8.206000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 654299 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 654299 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 654299 AND g.name = '음악';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Omar Chaparro', '/fAIDrbtyHBcDDbRdRZ3bvNesKU7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Omar Chaparro');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 654299 AND a.name = 'Omar Chaparro';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Ana Claudia Talancón', '/es8No01z8G0MFX2KeiAa2ouRfCD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ana Claudia Talancón');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 654299 AND a.name = 'Ana Claudia Talancón';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Stephanie Cayo', '/q1biqcKvbpU4tEvMcbVNaoO9ABM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Stephanie Cayo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 654299 AND a.name = 'Stephanie Cayo';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Lupita Sandoval', '/uRd0v4lwTogDrq7HuS5KqNEnSIS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lupita Sandoval');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 654299 AND a.name = 'Lupita Sandoval';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Yare Santana', '/9E6uEr23wEU3Ww2GbKk9Mu5Rnhf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Yare Santana');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jenny Infante', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 654299 AND a.name = 'Yare Santana';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Pepe Bojórquez', '/hTQfailJNpE6tJ7KQhnRx3M6Za7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Pepe Bojórquez');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 654299 AND d.name = 'Pepe Bojórquez';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xg6QZdlHrq2dtSK8cfnQQMnmpeY.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 654299;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/o33acwn7KliNpJRbjy4FrMSpiQ9.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 654299;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (16672, '모래의 여자', '1964-02-15', '', '곤충 연구가인 한 교사가 표본 수집을 하기 위해 모래 지대를 돌아다니다, 지역 주민의 소개로 어느 여인이 혼자 사는 집에서 묵게 된다. 다음날 이 집을 떠나려 하던 그는 땅위로 올라갈 사다리가 없어진 것으로 보고 놀란다. 1964년 칸 영화제 수상작으로 인간의 실존적 조건을 예리하게 묘사한 작품이다. 아베 고보의 소설을 영화화 하였다.', 147, '', 'RELEASED', 20.612000, 8.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 16672 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 16672 AND g.name = '스릴러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '岡田英次', '/mQb4kOYl1WlISWZOStAhm13DHdQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '岡田英次');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Entomologist Niki Jumpei', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 16672 AND a.name = '岡田英次';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '키시다 쿄코', '/hU0aRr1uUmOPuibSz8rveO3lOfs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키시다 쿄코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Woman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 16672 AND a.name = '키시다 쿄코';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '伊藤弘子', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '伊藤弘子');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Entomologist''s Wife', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 16672 AND a.name = '伊藤弘子';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '三井弘次', '/nahTXDNpFHNfKMraAHNDYiLXBM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '三井弘次');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Village Elder', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 16672 AND a.name = '三井弘次';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '勅使河原宏', '/bMg5nblcbQPY48P1nURbXsyHvfO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '勅使河原宏');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 16672 AND d.name = '勅使河原宏';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wnyTg9ZJaKXAwQPFIohjdzr8FTA.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 16672;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oOM2JzhVBjWyZFHW2iBQQ8A3znY.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 16672;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (11, '스타워즈 에피소드 4: 새로운 희망', '1977-05-25', '아주 오래 전 멀고 먼 은하계에서...', '공화국이 붕괴하고 제국이 수립된 뒤 20년, 제다이 기사단은 전멸하고 강력한 제국군의 횡포에 은하계는 공포에 휩싸여 있다. 그러던 중 공화국 재건을 노리는 반란군이 제국군의 비밀병기 데스스타 설계도를 훔쳐 달아나고 제국군은 이를 쫓는다. 하지만 결국 제국의 손에 붙잡히게 된 그들은 드로이드 R2-D2에 설계도를 넣어서 R2의 친구 C-3PO와 탈출시키는 데 성공하고, 두 드로이드 콤비는 타투인의 시골 마을에서 숙부와 함께 살고 있던 청년 루크 스카이워커에게 오게 되는데...', 121, '', 'RELEASED', 83.114000, 8.204000, 775398007, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마크 해밀', '/2ZulC2Ccq1yv3pemusks6Zlfy2s.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마크 해밀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Luke Skywalker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11 AND a.name = '마크 해밀';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '해리슨 포드', '/n4dwIg6NbQzeMaS1yEKKlfNJH7a.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '해리슨 포드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Han Solo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11 AND a.name = '해리슨 포드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '캐리 피셔', '/2vmMjXMFW9ebX9VNKPW7WD6HLOR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '캐리 피셔');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Princess Leia Organa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11 AND a.name = '캐리 피셔';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '피터 커싱', '/if5g03wn6uvHx7F6FxXHLebKc0q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '피터 커싱');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Grand Moff Tarkin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11 AND a.name = '피터 커싱';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '앨릭 기니스', '/gplGgl6XERpvYdluiwY8GlxSdpi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앨릭 기니스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Obi-Wan "Ben" Kenobi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11 AND a.name = '앨릭 기니스';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '조지 루카스', '/WCSZzWdtPmdRxH9LUCVi2JPCSJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조지 루카스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 11 AND d.name = '조지 루카스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7XFfURIFCJxN1mfBg0SAjk5yGzg.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 11;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zqkmTXzjkAgXmEWLRsY4UpTWCeo.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 11;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (11324, '셔터 아일랜드', '2010-02-14', '탈출 불가능의 섬, 누군가 사라졌다', '보스턴 셔터아일랜드의 정신병원은 중범죄를 저지른 정신병자를 격리하는 병동으로 탈출 자체가 불가능하다. 하지만 자식 셋을 죽인 혐의를 받고 있는 여인이 이상한 쪽지만을 남긴 채 감쪽같이 사라지는 사건이 발생한다. 연방보안관 테디 다니엘스(레오나르도 디카프리오)는 수사를 위해 동료 척(마크 러팔로)과 함께 셔터아일랜드로 향한다. 테디는 수사를 위해 의사, 간호사, 병원관계자 등을 심문하지만 수사는 전혀 진척되지 않는다. 설상가상 폭풍이 불어 닥쳐 테디와 척은 섬에 고립되게 되고, 그들에게 점점 괴이한 일들이 일어나기 시작하는데...', 138, '15', 'RELEASED', 94.292000, 8.203000, 294804195, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11324 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11324 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11324 AND g.name = '미스터리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '레오나르도 디카프리오', '/wo2hJpn04vbtmh0B9utCFdsQhxM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레오나르도 디카프리오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Teddy Daniels', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11324 AND a.name = '레오나르도 디카프리오';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마크 러팔로', '/5GilHMOt5PAQh6rlUKZzGmaKEI7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마크 러팔로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chuck Aule', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11324 AND a.name = '마크 러팔로';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '벤 킹슬리', '/vQtBqpF2HDdzbfXHDzR4u37i1Ac.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '벤 킹슬리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Cawley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11324 AND a.name = '벤 킹슬리';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '막스 폰 시도우', '/fOzSDFqMx84NR7PSv36P7j0Qf1q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '막스 폰 시도우');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Naehring', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11324 AND a.name = '막스 폰 시도우';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '미셸 윌리엄스', '/jn3BVMVbIptz2gc6Fhxo1qwJVvW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미셸 윌리엄스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dolores', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11324 AND a.name = '미셸 윌리엄스';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '마틴 스콜세지', '/9U9Y5GQuWX3EZy39B8nkk4NY01S.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '마틴 스콜세지');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 11324 AND d.name = '마틴 스콜세지';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aywZdSOXtwcqqLTl271EUJemi2.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 11324;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rbZvGN1A1QyZuoKzhCw8QPmf2q0.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 11324;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1124, '프레스티지', '2006-10-17', '보이는 것만이 진실이 아니다', '로버트 앤지어는 상류층 집안에서 자란 쇼맨십이 강한 마술사다. 반면 고아로 사람들과 잘 어울리지 못하는 알프레드 보든은 아이디어를 남들에게 보여 줄 배짱은 없지만 누구보다도 뛰어난 재능을 가진 천재이다. 두 사람은 서로를 아끼는 친구이자 선의의 경쟁자였지만, 그들이 최고라 자부했던 수중 마술이 실패로 돌아가면서 두 사람은 철천지 원수로 돌변한다. 서로 상대방 마술의 비밀을 캐내려 경쟁을 벌이는 가운데, 로버트는 알프레드의 비밀을 알아내기 위해 자신의 조수이자 사랑하는 여인 올리비아를 알프레드에게 접근하게 만든다.', 130, '15', 'RELEASED', 72.531000, 8.200000, 109676311, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1124 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1124 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1124 AND g.name = 'SF';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '휴 잭맨', '/4Xujtewxqt6aU0Y81tsS9gkjizk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '휴 잭맨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Robert Angier', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1124 AND a.name = '휴 잭맨';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '크리스찬 베일', '/7Pxez9J8fuPd2Mn9kex13YALrCQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스찬 베일');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alfred Borden', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1124 AND a.name = '크리스찬 베일';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마이클 케인', '/bVZRMlpjTAO2pJK6v90buFgVbSW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 케인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cutter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1124 AND a.name = '마이클 케인';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Piper Perabo', '/5XrzISDEox0KubRDzJU668Oxmxy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Piper Perabo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Julia McCullough', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1124 AND a.name = 'Piper Perabo';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '레베카 홀', '/coC58ANiDbqRIyle5zEl9QDektf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레베카 홀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sarah', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1124 AND a.name = '레베카 홀';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '크리스토퍼 놀란', '/xuAIuYSmsUzKlUMBFGVZaWsY3DZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스토퍼 놀란');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1124 AND d.name = '크리스토퍼 놀란';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rwEc7SgXu7b5Yo8Co4CvSinF91v.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1124;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xBDE2d6HM1aBKQRu4IT7SfPD9fs.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1124;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (284, '아파트 열쇠를 빌려드립니다', '1960-06-21', '', '버드는 소심하지만 성실하고 착한 뉴욕의 종합보험회사 직원이다. 독신인 그는 시내에 조용한 아파트를 얻어서 살고 있는데, 본의 아니게 회사 임원들을 상대로 그 아파트를 빌려주게 된다. 그로 인해 생활에 피해가 많지만, 원래 소심한 성격에다가 상대가 모두 상당한 영향력을 가지고 있는 사람들이라, 회유와 협박에 번번히 집을 내줄 수 밖에 없다.  한편, 그는 엘리베이터 걸인 프랜에게 은근히 마음을 두고 있고, 프랜도 그에게 상당히 호의적이다. 아파트를 빌리는 임원들의 도움으로 그는 승진 후보에 오르고, 인사권자인 쉘드레이크 전무를 만나는데, 뜻밖에도 쉘드레이크 전무는 그의 비밀을 다 알고 있었고, 전무는 그것을 약점으로 잡아서 자기도 버드의 방을 빌린다. 버드는 방을 빌려주는 대가로 받은 뮤지컬 티켓으로 프랜에게 데이트 신청을 하지만 바람만 맞고 만다. 회사의 크리스마스 파티에서 프랜과 화해할 기회가 생겼지만, 우연히 쉘드레이크가 자기 아파트로 데려오는 여자가 프랜이라는 사실을 알고는 다시 그녀로부터 멀어진다.', 125, '', 'RELEASED', 50.728000, 8.200000, 25000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 284 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 284 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 284 AND g.name = '로맨스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '잭 레먼', '/7jWVWLr1VJqQrN3d4YJaATCIHRw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '잭 레먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'C.C. Baxter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 284 AND a.name = '잭 레먼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '셜리 맥클레인', '/1jvWvxiJHHPjr9OHzAahlKIPYaX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '셜리 맥클레인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fran Kubelik', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 284 AND a.name = '셜리 맥클레인';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Fred MacMurray', '/lxxixlFMNH0JuA9K0K3mJmigYcc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Fred MacMurray');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jeff D. Sheldrake', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 284 AND a.name = 'Fred MacMurray';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Ray Walston', '/pRVUmhdc9nxflBI5GJvokz0nPPb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ray Walston');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joe Dobisch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 284 AND a.name = 'Ray Walston';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jack Kruschen', '/3QOPlFyLfFR8cLe0pseRjrm3lra.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jack Kruschen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Dreyfuss', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 284 AND a.name = 'Jack Kruschen';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '빌리 와일더', '/tfVte6h2dlLn59Q0Mi6AvWAyRLP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '빌리 와일더');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 284 AND d.name = '빌리 와일더';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/TIwJe8jQ4uhExbxesjxQzNxqY3.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 284;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rzdQXrK37OBArogzCk7inEaW0mS.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 284;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (361743, '탑건: 매버릭', '2022-05-21', '한순간의 실수도 용납되지 않는 하늘 위, 가장 압도적인 비행이 시작된다', '최고의 파일럿이자 전설적인 인물 매버릭은 자신이 졸업한 훈련학교 교관으로 발탁된다. 그의 명성을 모르던 팀원들은 매버릭의 지시를 무시하지만 실전을 방불케 하는 상공 훈련에서 눈으로 봐도 믿기 힘든 전설적인 조종 실력에 모두가 압도된다. 매버릭의 지휘 아래 견고한 팀워크를 쌓아가던 팀원들에게 국경을 뛰어넘는 위험한 임무가 주어지자 매버릭은 자신이 가르친 동료들과 함께 마지막이 될지 모를 하늘 위 비행에 나서는데...', 131, '12', 'RELEASED', 175.403000, 8.202000, 1488732821, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 361743 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 361743 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '톰 크루즈', '/3mShHjSQR7NXOVbdTu5rT2Qd0MN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 크루즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Capt. Pete ''Maverick'' Mitchell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 361743 AND a.name = '톰 크루즈';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '마일스 텔러', '/cg3LW0xX6RKr8dmescxq1bepcb5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마일스 텔러');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lt. Bradley ''Rooster'' Bradshaw', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 361743 AND a.name = '마일스 텔러';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '모니카 바바로', '/hiOYXzSkkuKyCEcjLxBoAc4bLZS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '모니카 바바로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lt. Natasha ''Phoenix'' Trace', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 361743 AND a.name = '모니카 바바로';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '루이스 풀먼', '/jAo0Rxl9EYVxLnhUlBww5Uxl89v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루이스 풀먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lt. Robert ''Bob'' Floyd', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 361743 AND a.name = '루이스 풀먼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제이 엘리스', '/78JH7CfMrWrI3Vx2XLbx0GW4c2X.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이 엘리스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lt. Reuben ''Payback'' Fitch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 361743 AND a.name = '제이 엘리스';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '조셉 코신스키', '/oWLUXWY0j8TYzwnf2wETYWO181S.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조셉 코신스키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 361743 AND d.name = '조셉 코신스키';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jeqXUwNilvNqNXqAHsdwm5pEfae.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 361743;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/AaV1YIdWKnjAIAOe8UUKBFm327v.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 361743;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (476292, '이별의 아침에 약속의 꽃을 장식하자', '2018-02-24', '외톨이와 외톨이가 만났다!', '10대 중반에 외모의 성장이 멈추고 수백년을 사는 장수 민족 이올프는 인간이 사는 마을에서 멀리 떨어져 조용히 살고 있었다.  하지만 그들의 온화한 일상은 장수의 피를 요구하는 메자테 군에 의해 파괴된다. 모든 것을 잃고 외톨이가 된 이올프의 소녀 마키아는 숲을 방황하던 중 부모를 잃은 아기를 운명적으로 만나 그를 키워 나가기로 결심한다.', 115, '12', 'RELEASED', 27.980000, 8.200000, 4345395, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 476292 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 476292 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 476292 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 476292 AND g.name = '모험';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이와미 마나카', '/leKMaCBswXG8u4mfQNQ7J3y6Xow.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이와미 마나카');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maquia (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 476292 AND a.name = '이와미 마나카';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이리노 미유', '/8qEEhHUObNvGQr4e6eqLu5z4qTz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이리노 미유');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ariel (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 476292 AND a.name = '이리노 미유';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '櫻井優輝', '/k6cWl6lltnCOd0kqIOSX8rDJLcW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '櫻井優輝');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ariel as a Child (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 476292 AND a.name = '櫻井優輝';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '카야노 아이', '/l8ywp387rfdAS7mOExe3cEZnsk0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카야노 아이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Leilia (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 476292 AND a.name = '카야노 아이';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '카지 유우키', '/8wKdPV11IwowfwoqGqMMNt9hmp6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카지 유우키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Krim (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 476292 AND a.name = '카지 유우키';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '오카다 마리', '/mfq0VCH3tWJGOUGk1ivtyBH1wz3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '오카다 마리');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 476292 AND d.name = '오카다 마리';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/x4lFC7knq631uFzGsOiu4xZ9ZYQ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 476292;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5nkKy7eEDsXqsxFLJy3GxZhE90J.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 476292;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (324786, '핵소 고지', '2016-10-07', '치열했던 핵소 고지에서 무기 없이 75명의 생명을 구한 기적의 전쟁 실화', '비폭력주의자인 도스는 전쟁으로부터 조국과 소중한 사람들을 지키기 위해 총을 들지 않아도 되는 의무병으로 육군에 자진 입대한다. 총을 들 수 없다는 이유로 필수 훈련 중 하나인 총기 훈련 마저 거부한 도스는 동료 병사들과 군 전체의 비난과 조롱을 받게 된다. 결국 군사재판까지 받게 되지만 끝까지 자신의 신념을 굽히지 않은 도스에게 군 상부는 오키나와 전투에 총기 없이 의무병으로 참전할 것을 허락하는데…', 139, '15', 'RELEASED', 148.995000, 8.197000, 175302354, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 324786 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 324786 AND g.name = '역사';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 324786 AND g.name = '전쟁';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '앤드류 가필드', '/5ydZ6TluPtxlz5G8nlWMB7SGmow.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앤드류 가필드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Desmond T. Doss', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324786 AND a.name = '앤드류 가필드';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '샘 워싱턴', '/mflBcox36s9ZPbsZPVOuhf6axaJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '샘 워싱턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Captain Glover', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324786 AND a.name = '샘 워싱턴';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '빈스 본', '/A9fJ88dfXZGpgFTnQIK0bOtjMrj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빈스 본');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sgt Howell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324786 AND a.name = '빈스 본';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '테레사 파머', '/sjSiLSCp9LS1Z0nyGpmquTBuUyr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '테레사 파머');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dorothy Schuttle', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324786 AND a.name = '테레사 파머';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Luke Bracey', '/ot2h7IrXpC8XSnIZDSVsj2FQ5cx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Luke Bracey');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Smitty Ryker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324786 AND a.name = 'Luke Bracey';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '멜 깁슨', '/jnqHMaOslt8cef2atSmOpGRvNla.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '멜 깁슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 324786 AND d.name = '멜 깁슨';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/nlvcNogJK9R9iIj0YINApQE36FF.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 324786;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yQIBS8B9l2qXoPoPtxSXvH7CfoT.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 324786;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (610892, '바이올렛 에버가든 외전: 영원과 자동수기인형', '2019-09-06', '“전하고 싶어, 나의 마음을” “나도… 행복을 전하고 싶어”', '소중한 동생을 지키는 대가로 요크 가문에 입성한 ‘이자벨라’. 더 이상 꿈도 희망도 없는 그녀의 앞에 나타난 자동 수기 인형, ‘바이올렛 에버가든’. 언니의 편지를 받고 C.H 우편사를 찾아온 ‘테일러’는 사람들에게 행복을 전하는 우편배달 일을 시작하고, ‘이자벨라’에게도 자신의 마음을 전하기 위해 ‘바이올렛’에게 대필을 부탁하는데…', 91, '', 'RELEASED', 18.267000, 8.195000, 10841702, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 610892 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 610892 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 610892 AND g.name = '애니메이션';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '이시카와 유이', '/zptGIN1iklKJL1xrfHKOpxR2qJ9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이시카와 유이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Violet Evergarden (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 610892 AND a.name = '이시카와 유이';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '코토부키 미나코', '/puocmMfvql6X1AvhFTolaV6Vh2r.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '코토부키 미나코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Amy Bartlett / Isabella York (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 610892 AND a.name = '코토부키 미나코';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '유우키 아오이', '/4kHNZSUIux52UU2BD3H6b5c5ymZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '유우키 아오이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Taylor Bartlett (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 610892 AND a.name = '유우키 아오이';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '우치야마 고키', '/sllSm3iZZWVLTBrDZQRtWrZUfEj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '우치야마 고키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Benedict Blue (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 610892 AND a.name = '우치야마 고키';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '코야스 타케히토', '/8uBkNDKPNmp9JWgMUI02NVyfhi1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '코야스 타케히토');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Claudia Hodgins (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 610892 AND a.name = '코야스 타케히토';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '이시다테 타이치', '/nBPuRvo9oWFWqzZiS8U4P9j0qtg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '이시다테 타이치');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 610892 AND d.name = '이시다테 타이치';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '藤田春香', '/d17kGnlHzGKXA1zOp5PJCaDY0r.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '藤田春香');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 610892 AND d.name = '藤田春香';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hL2mqR1jdTJ3UUyPC5w9LOrY1qQ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 610892;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/948wWGWLuG2ZIqRMLgfBjmm7tuR.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 610892;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (185, '시계태엽 오렌지', '1971-12-19', '나는 완전히 치유되었다', '10대 소년 알렉스는 친구들과 극악한 비행을 저지르고 다닌다. 어느 날 차를 훔쳐 드라이브를 즐기던 이들은 작가 알렉산더의 집을 습격해 그를 폭행하고 그의 아내를 강간한다. 이튿날 알렉스는 불평을 늘어놓는 친구들을 힘으로 제압하고 자신이 무리의 리더임을 확인시킨다. 그날 밤 알렉스는 한 저택에 침입해 집주인을 죽이고 도망치던 중 친구들의 배신으로 문 앞에 쓰러진다. 검거된 알렉스는 살인죄로 14년형을 언도받는다. 2년 뒤, 알렉스는 좀 더 빨리 감옥 밖으로 나오고 싶은 마음에 재소자에게 약물과 충격요법으로 범죄에 대한 혐오를 불러일으키는 교화 방법인 루도비코 갱생 프로그램에 자원하는데...', 137, '19', 'RELEASED', 42.037000, 8.200000, 27033812, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 185 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 185 AND g.name = '범죄';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '말콤 맥도웰', '/hL8ep4Hqj6izX7IlzE7Bbcfq62w.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '말콤 맥도웰');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alex', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 185 AND a.name = '말콤 맥도웰';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Patrick Magee', '/99xStF5zQy6qkDxLnIVaKD3urzI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Patrick Magee');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Alexander', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 185 AND a.name = 'Patrick Magee';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Carl Duering', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Carl Duering');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Brodsky', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 185 AND a.name = 'Carl Duering';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Michael Bates', '/53ciikCHIcr1thlDFvQtzNNbFAd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Michael Bates');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chief Guard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 185 AND a.name = 'Michael Bates';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Warren Clarke', '/ecBiugofrkuSk5tRu6IUpQDNGio.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Warren Clarke');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dim', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 185 AND a.name = 'Warren Clarke';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '스탠리 큐브릭', '/yFT0VyIelI9aegZrsAwOG5iVP4v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '스탠리 큐브릭');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 185 AND d.name = '스탠리 큐브릭';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oYa39Fjs8AgaaHMimGdBj8PiG6h.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 185;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ysnVjBz5iRSRSl3xrNcQTUfa4L3.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 185;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (5156, '자전거 도둑', '1948-07-21', '생애 최초 구입, 도둑 맞은 자전거를 찾습니다!', '2차 대전 직후 이탈리아의 수도 로마의 거리. 오랫동안 일자리를 구하지 못하고 거리를 배회하던 안토니오는 우연히 직업 소개소를 통해 거리에서 벽보를 붙이는 일을 맡는다. 그러나 그 일을 하기 위해선 자전거가 필요했고 이 사실을 안 아내 마리아는 남편의 직업을 위해 자신이 소중하게 간직했던 침대 시트를 전당포에 맡기고 자전거를 구입한다. 한편 직업을 갖게 된 안토니오와 그의 아들 브르노는 기쁨을 참지 못하지만 아뿔싸! 이게 웬일? 이튿날 안토니오가 출근하여 벽보를 붙이는 사이 한 사내가 자전거를 타고 도망치는 것이 아닌가?', 89, '18', 'RELEASED', 17.152000, 8.192000, 450159, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 5156 AND g.name = '드라마';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Lamberto Maggiorani', '/qp3oZcD8UwTGRg1GiMMOyWLwSaX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lamberto Maggiorani');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Antonio', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 5156 AND a.name = 'Lamberto Maggiorani';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Enzo Staiola', '/k64j9HlXiHIn0DJOUX9Uk8MCtAw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Enzo Staiola');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruno', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 5156 AND a.name = 'Enzo Staiola';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Lianella Carell', '/dbLf4dnEpapogvOYoe6Mm5rbWbG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lianella Carell');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maria', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 5156 AND a.name = 'Lianella Carell';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Gino Saltamerenda', '/xGSWaSgVYBTC2meKANoZp9JrM9S.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gino Saltamerenda');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Baiocco', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 5156 AND a.name = 'Gino Saltamerenda';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Vittorio Antonucci', '/uIWKAPeLJzfVvUawLOAM8DKWntA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Vittorio Antonucci');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alfredo Catelli, The Thief', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 5156 AND a.name = 'Vittorio Antonucci';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT '비토리오 데 시카', '/SObzAVAFAzCSM5nmpvpNdX7oxq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '비토리오 데 시카');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 5156 AND d.name = '비토리오 데 시카';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6o83cFToNeEp4MdXPXqooW0zSGD.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 5156;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kTUUiKGKrdRhJsCcYT3Ivtfuuzh.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 5156;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (522924, '레이싱 인 더 레인', '2019-08-08', '', '래브라도와 테리어 혼혈견 엔조는 스스로 다른 개들과는 다르다고 생각한다. 자기 자신의 몸속에는 인간의 영혼이 깃들어 있다고 믿는 것. 그런 엔조이기에 사랑하는 주인 데니와 의사소통할 수 있는 수단이 제스처밖에 없다는 현실에 좌절감을 느끼기도 한다. 주인 데니는 프로페셔널 카레이서가 되기 위한 사전 준비로 시애틀에 있는 한 자동차 정비소에서 일한다. 엔조는 TV에서 카레이싱을 보며 갖가지 인간사회의 지식들을 배운다. 엔조는 데니와 함께 행복한 시절을 보내지만 둘만의 사이에 이브가 나타난다. 이브와 사랑에 빠진 데니는 곧바로 결혼하게 되고, 둘은 곧 조위라는 예쁜 딸을 낳는다. 그러나 얼마 지나지 않아 엔조는 이브의 건강에 심각한 문제가 있다는 것을 예민한 후각으로 눈치 챈다. 조위가 아장아장 걷기 시작할 무렵, 이브는 심한 두통에 시달리지만 한사코 병원에 가지 않겠다고 고집을 부리다가 결국 때를 놓치게 된다. 이브의 고통스러운 투병 생활과 함께 데니의 가족에게는 시련이 닥친다. 데니를 사위로 인정하지 않던 이브의 부모가 나타나 노골적인 간섭을 시작하고, 급기야 이브가 세상을 떠나면서 조위의 양육권을 둘러싸고 법정싸움을 전개한다. 데니는 송사를 벌이는 동안 재산이 바닥나고, 함정에 빠져 더 큰 문제에 휘말리게 된다. 모든 희망을 잃게 될 무렵, 유일하게 곁을 지키는 엔조는 데니의 재기를 위한 정신적 발판이 되는데….', 109, '', 'RELEASED', 37.679000, 8.200000, 33800000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 522924 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 522924 AND g.name = '로맨스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '케빈 코스트너', '/bykmxJHLfbFM3NT05RZXhx8YTzF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케빈 코스트너');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Enzo (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 522924 AND a.name = '케빈 코스트너';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Milo Ventimiglia', '/9yFPsQCYi9sbPQ0xJGtoAF4Ar6v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Milo Ventimiglia');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Denny Swift', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 522924 AND a.name = 'Milo Ventimiglia';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Jackie Minns', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jackie Minns');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mrs. Spangle', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 522924 AND a.name = 'Jackie Minns';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Marcus Hondro', '/1PjH36pZQinPACQxyia359F8YPW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marcus Hondro');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Spangle', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 522924 AND a.name = 'Marcus Hondro';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT 'Ian Lake', '/f8FK8fiDSq7qUtITo2wdMjbB8c5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ian Lake');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mike', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 522924 AND a.name = 'Ian Lake';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Simon Curtis', '/7gQqZO7uoHNrHX6IZfCLCtXBDkU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Simon Curtis');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 522924 AND d.name = 'Simon Curtis';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rFKqqy4YIXq1hasaCEqk5p4Lywh.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 522924;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yv7XGQctTMrFM5ZiEm80zk3Jlw2.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 522924;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (313106, '닥터 후: 닥터의 날', '2013-11-23', '', '시간 전쟁의 마지막 날을 다루고 있다. 전쟁 한복판에서 워 닥터 (존 허트 분)가 이 모든 파멸을 끝내기 위해 달렉 종족과 자신의 종족인 타임 로드 모두를 말살하기로 결심한다. 이와 동시에 현재에서는 준군사조직 UNIT이 외계인의 침공을 막기 위해 런던 전체를 파괴하는 쪽을 택하려 한다. 닥터는 자신의 내력을 뒤집고 마음을 바꿔 달라는 클라라 오스왈드의 간청에 따르고, 시간 전쟁의 마지막 순간으로 돌아가서 전쟁으로 황폐화된 고향 행성을 없애버리지 않고 대신 시공간 속에 숨기게 된다. 그러나 이 선택으로 시간이 일그러지면서 닥터의 과거 모습들은 자신 스스로가 바꿔놓은 선택을 기억하지 못하게 된다.', 77, '', 'RELEASED', 21.080000, 8.200000, 10000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 313106 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 313106 AND g.name = '모험';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '맷 스미스', '/b3AYe7kkImkB35CoYwlUqHnJGF8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '맷 스미스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Doctor (11)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 313106 AND a.name = '맷 스미스';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '데이비드 테넌트', '/pQHLJEOEcKpPpyiIheh47AJ5INS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이비드 테넌트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Doctor (10)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 313106 AND a.name = '데이비드 테넌트';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '존 허트', '/8NriFCt6BxzW1Ex2TxGJfvQibrz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '존 허트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The War Doctor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 313106 AND a.name = '존 허트';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '제나 콜먼', '/h0Lag3Lxgt6yFEZgGLTdSlC7mVC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제나 콜먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Clara Oswald', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 313106 AND a.name = '제나 콜먼';

INSERT IGNORE INTO actor (name, profile, created_at, updated_at)
SELECT '빌리 파이퍼', '/gBduwAWEZ1bwuL6f7cjMzBvKlJz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빌리 파이퍼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Moment', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 313106 AND a.name = '빌리 파이퍼';

INSERT IGNORE INTO director (name, profile, created_at, updated_at)
SELECT 'Nick Hurran', '/eE7RYTPnICZlGLIX02GRj5CfMk6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Nick Hurran');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 313106 AND d.name = 'Nick Hurran';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yxLra5R61s5J4M5L3mqOY42K5md.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 313106;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tbF57JNof8j3X14GhZtqafkrziU.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 313106;

