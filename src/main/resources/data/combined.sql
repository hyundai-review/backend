INSERT IGNORE INTO genre (tmdb_id, name, created_at, updated_at)
VALUES (28, '액션', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (tmdb_id, name, created_at, updated_at)
VALUES (12, '모험', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (tmdb_id, name, created_at, updated_at)
VALUES (16, '애니메이션', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (tmdb_id, name, created_at, updated_at)
VALUES (35, '코미디', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (tmdb_id, name, created_at, updated_at)
VALUES (80, '범죄', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (tmdb_id, name, created_at, updated_at)
VALUES (99, '다큐멘터리', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (tmdb_id, name, created_at, updated_at)
VALUES (18, '드라마', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (tmdb_id, name, created_at, updated_at)
VALUES (10751, '가족', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (tmdb_id, name, created_at, updated_at)
VALUES (14, '판타지', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (tmdb_id, name, created_at, updated_at)
VALUES (36, '역사', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (tmdb_id, name, created_at, updated_at)
VALUES (27, '공포', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (tmdb_id, name, created_at, updated_at)
VALUES (10402, '음악', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (tmdb_id, name, created_at, updated_at)
VALUES (9648, '미스터리', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (tmdb_id, name, created_at, updated_at)
VALUES (10749, '로맨스', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (tmdb_id, name, created_at, updated_at)
VALUES (878, 'SF', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (tmdb_id, name, created_at, updated_at)
VALUES (10770, 'TV 영화', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (tmdb_id, name, created_at, updated_at)
VALUES (53, '스릴러', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (tmdb_id, name, created_at, updated_at)
VALUES (10752, '전쟁', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO genre (tmdb_id, name, created_at, updated_at)
VALUES (37, '서부', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (518068, '신과함께-인과 연', '2018-08-01', '이승과 저승, 현재와 과거를 오가는 천 년의 비밀이 밝혀진다', '천 년 동안 48명의 망자를 환생시킨 저승 삼차사, 한 명만 더 환생시키면 그들도 새로운 삶을 얻을 수 있다. 하지만 강림은 원귀였던 수홍을 자신들의 마지막 귀인으로 정한다. 저승법 상 원귀는 소멸되어야하나 염라대왕은 새로운 조건을 내걸며 강림의 제안을 수락한다. 염라의 조건은 성주신이 버티고 있어 저승 차사들이 가는 족족 실패하는 허춘삼 노인을 수홍의 재판이 끝나기 전까지 저승으로 데려오는 것. 허춘삼을 데리러 이승으로 내려간 해원맥과 덕춘, 하지만 성주신의 막강한 힘 앞에 속수무책으로 당하기만 하는데...', 141, '12', 'RELEASED', 36.276000, 8.100000, 112790210, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 518068 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 518068 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 518068 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 518068 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 75913, '하정우', '/alHcDyLYbc6C2X9yOHw8mNHZVGu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하정우');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gang-rim', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 518068 AND a.name = '하정우';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 150125, '주지훈', '/7PYfUrBBXhYv5PIsTalJhjbRteg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '주지훈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hae Won-maek', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 518068 AND a.name = '주지훈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1128106, '김향기', '/qAfGNnSzuSRVISUtLssokeHtoWy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김향기');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Deok-choon', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 518068 AND a.name = '김향기';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1024395, '마동석', '/zt1vx7FesNA4x6mTZtyzu2uco8E.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마동석');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sung-ju / Household God', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 518068 AND a.name = '마동석';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 118976, '김동욱', '/zN4UoEuFIbjuzkgvtvQtziG7Rtq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김동욱');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kim Su-hong', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 518068 AND a.name = '김동욱';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 84969, '김용화', '/7Y7v7kInxRFLYYr6zNib8E3CcXR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '김용화');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 518068 AND d.name = '김용화';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2ETx0U2Q5gUHtPJZiQ3hakTqyaR.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 518068;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ul4WiN9EJxsMokdg7z4Y6iisvHS.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 518068;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (600, '풀 메탈 자켓', '1987-06-26', '더러운 세상... 하지만 나는 살아남았다', '조커와 로렌스, 카우보이 등은 베트남전에 참전하기 위해 입대한 신병들이다. 이들은 전투 베테랑인 하트만 상사의 교육하에 철두철미한 해병으로 다시 태어나기 위해 훈련을 받는다. 뚱뚱하고 약간 지능이 모자라는 로렌스는 신병 교육대 최고의 고문관으로, 고된 훈련을 겪는 이들은 로렌스로 인해 자신들이 얼차려를 받게 되는 사실이 싫다. 언제부터인가 로렌스는 자신의 총과 대화를 나누고, 훈련생들은 그가 어딘지 모르게 달라지고 있다는 사실을 느낀다. 8주간의 훈련이 끝나갈 무렵, 윗 침대에서 자고있어야 할 로렌스가 사라진 것을 알게된 조커는 화장실에서 그를 찾아내는데...', 117, '18', 'RELEASED', 43.406000, 8.129000, 46357676, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 600 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 600 AND g.name = '전쟁';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8654, '매슈 모딘', '/paqPF3QJShq6DeefOWaAw5UHdk7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '매슈 모딘');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pvt. Joker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 600 AND a.name = '매슈 모딘';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2059, 'Adam Baldwin', '/rtRCD2rl9k3RVgyv3cHaUJer0Ms.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Adam Baldwin');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Animal Mother', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 600 AND a.name = 'Adam Baldwin';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7132, '빈센트 도노프리오', '/qkyiLolEqYMGH25xD4sFIXAjZQB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빈센트 도노프리오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pvt. Pyle', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 600 AND a.name = '빈센트 도노프리오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8655, 'R. 리 이메이', '/aXFJlEGHlQT7bwxkKwq6Sx7PeEp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'R. 리 이메이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gny. Sgt. Hartman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 600 AND a.name = 'R. 리 이메이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8656, 'Dorian Harewood', '/j3Nc0uNpe3MkonLtOrzVegO22QO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Dorian Harewood');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eightball', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 600 AND a.name = 'Dorian Harewood';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 240, '스탠리 큐브릭', '/yFT0VyIelI9aegZrsAwOG5iVP4v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '스탠리 큐브릭');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 600 AND d.name = '스탠리 큐브릭';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aQJ650CEHmN5B7W1C2r8efCDyiP.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 600;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mKEmuB7diOa7Ef0tJSGQ3fYJnNe.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 600;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (470044, '더 헤이트 유 기브', '2018-10-19', '', '부유한 백인들의 학교에 다니는 16살의 스타(아만들라 스텐버그)는 흑인이라는 이유로 갖은 인종차별을 겪는다. 아슬아슬하게 유지되던 스타의 일상은 어린 시절의 단짝 카일이 경찰의 총에 맞는 모습을 목격하면서 전환점을 맞는다. 영화는 사건의 유일한 목격자인 스타가 혐오를 일삼는 교외의 커뮤니티에 있는 힘껏 돌을 던지는 과정을 담았다.', 133, '', 'RELEASED', 62.820000, 8.100000, 34934009, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 470044 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 470044 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 561869, '아만들라 스텐버그', '/5blEjiO4zA8x2AFPyfVds7J3yhq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아만들라 스텐버그');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Starr Carter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 470044 AND a.name = '아만들라 스텐버그';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 35705, '레지나 홀', '/jiFZ4xNrvUUZLBHnJu71CvdN4kj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레지나 홀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lisa Carter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 470044 AND a.name = '레지나 홀';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 62649, 'Russell Hornsby', '/uUJ2TNmOsUoHRC9d9fKtaDv5nJE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Russell Hornsby');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maverick Carter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 470044 AND a.name = 'Russell Hornsby';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1680339, 'K.J. 아파', '/idpwm8ZdFnndjeQ3mKleF20hvRo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'K.J. 아파');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chris Bryant', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 470044 AND a.name = 'K.J. 아파';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4238, '커먼', '/eggJAnJxpn8wYraX7ea5svETB54.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '커먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Uncle Carlos', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 470044 AND a.name = '커먼';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 66121, 'George Tillman Jr.', '/l2O5FILKdFQoBW7uDzmm3wyr6cA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'George Tillman Jr.');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 470044 AND d.name = 'George Tillman Jr.';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2icwBom0t5nmOuZI9FVXF3gkMK0.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 470044;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kH8xW7K2Gp1KOXoeewcLPkfqZ8K.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 470044;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (575813, '소년시절의 너', '2019-10-25', '“넌 세상을 지켜, 난 너를 지킬게”', '시험만 잘 치면 멋진 인생을 살 수 있다고 가르치는 세상에서 기댈 곳 없이 세상에 내몰린 우등생 소녀 첸니엔과 양아치 소년 베이. 비슷한 상처와 외로움에 끌려 서로에게 의지하게 된 두 사람은 수능을 하루 앞둔 어느 날, 첸니엔의 삶을 뒤바꿔버릴 거대한 사건에 휘말리게 된다. 첸니엔만은 평범하고 행복하게 살길 바라는 베이는 그녀의 그림자가 되어 모든 것을 해결하기로 마음 먹는데…', 135, '15', 'RELEASED', 26.119000, 8.100000, 225879065, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 575813 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 575813 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 575813 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 575813 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 145092, '주동우', '/5s9e0RtLDRg8adKPvIbYuXwvq8v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '주동우');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chen Nian', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 575813 AND a.name = '주동우';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2223265, '이양첸시', '/2aTKxf2HZqI91Obu0ocfwoE2Pb5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이양첸시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Xiao Bei', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 575813 AND a.name = '이양첸시';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2133335, 'Yin Fang', '/sW2OPJXlpINc5BzF6WuxKp3U0zO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Yin Fang');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zheng Ye', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 575813 AND a.name = 'Yin Fang';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 106581, 'Huang Jue', '/np4L8zt7U7TqJL10FVbnKkg46ez.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Huang Jue');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lao Yang', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 575813 AND a.name = 'Huang Jue';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 113791, 'Wu Yue', '/xPYiYvIYYsivmt0ngctcz7jruXb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Wu Yue');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chen Nian''s Mother', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 575813 AND a.name = 'Wu Yue';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 125105, 'Derek Tsang', '/aEh2IH7r37idxR1xMXtugOOrtBw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Derek Tsang');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 575813 AND d.name = 'Derek Tsang';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/nSbgotvBiOkxQyELFRQXA6R9iVk.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 575813;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pi3yXaJzVxZUayUfqMekcsN199A.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 575813;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (508442, '소울', '2020-12-25', '나는 어떻게 나로 태어나게 되었을까?', '뉴욕에서 음악 선생님으로 일하던 조는 꿈에 그리던 최고의 밴드와 재즈 클럽에서 연주하게 된 그 날, 예기치 못한 사고로 영혼이 되어 태어나기 전 세상에 떨어진다. 탄생 전 영혼들이 멘토와 함께 자신의 관심사를 발견하면 지구 통행증을 발급하는 태어나기 전 세상. 조는 그 곳에서 유일하게 지구에 가고 싶어하지 않는 시니컬한 영혼 22의 멘토가 된다. 링컨, 간디, 테레사 수녀도 멘토되길 포기한 영혼 22, 꿈의 무대에 서려면 22의 지구 통행증이 필요한 조. 그는 다시 지구로 돌아가 꿈의 무대에 설 수 있을까?', 101, '', 'RELEASED', 53.006000, 8.100000, 121977511, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 508442 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 508442 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 508442 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 508442 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 134, '제이미 폭스', '/zD8Nsy4Xrghp7WunwpCj5JKBPeU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이미 폭스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joe Gardner (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 508442 AND a.name = '제이미 폭스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 56323, '티나 페이', '/yPTAi1iucXf85UpiFPtyiTSM6do.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '티나 페이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '22 (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 508442 AND a.name = '티나 페이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 78577, '그레이엄 노튼', '/zndDiPrNXtbxGLVhFhSlpCkaHIH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '그레이엄 노튼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Moonwind (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 508442 AND a.name = '그레이엄 노튼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 15298, '레이철 하우스', '/m8D9XlTGfI0ZmauMKtYp5tw8eNi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레이철 하우스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Terry (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 508442 AND a.name = '레이철 하우스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8602, '앨리스 브라가', '/ykVmsm3For9dCBfWLRtTL0EU24b.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앨리스 브라가');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Counselor Jerry (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 508442 AND a.name = '앨리스 브라가';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 12890, '피트 닥터', '/vITDphkNpSn1LP5gUEheAnlclnl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피트 닥터');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 508442 AND d.name = '피트 닥터';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qJiaB4RJMM5Oh6A4rqrEOHQUJbu.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 508442;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rQaHA74pevnGsxcKGaoZVGWe9TC.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 508442;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (600354, '더 파더', '2020-12-23', '모든 것이 점점 더 의심스러워진다', '나는 런던에서 평화롭게 삶을 보내고 있었다. 무료한 일상 속 나를 찾아오는 건 딸 앤뿐이다. 그런데 앤이 갑작스럽게 런던을 떠난다고 말한다. 그 순간부터 앤이 내 딸이 아닌 것처럼 느껴졌다. 잠깐, 앤이 내 딸이 맞기는 한 걸까?', 97, '12', 'RELEASED', 29.233000, 8.100000, 21029340, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 600354 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4173, '안소니 홉킨스', '/9ukJS2QWTJ22HcwR1ktMmoJ6RSL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '안소니 홉킨스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anthony', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 600354 AND a.name = '안소니 홉킨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 39187, '올리비아 콜먼', '/4ZwZ66zXZyX26Kf2wfeMt1tQZQf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '올리비아 콜먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 600354 AND a.name = '올리비아 콜먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 34546, '마크 게이티스', '/jf6vBlhsDbKR8N3rjl5ulqz9ltB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마크 게이티스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 600354 AND a.name = '마크 게이티스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11616, '올리비아 윌리엄스', '/qafefByeAWQ7b82E5JkhztOSIBd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '올리비아 윌리엄스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Woman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 600354 AND a.name = '올리비아 윌리엄스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17606, '이모전 푸츠', '/7uMFX0ecPZT2tc8L5DFFNbUckc9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이모전 푸츠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Laura', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 600354 AND a.name = '이모전 푸츠';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1150548, '플로리앙 젤레', '/e2koSVDhNPlENZ7zRZq2eyC3A7y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '플로리앙 젤레');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 600354 AND d.name = '플로리앙 젤레';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8xc8OfJdNLGRzVbqT4gqYdYfhj2.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 600354;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/h3weAFgg06GqchI2xDfufBgSFTj.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 600354;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (500, '저수지의 개들', '1992-09-02', '본능이 가리킬 때는 증거가 필요없다', '동부 LA 폐허의 텅빈 창고 안. 대규모 보석 강도를 위해 서로를 전혀 모르는 6명의 프로갱들이 한곳에 모인다. 이들을 한 곳에 불러 모은 장본인은 프로 도둑인 죠 캐봇과 그의 아들 나이스 가이 에디. 다이아몬드 도매상을 강탈하는 보석강도의 전 과정을 지휘하는 이 두 사람은 6명의 갱들에게 각각의 가명을 지정하고, 서로의 신분을 노출시킬 어떠한 정보 교환도 하지 말 것을 지시한다. 거사에 성공한 갱들은 그들 앞으로 돌아올 거액을 꿈구며 환호성을 지른다. 그러나 환호성도 잠시, 그들의 강도짓이 끝나기를 기다리며 문밖에 대기하고 있던 경찰을 발견한 그들은 경악하는데...', 99, '18', 'RELEASED', 46.945000, 8.122000, 2859750, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 500 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 500 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1037, '하비 카이텔', '/7P30hza1neYWW3r7rSQOC736K2Z.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하비 카이텔');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. White / Larry Dimmick', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 500 AND a.name = '하비 카이텔';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3129, '팀 로스', '/qSizF2i9gz6c6DbAC5RoIq8sVqX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '팀 로스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Orange / Freddy Newandyke', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 500 AND a.name = '팀 로스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 147, '마이클 매드슨', '/AnQm8pXVbMicr4U0IRsOascthVI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 매드슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Blonde / Vic Vega', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 500 AND a.name = '마이클 매드슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2969, '크리스 펜', '/9yvXUh10ZVSapGuem5daebveqR4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 펜');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '"Nice Guy" Eddie Cabot', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 500 AND a.name = '크리스 펜';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 884, '스티브 부세미', '/n0pZumkrcZrAPMoPq684RhYnjPV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스티브 부세미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Pink', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 500 AND a.name = '스티브 부세미';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 138, '쿠엔틴 타란티노', '/1gjcpAa99FAOWGnrUvHEXXsRs7o.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '쿠엔틴 타란티노');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 500 AND d.name = '쿠엔틴 타란티노';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/a6hUyPLPEGgm5wBzjPs7fyqqaM0.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 500;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jqFjgNnxpXIXWuPsyfqmcLXRo9p.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 500;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (666, '중앙역', '1998-11-20', '', '글을 모르는 사람들을 대신해 편지를 써주는 것으로 생계를 이어가는 초로의 전직 여교사 도라는 어느 날 안나와 그 아들의 부탁을 받는다. 아버지에게 보낼 편지를 써달라는 부탁을 받고 도라가 잠시 역을 나선 순간 안나가 그만 차에 치여 사망한다. 도라는 갑자기 엄마를 잃은 아이를 어쩌지 못해 아이의 아버지를 찾기 위한 여행을 떠난다. 베를린영화제에서 최우수 작품상과 여우주연상을 받은 작품으로, 월터 살레스는 도라와 아이의 여정을 통해 브라질의 현실을 보여준다. 원주민들의 모습, 순례와 축제, 황량하고 마른 땅과 한없이 뻗은 신작로 등 브라질의 풍광을 배경으로 영화는 도라와 아이 사이에 싹트는 인간에 대한 사랑을 전달한다. 살레스는 반문맹인 여성 장기수와 저명한 조각가 사이에 오랜 세월 주고받은 편지를 기초로 만든 자신의 다큐멘터리 <또다른 어떤 곳의 삶>에서 <중앙역>의 아이디어를 떠올렸고 아이 역을 맡은 배우는 리우 공항에서 구두닦이를 하던 소년이었다.', 110, '12', 'RELEASED', 16.834000, 8.121000, 5596708, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 666 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10055, '페르난다 몬테네그루', '/bja0rn1BjAnA5Z5VbEvL2apvMT5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '페르난다 몬테네그루');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Isadora "Dora" Teixeira', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 666 AND a.name = '페르난다 몬테네그루';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10059, 'Vinícius de Oliveira', '/olMuhlR9hoGO35m6jnD7VvonSeO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Vinícius de Oliveira');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Josué Fontenele de Paiva', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 666 AND a.name = 'Vinícius de Oliveira';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10057, 'Marília Pêra', '/aumgSFLIRN3iJ9HChsBQLEFggQ7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marília Pêra');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Irene', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 666 AND a.name = 'Marília Pêra';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10061, 'Othon Bastos', '/cKZos1GKCQNHbaUqa9byGGl90rq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Othon Bastos');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'César', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 666 AND a.name = 'Othon Bastos';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10062, 'Otávio Augusto', '/rLtfa3Q92dQ60YtH7iJc10ISJAY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Otávio Augusto');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pedrão', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 666 AND a.name = 'Otávio Augusto';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 8574, '월터 살레스', '/nWkafFHVMyvTdurkvxNpKALXbqL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '월터 살레스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 666 AND d.name = '월터 살레스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/20gvOww3EDFaDZyNowVGAHtXo0H.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 666;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lrLIy9OFRQg4VkhrCyolfNXJEUH.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 666;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (280, '터미네이터 2: 심판의 날', '1991-07-03', '인간과 기계의 대전쟁. 그를 지키지 않으면 미래 또한 없다', '미래, 인류와 기계의 전쟁은 계속 되는 가운데 스카이넷은 인류 저항군 사령관 존 코너를 없애기 위해 액체 금속형 로봇인 T-1000(로버트 패트릭)을 과거의 어린 존 코너에게로 보낸다. 형태의 변신과 자가 치유까지 가능한 T-1000에 대항하고 존 코너를 지키기 위해 인류 저항군은 T-101(아놀드 슈왈제네거)을 과거로 급파한다. 미래의 인류 운명을 쥔 어린 존 코너, 그를 구해내지 않으면 인류의 미래는 없다. 반드시 제거해야 하는 스카이넷의 T-1000은 거침없이 존 코너 일행을 위협하며 숨가쁜 추격을 시작하는데...', 156, '15', 'RELEASED', 98.517000, 8.100000, 520000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 280 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 280 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 280 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1100, '아널드 슈워제네거', '/z6IbTtI2FWAVZE6b1V4mqEHjwO6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아널드 슈워제네거');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Terminator', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 280 AND a.name = '아널드 슈워제네거';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2713, '린다 해밀턴', '/ybthFm1aatOct2FVD7DrfC0Dq5B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '린다 해밀턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sarah Connor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 280 AND a.name = '린다 해밀턴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 820, '에드워드 펄롱', '/e221dMIBgb6Lk092GIkHB9ohQF1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에드워드 펄롱');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'John Connor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 280 AND a.name = '에드워드 펄롱';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 418, '로버트 패트릭', '/qRv2Es9rZoloullTbzss3I5j1Mp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 패트릭');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'T-1000', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 280 AND a.name = '로버트 패트릭';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2716, 'Earl Boen', '/nRAlyqkAA84gCTDwjFR77avdfHK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Earl Boen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Silberman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 280 AND a.name = 'Earl Boen';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2710, '제임스 카메론', '/9NAZnTjBQ9WcXAQEzZpKy4vdQto.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '제임스 카메론');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 280 AND d.name = '제임스 카메론';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/nDVUiEqoeXaDQuM81KkUVNviYIm.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 280;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vINgGecnz95iDL6fjQMARDsocgG.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 280;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (55823, 'La grande guerra', '1959-10-28', '', '', 137, '', 'RELEASED', 10.400000, 8.119000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 55823 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 55823 AND g.name = '전쟁';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 55823 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12259, 'Vittorio Gassman', '/eIcPpL8OlAMlIr9ZMvFTY7ni7LX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Vittorio Gassman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Giovanni Busacca', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 55823 AND a.name = 'Vittorio Gassman';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 45982, 'Alberto Sordi', '/rJhtlCbXFizYE6yW4GmJND45MX7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alberto Sordi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Oreste Jacovacci', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 55823 AND a.name = 'Alberto Sordi';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12520, '실바나 망가노', '/wS40j2uCvA0LenVP8MEhitetnfA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '실바나 망가노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Costantina', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 55823 AND a.name = '실바나 망가노';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2568, 'Folco Lulli', '/gfVZNKsHiLB9ihdBluvirsH0Pd7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Folco Lulli');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bordin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 55823 AND a.name = 'Folco Lulli';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 24379, 'Bernard Blier', '/6xRHGb7CNDa83rcTzCp3LeIvU2s.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bernard Blier');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Capitano Castelli', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 55823 AND a.name = 'Bernard Blier';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 32375, 'Mario Monicelli', '/rNa6Y3aCqQ0rVnQpr1JUfyPNPUV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Mario Monicelli');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 55823 AND d.name = 'Mario Monicelli';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rLSFHeCJWyoDf50VHsdyceLxQ3l.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 55823;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fcH7FM74GoHgOUnKjpGAoKOxWvY.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 55823;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (19, '메트로폴리스', '1927-02-06', '', '풍요로운 삶을 누리는 지상세계의 프레더는 어느날 마리아를 통해 지하 세계의 비참한 생활상을 알게된다. 프레더는 그의 아버지 프레드슨에게 노동자들의 삶을 개선해 줄 것을 요청하지만 거절당한다. 한편 마리아가 주도하는 지하 세계의 집회를 목격한 프레드슨은 로트왕에게 마리아와 똑같은 로봇을 만들어 지하세계의 노동자들을 교란할 것을 명령하는데...', 148, '', 'RELEASED', 22.138000, 8.100000, 1350322, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 19 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 19 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 74, 'Gustav Fröhlich', '/bkjDaorTT3LcOeTcQF1TDpBlHwt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gustav Fröhlich');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Freder Fredersen', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 19 AND a.name = 'Gustav Fröhlich';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 75, 'Brigitte Helm', '/a7mwxoeF34BCxmteoHQSB1ENth0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Brigitte Helm');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maria / The Machine Man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 19 AND a.name = 'Brigitte Helm';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 73, 'Alfred Abel', '/dGk5r64zQZVHplTwRDZGpNkoCjc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alfred Abel');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Johann ''Joh'' Fredersen', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 19 AND a.name = 'Alfred Abel';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 77, 'Rudolf Klein-Rogge', '/fbP75fGfXFQlkf3Q5oHbJ4wjG1g.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rudolf Klein-Rogge');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'C.A. Rotwang', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 19 AND a.name = 'Rudolf Klein-Rogge';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 79, 'Theodor Loos', '/4NYdHddN0cg4598XOsRXiFlwulg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Theodor Loos');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Josaphat', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 19 AND a.name = 'Theodor Loos';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 68, '프리츠 랑', '/z02YZggZD0YP7nBG5PGHZncacXm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '프리츠 랑');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 19 AND d.name = '프리츠 랑';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vODOVn29fr0nLF9MVfpfKDcxuXF.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 19;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/eeMoFKxjjiCi6iep2GEZtSAMYIr.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 19;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (100, '록 스탁 앤 투 스모킹 배럴즈', '1998-08-28', '통쾌한 폭력, 터지는 웃음, 골때리는 반전!', '베이컨(제이슨 스테덤), 소프(덱스터 플렛쳐), 톰(제이슨 플레밍)과 에디(닉 모란) 패거리는 포르노 거물 해리가 여는 포커판에 끼려는 에디에게 가진 돈을 모두 준다. 그러나 이길 줄 알았던 에디가 졌을 뿐만 아니라 해리에게 빚까지 지게 된다. 일주일 안에 돈을 갚지 않으면 손가락이 잘릴 위기에 처한 에디는 대마초 패거리를 털려는 덕의 계획을 알고 덕 일당의 돈을 뺏기로 한다. 덕 일당이 돈과 대마초를 털어오자 집에서 기다린 에디 일당이 돈과 대마초를 빼앗는다. 에디 일당은 해리에게 빚을 갚고 대마초를 팔아 돈을 챙기기만 하면 된다고 기뻐하지만...', 105, '18', 'RELEASED', 13.438000, 8.100000, 28356188, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 100 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 100 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 980, '비니 존스', '/tkYWG9gY2QpoBfOh4OWNz8yQfsw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '비니 존스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Big Chris', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 100 AND a.name = '비니 존스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 973, '제이슨 플레밍', '/nYl0180ACnLzVlGbaAfuPtdGr9K.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이슨 플레밍');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tom', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 100 AND a.name = '제이슨 플레밍';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 974, '덱스터 플레처', '/yRI8MDB5sg8b8EZkzFz5cCBrnKL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '덱스터 플레처');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Soap', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 100 AND a.name = '덱스터 플레처';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 975, 'Nick Moran', '/kfWebCAm72JBZLXcNbA2Myr950E.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nick Moran');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eddy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 100 AND a.name = 'Nick Moran';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 976, '제이슨 스타뎀', '/whNwkEQYWLFJA8ij0WyOOAD5xhQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이슨 스타뎀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bacon', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 100 AND a.name = '제이슨 스타뎀';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 956, '가이 리치', '/9pLUnjMgIEWXi0mlHYzie9cKUTD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '가이 리치');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 100 AND d.name = '가이 리치';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pmnmU1BVt58y2HLyvWFYnC3F6ma.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 100;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/cXQH2u7wUIX1eoIdEj51kHXoWhX.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 100;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (38288, '“I Corti” di Aldo, Giovanni & Giacomo', '1996-03-29', '', '', 120, '', 'RELEASED', 6.599000, 8.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 38288 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 120019, 'Aldo Baglio', '/uMbVlHKaEHdZI94ISGPjB138gvA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Aldo Baglio');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Aldo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 38288 AND a.name = 'Aldo Baglio';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 120025, 'Giacomo Poretti', '/d5No2ooCX78hqVvSvLenXN15La0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Giacomo Poretti');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Giacomo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 38288 AND a.name = 'Giacomo Poretti';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 120020, 'Giovanni Storti', '/qbE8gq3aN7Ouf0NfU7fAUFiorIC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Giovanni Storti');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Giovanni', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 38288 AND a.name = 'Giovanni Storti';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7543, 'Marina Massironi', '/ekKgiwlhYTJwVPtmgtZxQY4BgjG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marina Massironi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marina', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 38288 AND a.name = 'Marina Massironi';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 32245, 'Arturo Brachetti', '/fRZGnEH4xcg9qJRUy92jSaPlVeF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Arturo Brachetti');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 38288 AND d.name = 'Arturo Brachetti';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/y3hEulMYSTQuvmI5jBTyWrcvJQX.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 38288;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mFVGzW8a2Z37NphnuB6liChiuRv.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 38288;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (935, '닥터 스트레인지러브', '1964-01-29', '영화사상 가장 빛나는 블랙코미디', '미 공군의 잭 리퍼 장군은 공산주의자들이 미국인의 신성한 혈통을 오염시킬 음모를 꾸미고 있다는 망상에 사로잡혀 핵폭격기를 출격시킨다. 미국 대통령은 절대절명의 위기를 해결 하기 위해 자문회를 소집하는데, 그 자리에서 소련 대사는 만일 소련이 핵공격을 당한다면 지구상의 모든 동식물이 파멸되는 운명의 날이 다가오게 될 것이라고 경고한다. 전 나치주의자였던 천재 과학자 스트레인지러브 박사는 핵무기에 지구의 운명이 달려있다는 사실이 너무 명백하므로 핵무기로 상황을 대응할 수 없다는 결론을 내린다. 과연 폭격기는 제 시간에 제거될 수 있을 것인가? 아니면 잭 리퍼 장군이 전세계를 파멸시키는데 성공 할 것인가?', 95, '', 'RELEASED', 59.170000, 8.100000, 9500000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 935 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 935 AND g.name = '전쟁';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12446, 'Peter Sellers', '/tdgIIb5HQJ4cgiEssuhJc89He11.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Peter Sellers');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Group Capt. Lionel Mandrake / President Merkin Muffley / Dr. Strangelove', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 935 AND a.name = 'Peter Sellers';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 862, 'George C. Scott', '/1dL9hx7nC0cACIVpp6xS1jqJJN7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'George C. Scott');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'General "Buck" Turgidson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 935 AND a.name = 'George C. Scott';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3088, '스털링 헤이든', '/eRKaKeHjMKjNPOuENLccfVuyfVm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스털링 헤이든');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brigadier General Jack D. Ripper', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 935 AND a.name = '스털링 헤이든';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4966, 'Keenan Wynn', '/bO88300vMddcIXuRZvMm5QLXdr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Keenan Wynn');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Colonel Bat Guano', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 935 AND a.name = 'Keenan Wynn';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 14253, 'Slim Pickens', '/k4gIlBO0kGjibi8b4cPXIsPTjx0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Slim Pickens');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Major "King" Kong', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 935 AND a.name = 'Slim Pickens';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 240, '스탠리 큐브릭', '/yFT0VyIelI9aegZrsAwOG5iVP4v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '스탠리 큐브릭');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 935 AND d.name = '스탠리 큐브릭';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2VrsnlM63ab3oAuMt3XOnbGYMY6.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 935;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sTp8K0SfcC2RQef1Tu160z3niHO.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 935;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (843, '화양연화', '2000-09-29', '느리지만 진한, 드러나진 않지만 깊은 사랑', '홍콩의 지역 매일 신문 편집장인 초 모완, 수출회사의 비서로 근무하는 수 리첸. 둘은 상하이 지역의 한 건물로 같은 날 이사하게 된다. 이사 날부터 의도치 않게 오가며 자주 부딪히게 되는 두 사람. 둘 다 가정이 있지만 어쩐지 배우자들은 자리를 비우는 날이 더 많고 두 사람의 외로움은 서로에게 낯설지 않게 다가와 둘을 가깝게 한다. 두 사람은 점점 감정이 깊어질수록 겉으로는 더욱 조심스러워지고 예견되어 있는 이별 앞에 마음이 혼란스럽고, 서로의 자리에서 마음으로 바라는 그들의 사랑은 애절하기만 하다.', 97, '', 'RELEASED', 23.611000, 8.117000, 14204632, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 843 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 843 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1337, '양조위', '/q7epM4SkAWOSyeMqFHxSZ360eU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '양조위');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chow Mo-Wan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 843 AND a.name = '양조위';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1338, '장만옥', '/gA9SXA1EKqGwlrfciPZb9U0enpI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '장만옥');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Su Li-zhen - Mrs. Chan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 843 AND a.name = '장만옥';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12462, 'Rebecca Pan', '/fbFl1uGb5Uo2FPA5S5jvgGevHYE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rebecca Pan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mrs. Suen', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 843 AND a.name = 'Rebecca Pan';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12463, 'Kelly Lai Chen', '/6RrS6v8ayfdLFSTSOK7BhKZRKXr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kelly Lai Chen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Ho', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 843 AND a.name = 'Kelly Lai Chen';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12674, 'Siu Ping-lam', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Siu Ping-lam');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ah Ping', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 843 AND a.name = 'Siu Ping-lam';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 12453, '왕가위', '/9bxY6wXvuEUvK9LgdBbfGbwOinC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '왕가위');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 843 AND d.name = '왕가위';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mjkr1IamzDiL5mLIbnuhiYOXLqg.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 843;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/n4GJFGzsc7NinI1VeGDXIcQjtU2.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 843;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (762975, '퍼플 하트', '2022-07-29', '', '파병이 예정된 해병대원과 위장 결혼을 한 뮤지션 지망생. 가짜였던 둘의 관계는 비극으로 인해 어느새 진심이 되어버린다.', 122, '', 'RELEASED', 75.168000, 8.115000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 762975 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 762975 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1331457, '소피아 카슨', '/v6N7ZrwG7C7fII2hOzfzPFNMtK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '소피아 카슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cassie Salazar', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762975 AND a.name = '소피아 카슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1425934, '니콜라스 갈리친', '/hG4rH7eBMs117746bBOd8fUa4PA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '니콜라스 갈리친');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Luke Marrow', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762975 AND a.name = '니콜라스 갈리친';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1382755, 'John Harlan Kim', '/syCWEzV2zFYdYV6Kk4ebTgjGWFK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'John Harlan Kim');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Toby', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762975 AND a.name = 'John Harlan Kim';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1643043, 'Chosen Jacobs', '/uMmg0hSYO65B4m0fJN3aDvXw8tw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Chosen Jacobs');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frankie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762975 AND a.name = 'Chosen Jacobs';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1496755, 'Anthony Ippolito', '/jtcr1ln5QcNWwLvVNlHYOM6zGGN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Anthony Ippolito');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Johnno', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762975 AND a.name = 'Anthony Ippolito';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1223175, 'Elizabeth Allen Rosenbaum', '/zr1e4DoXsENXlb6SyG0I8IVceoW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Elizabeth Allen Rosenbaum');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 762975 AND d.name = 'Elizabeth Allen Rosenbaum';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bETrhE8ALy0fmfpG0j7ek6Da4Or.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 762975;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/iQlJyRecJeGGzQGT2rEcyAgz89F.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 762975;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (996, '이중 배상', '1944-07-06', '', '보험사 직원인 월터는 고객 관리를 위해 디트리히슨의 집을 방문한다. 디트리히슨의 아내 필리스를 만나게 된 월터는 그녀의 매력에 곧 빠져들고, 남편을 살해할 음모를 품고 있는 필리스의 유혹에 쉽게 넘어간다. 결국 월터와 필리스는 사고를 가장해 남편을 살해하는데, 머지 않아 그녀의 어두운 과거가 드러난다.', 107, '', 'RELEASED', 18.761000, 8.100000, 2500000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 996 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 996 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4091, 'Fred MacMurray', '/lxxixlFMNH0JuA9K0K3mJmigYcc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Fred MacMurray');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Walter Neff', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 996 AND a.name = 'Fred MacMurray';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 14974, '바바라 스탠윅', '/xBfikc66lCnShogMZX1k9cV7H26.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '바바라 스탠윅');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Phyllis Dietrichson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 996 AND a.name = '바바라 스탠윅';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 13566, 'Edward G. Robinson', '/UkZdBmDs7Qw8caX7PlF1Spk8kR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Edward G. Robinson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Barton Keyes', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 996 AND a.name = 'Edward G. Robinson';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 14975, 'Porter Hall', '/249Hlfx23i69MsA3rLnC185kbwT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Porter Hall');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Jackson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 996 AND a.name = 'Porter Hall';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 14976, 'Richard Gaines', '/qTap65x0jLOgyM0jxC3BPG83TEN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Richard Gaines');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Edward S. Norton Jr.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 996 AND a.name = 'Richard Gaines';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 3146, '빌리 와일더', '/tfVte6h2dlLn59Q0Mi6AvWAyRLP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '빌리 와일더');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 996 AND d.name = '빌리 와일더';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bNCTRXJjPvVsh71nwo6kcFzUZvh.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 996;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/r4XmJaGLFLPsaydsIdEXmvqG0Pq.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 996;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (411088, '인비저블 게스트', '2017-01-06', '사라진 범인을 찾아라', '의문의 습격으로 살해 당한 ‘로라’ ‘아드리안’은 연인의 죽음에 절망하고, 범인은 흔적도 없이 사라졌다.  유력한 용의자로 누명을 쓴 ‘아드리안’은 승률 100%의 변호사 ‘버지니아’를 선임한다.  그리고 자신의 무죄를 입증하기 위해 고군분투하던 중  과거 그와 ‘로라’가 은폐한 교통사고와 숨겨진 연관성을 찾게 되는데…  남은 시간은 단 3시간, 사건을 재구성해 무죄를 입증해야 한다!', 107, '15', 'RELEASED', 47.122000, 8.114000, 30000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 411088 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 411088 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 411088 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 82700, 'Mario Casas', '/dqXRFhBB4OJQSWonymV8BfVghds.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mario Casas');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Adrián Doria', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 411088 AND a.name = 'Mario Casas';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 34053, 'Ana Wagener', '/y6sAOhd5OlKQLEXBdcCgJnvANoc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ana Wagener');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elvira', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 411088 AND a.name = 'Ana Wagener';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 110129, 'Jose Coronado', '/AhtaiM5tLUtUGzPplm3toeCQKC4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jose Coronado');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tomás Garrido', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 411088 AND a.name = 'Jose Coronado';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 724188, 'Bárbara Lennie', '/pEiyonuiZbpkpfdGf5inWQ8Tr1h.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bárbara Lennie');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Laura Vidal', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 411088 AND a.name = 'Bárbara Lennie';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 28509, 'Francesc Orella', '/ytUgaou1XcuAG6U6HXEFROBegTv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Francesc Orella');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Félix Leiva', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 411088 AND a.name = 'Francesc Orella';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1051305, 'Oriol Paulo', '/mzX2gRv33Yo2T6Nq5iLgBWurlXw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Oriol Paulo');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 411088 AND d.name = 'Oriol Paulo';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1bS5Do7dmOzda4nSIUU4PAgDCgV.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 411088;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1ZSWFzAP4AZuFCigZZoib2RdcUO.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 411088;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (531428, '타오르는 여인의 초상', '2019-09-18', '후회하지 말고 기억해', '1770년, 젊은 화가 마리안느는 밀라노 귀족과 결혼을 앞둔 여인 엘로이즈의 초상화를 그려달라는 백작 부인의 의뢰를 받고 엘로이즈가 머무는 외딴섬의 영지에서 며칠간 머물게 된다. 마리안느는 엘로이즈가 초상화 그리는 걸 싫어한다는 이유 때문에 화가라는 신분을 숨기고 접근한다. 마리안느는 엘로이즈의 이목구비를 눈에 담기 위해 매일 산책에 동행하면서 그녀가 지닌 아픔을 어루만져주고 친분도 쌓는다. 어쨌든 그녀는 엘로이즈의 결혼을 종용하는 도구로 사용될 초상화 완성에 매진해야 한다.', 121, '', 'RELEASED', 42.702000, 8.100000, 9923127, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 531428 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 531428 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 531428 AND g.name = '역사';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1385600, '노에미 메를랑', '/ee0h2Igx14bYg7JeSDETa72aCbm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '노에미 메를랑');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marianne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 531428 AND a.name = '노에미 메를랑';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 68816, '아델 에넬', '/uf2BVprWBZB7hxv0lj1RO48EDEZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아델 에넬');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Héloïse', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 531428 AND a.name = '아델 에넬';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1442550, 'Luàna Bajrami', '/iBzMJpbrOEKTQooyCOgoKrTW8Hi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Luàna Bajrami');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sophie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 531428 AND a.name = 'Luàna Bajrami';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3124, '발레리아 골리노', '/bLw0lNPEhICtbTLtnTswamefN7C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '발레리아 골리노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Countess', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 531428 AND a.name = '발레리아 골리노';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 96295, 'Christel Baras', '/lZdOrS1y7ADRm99GCl05vpV8zLF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Christel Baras');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Angel Maker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 531428 AND a.name = 'Christel Baras';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 68813, '셀린 시아마', '/j35wQETDUc6CdzIgbKWkeahlTlG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '셀린 시아마');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 531428 AND d.name = '셀린 시아마';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/M0mm1VGMZRa6eRzgoZmYW9zPd8.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 531428;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/foFq1RZWQIgFuCQ0nyYccywjFyX.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 531428;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (46738, '그을린 사랑', '2010-09-17', '한 여인의 약속으로 시작된 위대한 여정', '쌍둥이 남매인 잔느와 시몽은 어느 날 갑자기 의식을 잃은 어머니 나왈의 유언을 전해 듣고 혼란에 빠진다. 유언의 내용은 죽은 줄로만 알았던 생부와 존재조차 몰랐던 형제를 찾아 자신이 남긴 편지를 전해달라는 것. 또한 편지를 전하기 전까지는 절대 장례를 치르지 말라는 당부도 함께 담겨있다.  시몬은 유언을 따르길 거부하지만 진실이 궁금한 잔느는 지도교수의 도움을 얻어 중동에 있는 어머니의 고향으로 떠난다. 베일에 싸여 있던 그녀의 과거와 마주한 잔느. 어둠 속에 묻혀 있던 어머니의 과거의 끝에는 충격적인 진실이 기다리고 있는데...', 130, '', 'RELEASED', 37.310000, 8.109000, 6788659, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 46738 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 46738 AND g.name = '전쟁';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 46738 AND g.name = '미스터리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 77498, '루브나 아자발', '/qjsoXqKJPnmoMs1eyeTLBKKShYQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루브나 아자발');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nawal', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 46738 AND a.name = '루브나 아자발';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 84573, 'Mélissa Désormeaux-Poulin', '/7x7zC75SRwSlEGPfYpwexB76ODE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mélissa Désormeaux-Poulin');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jeanne Marwan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 46738 AND a.name = 'Mélissa Désormeaux-Poulin';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 88592, 'Maxim Gaudette', '/iGFDGJmGUxLOSIamTENFDecJdkA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Maxim Gaudette');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Simon Marwan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 46738 AND a.name = 'Maxim Gaudette';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 38526, 'Rémy Girard', '/enULDDsKvyNoUCZoFg10Mtq1MFk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rémy Girard');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Notary Lebel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 46738 AND a.name = 'Rémy Girard';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 196737, 'Allen Altman', '/5oWrQwH4Xx243Nk3XdNnKiekEw4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Allen Altman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Notaire Maddad', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 46738 AND a.name = 'Allen Altman';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 137427, '드니 빌뇌브', '/zdDx9Xs93UIrJFWYApYR28J8M6b.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '드니 빌뇌브');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 46738 AND d.name = '드니 빌뇌브';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4j6AFF9Na494nJUMgMlR2tDKhTc.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 46738;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aFmoJntgDPR0Jd8XD1ZfFSmcqMg.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 46738;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (655, '파리, 텍사스', '1984-07-16', '', '멕시코와 미국의 접경 지역 부근, 텍사스주의 어느 황량한 마을에 탈진한 듯 보이는 한 남자가 걸어온다. 그의 이름은 트래비스. 의식을 잃은 트래비스의 소지품에서 월트란 이름을 발견한 의사는 연락을 취하게 되고, 캘리포니아주 로스앤젤레스에서 살던 동생 월트가 형인 트래비스를 데리러 온다. 4년 만에 소식을 접한 월트는 병원에서 말 없이 사라진 형을 바로 찾아내지만, 형은 계속 침묵으로만 일관한다. 그동안 형의 아들인 헌터를 맡아 기르던 월터와 그의 아내 앤은 헌터가 트래비스를 아버지로 인정할 수 있게 최선을 다하지만, 다른 한편으로는 기른 정에 얽매여 헌터를 잃게 되진 않을까 우려한다.  월트는 형이 텍사스에서 헌터의 엄마, 제인과 살다가 왜 갑자기 헤어지게 됐는지 털어놓지 않자 답답해하고, 트래비스는 앤으로부터 제인이 헌터에게 매달 정기적으로 송금해오는데, 휴스턴의 한 은행을 이용하고 있다는 애기를 듣고 직접 찾아보기로 결심하는데..', 145, '15', 'RELEASED', 43.700000, 8.100000, 2181987, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 655 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5048, '해리 딘 스탠턴', '/197UiLVdxPOv8196sqmUpJzOQB5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '해리 딘 스탠턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Travis', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 655 AND a.name = '해리 딘 스탠턴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2630, '나스타샤 킨스키', '/1o5i8C3eX612uky7fAI3YMGnaDF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나스타샤 킨스키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jane', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 655 AND a.name = '나스타샤 킨스키';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 923, 'Dean Stockwell', '/xvOH29js4UnZ8MUy3IyNc9Gq0U5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Dean Stockwell');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Walt', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 655 AND a.name = 'Dean Stockwell';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 9892, 'Hunter Carson', '/75DvinRibsEYKDasdBM7iiqJ9L9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Hunter Carson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hunter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 655 AND a.name = 'Hunter Carson';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 9893, 'Aurore Clément', '/cFkUc4AUCdy82IpzPgMVeK3N1rc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Aurore Clément');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 655 AND a.name = 'Aurore Clément';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2303, '빔 벤더스', '/AbqrYglSgaMfetQAeqdHaqiPSof.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '빔 벤더스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 655 AND d.name = '빔 벤더스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tgw3TJTWgNUYCgL5Pa546VVVvSU.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 655;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/moTOuNKnM2phZCYPF49Y1Hb7WJj.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 655;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (20532, '산쇼다유', '1954-03-31', '', '여행 중 인신매매범의 손에 걸려 모친과 헤어지게 된 주시오와 안주의 오누이는 호족 산쇼다유에게 팔리게 된다. 노예나 다름없게 된 이 두 사람은 중노동에 시달리면서도 모친과의 재회를 꿈꾸며 하루하루를 보낸다. 그로부터 십년 후 여전히 산쇼다유의 수용소에 갇혀있는 이들은 어느 날 새로 들어온 젊은 여인이 부르는 노래에 자신들의 이름이 들어있는 것을 알고는 깜짝 놀란다. 인신매매가 횡행하는 헤이안 시대를 배경으로 부모 자식 간의 애정 그리고 인신매매 등의 인권 문제를 그리고 있는 작품으로, 단순한 이슈로서의 사회성을 인간 조건의 비극성에까지 끌고 간 걸작이다.', 124, '', 'RELEASED', 10.329000, 8.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 20532 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 24551, '다나카 기누요', '/nskS7uwOMcveEpnn3HE73mVzQCn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다나카 기누요');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tamaki', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 20532 AND a.name = '다나카 기누요';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 122429, '花柳喜章', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '花柳喜章');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zushiô', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 20532 AND a.name = '花柳喜章';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 34374, '카가와 쿄코', '/q47wPwySJvhj6HQoYb7ON1TjbcV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카가와 쿄코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anju', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 20532 AND a.name = '카가와 쿄코';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 122430, '進藤英太郎', '/18A6oRcQeUgFQFhsEC1qa3Vky7n.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '進藤英太郎');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sanshô dayû', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 20532 AND a.name = '進藤英太郎';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 134263, '菅井一郎', '/eP2AnYLxj5tMRNM5wkf4t5gnwcI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '菅井一郎');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Minister of Justice', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 20532 AND a.name = '菅井一郎';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 97202, '미조구치 겐지', '/ngKRZZPKh8d7GaeMgcM0eXbzMte.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '미조구치 겐지');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 20532 AND d.name = '미조구치 겐지';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hoOyEvuGKw8CVXTCX6PPYlwrAaZ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 20532;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/175gL8LrNt9QfKwLzWn179AYvo.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 20532;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (664767, '모탈 컴뱃 레전드: 스콜피온의 복수', '2020-04-12', '', '한 세대에 한 번 꼴로 개최되는 외계와 지구의 챔피언들 간의 토너먼트를 통해 세계의 운명을 결정짓게 되는 이야기. 지구의 수호자인 라이덴 경은 지구에서 가장 강력한 파이터들을 모아 최후의 대결인, 모탈 컴뱃에서 사악한 빌런 상췡으로부터 지구를 지켜야 하는데...', 80, '', 'RELEASED', 79.096000, 8.101000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 664767 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 664767 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 664767 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 939345, 'Patrick Seitz', '/dIAUmfTbC4duex4lRV5ET7JEQhs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Patrick Seitz');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hanzo Hasashi / Scorpion (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 664767 AND a.name = 'Patrick Seitz';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1231115, 'Jordan Rodrigues', '/7g9T47nMfC29itacF4bIhcaBJTh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jordan Rodrigues');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Liu Kang (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 664767 AND a.name = 'Jordan Rodrigues';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 53828, 'Jennifer Carpenter', '/haxhKRJoWl71dAUWMLlDIaSd5bN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jennifer Carpenter');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sonya Blade (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 664767 AND a.name = 'Jennifer Carpenter';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 74949, '조엘 맥헤일', '/7iwIiaYhIPaiAyiaZOc2Gl1ZAY4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조엘 맥헤일');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Johnny Cage (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 664767 AND a.name = '조엘 맥헤일';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1620226, 'Ike Amadi', '/xsv09XrYPk5bdY3cAUwKqJnraxC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ike Amadi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jax Briggs (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 664767 AND a.name = 'Ike Amadi';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 204553, '이선 스폴딩', '/wLTbLnSJ1jnjA2YOHOPqz2g0XNe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '이선 스폴딩');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 664767 AND d.name = '이선 스폴딩';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4VlXER3FImHeFuUjBShFamhIp9M.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 664767;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vw3zNfzvnVNF7nIjpiEgcdznfeC.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 664767;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (24382, '마돈나 거리에서 한탕', '1958-07-26', '', '한 밤에 자동차를 훔치다 현장에서 검거된 코지모는 구치소에 수감되었다가 그곳에 수감된 다른 죄수로부터 마돈나 거리에 있는 전당포를 털 수 있는 방법을 알게 된다. 한탕에 대한 욕심으로 안달이 난 코지모는 자신 대신 죄를 뒤집어쓰고 형을 살아줄 사람으로 삼류 복서인 페페를 매수하는데 이들의 공모를 눈치 챈 경찰은 코지모와 페페를 교도소에 수감한다. 집행유예를 선고받은 페페는 3년형을 선고받은 것처럼 꾸며 코지모에게 동정심을 유발시켜 그로부터 마돈나 거리에서 한탕에 대한 상세한 비밀을 듣게 되고, 출소하여 좀도둑 마리오, 사진사 티베리오, 시칠리 출신의 미켈레, 그리고 나이 먹고 주책없는 늙은 남자와 코지모의 정부, 페페까지 여섯 명이 모여 전당포를 털 계획을 세우던 중 코지모가 출소를 하게 되는데...', 106, '', 'RELEASED', 8.232000, 8.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 24382 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 24382 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12259, 'Vittorio Gassman', '/eIcPpL8OlAMlIr9ZMvFTY7ni7LX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Vittorio Gassman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Peppe il pantera', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 24382 AND a.name = 'Vittorio Gassman';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 27442, 'Renato Salvatori', '/z6RqHnK5OpmLNDT4wRV3WkM83FM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Renato Salvatori');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mario Angeletti', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 24382 AND a.name = 'Renato Salvatori';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12341, 'Memmo Carotenuto', '/22yOc8UbcpwNXtxUUgD8C7LwMci.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Memmo Carotenuto');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cosimo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 24382 AND a.name = 'Memmo Carotenuto';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 91543, 'Rossana Rory', '/cOm2323wuX2jRKJAmPiXnH91XIX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rossana Rory');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Norma', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 24382 AND a.name = 'Rossana Rory';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 91544, 'Carla Gravina', '/fKzCYbOwExmpFNwkVfFChPps2xg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Carla Gravina');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nicoletta', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 24382 AND a.name = 'Carla Gravina';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 32375, 'Mario Monicelli', '/rNa6Y3aCqQ0rVnQpr1JUfyPNPUV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Mario Monicelli');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 24382 AND d.name = 'Mario Monicelli';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hAREIg0yrGml3oUJAcY8ZkoK24i.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 24382;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ryoWP1kvNcwPif6uNbuZwQfrJPy.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 24382;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (149871, '가구야공주 이야기', '2013-11-23', '별보다 매혹적인 그녀의 사랑과 꿈', '깊은 산속 마을의 할아버지는 우연히 빛나는 대나무 속에서 여자 아이를 발견하고 집으로 데려온다. 손바닥 위에 올라갈 정도의 크기에서 금세 아기로, 그리고 또 반나절 만에 아름다운 소녀로 성장하는 신비로운 아이. 가구야라고 이름 지어진 그녀의 미모는 널리 소문이 퍼져, 장안의 내로라 하는 귀공자 5명이 청혼을 해 오는가 하면, 급기야 황제까지 가구야에게 관심을 보이기 시작한다. 하지만 가구야는 산속 마을에서의 첫사랑 스테마루를 잊지 못하고 그를 찾아가 누구에게도 말하지 않았던 비밀을 털어놓는데... 과연 가구야는 그토록 원했던 꿈과 사랑을 이룰 수 있을까?', 137, 'All', 'RELEASED', 42.645000, 8.100000, 24366656, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 149871 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 149871 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 149871 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1115687, '아사쿠라 아키', '/65ZiHTem1HFNx4aHBcqQPdRRsPn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아사쿠라 아키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Princess Kaguya (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 149871 AND a.name = '아사쿠라 아키';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 227629, '치이 타케오', '/eCFyIoJOXRgropVjcfapBIW6XAB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '치이 타케오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Bamboo Cutter (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 149871 AND a.name = '치이 타케오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 70627, '宮本信子', '/7Ikc4hr7n8eRGGBMkirZWvTagRs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '宮本信子');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Bamboo Cutter''s Wife / Narrator (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 149871 AND a.name = '宮本信子';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 120690, '고라 겐고', '/wb293WmYQ7yTAtf3opmhCoTJQfa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '고라 겐고');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sutemaru (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 149871 AND a.name = '고라 겐고';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 90570, '高畑淳子', '/uhrPHnJoBM4kaSKl5NhK120kK8A.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '高畑淳子');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lady Sagami (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 149871 AND a.name = '高畑淳子';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 628, '다카하타 이사오', '/xTkZOWe1VU4xNba1lO0T9trFLHm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '다카하타 이사오');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 149871 AND d.name = '다카하타 이사오';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zcm38w01bnAdRVptcOCuEuRoc3B.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 149871;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/imUJOrtNf8EWameChpaRLXSaX4w.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 149871;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (705, '이브의 모든 것', '1950-11-09', '', '극작가 로이드 리처즈의 아내이자 유명한 연극 배우 마고 체닝의 절친한 친구인 카렌은 체닝의 공연이 있던 어느 날 저녁, 무대 뒤편에서 매력적인 이브란 여인을 만난다. 이브는 카렌에게 자신의 이름과 함께 자신이 마고 체닝의 열렬한 팬이란 사실을 말한다. 이브의 참한 용모와 진솔한 태도에 감명받은 카렌은 이브를 분장실로 데리고 들어가 마고 체닝을 소개시켜주고 이브는 이 자리에서 자신의 지나온 일들을 털어놓는다. 가난했던 어린 시절, 양조장에서의 생활, 사랑하는 남편을 만났으나 전쟁터에서 전사한 얘기, 그리고 우연히 들른 샌프란시스코 극장에서 마고 체닝의 연극을 보고 뉴욕까지 쫓아온 얘기 등 이브의 얘기에 감명을 받은 마고 체닝은 그녀를 자신의 집으로 데려가 비서로 채용하고 이브는 그녀의 스케줄 관리부터 음식에 이르기까지 그녀의 손발이 되어 열심히 일하는데...', 138, '', 'RELEASED', 23.915000, 8.100000, 8400000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 705 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3380, '베티 데이비스', '/uBRNCljWHEG9cW9em2ZyoGWQQN5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '베티 데이비스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Margo Channing', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 705 AND a.name = '베티 데이비스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10606, '앤 백스터', '/hA4sSo73pyAlCfN0Etmu4CkrTZE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앤 백스터');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eve Harrington', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 705 AND a.name = '앤 백스터';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3361, 'George Sanders', '/5tzdY4lCnfbLZU8Wblp5xfjn10B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'George Sanders');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Addison DeWitt', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 705 AND a.name = 'George Sanders';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10607, 'Celeste Holm', '/gZmCGQayug4ZHPEopj7RxGvLKmF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Celeste Holm');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Karen Richards', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 705 AND a.name = 'Celeste Holm';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10608, 'Gary Merrill', '/sMmRlBwu1lS8qJW6t9iRNn8qBxA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gary Merrill');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bill Sampson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 705 AND a.name = 'Gary Merrill';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 10601, '조지프 L. 맹키위츠', '/qfs773ZGMwojZTl0WKM7b7qh8Mu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조지프 L. 맹키위츠');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 705 AND d.name = '조지프 L. 맹키위츠';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6numIZH6uR3NlJgY9m7nGH0jhs.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 705;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9ygnsnkiRp7a97KUGx9nIUjZG5P.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 705;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (239, '뜨거운 것이 좋아', '1959-03-19', '세상에 완벽한 사람은 없다', '색소폰 연주자인 조와 베이스 바이올린 연주자 제리는 갱단의 살인장면을 우연히 목격하게 된다. 얼굴이 노출되고 얼떨결에 갱들에게 쫓기는 신세가 되어 버린 두 사람은 도시를 무사히 빠져나갈 방법을 궁리하게 된다. 유일한 방법은 여자로 변장하고 마이애미로 향하는 여성순회 공연단에 숨어드는 것. 감쪽같이 변장하고 오디션을 통과한 두 사람은 아름다운 여인들과 그야말로 꿈만 같은 생활을 시작하게 된다. 그 중에서도 극단의 리드싱어인 슈가에게 홀딱 반해버린 조는 서서히 그녀와 가까워진다. 조는 그녀가 좋아하는 남성상으로 자신을 위장하고 그녀에게 접근하는데...', 122, '19', 'RELEASED', 28.109000, 8.099000, 25000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 239 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 239 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 239 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3150, '토니 커티스', '/3Tc1n88wtknUU76PIf3I9uNSslP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '토니 커티스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joe (Josephine)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 239 AND a.name = '토니 커티스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3151, '잭 레먼', '/7jWVWLr1VJqQrN3d4YJaATCIHRw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '잭 레먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jerry (Daphne)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 239 AND a.name = '잭 레먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3149, '마릴린 먼로', '/jSjvSEokGPXBIArX2vU2sEgf7ZN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마릴린 먼로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sugar Kane Kowalczyk', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 239 AND a.name = '마릴린 먼로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3152, 'George Raft', '/rTNM6gZpPduQfPb5UrDmYj48ALk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'George Raft');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Spats Colombo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 239 AND a.name = 'George Raft';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3155, 'Pat O’Brien', '/a2io08DZPKgsaM8p9So2LAHOiPn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Pat O’Brien');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Detective Mulligan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 239 AND a.name = 'Pat O’Brien';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 3146, '빌리 와일더', '/tfVte6h2dlLn59Q0Mi6AvWAyRLP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '빌리 와일더');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 239 AND d.name = '빌리 와일더';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kyqoOUfbLsH12POjGBFJ3rBPwsy.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 239;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5zTwAcnI3zCJ0mucPPnoBtkSWEV.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 239;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (38, '이터널 선샤인', '2004-03-19', '지울 수록 특별해 지는 사랑...  다시... 사랑할 수 있을까요?  기억은 지워도 사랑은 지워지지 않습니다...', '조엘은 아픈 기억만을 지워준다는 라쿠나사를 찾아가 헤어진 연인 클레멘타인의 기억을 지우기로 결심한다. 기억이 사라져 갈수록 조엘은 사랑이 시작되던 순간, 행복한 기억들, 가슴 속에 각인된 추억들을 지우기 싫어지기만 하는데... 당신을 지우면 이 아픔도 사라질까요? 사랑은 그렇게 다시 기억된다.', 108, '15', 'RELEASED', 91.768000, 8.099000, 72258126, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 38 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 38 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 38 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 206, '짐 캐리', '/u0AqTz6Y7GHPCHINS01P7gPvDSb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '짐 캐리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joel Barish', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 38 AND a.name = '짐 캐리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 204, '케이트 윈슬렛', '/e3tdop3WhseRnn8KwMVLAV25Ybv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케이트 윈슬렛');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Clementine Kruczynski', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 38 AND a.name = '케이트 윈슬렛';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 205, '커스틴 던스트', '/5dI5s8Oq2Ook5PFzTWMW6DCXVjm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '커스틴 던스트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mary', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 38 AND a.name = '커스틴 던스트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 103, '마크 러팔로', '/5GilHMOt5PAQh6rlUKZzGmaKEI7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마크 러팔로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Stan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 38 AND a.name = '마크 러팔로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 109, '일라이저 우드', '/7UKRbJBNG7mxBl2QQc5XsAh6F8B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '일라이저 우드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Patrick', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 38 AND a.name = '일라이저 우드';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 201, '미셸 공드리', '/1IAnVsl8JgHpUirBXpsbLlWyS1y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '미셸 공드리');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 38 AND d.name = '미셸 공드리';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6HNRo7VYpvM5x5O921bEF2BG7f4.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 38;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/12imOn96zRI2EMHOjOxm2qNY2BA.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 38;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (146233, '프리즈너스', '2013-09-19', '사라진 아이, 그들이 쫓는 범인은 다르다', '한가로운 휴일, 가족과 행복한 시간을 보내던 도버 와 버치 는 자신들의 딸이 실종됐다는 사실을 뒤늦게 알아차린다. 곧바로 형사 로키 와 함께 존스 를 용의자로 지목하지만 그에게서는 어떤 증거도 찾을 수 없다. 완벽한 용의자를 의심하는 아빠는 홀로 그를 쫓기 시작하고, 형사는 세상에 숨겨진 진범을 찾기 위해 추적을 시작한다. 유력한 용의자를 범인이라고 믿는 아빠. 진짜 범인은 따로 있다고 믿는 형사. 각각 다른 방식으로 추적을 시작한 두 사람은 마침내 세상을 충격에 빠트릴 진실과 마주치게 되는데...', 153, '19', 'RELEASED', 95.669000, 8.100000, 122126687, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 146233 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 146233 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 146233 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6968, '휴 잭맨', '/4Xujtewxqt6aU0Y81tsS9gkjizk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '휴 잭맨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Keller Dover', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 146233 AND a.name = '휴 잭맨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 131, '제이크 질런홀', '/rJdYHYNhlcOBwbPvDZVvt1xw7bi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이크 질런홀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Detective Loki', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 146233 AND a.name = '제이크 질런홀';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19492, '비올라 데이비스', '/y6Qq5FP3AlnDDQ5s0cOhOnNFrPh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '비올라 데이비스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nancy Birch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 146233 AND a.name = '비올라 데이비스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 49, 'Maria Bello', '/it1f5mxiGIWO0DzTBfwtLTjphZb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Maria Bello');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Grace Dover', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 146233 AND a.name = 'Maria Bello';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 18288, '테런스 하워드', '/wXWt2NSY23v7DHe2yZQ1C8TikBp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '테런스 하워드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Franklin Birch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 146233 AND a.name = '테런스 하워드';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 137427, '드니 빌뇌브', '/zdDx9Xs93UIrJFWYApYR28J8M6b.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '드니 빌뇌브');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 146233 AND d.name = '드니 빌뇌브';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9IDBwAfNzv4Xa03uhT8ggoxg5py.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 146233;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3RFmTz5h2UuFWEV4oH00XICBR9y.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 146233;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (103663, '더 헌트', '2012-06-13', '사회 공동체의 집단 본성을 과감하게 드러내며 전세계를 사로잡은 2013년 1월, 최고의 수작!', '이혼 후, 고향으로 내려온 유치원 교사 루카스는 새로운 여자친구를 사귀며 아들 마커스와 함께 하는 행복한 삶을 꿈꾸고 있다. 그러던 어느 날, 루카스를 둘러 싼 한 소녀의 사소한 거짓말이 전염병처럼 마을로 퍼지고, 억울한 누명을 쓰게 된 루카스는 마을 사람들의 불신과 집단적 폭력 속에서 자신의 삶을 지키기 위한 외로운 싸움을 시작한다.', 115, '15', 'RELEASED', 24.162000, 8.100000, 18300000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 103663 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1019, '매즈 미켈슨', '/ntwPvV4GKGGHO3I7LcHMwhXfsw9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '매즈 미켈슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lucas', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 103663 AND a.name = '매즈 미켈슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4457, 'Thomas Bo Larsen', '/x5Egmvb8FU275PfYZovyJggDBIs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Thomas Bo Larsen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Theo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 103663 AND a.name = 'Thomas Bo Larsen';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1112385, 'Annika Wedderkopp', '/o0vCTKao4TfkOxA6jxW4LnIS2Ev.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Annika Wedderkopp');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Klara', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 103663 AND a.name = 'Annika Wedderkopp';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1188827, 'Lasse Fogelstrøm', '/jtFqRNMikzydxPo1qW5RT2mIpCK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lasse Fogelstrøm');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marcus', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 103663 AND a.name = 'Lasse Fogelstrøm';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 47156, 'Susse Wold', '/wKrR5XYvEL8xiYBYp5PUoOlJ95k.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Susse Wold');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Grethe', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 103663 AND a.name = 'Susse Wold';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 4453, '토마스 빈터베리', '/1lChKBPVLqbn7Kl8lHghybBVzgw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '토마스 빈터베리');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 103663 AND d.name = '토마스 빈터베리';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7uhc5ZyeOFgGyCrXOe7sEUb9zj9.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 103663;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7zN7m5jEyrNxFYm2EbQJAZwAG5i.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 103663;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (663558, '신신방: 나타중생', '2021-02-06', '', '오토바이 레이서이자 배달원과 지역유지의 아들 사이에서 생긴 갈등으로 인해 삼천년전 그들이 가문간 원수지간이었다는 사실이 밝혀지면서 일어나는 이야기', 117, '', 'RELEASED', 24.645000, 8.096000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 663558 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 663558 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 663558 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2185754, '杨天翔', '/jEwKu9VEtl0ecc6oA264U3iJV08.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '杨天翔');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Li Yunxiang (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 663558 AND a.name = '杨天翔';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2974840, '张赫', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '张赫');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Masked Guy (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 663558 AND a.name = '张赫';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2718152, '宣晓鸣', '/uWDY5TtOBeSklERV2CkhzXfhU6H.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '宣晓鸣');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Long Wang (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 663558 AND a.name = '宣晓鸣';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2463716, '李詩萌', '/i7hKjBsuxiMHuj3v68yWhbLXNbi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '李詩萌');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Su Junzhu (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 663558 AND a.name = '李詩萌';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2974841, 'Keer Zhu', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Keer Zhu');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kasha (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 663558 AND a.name = 'Keer Zhu';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1665497, 'Zhao Ji', '/3SbMsocDUMhh6BMPFen0Mv92fzl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Zhao Ji');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 663558 AND d.name = 'Zhao Ji';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/a8AwGuBb99TU45jxh6dKyuJ0uvf.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 663558;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4PKfa0zltSrp1BJoLl8zfvYXaac.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 663558;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (11878, '요짐보', '1961-04-25', '전형을 답습하지 않는 거장의 방법론', '떠돌이 무사가 어느 마을의 여인숙에 들린다. 그곳은 두 패로 나뉜 악인의 무리가 세력다툼을 벌여 유령 마을처럼 되어버린 야도바 마을. 무사는 악인의 무리 중에서 돈을 많이 주는 쪽인 비단을 파는 사람들의 요짐보가 되어 일을 해준다. 하지만 술을 파는 무리 중 한 명의 아들인 우노스케가 권총을 갖고 마을로 들어오며 상황은 급변한다. 우노스케는 자신이 속한 파와 적대적인 관계에 있는 무리들을 무차별적으로 죽인다. 운 좋게도 요짐보는 마을 여관주인의 도움으로 마을 밖으로 도망쳐 근처에 있는 절 가까이 숨어 있는다. 하지만 얼마 후 여관주인이 우노스케에 의해 납치당했다는 사실을 알고 다시 마을로 들어오는데...', 110, '', 'RELEASED', 21.508000, 8.096000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11878 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11878 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7450, '미후네 토시로', '/3A9PqrtiXHLp8B2JL7m3YvVXrmL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미후네 토시로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sanjuro Kuwabatake / The Samurai', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11878 AND a.name = '미후네 토시로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 70131, '나카다이 타츠야', '/4LygOe0vFQplLIft5IUWI5OewPX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나카다이 타츠야');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Unosuke, gunfighter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11878 AND a.name = '나카다이 타츠야';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 70811, '츠카사 요코', '/cEF3udfW1Miuo4f3wUiFejVukRC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '츠카사 요코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nui', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11878 AND a.name = '츠카사 요코';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 33761, '山田五十鈴', '/3b029DnOGOGBCj9rzg8RQFfYPHw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '山田五十鈴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Orin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11878 AND a.name = '山田五十鈴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7457, '카토 다이수케', '/7VATRGIU5NNhzdb6ZdJLKdqEvPW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카토 다이수케');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Inokichi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11878 AND a.name = '카토 다이수케';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 5026, '구로사와 아키라', '/eGexa6MZ22T1MZxce1qR3RcAYaS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '구로사와 아키라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 11878 AND d.name = '구로사와 아키라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lIbwlZe5KHKfrFykpOTWHzPdqbO.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 11878;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zd7mu6dJKxkVtBdXqlEQ9W3msKl.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 11878;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (12445, '해리 포터와 죽음의 성물 2', '2011-07-12', '이제 모든 것이 끝난다', '덤블도어 교장이 남긴 죽음의 성물의 단서를 쫓던 해리 포터는 볼드모트가 그토록 찾아 다닌 절대적인 힘을 가진 지팡이의 비밀을 통해 드디어 마지막 퍼즐을 완성한다. 볼드모트의 영혼이 담긴 다섯 번째 호크룩스를 찾기 위해 마법학교 호그와트로 돌아온 해리와 친구들은 그들을 잡으려는 보안마법에 걸려 위기를 맞지만 덤블도어의 동생인 에버포스의 도움으로 벗어난다. 그리고 그에게서 덤블도어와 어둠의 마법사 그린델왈드에 관한 놀라운 과거에 대해 알게 된다. 한편 볼드모트는 해리에 의해 호크룩스들이 파괴되었음을 느끼고 호그와트로 향한다. 해리를 주축으로 한 불사조 기사단과 죽음을 먹는 자들 간의 전투가 벌어지며 호그와트는 거대한 전쟁터로 변하게 되는데...', 130, 'ALL', 'RELEASED', 127.497000, 8.100000, 1341511219, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 12445 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 12445 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10980, '다니엘 래드클리프', '/iPg0J9UzAlPj1fLEJNllpW9IhGe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다니엘 래드클리프');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Harry Potter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12445 AND a.name = '다니엘 래드클리프';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10990, '엠마 왓슨', '/A14lLCZYDhfYdBa0fFRpwMDiwRN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '엠마 왓슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hermione Granger', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12445 AND a.name = '엠마 왓슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10989, '루퍼트 그린트', '/iFlkpTaOF6fGLqxz8b0PhI0i0zN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루퍼트 그린트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ron Weasley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12445 AND a.name = '루퍼트 그린트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5469, '레이프 파인스', '/tJr9GcmGNHhLVVEH3i7QYbj6hBi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레이프 파인스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lord Voldemort', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12445 AND a.name = '레이프 파인스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4566, '앨런 릭먼', '/nKl8ZRYjBJya7aj7phJUyrtSll6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앨런 릭먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Severus Snape', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12445 AND a.name = '앨런 릭먼';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 11343, '데이빗 예이츠', '/hAHOxR0NK4cZDumqNIpDoEdGVAh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '데이빗 예이츠');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 12445 AND d.name = '데이빗 예이츠';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ehUeFvQeo8Vr2aDIKLsLbC8okcw.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 12445;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/n5A7brJCjejceZmHyujwUTVgQNC.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 12445;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (11659, '베스트 오브 유스', '2003-06-22', '', '영화는 1966년부터 2003년까지의 시간이 로마 중류층 가정 카라티의 두 형제 니콜라와 마테오를 축으로 보여준다. 니콜라(루이지 로 카시오)는 침착하고 다정하고 쾌활한 의대생이며 마테오(알레시오 보니)는 반항적이고 격정적인 철학도이다. 형제는 모두 자유와 사회개혁을 꿈꾸는 이상주의자이다. 둘은 서로 극단적으로 상반된 길을 가고 두 형제의 삶과 국가의 소용돌이치는 역사가 서로 뒤엉킨다. 60년대 플로렌스 대홍수 복구사업장에서 정신과 의사 공부를 하는 니콜라와 순간적으로 대학을 중퇴하고 군인이 된 마테오가 헤어졌다 오랜만에 다시 만난다. 여기서 니콜라는 허무주의 정치사상을 가지고 후에 테러단 붉은 연대와 관계를 맺는 아름다운 음악학도 줄리아(소니아 베르가마스코)와 사랑에 빠지고 그녀는 나중에 니콜라의 아내가 된다. 두 형제의 재회의 기쁨은 얼마가지 못하고 다시 둘은 헤어진다. 또 니콜라는 이탈리아 북부 투린의 대학으로 전학을 가고 여기서 일어나는 격렬한 노동투쟁에 끼여든다. 한편 경찰이 된 마테오가 시위진압에 투입되면서 다시 두 형제는 서로 정반대 편에 서서 만난다.  영화는 니콜라와 마테오 그리고 이들의 친구와 가족과 주변 인물들을 둘러싸고 붉은 연대의 테러, 나라를 뒤흔든 정치 스캔들, 시실리의 반마피아 운동 그리고 월드컵 축구 등 굵직굵직한 이탈리아의 역사들이 커다란 그림을 그린다.', 367, '', 'RELEASED', 6.954000, 8.095000, 2693053, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11659 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11659 AND g.name = '역사';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11659 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 34491, 'Luigi Lo Cascio', '/yp7Kf2TVSwuDye5F8G9VthK1xyS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Luigi Lo Cascio');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nicola Carati', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11659 AND a.name = 'Luigi Lo Cascio';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 44646, 'Alessio Boni', '/wmvo4ZfGEnOMwlg1aQCPbhcsLAQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alessio Boni');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Matteo Carati', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11659 AND a.name = 'Alessio Boni';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 44110, 'Adriana Asti', '/kYZa3wNA2Ncyk3QZTvZo02spqUy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Adriana Asti');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Adriana Carati', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11659 AND a.name = 'Adriana Asti';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 70234, 'Sonia Bergamasco', '/2Z0YyXadH0smxEljbao6ei54XWY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sonia Bergamasco');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Giulia Monfalco', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11659 AND a.name = 'Sonia Bergamasco';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 35106, 'Fabrizio Gifuni', '/5TrD2yvMgwoqQdyPGsdWAxwdWJz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Fabrizio Gifuni');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Carlo Tommasi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11659 AND a.name = 'Fabrizio Gifuni';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 70235, 'Marco Tullio Giordana', '/uJBDzGa9Cv6z8kNE6ryXdj4afxC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Marco Tullio Giordana');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 11659 AND d.name = 'Marco Tullio Giordana';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yVsZMOdcp6cZIBlZkoeOLtGUFhd.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 11659;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ojH9M6BIHnHyAXLPsm7cRi7OkLU.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 11659;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (10681, '월•E', '2008-06-22', '예측불허! 차세대 영웅, 그가 지구 구하기에 나섰다!', '텅 빈 지구에 홀로 남아 수백 년이란 시간을 외롭게 일만 하며 보내던 월-E (WALL-E: Waste Allocation Load Lifter Earth-Class, 지구 폐기물 수거-처리용 로봇). 그런 그가 매력적인 탐사 로봇 ‘이브’와 마주친 순간, 잡동사니 수집만이 낙이던 인생에도 소중한 목표가 생긴다. 이브는 지구의 미래를 결정할 열쇠가 우연히 월-E의 손에 들어간 사실을 알게 되고, 고향별로 돌아갈 날만 애타게 기다리는 인간들에게 이를 보고하기 위해 서둘러 우주로 향한다. 한편 월-E는 이브를 뒤쫓아 은하를 가로지르며, 스크린 사상 가장 짜릿한 상상이 넘치는 어드벤처를 선사한다. 이제껏 꿈에서도 볼 수 없었던 미래 세계를 배경으로 우주에서 펼쳐지는 월-E의 환상적인 모험! 애완용 바퀴벌레, 용맹스럽지만 어딘가 나사가 빠진 듯한 사회 부적응 로봇 군단 등 일련의 유쾌한 캐릭터들이 여기에 동참한다.', 98, 'ALL', 'RELEASED', 82.585000, 8.100000, 521311860, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 10681 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 10681 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 10681 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 670, 'Ben Burtt', '/7asFDWjls2bYQSfXJf5StjXmlhI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ben Burtt');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'WALL·E / M-O (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10681 AND a.name = 'Ben Burtt';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 72754, 'Elissa Knight', '/exRLyaNaHcgawQA0DoBxo5IvdoI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Elissa Knight');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'EVE (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10681 AND a.name = 'Elissa Knight';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 60074, 'Jeff Garlin', '/8shJOwynglerVVxhOKbvDYTThBd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jeff Garlin');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Captain (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10681 AND a.name = 'Jeff Garlin';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20753, 'Fred Willard', '/Agh6CXQzwp23ORnnrUvXF1RemMi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Fred Willard');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shelby Forthright, BnL CEO', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10681 AND a.name = 'Fred Willard';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7907, 'John Ratzenberger', '/oRtDEOuIO1yDhTz5dORBdxXuLMO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'John Ratzenberger');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'John (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10681 AND a.name = 'John Ratzenberger';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 7, '앤드류 스탠튼', '/fo6ePCWEVB0L1sccrvB99Iaoqcg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '앤드류 스탠튼');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 10681 AND d.name = '앤드류 스탠튼';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/skTzymk67FfQSfGvwp4JSAqje4Z.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 10681;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fK5ssgvtI43z19FoWigdlqgpLRE.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 10681;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (406, '증오', '1995-05-31', '', '경찰의 심문을 받던 16세 아랍소년, 압델 이샤하는 혼수상태다. 시가전이 벌어진 지역에는 경찰의 계엄령이 선포되고, 성난 젊은이들은 위험한 긴장 속에서 경찰과 대치 중이다. 더 이상 살아 숨쉴 여지도 가지지 못한 젊은이들과 총과 헬멧으로 무장한 경찰 사이의 ''증오''는 더욱 커져만 간다. 유태계 프랑스인 빈츠, 아랍계 소년 사이드, 흑인 위베르. 그들은 2000년이 될 때까지 살아남는 것이 절대과제인 거리의 단짝 친구들이다. 이들은 경찰과의 격렬한 전투가 있던 다음날, 여느때처럼 모여 할 일없이 거리를 쏘다닌다.', 98, '', 'RELEASED', 27.913000, 8.093000, 15300000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 406 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1925, '뱅상 카셀', '/ivUQfhn5olOmR5hthN8C8GThBV4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '뱅상 카셀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vinz', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 406 AND a.name = '뱅상 카셀';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5418, 'Hubert Koundé', '/nii46CtpR2AYPkl8fBKtbrffqQg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Hubert Koundé');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hubert', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 406 AND a.name = 'Hubert Koundé';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5419, 'Saïd Taghmaoui', '/kuxI08YpwQFGweIXK7TELknwexr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Saïd Taghmaoui');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Saïd', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 406 AND a.name = 'Saïd Taghmaoui';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5420, 'Abdel Ahmed Ghili', '/zCBgVA0B1ywgIQsMCPIhfnE7C60.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Abdel Ahmed Ghili');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Abdel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 406 AND a.name = 'Abdel Ahmed Ghili';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5422, 'Solo', '/xoIaLpBMZSHUtr8SWOsJLNiGxDS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Solo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Santo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 406 AND a.name = 'Solo';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2406, '마티외 카소비츠', '/3FRBEdKKlxhvPWPt0jzgmSjeHwn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '마티외 카소비츠');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 406 AND d.name = '마티외 카소비츠';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gfdhSzPyAWtAizqs4ytc0MwOlQg.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 406;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/viGCwLxupyoaLsa6hrnu1gYrB0B.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 406;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (3780, '붉은 수염', '1965-04-03', '', '나가사키에 있는 독일의료원에서 의학공부를 마치고 에도로 돌아온 야스모토는 시골 병원에서 인턴 과정을 밟게 된다. 귀족들을 상대하는 왕립의료원에서 일하기를 원했던 그는 하층민들이 주로 오는 공동 진료소로 오게 되자 불만을 품게 된다. 하지만 자만심으로 가득 차 있던 야스모토는 ‘붉은 수염’이라 불리는 시골 병원장의 진정한 모습에 점차 동화되어 가면서 진정한 의술을 배우게 된다.', 185, '', 'RELEASED', 13.703000, 8.092000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 3780 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7450, '미후네 토시로', '/3A9PqrtiXHLp8B2JL7m3YvVXrmL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미후네 토시로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Kyojio Niide ("Red Beard")', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3780 AND a.name = '미후네 토시로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 33764, '加山雄三', '/wkBZ1dcVxZv6GzZUFaBMtN11uEI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '加山雄三');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Noboru Yasumoto', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3780 AND a.name = '加山雄三';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 70626, '야마자키 츠토무', '/A4M3eER4ChkV5VebYSpLUEUyrez.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '야마자키 츠토무');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sahachi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3780 AND a.name = '야마자키 츠토무';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 131203, '団令子', '/l0Qypa5XD7C2K6YqBQZj7cJyKp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '団令子');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Osugi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3780 AND a.name = '団令子';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 213483, '桑野みゆき', '/e8UAgMOTMqrpd0cFakUyKQs2WVN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '桑野みゆき');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Onaka', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3780 AND a.name = '桑野みゆき';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 5026, '구로사와 아키라', '/eGexa6MZ22T1MZxce1qR3RcAYaS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '구로사와 아키라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 3780 AND d.name = '구로사와 아키라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4WmmmLyxXA3lhnlZivkmSZnKFDH.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 3780;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/i4XlRFhNi61C2SZwgEuw8QgN59Q.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 3780;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (698687, '트랜스포머 ONE', '2024-09-11', '모든 것이 바뀐다', '사이버트론 행성의 지하 광산에서 일하는 변신 못 하는 하급 로봇 오라이온 팩스와 D-16. 한 번도 가보지 못한 지상 세계를 꿈꾸던 둘은 쾌활한 수다쟁이 B-127, 카리스마 넘치는 엘리타 원과 함께 출입이 금지된 지상에 도달한다. 지상에서 잠들어 있던 알파 트라이온을 만난 넷은 그의 도움으로 잠재되어 있던 변신 능력을 얻게 된다. 막강한 힘과 변신 능력으로 자유를 느낀 것도 잠시, 자신들의 행성을 지배하고 있는 거대한 배후의 존재를 알게 되며 모든 것을 바꿀 전쟁을 시작하는데…', 104, 'ALL', 'RELEASED', 1468.358000, 8.100000, 124530200, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 698687 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 698687 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 698687 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 698687 AND g.name = '가족';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 74568, '크리스 헴스워스', '/piQGdoIQOF3C1EI5cbYZLAW1gfj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 헴스워스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Orion Pax / Optimus Prime (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 698687 AND a.name = '크리스 헴스워스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 226366, '브라이언 타이리 헨리', '/2MsJh0bpyzwvOUnXOltHp3j85Pb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브라이언 타이리 헨리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'D-16 / Megatron (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 698687 AND a.name = '브라이언 타이리 헨리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1245, '스칼렛 요한슨', '/6NsMbJXRlDZuDzatN2akFdGuTvx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스칼렛 요한슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elita-1 (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 698687 AND a.name = '스칼렛 요한슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 298410, '키건마이클 키', '/xmdzYXP9j87a43FSiL138nLesuS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키건마이클 키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'B-127 (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 698687 AND a.name = '키건마이클 키';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 65717, '존 햄', '/mrXE5fZbEDPc7BEE5G21J6qrwzi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '존 햄');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sentinel Prime (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 698687 AND a.name = '존 햄';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 84496, '조시 쿨리', '/eGN0vaFmKtqHu1nFi3Lv4roQ6P2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조시 쿨리');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 698687 AND d.name = '조시 쿨리';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/c2JXlWzvXegSda8qaATr8I47kMx.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 698687;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zViRwl3ySscZnbXZJ2Q9wq3SeUG.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 698687;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (2457, '천국의 아이들', '1945-03-15', '', '마임 배우 가랑스와 밥티스트는 서로 사랑하지만, 허영심이 강한 배우 프레데릭 등 가랑스를 사랑하는 다른 세 남자들 때문에 기구한 삶을 살게 된다. 3시간 넘는 상영시간이 지루하지 않는 ‘프랑스 연극의 정수와 혼’이 담긴 영화로, 누벨바그 이전의 프랑스 문예 영화의 정점을 보여주는 기념비적인 작품이다.마르셀 카르테가 연출하여 나치 점령 하의 파리에서 2년에 걸쳐 제작되었고 나치가 물러간 후에야 비로소 완성, 개봉되었다. 또한 시인 자끄 프레베르의 시나리오와 당대 최고의 연극배우인 장 루이 바로의 판토마임 연기로 더욱 유명한 작품.', 190, '', 'RELEASED', 11.539000, 8.100000, 1457, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 2457 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 2457 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 25154, 'Arletty', '/iI4wBjZgg6AneXXMUfWF9Gxf27v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Arletty');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Claire Reine, dite Garance', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 2457 AND a.name = 'Arletty';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 25155, 'Jean-Louis Barrault', '/i7ctsNqijuw4cOevV5jXYO9GrFt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jean-Louis Barrault');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Baptiste Debureau', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 2457 AND a.name = 'Jean-Louis Barrault';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 24476, 'Pierre Brasseur', '/y9moezayXgiGbJWa9V1tFuljjc8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Pierre Brasseur');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frédérick Lemaître', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 2457 AND a.name = 'Pierre Brasseur';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 25157, 'Marcel Herrand', '/sklLCKnZEO9ShebKKJ0fA3b2lhw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marcel Herrand');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pierre-François Lacenaire', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 2457 AND a.name = 'Marcel Herrand';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 25156, 'María Casares', '/gYknomwNpmZPxfVqvzbR3DvoxBk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'María Casares');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nathalie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 2457 AND a.name = 'María Casares';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 25161, 'Marcel Carné', '/p1agb8rWu8Tlef0sFiiTAgIgQYE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Marcel Carné');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 2457 AND d.name = 'Marcel Carné';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hoROYOmKLbWhLuBE5E1h4CBQgtP.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 2457;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/59kBgtfbhh1dalgjGvFhDL98jN.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 2457;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (755812, '미라큘러스 월드 : 뉴욕, 하나 된 영웅들', '2020-09-25', '', '마리네뜨의 학급은 프랑스-미국 친선 주간을 맞아 슈퍼히어로의 도시 뉴욕으로 향한다. 학급 전체가 뉴욕으로 가지만, 아드리앙만 예외다. 아드리앙의 아버지가 허락하지 않기 때문이다!', 61, '', 'RELEASED', 62.649000, 8.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 755812 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 755812 AND g.name = 'TV 영화';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 755812 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 755812 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1762588, 'Annouck Hautbois', '/5D66aDzc8QrkNtdeFb0nsFku6Zh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Annouck Hautbois');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marinette / Ladybug (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 755812 AND a.name = 'Annouck Hautbois';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1558832, 'Benjamin Bollen', '/qAvG7VqmZp6s2XE3KZooEfYDfW9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Benjamin Bollen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Adrien Agreste / Cat Noir (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 755812 AND a.name = 'Benjamin Bollen';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1758915, 'Antoine Tomé', '/rsq0RJEr1KNT659XhMcgTV1eNjn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Antoine Tomé');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gabriel Agreste / Hawk Moth (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 755812 AND a.name = 'Antoine Tomé';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1762590, 'Fanny Bloc', '/7qcsMqQNNZ0Im1j0i9EUTBDdjaP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Fanny Bloc');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alya Césaire (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 755812 AND a.name = 'Fanny Bloc';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1762589, 'Thierry Kazazian', '/7sqA1L6pwKmmBccMdmzNJwlXBWk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Thierry Kazazian');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Plagg (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 755812 AND a.name = 'Thierry Kazazian';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1565301, 'Thomas Astruc', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Thomas Astruc');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 755812 AND d.name = 'Thomas Astruc';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kIHgjAkuzvKBnmdstpBOo4AfZah.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 755812;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2BZ7PC9aISswNXV2tugmjGiriaB.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 755812;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (555604, '기예르모 델토로의 피노키오', '2022-11-09', '', '많은 이들의 사랑을 받은 목각 인형 피노키오의 마법 같은 모험. 현실의 한계를 뛰어넘어, 새 생명을 불어넣는 강력한 사랑의 힘이 펼쳐진다. 이탈리아 고전 동화 "피노키오"가 스톱모션 뮤지컬로 재탄생한다. 말썽꾸러기 피노키오는 과연 인간 소년이 될 수 있을까? 그 여정을 따라가 보자.', 117, 'ALL', 'RELEASED', 48.414000, 8.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 555604 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 555604 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 555604 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3061, '이완 맥그리거', '/g7uF0PD8RwC8v3ywc1NQ3WxvzsF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이완 맥그리거');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cricket (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 555604 AND a.name = '이완 맥그리거';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11180, '데이비드 브래들리', '/rDp3nmZTZIYokp3aSOzClpDkVlS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이비드 브래들리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Geppetto (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 555604 AND a.name = '데이비드 브래들리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2099810, 'Gregory Mann', '/j2CUCIhS3N7JsVHOUXVxPQT0kxC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gregory Mann');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pinocchio / Carlo (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 555604 AND a.name = 'Gregory Mann';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 39659, '번 고먼', '/nl5V2mpfTnp8YSShtVYjgNjnv4M.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '번 고먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Priest (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 555604 AND a.name = '번 고먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2372, '론 펄먼', '/9riPBfsWpzEzh2y9ucxTW22iakI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '론 펄먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Podesta (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 555604 AND a.name = '론 펄먼';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1245934, 'Mark Gustafson', '/84ASwEwmYzbV6Yqp8Y539G16tif.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Mark Gustafson');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 555604 AND d.name = 'Mark Gustafson';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 10828, '기예르모 델 토로', '/gldeyCtKcaqnK1v4Vu9vqayhzUQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '기예르모 델 토로');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 555604 AND d.name = '기예르모 델 토로';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6bdUtxydFXLtgcxHMMvlkNnRZWg.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 555604;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/e782pDRAlu4BG0ahd777n8zfPzZ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 555604;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (532067, '이 멋진 세계에 축복을! 붉은 전설', '2019-08-30', '「이세계 생활은, 고향 방문조차도 대모험……!?」', '교통사고(!?)로 허무하게 인생의 막을 내릴 예정이었던 게임을 사랑하는 은둔형 외톨이 사토 카즈마는, 어쩌다 보니 여신 아쿠아를 길동무 삼아서 이세계로 전생하게 된다. "RPG 게임 같은 이세계에서 동경하던 모험가 생활 엔조이! 목표는 용사!" 하지만 신나는 기분은 잠깐이고, 전생한 카즈마에게는 골치 아픈 일만 계속된다. 트러블 메이커 잉여신 아쿠아, 중2병을 잘못 앓은 마법사 메구밍, 망상 논스톱 여기사 다크니스라는, 능력치는 높은데 나사가 심하게 빠진 세 사람과 파티를 짜게 되고, 빚 때문에 옴짝달싹 못하게 되고, 국가 반역죄의 혐의로 재판에 회부되고, 마왕군의 간부를 토벌하고, 때로는 죽기도 한다……. 그러던 어느 날, 다급하게 찾아온 홍마족 소녀 융융의 폭탄 발언으로 카즈마 일행은 얼어붙고 만다. ''저요, 카즈마 씨의 아이를 원해요!'' 사정을 들어보니, 메구밍과 융융의 고향인 ''홍마의 마을''이 멸망의 위기에 처했다고 한다. 마을을 구하기 위해 먼저 출발한 융융을 쫓아서 홍마의 마을로 향한 카즈마 일행이었지만--!? 카즈마 파티를 덮친, 최대의 위기! 평범한 모험가 카즈마가 살아가는 이세계 라이프의 미래는 어디로!?', 90, '', 'RELEASED', 20.986000, 8.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 532067 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 532067 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 532067 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 532067 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 115301, '후쿠시마 준', '/gHv2Nw6LAC6OdNuC8tzmW36CHpM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '후쿠시마 준');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kazuma Satou (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 532067 AND a.name = '후쿠시마 준';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1492982, '타카하시 리에', '/aeB7z0cBTASdjKOjQriBAO6hYq4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '타카하시 리에');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Megumin (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 532067 AND a.name = '타카하시 리에';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1325034, '아마미야 소라', '/4ZZcdFH4QgbIC8AeJ3BLG1ue7G5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아마미야 소라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Aqua (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 532067 AND a.name = '아마미야 소라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1254671, '카야노 아이', '/l8ywp387rfdAS7mOExe3cEZnsk0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카야노 아이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lalatina ''Darkness'' Dustiness Ford (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 532067 AND a.name = '카야노 아이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 202806, '호리에 유이', '/73yQlMWaiOMrhvPCNyOCbbCkILZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '호리에 유이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wiz (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 532067 AND a.name = '호리에 유이';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1281402, '金崎貴臣', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '金崎貴臣');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 532067 AND d.name = '金崎貴臣';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hrE3lJtYnozIENA738mzQI65Avb.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 532067;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wqpTrmGiqMJ6onAq3zrBhfomIJl.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 532067;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (439, '달콤한 인생', '1960-02-05', '', '삼류 신문의 사교계 담당 신문기자인 마르첼로는 사치스럽고 방탕한 생활을 하던 중 우연히 한결같이 반복되는 일상사에 진력을 내는 마달레나라는 여인을 만나 사귀게 된다. 마달레나는 마르첼로에게 고혹적인 분위기를 지닌 매춘부, 아르디아나를 소개시켜준다. 스스로도 주체할 수 없는 자신의 방탕한 생활에 회의를 느끼던 그는 어느 날 절친한 친구 스타이너가 자살했다는 소식을 듣고 더욱 실의에 빠지면서 삶의 가치와 의미에 대해 회의를 품게된다.', 176, '', 'RELEASED', 29.646000, 8.100000, 19647000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 439 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 439 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5676, '마르첼로 마스트로얀니', '/bfLnFfNfMC73Q7WW90xQy2PvRZm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마르첼로 마스트로얀니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marcello Rubini', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 439 AND a.name = '마르첼로 마스트로얀니';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5961, '아니타 엑베리', '/x6VlAnJbBbtIhCUfhWnERT84BiR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아니타 엑베리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sylvia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 439 AND a.name = '아니타 엑베리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5682, '아누크 에메', '/rXkZZRfbBlGfcxQstQqeXX0GDZx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아누크 에메');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maddalena', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 439 AND a.name = '아누크 에메';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5962, 'Yvonne Furneaux', '/r3tTCcPcBQa3zyKHE48HAAhUP7X.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Yvonne Furneaux');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Emma', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 439 AND a.name = 'Yvonne Furneaux';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5963, 'Magali Noël', '/mEFJnEVJ3MVOFrQLD40a8HMPr4O.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Magali Noël');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fanny', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 439 AND a.name = 'Magali Noël';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 4415, '페데리코 펠리니', '/r0GTpMWUrxgPRbMmv38mNggOBvA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '페데리코 펠리니');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 439 AND d.name = '페데리코 펠리니';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mZJ25Th65B2KXM57uIiEzO3Aw81.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 439;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uaEfEkb2tjl4hN1oaSyzcxt4cEg.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 439;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (387, '특전 U보트', '1981-09-17', '', '{1941년 9월 프랑스 라 로셀(La Rochelle). 히틀러가 영국 봉쇄를 위해 편성한 잠수함대가 열세를 보이기 시작했다. 영국 상선을 호위하는 구축함은 갈 수록 무장을 강화하여 독일 잠수함에 타격을 가했다. 그래도 독일군 최고사령부는 잠수함을 포기하지 않아 시간이 지날 수록 오히려 어린 수병들을 태워 점령지 프랑스로부터 출격시켰다. 결국 대서양을 지배하려는 싸움은 독일을 외면했다. 2차대전 중 4만 명의 수병이 유보트(U-Boats)라 불리는 잠수함에 투입되었다. 그리고 3만 명이 돌아오지 못했다.}  독일군의 패전 기미가 감돌던 1941년. 대부분 전쟁을 경험하지 못한 젊은 신참 병사들이 승선한 잠수함 U-96. 영화는 먹고 마시고 춤추는, 마치 내일이 없는 듯한 병사들의 모습에서부터 시작된다. 그러나 시간이 흐를 수록 잠수함이라는 한정된 공간에서 오는 답답함과 우울함이 이들을 엄습하기 시작한다. 그러던 어느 날 처음으로 적군의 군수물자운반선을 호위하는 영군군함과의 교전이 벌어지고, 아수라장의 싸움을 간신히 승리로 이끈 이들은 비로소 전쟁의 진실과 맞닥뜨리게 되고 공포에 사로잡힌다. 크리스마스가 다가올 무렵 그들에게 또 하나의 명령이 떨어진다. 그들로서는 도저히 불가능할 것만 같은 작전. 영군군의 본거지인 지브롤터 해협을 통과해야 하는 것이다. 자살 명령이나 다름없는 작전을 수행하기 위해 적지한 가운데로 향하는 U-96. 그러나 마음의 준비도 되어있지 않은 상태에서 적군(영국군)은 공중에서 폭탄을 투하하기 시작하고, U-96은 크게 파손되고 만다. 설상가상으로 기계는 고장이 나 심해 깊은 곳으로 처박히고 마는데.', 150, '', 'RELEASED', 30.397000, 8.100000, 85000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 387 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 387 AND g.name = '역사';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 387 AND g.name = '전쟁';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 920, 'Jürgen Prochnow', '/4489XcYBPCY0CoqLHN04Bjz4A3q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jürgen Prochnow');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Captain Lieutenant ''Der Alte''', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 387 AND a.name = 'Jürgen Prochnow';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5228, 'Herbert Grönemeyer', '/yxYKqI9CaIfbkiCRrmZtfhAYt9r.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Herbert Grönemeyer');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lieutenant Werner', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 387 AND a.name = 'Herbert Grönemeyer';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5229, 'Klaus Wennemann', '/xHF0akCqkKjIiiSOn79MquMuNMk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Klaus Wennemann');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chief Engineer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 387 AND a.name = 'Klaus Wennemann';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5230, 'Hubertus Bengsch', '/55DYLHScj5ODnmXWYWyaUZakxdT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Hubertus Bengsch');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'First Watch Officer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 387 AND a.name = 'Hubertus Bengsch';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4924, 'Martin Semmelrogge', '/w8UBZMC8SAX9ldIVaFkC1q0hNLo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Martin Semmelrogge');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Second Watch Officer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 387 AND a.name = 'Martin Semmelrogge';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 5231, '볼프강 페터젠', '/8TTijeJBFITOhvJruS68aCjwK9f.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '볼프강 페터젠');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 387 AND d.name = '볼프강 페터젠';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3fnHjHexp2QyJIjb3y8OLOAZun2.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 387;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tRI6Csmw4rKzMYDrfUx5xtyBSVE.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 387;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (397567, '신과함께-죄와 벌', '2017-12-20', '누구나 가지만 아무도 본 적 없는 곳, 새로운 세계의 문이 열린다!', '살인, 나태, 거짓, 불의, 배신, 폭력, 천륜 7개의 지옥에서 7번의 재판을 무사히 통과한 망자만이 환생하여 새로운 삶을 시작할 수 있다. 화재 사고 현장에서 여자아이를 구하고 죽음을 맞이한 소방관 자홍, 그의 앞에 저승차사 해원맥과 덕춘이 나타난다. 자신의 죽음이 아직 믿기지도 않는데 덕춘은 정의로운 망자이자 귀인이라며 그를 치켜세운다. 저승으로 가는 입구, 초군문에서 그를 기다리는 또 한 명의 차사 강림, 그는 차사들의 리더이자 앞으로 자홍이 겪어야 할 7개의 재판에서 변호를 맡아줄 변호사이기도 하다. 염라대왕에게 천년 동안 49명의 망자를 환생시키면 자신들 역시 인간으로 환생시켜 주겠다는 약속을 받은 삼차사들, 그들은 자신들이 변호하고 호위해야 하는 48번째 망자이자 19년 만에 나타난 의로운 귀인 자홍의 환생을 확신하지만, 각 지옥에서 자홍의 과거가 하나 둘씩 드러나면서 예상치 못한 고난과 맞닥뜨리는데…', 139, '12', 'RELEASED', 42.101000, 8.100000, 125983972, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 397567 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 397567 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 397567 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 397567 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 397567 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 75913, '하정우', '/alHcDyLYbc6C2X9yOHw8mNHZVGu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하정우');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gang-rim', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 397567 AND a.name = '하정우';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 63442, '차태현', '/qTav3sq6Z1ElWCotUhkfFc1LjHE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '차태현');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kim Ja-hong', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 397567 AND a.name = '차태현';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 150125, '주지훈', '/7PYfUrBBXhYv5PIsTalJhjbRteg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '주지훈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hae Won-maek', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 397567 AND a.name = '주지훈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1128106, '김향기', '/qAfGNnSzuSRVISUtLssokeHtoWy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김향기');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Deok-choon', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 397567 AND a.name = '김향기';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 73249, '이정재', '/3h5Cfm0X8ohWn7psZkqdNWqXAHH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이정재');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'King Yeomra', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 397567 AND a.name = '이정재';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 84969, '김용화', '/7Y7v7kInxRFLYYr6zNib8E3CcXR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '김용화');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 397567 AND d.name = '김용화';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5j2YVF7VouLG0Ze96SEsj4DnVQM.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 397567;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/inaX9PA89bJg0jE8TtEpdOX5R8D.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 397567;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (832, '엠', '1931-05-11', '', '어린이 연쇄 살인 사건 때문에 독일의 한 도시 전체가 공포의 도가니가 된다. 그러나 여덟번째 여자 어린이가 살해될 때까지도 경찰은 아무런 단서도 잡지 못한다. 이 때문에 경찰은 도시 전체를 이잡듯이 수색하게 되고, 시민들도 서로를 의심하는 등 생활의 리듬이 깨어지게 된다. 한편 범죄 조직에서도 경찰의 수사 때문에 자신들의 사업에 방해를 받자 머리를 짜내기 시작한다. 결국엔 살해범이 잡히지 않으면 자신들의 생계가 막막하다는 것을 깨닫고 자기들이 나서서 살해범을 잡기로 결정한다. 이들은 남의 눈에 띄지 않게 미행을 할 수 있는 거지 조직을 이용한다.  어느날 한 맹인 거지가 휘파람 소리를 듣고 그가 범인임을 눈치챈다. 거지는 곧 도움을 청해 다른 거지들에게 범인을 뒤쫑게 한다. 범인을 뒤쫑던 거지는 범인의 등에 살인자임을 나타내는 M이란 표시를 해놓는다. 그러나 범인은 이를 눈치채고 어느 건물안으로 들어가서 숨어버린다. 범죄 조직원들은 건물을 습격하고 결국엔 범인을 잡는다. 이들은 범인을, 마치 자신들이 법에 의해 심판을 받듯이, 심판하기로 결정한다. 범인은 자신의 살인이 충동적이며 자신도 어찌할 수 없는 것이라면서 호소한다. 그러나 범죄 조직원들은 이에 냉소적이며 사형을 내리려 한다. 그러나 범인의 변호사로 나선 사람은 자신들도 살인을 한 사람이 남을 처형할 수는 없는 것이라 결사 반대한다. 범죄 조직원 다수의 의견으로 범인의 사형이 집행될 찰나 경찰이 들이닥친다.', 111, '', 'RELEASED', 12.788000, 8.100000, 35274, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 832 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 832 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 832 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2094, 'Peter Lorre', '/hgum7XGkYgiJ8jkFr4MC03PCnD4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Peter Lorre');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hans Beckert', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 832 AND a.name = 'Peter Lorre';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12322, 'Ellen Widmann', '/hD0FI25y5wqVkcA5kdEE3XyvztH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ellen Widmann');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frau Beckmann', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 832 AND a.name = 'Ellen Widmann';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12323, 'Inge Landgut', '/xQUsmU6mvw5YGtUUGRMtl3gSXgP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Inge Landgut');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elsie Beckmann', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 832 AND a.name = 'Inge Landgut';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12324, 'Otto Wernicke', '/xHWKwyOG7JyqUDoKQmbOnk5wJB5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Otto Wernicke');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Inspector Karl Lohmann', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 832 AND a.name = 'Otto Wernicke';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 79, 'Theodor Loos', '/4NYdHddN0cg4598XOsRXiFlwulg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Theodor Loos');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Inspector Groeber', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 832 AND a.name = 'Theodor Loos';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 68, '프리츠 랑', '/z02YZggZD0YP7nBG5PGHZncacXm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '프리츠 랑');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 832 AND d.name = '프리츠 랑';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/iRjNGl19oXNvK1fTeT2NDf1MbLc.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 832;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/r8Un26Y8GhcIdtmVZVnUOccnHaj.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 832;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (548, '라쇼몽', '1950-08-26', '진실은 무엇인가', '전란이 난무하는 헤이안 시대, 폭우가 쏟아지는 라생문의 처마 밑에서 나뭇꾼과 스님이 심각한 표정으로 생각에 잠겨 있다. 잠시 비를 피하러 그곳에 들른 한 남자. 이들은 이 남자를 상대로 최근에 그 마을에 있었던 기묘한 사건을 들려준다. 사건의 배경은 녹음이 우거진 숲 속. 사무라이 타케히로가 자신의 아내 마사코와 함께 숲 속을 지나고 있었다. 산적 타조마루는 그들 앞에 나타나 속임수로 타케히로를 포박하고 마사코를 겁탈한다. 오후에 그 숲에 들어선 나뭇꾼은 타케히로의 가슴에 칼이 꽂혀있는 것을 발견하고 관청에 신고한다. 타조마루는 체포되고, 행방이 묘연했던 마사코도 불려와 관청에서 심문이 벌어지는데...', 87, '', 'RELEASED', 23.042000, 8.100000, 117668, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 548 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 548 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 548 AND g.name = '미스터리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7450, '미후네 토시로', '/3A9PqrtiXHLp8B2JL7m3YvVXrmL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미후네 토시로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tajômaru', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 548 AND a.name = '미후네 토시로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7451, '쿄 마치코', '/24tQVUgGN4s6rp1P9qlnT74RSJI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '쿄 마치코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Masako', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 548 AND a.name = '쿄 마치코';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7453, '시무라 타카시', '/ydyAm2vyBbEPZRICIMqqjDm0NM9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시무라 타카시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Woodcutter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 548 AND a.name = '시무라 타카시';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7452, '森雅之', '/4HZFAdEGIOk7HxJjcdcxfL4k1x3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '森雅之');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Takehiro', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 548 AND a.name = '森雅之';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7454, '치아키 미노루', '/4uqny8n2OmGixVVdzqUBA5zJ9aW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '치아키 미노루');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Priest', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 548 AND a.name = '치아키 미노루';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 5026, '구로사와 아키라', '/eGexa6MZ22T1MZxce1qR3RcAYaS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '구로사와 아키라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 548 AND d.name = '구로사와 아키라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xJveWzyLMYV2cHiSIzRzDsKNsLr.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 548;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zyO6j74DKMWfp5snWg6Hwo0T3Mz.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 548;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (872585, '오펜하이머', '2023-07-19', '나는 이제 죽음이요, 세상의 파괴자가 되었다.', '제2차 세계대전 당시 핵무기 개발을 위해 진행되었던 비밀 프로젝트 ‘맨해튼 프로젝트’를 주도한 미국의 물리학자 ‘로버트 오펜하이머’의 이야기', 181, '15', 'RELEASED', 134.489000, 8.100000, 952000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 872585 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 872585 AND g.name = '역사';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2037, '킬리언 머피', '/llkbyWKwpfowZ6C8peBjIV9jj99.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '킬리언 머피');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'J. Robert Oppenheimer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 872585 AND a.name = '킬리언 머피';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5081, '에밀리 블런트', '/zpJ7pupuNF3W0zTxm6yioGIoxbd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에밀리 블런트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kitty Oppenheimer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 872585 AND a.name = '에밀리 블런트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1892, '맷 데이먼', '/4KAxONjmVq7qcItdXo38SYtnpul.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '맷 데이먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Leslie Groves', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 872585 AND a.name = '맷 데이먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3223, '로버트 다우니 주니어', '/5qHNjhtjMD4YWH3UP0rm4tKwxCL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 다우니 주니어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lewis Strauss', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 872585 AND a.name = '로버트 다우니 주니어';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1373737, '플로렌스 퓨', '/6Sjz9teWjrMY9lF2o9FCo4XmoRh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '플로렌스 퓨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jean Tatlock', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 872585 AND a.name = '플로렌스 퓨';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 525, '크리스토퍼 놀란', '/xuAIuYSmsUzKlUMBFGVZaWsY3DZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스토퍼 놀란');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 872585 AND d.name = '크리스토퍼 놀란';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jpD6z9fgNe7OqsHoDeAWQWoULde.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 872585;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fm6KqXpk3M2HVveHwCrBSSBaO0V.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 872585;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (7345, '데어 윌 비 블러드', '2007-12-26', '석유업계의 거물이 세상의 밖으로 사라지기까지', '은을 찾아 땅속으로 내려갔다 올라오길 반복하는 남자 다니엘 플레인뷰는 갑작스런 사고로 다리를 다친다. 이후 그는 또 다른 사고로 목숨을 잃은 동료의 아들과 함께 산다. 석유가 있는 곳을 찾아 미국의 서부를 오가는 그는 리틀 보스턴에 석유가 있다는 엘라이의 제보에 아들과 함께 리틀 보스턴으로 향한다. 리틀 보스턴은 목사 엘라이를 중심으로 한 광신도적 교인들이 주민의 대부분이다. 다니엘은 주민들의 반대에 부딪히며 땅을 사고, 유정탑을 쌓으며, 배송관을 만들어 석유 발굴에 나서는데...', 158, '15', 'RELEASED', 28.798000, 8.079000, 77208711, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 7345 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11856, '다니엘 데이루이스', '/3kNA9VcmymoEwT0btQ4bvMYxzcP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다니엘 데이루이스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Daniel Plainview', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 7345 AND a.name = '다니엘 데이루이스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17142, '폴 다노', '/gOD5bO0hKnzzJm7sJeGeEJjfBBw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '폴 다노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paul Sunday / Eli Sunday', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 7345 AND a.name = '폴 다노';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 18916, 'Kevin J. O''Connor', '/nlsRZBGlfZTmy0iEjCr5JFTorgb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kevin J. O''Connor');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Henry', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 7345 AND a.name = 'Kevin J. O''Connor';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8785, '키어런 하인즈', '/d8wLIX9VYgwXRGSp1gmUdUxmApv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키어런 하인즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fletcher Hamilton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 7345 AND a.name = '키어런 하인즈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 52564, 'Dillon Freasier', '/pTm23xcMB2oLu6Mc5LNXkrXVdla.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Dillon Freasier');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'H.W. Plainview', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 7345 AND a.name = 'Dillon Freasier';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 4762, '폴 토마스 앤더슨', '/wKAs2LtLYSUzt3ZZ8pnxMwuEWuR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '폴 토마스 앤더슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 7345 AND d.name = '폴 토마스 앤더슨';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yOW9Q1rZ6EJHGc0ZzyUurxacKsE.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 7345;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8LRcCJjbQI552BMCuGgYqph8USS.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 7345;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (437068, '택시운전사', '2017-08-02', '1980년 5월, 광주로 간 택시운전사', '택시운전사 만섭은 아내를 여의고 11살 딸을 키우며 어렵게 살림을 꾸리는 가장. 외국손님을 태우고 광주에 갔다 통금 전에 돌아오면 밀린 월세를 갚을 수 있는 거금 10만원을 준다는 말에  독일기자 피터를 태우고 영문도 모른 채 길을 나선다. 피터는 독일 공영방송 소속 기자로, 일본에서 ‘광주가 심상치 않다’는 말을 듣고 광주로 향한다. 어떻게든 택시비를 받아야 하는 만섭의 기지로 검문을 뚫고 겨우 들어선 광주. 위험하니 서울로 돌아가자는 만섭의 만류에도 피터는 대학생 재식과 황기사의 도움 속에 촬영을 시작하는데...', 137, '15', 'RELEASED', 24.258000, 8.076000, 81927980, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 437068 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 437068 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 437068 AND g.name = '역사';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20738, '송강호', '/7dw9wIpFZ5nJZ3zqrue8t7hUUgQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '송강호');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kim Man-seob', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 437068 AND a.name = '송강호';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3491, '토마스 크레치만', '/p1XYiekXjaUxHMztBALrez1Ud4J.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '토마스 크레치만');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Peter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 437068 AND a.name = '토마스 크레치만';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 84996, '유해진', '/y6L2EsmnbnCFxCgfHR2oeL7oQoo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '유해진');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hwang Tae-sul', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 437068 AND a.name = '유해진';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1530733, '류준열', '/5CYYuEiAocVRRhmrvUrithsCpil.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '류준열');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gu Jae-sik', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 437068 AND a.name = '류준열';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 587676, '박혁권', '/pigJfp2H6bcnW5qEZ2KOaI4PSEI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '박혁권');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Reporter Choi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 437068 AND a.name = '박혁권';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 148747, '장훈', '/oKksQCw61rym2D79Sh4IHdQpnvB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '장훈');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 437068 AND d.name = '장훈';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pCdx7X5JLaSJZLNVtpryGSdjvvB.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 437068;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5l2kTFOC9QicBxOVpocy5pSu4i8.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 437068;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (21634, '바비를 위한 기도', '2009-01-24', '', '독실한 크리스챤 집안에서 자란 바비는 자신이 동성에자라는 사실을 숨기며 변화를 강요하는 어머니. 외면하는 가족들로부터 고통을 받는다. 있는 그대로의 자신을 받아 들이지 못하는 부모와의 갈등으로 인해 주인공은 결국 극단적인 선택을 취하게 되면서 결말은 파국으로 치닫게 된다. 그 비극적인 결말 끝에 자신의 잘못과 편견을 인정하고 게이 인권운동을 하게되는 어머니의 깨달음과 성적 소수자들을 위한 희망이 숨어있는 영화', 89, '', 'RELEASED', 14.044000, 8.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 21634 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 21634 AND g.name = '역사';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 21634 AND g.name = 'TV 영화';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 23891, 'Ryan Kelley', '/dn7R7p0YIY3VjCIRwIzRrEuwPwq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ryan Kelley');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bobby Griffith', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 21634 AND a.name = 'Ryan Kelley';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10205, '시고니 위버', '/wTSnfktNBLd6kwQxgvkqYw6vEon.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시고니 위버');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mary Griffith', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 21634 AND a.name = '시고니 위버';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 15319, '헨리 처니', '/zOWZzRmliKf9032IOOq0a3jXhVv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헨리 처니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Robert Griffith', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 21634 AND a.name = '헨리 처니';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 76470, 'Dan Butler', '/6RcrSFeqZooY4YZouS2HX5iMUay.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Dan Butler');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Reverend Whitsell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 21634 AND a.name = 'Dan Butler';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6069, 'Austin Nichols', '/nhH6CVwgCQOKkz2QLVH4V7Am6zv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Austin Nichols');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ed Griffith', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 21634 AND a.name = 'Austin Nichols';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 52968, 'Russell Mulcahy', '/gzJDD5bj0fBgvyb2puB6O951Gnv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Russell Mulcahy');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 21634 AND d.name = 'Russell Mulcahy';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1viFwXluAettogGDsTrSUUg29lZ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 21634;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pSjGsbqyKUzF8rHzL0vtVWV1pS6.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 21634;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (550776, '나를 믿어줘: 리사 맥비 납치 사건', '2018-09-30', '17세의 소녀가 겪었던 실제 납치 사건을 다룬  영화', '11월 3일 이른 시각, 자전거를 타고 집으로 향하던 17살 리사 맥베이가 납치당하고, 목숨을 건지기 위해 고군분투하는 상황에 빠진다. 리사는 납치범과 관계를 형성하고 반대 심리를 이용해 결국 탈출하고 집으로 돌아가지만, 경찰과 가족은 리사의 말을 믿어주지 않는다.', 98, '', 'RELEASED', 33.978000, 8.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 550776 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 550776 AND g.name = 'TV 영화';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 550776 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1183993, 'Katie Douglas', '/m6dmjeruXaYjZ6CNHy6yv8jd7XX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Katie Douglas');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lisa McVey', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 550776 AND a.name = 'Katie Douglas';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 84522, '데이비드 제임스 엘리엇', '/u71mHttq4ShuhoR5zuIzKR2i3YU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이비드 제임스 엘리엇');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sgt. Larry Pinkerton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 550776 AND a.name = '데이비드 제임스 엘리엇';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 58014, 'Rossif Sutherland', '/25N7FFIGuPxSTCMqe0vrywzPwnv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rossif Sutherland');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bobby Joe Long', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 550776 AND a.name = 'Rossif Sutherland';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1461465, 'Amanda Arcuri', '/7CyJM2A7ptMnrnx8HQVXMJeEDnj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Amanda Arcuri');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lorrie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 550776 AND a.name = 'Amanda Arcuri';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 158459, 'Chris Owens', '/hT55s8UvUyzqzaf4Y7bXQgbjiY7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Chris Owens');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Det. Wolf', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 550776 AND a.name = 'Chris Owens';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 127611, 'Jim Donovan', '/cwL4t5RMxDiLkvaenmnT6Misc5M.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jim Donovan');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 550776 AND d.name = 'Jim Donovan';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qbJEzCzEKDHPZDiRvSSBiYEKaAH.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 550776;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gPW90IPq6Go8hlT0n7Es3cFl7ly.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 550776;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (4348, '오만과 편견', '2005-09-16', '운명은 사랑을 따라 변합니다', '베넷 가의 다섯 자매 중 둘째인 엘리자베스는 사랑하는 사람과의 결혼을 믿는 자존심 강하고 영리한 소녀이다. 부유하고 명망있는 가문의 신사 빙리와 그의 친구 다아시가 여름 동안 대저택에 머물게 되고, 댄스 파티에서 처음 만난 엘리자베스와 다아시는 서로에게서 눈을 떼지 못한다. 다아시는 아름답고 지적인 그녀의 매력에 점점 빠져들고, 폭우가 쏟아지는 날 비바람이 몰아치는 언덕에서 가슴 속 깊은 곳에 담아둔 뜨거운 사랑을 그녀에게 고백한다. 하지만 다아시가 빙리와 제인의 결혼을 제인이 명망있는 가문 출신이 아니라는 이유로 반대한 것을 알게 되자, 그를 오만하고 편견에 가득 찬 속물로 여기며 외면하는데...', 127, '12', 'RELEASED', 57.269000, 8.100000, 121600000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 4348 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 4348 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 116, '키이라 나이틀리', '/bRC1B2VwV0wK3ElciFAK6QZf2wD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키이라 나이틀리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elizabeth Bennet', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 4348 AND a.name = '키이라 나이틀리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 15576, '매튜 맥패디언', '/2FF3Yjxd7DYR4EIJL6s2GpKDMkJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '매튜 맥패디언');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fitzwilliam Darcy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 4348 AND a.name = '매튜 맥패디언';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4154, 'Brenda Blethyn', '/mi6TQyTkvClThcCA06Vq4bFjlTD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Brenda Blethyn');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mrs. Bennet', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 4348 AND a.name = 'Brenda Blethyn';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 55636, '도널드 서덜랜드', '/yM8WO2BYqFvgQXAvf4CIuCYnY4j.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '도널드 서덜랜드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Bennet', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 4348 AND a.name = '도널드 서덜랜드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2441, '톰 홀랜더', '/fs5EyDuxcE1s3hFijTSnVhpwYPO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 홀랜더');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'William Collins', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 4348 AND a.name = '톰 홀랜더';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 36588, '조 라이트', '/1qA8HudSIwIr7ZdxwfQAgubsDO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조 라이트');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 4348 AND d.name = '조 라이트';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tQ303fQUo5Mv5Txgpl2DPS2Jq0e.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 4348;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pgEWI7yGYF0mM5Uf1YxSOHsBkJR.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 4348;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (831827, '나무 저 너머엔', '2021-11-24', '', '호기심 많은 새끼를 안전하게 보호하려는 부모 너구리의 사랑을 다룬 애니메이션', 7, '', 'RELEASED', 8.733000, 8.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 831827 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 831827 AND g.name = '가족';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2335448, 'Natalie Nourigat', '/9qiqAtTsHd0Irz7GFgUP2m8GVcB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Natalie Nourigat');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 831827 AND d.name = 'Natalie Nourigat';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rz4trwLDm7SyVHKqWhVOPoFzGRU.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 831827;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/d3dkL8C7gfd8cv5xJLBJ3IG37nY.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 831827;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (62, '2001 스페이스 오디세이', '1968-04-02', 'SF 영화의 새로운 시대를 연 명작', '인류에게 문명의 지혜를 가르쳐 준 검은 돌기둥의 정체를 밝히기 위해서 디스커버리호의 선장 보우만과 승무원 풀은 목성을 향해서 날아간다. 하지만 평온하던 디스커버리호에 갑자기 재난이 찾아온다. 우주선 내부에서 일어난 재난은 컴퓨터 HAL이 반란을 일으킨 것. HAL은 풀을 우주선 밖으로 던져버리고, 보우만까지도 모선 밖으로 끌어내지만 그는 필사의 노력으로 HAL을 제압한다. 보우만은 마침내 목성 궤도에서 문제의 검은 돌기둥을 발견하지만, 그 순간 우주의 급류에 휘말리게 된다. 보우만은 지구로의 귀환을 위해 노력하고, 신비한 시간의 흐름을 경험하는데...', 149, '', 'RELEASED', 56.747000, 8.100000, 71923560, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 62 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 62 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 62 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 245, 'Keir Dullea', '/5QyrGWxujX8XA3Ny3M8D18TWupi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Keir Dullea');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. David Bowman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 62 AND a.name = 'Keir Dullea';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 246, 'Gary Lockwood', '/1tfGE7RW8GgCLEFFJUXETq9Td1T.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gary Lockwood');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Frank Poole', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 62 AND a.name = 'Gary Lockwood';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 247, 'William Sylvester', '/4NaExzBKqv4GPEfJ2w7S16MYS2y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'William Sylvester');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Heywood Floyd', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 62 AND a.name = 'William Sylvester';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 253, 'Douglas Rain', '/wCjNcbW1u9cYc7jzlV5FPKqXGNF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Douglas Rain');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'HAL 9000 (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 62 AND a.name = 'Douglas Rain';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 248, 'Daniel Richter', '/cq8Fprv33RgYPwu39cGx6fxk5Qp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Daniel Richter');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Moonwatcher', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 62 AND a.name = 'Daniel Richter';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 240, '스탠리 큐브릭', '/yFT0VyIelI9aegZrsAwOG5iVP4v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '스탠리 큐브릭');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 62 AND d.name = '스탠리 큐브릭';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2qJjH5mYNlGPdVrPqfEq1J6Mgb4.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 62;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/w5IDXtifKntw0ajv2co7jFlTQDM.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 62;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (334543, '라이언', '2016-11-24', '인생에서 두 번의 기적을 만든 남자. 25년만에 집으로 향하는 그의 오랜 지도가 새롭게 펼쳐진다!', '5살,  형을 기다리다 기차에서 깜빡 잠들어버린 다섯 살 사루는 집에서 수천 킬로미터 떨어진 곳에서 눈을 뜨게 된다. 낯선 기차역에 홀로 남겨진 사루는 보고 싶은 엄마와 형을 애타게 불러보지만 기억나는 것은 형 구뚜의 이름과 정확하지 않은 동네 이름뿐. 수 개월 동안 이곳 저곳을 떠돌며 힘겹게 살아가던 사루는 결국 인도를 떠나 호주에 살고 있는 새로운 가족 곁으로 가게 된다.  성인이 된 사루는 대학원에서 우연히 인도 친구들을 만나게 되면서 잊고 있었던 어린 시절에 대한 기억이 떠올라 혼란에 빠진다. 자신을 애타게 부르고 있을 엄마와 형에 대한 생각에 괴로워하던 사루는 구글어스로 전세계 어디든 찾을 수 있다는 친구의 말에 가느다란 희망을 붙잡고 25년 만에 집으로 가는 길을 다시 찾기 시작하는데…', 118, '12', 'RELEASED', 29.619000, 8.070000, 140312928, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 334543 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 76788, '데브 파텔', '/1g07SUVwZHvKgM1Z7H4RYIEOXcm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데브 파텔');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Saroo Brierley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 334543 AND a.name = '데브 파텔';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 108916, '루니 마라', '/zT6UyHFHEQ9RcKykplWCycKBnoS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루니 마라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lucy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 334543 AND a.name = '루니 마라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1371, '데이비드 웬햄', '/F7CWSqUE75HtrcdqIQ7UMZ9aTX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이비드 웬햄');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'John Brierley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 334543 AND a.name = '데이비드 웬햄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2227, '니콜 키드먼', '/lfW2cDigTcvuoe4k6UfCdGVE1R6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '니콜 키드먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sue Brierley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 334543 AND a.name = '니콜 키드먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1750435, 'Abhishek Bharate', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Abhishek Bharate');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Guddu', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 334543 AND a.name = 'Abhishek Bharate';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1173102, 'Garth Davis', '/lqxIIqqe7T64Oj6I9mofH2irDfd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Garth Davis');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 334543 AND d.name = 'Garth Davis';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ue1KPcUK1sLsdBVZGM33ZDvDbCx.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 334543;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fgffluhvdOv79SkYaKrfRA0xkf4.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 334543;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (992, '셜록 2세', '1924-04-17', '', '극장에서 영사기사로 일하는 버스터는 케이트린에게 구애하지만, 그녀의 아버지는 그를 탐탁치 않게 생각한다. 그러던 중 사랑의 라이벌 워드가 케이트린 아버지의 시계를 훔쳐 버스터에게 누명을 씌운다. 버스터는 영화 속 주인공인 셜록 주니어가 되어 진짜 범인을 찾기 시작한다.', 45, '', 'RELEASED', 20.785000, 8.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 992 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 992 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 992 AND g.name = '미스터리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8635, '버스터 키튼', '/ejJz8YWn1Dr1PFn6E70NZ0oZ6o6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '버스터 키튼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Projectionist / Sherlock, Jr.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 992 AND a.name = '버스터 키튼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 14920, 'Kathryn McGuire', '/cAkTiaCzQTEE7PwUxrg2klxUXjS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kathryn McGuire');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Girl', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 992 AND a.name = 'Kathryn McGuire';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10530, 'Joe Keaton', '/jCPa5FUv7izUmOekWPPd5bQJ8kh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Joe Keaton');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Girl''s Father / Man on Film Screen', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 992 AND a.name = 'Joe Keaton';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 14921, 'Erwin Connelly', '/qhfGdZT4QQDzB85FRGoOIxl88Uf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Erwin Connelly');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hired Man / Butler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 992 AND a.name = 'Erwin Connelly';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 14922, 'Ward Crane', '/uUER87d7bNWQo85SgKyDH0XMmSo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ward Crane');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sheik / Villain', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 992 AND a.name = 'Ward Crane';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 8635, '버스터 키튼', '/ejJz8YWn1Dr1PFn6E70NZ0oZ6o6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '버스터 키튼');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 992 AND d.name = '버스터 키튼';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1G9r3rqtbFAQuyWKOZm4Y5J5s7Q.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 992;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9kriZvlf2d5b1nAew3ybSGCKiMK.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 992;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (838240, '로봇 드림', '2023-12-06', '기다려, 내가 꼭 다시 데리러 올게!', '뉴욕 맨해튼에서 홀로 외롭게 살던 도그는 TV를 보다 홀린 듯 반려 로봇을 주문하고 그와 둘도 없는 단짝이 되어 행복한 나날을 보낸다. 그러던 어느 날, 해수욕장에 놀러간 도그와 로봇은 예기치 못한 상황에 휩쓸려 이별을 맞이하게 되는데···', 102, 'All', 'RELEASED', 60.456000, 8.100000, 4656348, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 838240 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 838240 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 838240 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 838240 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 31415, 'Ivan Labanda', '/ixxMNjDFVN3dscWoQrl5eEnA94m.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ivan Labanda');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dog / Robot / Various (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 838240 AND a.name = 'Ivan Labanda';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4529554, 'Tito Trifol', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tito Trifol');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Various (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 838240 AND a.name = 'Tito Trifol';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4529555, 'Rafa Calvo', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rafa Calvo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Various (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 838240 AND a.name = 'Rafa Calvo';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4324061, 'José García Tos', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'José García Tos');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Various (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 838240 AND a.name = 'José García Tos';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4324062, 'José Luis Mediavilla', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'José Luis Mediavilla');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Various (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 838240 AND a.name = 'José Luis Mediavilla';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 95528, '파블로 베르헤르', '/sPU0ShhIL8xdPoDLmqSa3kt6wWH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '파블로 베르헤르');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 838240 AND d.name = '파블로 베르헤르';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3TfgJPOx7lzuopbXimsvYGq4vn6.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 838240;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mwdt9HsCddye6xzNvccPenaenjW.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 838240;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (640344, 'Me contro Te: Il film - La vendetta del Signor S', '2020-01-17', '', '', 64, '', 'RELEASED', 14.318000, 8.100000, 9500000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 640344 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 640344 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2436933, 'Sofia Scalia', '/9kalg3lWQoYV9hCXeXyi0C3FvIv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sofia Scalia');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sofì', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 640344 AND a.name = 'Sofia Scalia';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2436934, 'Luigi Calagna', '/9JFtQGfnac7lkt5e0rVpRP237dN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Luigi Calagna');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Luì', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 640344 AND a.name = 'Luigi Calagna';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1328360, 'Antonella Carone', '/9w7ektL7qbPZGn4BkkResnW7AGC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Antonella Carone');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Perfidia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 640344 AND a.name = 'Antonella Carone';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2508882, 'Michele Savoia', '/kV24k4gDPpBnpI8aV9yBT2DCTe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Michele Savoia');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pongo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 640344 AND a.name = 'Michele Savoia';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1749081, 'Giustina Buonomo', '/kF9s61VpPSxyJdqTmD1P5VuAX1J.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Giustina Buonomo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Signora Marisa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 640344 AND a.name = 'Giustina Buonomo';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2436936, 'Gianluca Leuzzi', '/yqVoTlUaqzVeqOkf9YAO9iXyH5f.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Gianluca Leuzzi');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 640344 AND d.name = 'Gianluca Leuzzi';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sfeQTIRkJjWt8IPDSBcPqkrcaas.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 640344;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wooZWiC4NWH0ahCSUOogEmVejHo.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 640344;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (8392, '이웃집 토토로', '1988-04-16', '행복이 기적처럼 쏟아진다', '1955년 일본의 아름다운 시골 마을, 상냥하고 의젓한 11살 사츠키와 장난꾸러기에 호기심 많은 4살의 메이 는 사이좋은 자매로 아빠와 함께 도시를 떠나 시골로 이사온다. 자상한 아빠 쿠사카베타츠오는 도쿄에서 대학 연구원이며, 입원 중이지만 따뜻한 미소를 잃지 않는 엄마가 있다. 곧 퇴원하실 엄마를 공기가 맑은 곳에서 맞이하기 위해서다. 숲 한복판에 금방이라도 쓰러질 것처럼 낡은 집을 보며 자매는 새로운 환경에 대한 호기심으로 잔뜩 들뜬다. 그러던 어느 날 사츠키가 학교에 간 동안 메이는 숲에서 정령을 만나다. 메이는 그 정령에게 토토로란 이름을 붙여주는데...', 87, 'ALL', 'RELEASED', 53.251000, 8.069000, 41000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 8392 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 8392 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 8392 AND g.name = '가족';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 55662, '히다카 노리코', '/43OuwsjqGf7JxpFpUvB75OdDDXQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '히다카 노리코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Satsuki Kusakabe (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 8392 AND a.name = '히다카 노리코';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 55664, '사카모토 치카', '/lIIwnLmcgGpifpRflBq0kLW9EpK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사카모토 치카');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mei Kusakabe (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 8392 AND a.name = '사카모토 치카';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 55663, '타카기 히토시', '/kQab69jvurfdWZEaziUzhsPaSmd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '타카기 히토시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Totoro (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 8392 AND a.name = '타카기 히토시';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 55665, '糸井重里', '/2V17CMIcxb6JEHT5Qp3FKdlHUoE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '糸井重里');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tatsuo Kusakabe (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 8392 AND a.name = '糸井重里';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 613, '시마모토 스미', '/eCw8GSp5cmye3xgzm2cvv2KmWX4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시마모토 스미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yasuko Kusakabe (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 8392 AND a.name = '시마모토 스미';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 608, '미야자키 하야오', '/mG3cfxtA5jqDc7fpKgyzZMKoXDh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '미야자키 하야오');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 8392 AND d.name = '미야자키 하야오';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/c9zCkL0rTkNQ1HB9cmeFIqbkS50.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 8392;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fxYazFVeOCHpHwuqGuiqcCTw162.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 8392;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (359940, '쓰리 빌보드', '2017-12-01', '세 개의 광고판에 새겨진 엄마의 분노, 세상을 다시 뜨겁게 만들다', '범인을 잡지 못한 딸의 살인 사건에 세상의 관심이 사라지자, 엄마 밀드레드는 아무도 사용하지 않는 마을 외곽 대형 광고판에 도발적인 세 줄의 광고를 실어 메시지를 전한다. 마을 사람들을 모두 놀라게 한 밀드레드의 세 개의 메시지로 인해, 지역 방송에서 살인 사건이 다시 회자되는 등 그녀의 의도대로 세상 사람들의 이목을 끌게 된다. 마을의 존경 받는 경찰서장 월러비와 경찰관 딕슨은 무능한 경찰로 낙인찍히고, 조용한 마을의 평화를 바라는 이웃 주민들은 경찰의 편에 서서 그녀와 맞서기 시작하는데...', 115, '15', 'RELEASED', 56.229000, 8.100000, 162729321, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 359940 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 359940 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3910, '프랜시스 맥도맨드', '/gBkoteKZshmQXEyEoyT6WE7N0tF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '프랜시스 맥도맨드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mildred Hayes', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 359940 AND a.name = '프랜시스 맥도맨드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 57755, '우디 해럴슨', '/x9jcwNJxpbqx3YARrifLR5xU4Ty.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '우디 해럴슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bill Willoughby', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 359940 AND a.name = '우디 해럴슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6807, '샘 록웰', '/ssbobHJCUGDG0FqNOrCr8abhOhu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '샘 록웰');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jason Dixon', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 359940 AND a.name = '샘 록웰';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1105079, '루카스 헤지스', '/8WP1uXUwm6Z1vzrMaIiKj89M6kX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루카스 헤지스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Robbie Hayes', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 359940 AND a.name = '루카스 헤지스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 37260, '에비 코니쉬', '/dgbIbPhVEyWIz0HIuaLGrH6BUEz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에비 코니쉬');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anne Willoughby', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 359940 AND a.name = '에비 코니쉬';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 54472, '마틴 맥도나', '/pyDaAVKa8akTLHXzeTyF8oGymXN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '마틴 맥도나');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 359940 AND d.name = '마틴 맥도나';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5z6uHS30VhInm2MDkbVoa0SegLJ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 359940;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oQHF0Y4gCw6VdPmapjsbZoxY2ht.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 359940;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (472454, '아일라', '2017-10-27', '', '1950년 한국전쟁에 파병된 ''슐레이만''은 칠흑 같은 어둠 속 홀로 남겨진 5살 소녀를 발견한다.  전쟁과 부모를 잃은 충격 속에 말을 잃은 소녀.  ''슐레이만''은 소녀에게 터키어로 ''달''이라는 뜻의 ''아일라''라는 이름을 지어주고 함께 부대로 향한다.  서로에게 무엇과도 바꿀 수 없는 가장 소중한 존재가 된 두 사람.  그러나 행복도 잠시, ''슐레이만''은 종전과 함께 고국으로 돌아가라는 명령을 받게 되고, ''아일라''를 끝까지 지켜내기 위해 모두의 반대 속에 자신의 선택을 감행하게 되는데···', 125, '15', 'RELEASED', 23.657000, 8.100000, 21107423, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 472454 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 472454 AND g.name = '전쟁';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 472454 AND g.name = '역사';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 106621, 'İsmail Hacıoğlu', '/6XxaoTcXe5potGh4kbgo1jpPXxV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'İsmail Hacıoğlu');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Süleyman Dirliği', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 472454 AND a.name = 'İsmail Hacıoğlu';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1876418, 'Kim Seol', '/vdhHyntSe2WCfVJhefol6rFLj6g.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kim Seol');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ayla', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 472454 AND a.name = 'Kim Seol';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 93389, 'Çetin Tekindor', '/hvX7yQmZhssgf7b6ocgC26eIGYB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Çetin Tekindor');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yaşlı Süleyman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 472454 AND a.name = 'Çetin Tekindor';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1457752, 'Ali Atay', '/b5pcYB9Rg2ZXbl22TnoFxyTDJNj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ali Atay');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ali', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 472454 AND a.name = 'Ali Atay';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 145500, 'Murat Yıldırım', '/1f6O512TjKOSKZltRuZEPwfSPiv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Murat Yıldırım');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Üsteğmen Mesut', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 472454 AND a.name = 'Murat Yıldırım';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1876416, 'Can Ulkay', '/37ZlEKDZUrYcysyHTD6YMee5EvI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Can Ulkay');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 472454 AND d.name = 'Can Ulkay';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/poIHctDQZ4R8kBNtKr9oHI9iNG2.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 472454;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6EbxuGgAjizKqd9CmG5HG0m0t23.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 472454;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (11645, '란', '1985-06-01', '', '16세기 일본 전국시대, 손님들과 함께 멧돼지 사냥을 끝낸 성주 이치몬지 히데토라는 일흔의 나이로 자신의 권력을 아들들에게 넘겨주겠다는 결심을 굳힌다. 그리고 사냥을 함께 한 다른 영주는 자신의 딸을 그의 아들과 혼인시키려 한다. 아들들을 따로 불러 모은 그는 오랫동안 곰곰이 생각해서 내린 결정이라며 장남인 타로가 자신의 뒤를 이어 가문을 이끌 것이라 선언한다. 그리고 둘째, 셋째 아들인 지로와 사부로에게는 두 번째와 세 번째 성과 그에 딸린 영토를 주겠다고 한다. 그는 난세에 외곽에서 호위대를 거느리고 자식들에게 기대어 안락하게 여생을 보낼 생각이였다. 하지만 막내인 사부로는 그 자리에서 아버지가 망령이 들었다고 비난하게 되고 이에 분개한 히데토라는 사부로와 절연한다. 충직한 탄고가 사부로를 감싸지만 그는 들은 체 만 체다. 그 과정을 지켜본 후지마키는 사부로를 자신의 영지로 받아들인다. 한편 처음에는 권력에 별로 욕심이 없었던 장남 타로는 ‘모든 권력과 호칭을 넘겨받지 못하면 그림자에 불과하다’는 아내 카에데의 부추김에 차츰 히데토라의 권력을 완전히 차지하려고 한다. 그리고 그 사이 히데토라가 타로의 부하를 화살로 쏴 죽이는 일까지 발생하면서 갈등이 점점 고조되는데...', 160, '', 'RELEASED', 19.151000, 8.067000, 11859533, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11645 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11645 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11645 AND g.name = '역사';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 70131, '나카다이 타츠야', '/4LygOe0vFQplLIft5IUWI5OewPX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나카다이 타츠야');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lord Hidetora Ichimonji', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11645 AND a.name = '나카다이 타츠야';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 70132, '寺尾聰', '/6Q6AoPCEbGzC8cmLZC7yZRXgk1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '寺尾聰');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Taro Takatora Ichimonji', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11645 AND a.name = '寺尾聰';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 70133, '根津甚八', '/wMGQ7RgZ1vf6siHhnnqbb63Yks0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '根津甚八');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jiro Masatora Ichimonji', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11645 AND a.name = '根津甚八';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 70134, '隆大介', '/dRPberqnxaxmNKAehZT6xXhEsWY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '隆大介');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Saburo Naotora Ichimonji', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11645 AND a.name = '隆大介';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 72607, '하라다 미에코', '/iONtBVZuIz8xh6IT3TmSqeDxt0q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하라다 미에코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lady Kaede', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11645 AND a.name = '하라다 미에코';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 5026, '구로사와 아키라', '/eGexa6MZ22T1MZxce1qR3RcAYaS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '구로사와 아키라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 11645 AND d.name = '구로사와 아키라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/i6Y66eFjGE2HBS0509rum76xNwd.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 11645;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8wdxa4JgiAXvITgqkra1W0Dpii5.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 11645;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (522518, '안녕 베일리', '2019-05-03', '프로환생견 베일리의 견생 N차 미션! 우리에게 전하는 유쾌하고 가슴 뭉클한 인사!', '환생만 벌써 5번째! 도무지 끝날 줄 모르는 ‘베일리’의 삶에 새로운 미션이 생겼다?! 바로 ‘이든’의 작은 베이비 ‘씨제이’를 돌보는 것. 소꿉놀이도 해야 하고 위험한 곳에 들어가면 짖어서 알려줘야 하고, ‘씨제이’와 함께 해야 할 일이 너무나도 많이 남았는데 ‘씨제이’는 ‘베일리’와 ‘이든’의 곁을 떠나 도시로 향한다. 7년 후 ‘몰리’로 다시 태어난 ‘베일리’는 우여곡절 끝에 ‘씨제이’의 집으로 입양되고 ‘씨제이’가 행복할 때, 슬플 때, 외로울 때 항상 옆에 있어준다. 주유소의 ‘빅독’으로 다시 태어난 ‘베일리’. ‘씨제이’를 만나기만을 기다리지만 우연히 만나게 된 ‘씨제이’는 ‘베일리’를 알아보지 못하고 떠나버린다. 킁킁킁… 어디서 ‘씨제이’ 냄새 안나요? ‘맥스’로 환생한 ‘베일리’는 오직 일견단심 ‘씨제이’를 기다리던 중 유기견 입양소에서 드디어 ‘씨제이’를 다시 만나게 된다. 인생은 길고 견생은 짧다는데, 저 녀석을 끝까지 지켜줄 수 있을까?', 109, '전체관람가', 'RELEASED', 44.897000, 8.100000, 78871079, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 522518 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 522518 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 522518 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19838, 'Marg Helgenberger', '/wPfXSAsk1l9Ry2sqN1Ei8GwjI9E.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marg Helgenberger');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hannah Montgomery', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 522518 AND a.name = 'Marg Helgenberger';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 92572, '베티 길핀', '/hBOviIHCVqbWyyPUoIxZohDl5SL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '베티 길핀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gloria Mitchell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 522518 AND a.name = '베티 길핀';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1530941, '헨리', '/gU1anQpUKJZUDqo4Rjj66HDBaQB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헨리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Trent', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 522518 AND a.name = '헨리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 220236, 'Kathryn Prescott', '/h4K970PqPapI69OBd84aP0GYIiF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kathryn Prescott');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Clarity June "CJ" Mitchell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 522518 AND a.name = 'Kathryn Prescott';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6065, '데니스 퀘이드', '/lMaDAJHzsKH7U3dln2B3kY3rOhE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데니스 퀘이드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ethan Montgomery', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 522518 AND a.name = '데니스 퀘이드';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1212755, 'Gail Mancuso', '/yacqdjB95BaD28ZW1zhy3yeBujm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Gail Mancuso');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 522518 AND d.name = 'Gail Mancuso';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/eeSXArYcWGI0ubSrQ45XelaGx2V.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 522518;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/i109vzdCkG7W3H9FxHmfpZjgh61.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 522518;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1091, '괴물', '1982-06-25', '인간은 가장 따뜻한 은신처다.', '남극의 노르웨이 탐사팀이 이상한 개를 쫓아 미국 기지까지 오게 된다. 거의 발광하다시피 개를 공격하다가 그만 방어하던 미국인들에게 사살된다. 미국인들은 진상을 조사하기 위해 노르웨이 기지로 사람을 보낸다. 그곳은 사람은 하나도 없고 이상하게 일그러진 시체와 잔해들을 발견한다. 시체들을 해부해 봤지만 별 이상이 발견되지는 않았다. 그러던 어느 날 노르웨이 탐사팀의 추격을 받았던 개가 개집에서 끔찍한 괴물로 변하게 되는데...', 109, '19', 'RELEASED', 74.306000, 8.100000, 19629760, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1091 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1091 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1091 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6856, '커트 러셀', '/6g1d98oH4miG4k0ZiZWmF3Dt0bO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '커트 러셀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'MacReady', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1091 AND a.name = '커트 러셀';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 65827, '키스 데이비드', '/jJLJuR7FNHYL1fB5igjj7IXzOel.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키스 데이비드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Childs', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1091 AND a.name = '키스 데이비드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11065, 'Wilford Brimley', '/pOfcXSGKiHcdFIcnhBV3ibGUruW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Wilford Brimley');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Blair', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1091 AND a.name = 'Wilford Brimley';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 15411, 'T.K. Carter', '/rqlDLtg8USZsO07VEiYQpQyjyA2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'T.K. Carter');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nauls', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1091 AND a.name = 'T.K. Carter';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 15412, 'David Clennon', '/1N4KuiRXoX5fAJu9vHpiPOJRGLG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'David Clennon');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Palmer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1091 AND a.name = 'David Clennon';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 11770, '존 카펜터', '/3Qp0mg61u1qSZNJh30BFEUZrIMG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '존 카펜터');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1091 AND d.name = '존 카펜터';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sJfEZgPQpxFn6TVx96Im3GeMYzG.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1091;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oVa4o0C5Fa7G36qHY48n3KHGBDX.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1091;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (11423, '살인의 추억', '2003-05-02', '미치도록 잡고 싶었다', '1986년 경기도. 젊은 여인이 무참히 강간, 살해당한 시체로 발견된다. 2개월 후 비슷한 수법의 강간살인사건이 연이어 발생하면서 사건은 세간의 주목을 받기 시작하고, 일대는 연쇄살인이라는 생소한 범죄의 공포에 휩싸인다. 사건 발생 지역에 특별수사본부가 설치되고, 수사본부는 구희봉 반장을 필두로 지역토박이 형사 박두만과 조용구, 그리고 서울 시경에서 자원해 온 서태윤이 배치된다. 육감과 폭력으로 수사를 진행하는 박형사와 증거와 과학수사를 추구하는 서형사는 수사 내내 마찰을 일으키는데...', 127, '', 'RELEASED', 50.665000, 8.063000, 26000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11423 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11423 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11423 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20738, '송강호', '/7dw9wIpFZ5nJZ3zqrue8t7hUUgQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '송강호');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Detective Park Doo-man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11423 AND a.name = '송강호';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 69378, '김상경', '/5VKIhf0ZVxqtrZfyMPbubZz3INr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김상경');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Detective Seo Tae-yoon', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11423 AND a.name = '김상경';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 69379, '김뢰하', '/bGHnBUrBKk2ItXDZJrBDnBeQJvj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김뢰하');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Detective Cho Yong-koo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11423 AND a.name = '김뢰하';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1080904, '송재호', '/gLKek8JICZXq4YdJpOd3jECaLCA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '송재호');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sergeant Shin Dong-chul', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11423 AND a.name = '송재호';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 116180, '변희봉', '/fV8BtRziGqUsBozd1G6lEwmW2b5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '변희봉');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sergeant Koo Hee-bong', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11423 AND a.name = '변희봉';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 21684, '봉준호', '/tKLJBqbdH6HFj2QxLA5o8Zk7IVs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '봉준호');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 11423 AND d.name = '봉준호';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3I1Ng4sxDUyPOdVu3lQ20N14PGE.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 11423;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2NArMoObkAbnIPvqlHC3gRGsfBb.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 11423;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (42229, '특별한 날', '1977-08-11', '', '전 유럽에 파시즘의 기운이 퍼져가던 1938년, 이탈리아에 히틀러가 방문하자 그 분위기는 더욱 고조된다. 그러나 이런 열기와 무관하게 평범한 일상을 보내던 가정주부 안토니에타는 우연히 알게 된 맞은편 집의 기자 가브리엘레와 가까워진다.', 106, '', 'RELEASED', 11.503000, 8.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 42229 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 42229 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16757, '소피아 로렌', '/94Kglg5dsAgOKG76230FFN7m6W3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '소피아 로렌');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Antonietta Taberi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 42229 AND a.name = '소피아 로렌';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5676, '마르첼로 마스트로얀니', '/bfLnFfNfMC73Q7WW90xQy2PvRZm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마르첼로 마스트로얀니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gabriele', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 42229 AND a.name = '마르첼로 마스트로얀니';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17580, 'John Vernon', '/xlHU7X2FhjnZVxu7fjoguCWlXeC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'John Vernon');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Emanuele Taberi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 42229 AND a.name = 'John Vernon';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 548631, 'Françoise Berd', '/ymExCTsnky6M3xs7Om9HHWSKJOK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Françoise Berd');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Concierge', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 42229 AND a.name = 'Françoise Berd';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 548632, 'Patrizia Basso', '/lrJFKTEW4RP3wl1FfntZlkxmIa8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Patrizia Basso');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Romana Taberi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 42229 AND a.name = 'Patrizia Basso';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 31894, '에토레 스콜라', '/f4Y5YwFwgvTSGHuYqiAKuvCapI8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '에토레 스콜라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 42229 AND d.name = '에토레 스콜라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xaiFqvBA0IYGFDu2sEAszAFl3nF.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 42229;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/y5ebTEBtpLn8PprGTWQhDfq33k8.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 42229;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (381284, '히든 피겨스', '2016-12-10', '세상의 편견에 맞선 정면돌파 그녀들이 온다', '천부적인 수학 능력을 가진 캐서린 존슨, NASA 흑인 여성들의 리더이자 프로그래머 도로시 본 , 흑인 여성 최초의 NASA 엔지니어를 꿈 꾸는 메리 잭슨. 미국과 러시아의 치열한 우주 개발 경쟁이 벌어지고 있던  시절, 천부적인 두뇌와 재능을 가진 그녀들이 NASA 최초의 우주궤도 비행 프로젝트에 선발된다. 하지만 유색인종 전용 화장실을 사용해야 하고, 중요한 회의에 참석할 수 없으며, 공용 커피 포트조차 용납되지 않는 따가운 시선에 점점 지쳐 간다. 한편 프로젝트는 난항을 겪게 되고, 해결 방법은 비전을 제시할 수 있는 새로운 수학 공식을 찾아내는 것뿐인데...', 127, '12', 'RELEASED', 77.966000, 8.059000, 236000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 381284 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 381284 AND g.name = '역사';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 40036, '타라지 P. 헨슨', '/jUU2X9mDwJaAniEmJOfvImBS9qb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '타라지 P. 헨슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Katherine G. Johnson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 381284 AND a.name = '타라지 P. 헨슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6944, '옥타비아 스펜서', '/35SOy4yQZ9xRSJ0q1L5RLhXfhqN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '옥타비아 스펜서');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dorothy Vaughan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 381284 AND a.name = '옥타비아 스펜서';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1005852, '자넬 모네', '/axTIbPz6ZbqlcCwkNBgD59gY3lx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '자넬 모네');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mary Jackson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 381284 AND a.name = '자넬 모네';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1269, '케빈 코스트너', '/bykmxJHLfbFM3NT05RZXhx8YTzF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케빈 코스트너');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Al Harrison', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 381284 AND a.name = '케빈 코스트너';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 205, '커스틴 던스트', '/5dI5s8Oq2Ook5PFzTWMW6DCXVjm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '커스틴 던스트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vivian Mitchell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 381284 AND a.name = '커스틴 던스트';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1141683, 'Theodore Melfi', '/hn2z28ofSNRxx4UTo6qOqzYCx0u.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Theodore Melfi');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 381284 AND d.name = 'Theodore Melfi';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wZPcpIyZx43nXEgrc9NvQUyoxtr.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 381284;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rfkIeCaIHhN3K5wjJJqKmfUjYp8.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 381284;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (638507, '드래곤 길들이기: 홈커밍', '2019-12-03', '', '스노글토그에 히컵과 투슬리스, 라이트 퓨리와 새끼들까지 모두 버크 섬에 모인다', 22, '', 'RELEASED', 65.727000, 8.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 638507 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 638507 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 638507 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 638507 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 638507 AND g.name = '가족';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 449, '제이 바루첼', '/1GYJeQzPcY9Pfmc3FFsBwClkCv7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이 바루첼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hiccup Horrendous Haddock III (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 638507 AND a.name = '제이 바루첼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 59174, '아메리카 페레라', '/7F84Lh2lKpvkM3EiOvqqvlOmw93.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아메리카 페레라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Astrid Hofferson (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 638507 AND a.name = '아메리카 페레라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17276, '제라드 버틀러', '/rTO5opVC3Gs6hPYAxWSP9eEjogi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제라드 버틀러');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Stoick the Vast (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 638507 AND a.name = '제라드 버틀러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 24264, 'Craig Ferguson', '/mBxNrOxdQeM7bVBveE47Syj9ES6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Craig Ferguson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gobber the Belch (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 638507 AND a.name = 'Craig Ferguson';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 54691, '크리스토퍼 민츠플라스', '/dnj2qyxmPt5JF5uurbXQLegppAx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스토퍼 민츠플라스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fishlegs Ingerman (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 638507 AND a.name = '크리스토퍼 민츠플라스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 52870, '팀 존슨', '/yQkP9wuYcIceIzH9QnECNqVwkAr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '팀 존슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 638507 AND d.name = '팀 존슨';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kXj2Qrfm994yLeuADqbOieU1mUH.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 638507;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lI2AHx0QQrNnEkUqUG01QHUdLDW.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 638507;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (821, '뉘른베르크의 재판', '1961-12-18', '', '뉘른베르크 전범재판은 2차세계대전에서 승리한 연합국이 주체가 되어 패전국 독일이 제3제국의 이름으로 저지른 반인도적 행위에 대해 개인적 책임을 추궁한 역사적 사건이다. 2차대전을 일으킨 독일이 연합군의 힘에 밀려 참패하자 연합군은 전범들을 재판하게 된다. 이영화에서 다루는 피고는 전쟁당시 재판관들이다. 미국측 재판관 헤이우드는 독일군 고위층 부부가 살던 대 저택에 머물게 되는데 이집의 전 여주인을 알게 된다. 그리고 전쟁후 남편이 독일군이었다는 이유로 미국인에 살해당한 이 부인을 만나면서부터 독일군들이 인도주의적 정신보다는 나라에 대한 충성심을 더 강요받았다는 사실을 깨닫게 된다. 재판이 진행되는 동안 시종일관 침묵으로 일관하던 피고 언스트 야닝은 나중에야 자신과 동료들의 부정 부패를 고발하고 그것을 알고도 침묵했던 자신이 가장 사악한 사람이라며 자신의 잘못을 고백한다. 헤이우드는 전쟁이라는 상황과 비인도적인 판결을 내릴 수밖에 없었던 독일 재판관들의 입장을 고뇌하다 사형대신 종신형을 선고하는데...', 191, '', 'RELEASED', 18.786000, 8.100000, 10000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 821 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 821 AND g.name = '역사';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12147, '스펜서 트레이시', '/aUZUlQjiWvl23stKXzxycb31sen.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스펜서 트레이시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dan Haywood', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 821 AND a.name = '스펜서 트레이시';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12149, 'Richard Widmark', '/fvR0fQcGTVzmHZUGfPocqT6pRgJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Richard Widmark');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tad Lawson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 821 AND a.name = 'Richard Widmark';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12150, 'Maximilian Schell', '/6WLkJ6Lj8bhO3MdV8EBx41ZWjbL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Maximilian Schell');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hans Rolfe', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 821 AND a.name = 'Maximilian Schell';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 13784, '버트 랭커스터', '/oun90iqgrb7A81rkV5Ap8tOXbI6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '버트 랭커스터');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ernst Janning', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 821 AND a.name = '버트 랭커스터';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2896, '마를레네 디트리히', '/9AxXKUr9CLfy5Lcg3JaNRbWD6Be.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마를레네 디트리히');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mrs. Bertholt', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 821 AND a.name = '마를레네 디트리히';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 4081, '스탠리 크레이머', '/fNbpcXaHD0xTrekOxPDvTBMdmin.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '스탠리 크레이머');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 821 AND d.name = '스탠리 크레이머';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/b6vYatvui1EXeFYfpDX4rcbueuP.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 821;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/37lz7mPo3AWV2BiaF7TA6ZWqL5u.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 821;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (120467, '그랜드 부다페스트 호텔', '2014-02-26', '세계 최고 부호 마담 D의 죽음을 둘러싼 기상천외한 사건', '1927년 세계대전이 한창이던 어느 날, 세계 최고 부호 마담 D가 그랜드 부다페스트 호텔에 다녀간 지 얼마 지나지 않아 의문의 살인을 당한다. 그녀는 유언을 통해 가문 대대로 내려오던 명화 사과를 든 소년을 전설적인 호텔 지배인이자 연인 구스타브 앞으로 남긴다.  마담 D의 유산을 노리고 있던 그의 아들 드미트리는 구스타브를 졸지에 유력한 용의자로 지목하게 되고, 구스타브는 충실한 호텔 로비보이 제로와 함께 누명을 벗기기 위한 기상천외한 모험을 시작한다.', 100, '18', 'RELEASED', 61.595000, 8.000000, 174600318, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 120467 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 120467 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5469, '레이프 파인스', '/tJr9GcmGNHhLVVEH3i7QYbj6hBi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레이프 파인스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'M. Gustave', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 120467 AND a.name = '레이프 파인스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1164, 'F. 머레이 에이브러햄', '/nRbIHvVpz5jfQbKlnBAJN10qaLo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'F. 머레이 에이브러햄');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Moustafa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 120467 AND a.name = 'F. 머레이 에이브러햄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8789, '마티유 아말릭', '/j9PWIR367ikxxPIrIKlAiEswZDm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마티유 아말릭');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Serge X.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 120467 AND a.name = '마티유 아말릭';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3490, '에이드리언 브로디', '/qBc7ahQrpVpcllaZ5hkivsOEb3C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에이드리언 브로디');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dmitri', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 120467 AND a.name = '에이드리언 브로디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5293, '윌렘 대포', '/ui8e4sgZAwMPi3hzEO53jyBJF9B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '윌렘 대포');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jopling', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 120467 AND a.name = '윌렘 대포';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 5655, '웨스 앤더슨', '/b1LH059EGnU01rsZwcqYzNjY7w9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '웨스 앤더슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 120467 AND d.name = '웨스 앤더슨';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kDByLWU30umAUyetDnmdptUMVap.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 120467;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xHDynIimfsgj0ZOs0j5ma8v1vmM.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 120467;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (800, '잊혀진 사람들', '1950-12-09', '', '멕시코시티의 악명 높은 빈민가에서 폭력적인 삶을 살아가는 청소년 비행자 그룹, 그중에서도 어린 페드로는 다른 청소년들에 의해 점차 도덕성이 타락하고 파괴되어 갑니다.', 82, '', 'RELEASED', 17.714000, 8.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 800 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 800 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11973, 'Estela Inda', '/AlHcvuKeHtx9ffUayaZlV3Zip8K.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Estela Inda');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mother', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 800 AND a.name = 'Estela Inda';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11974, 'Miguel Inclán', '/l1bA5pdWi7kbwC5RLUGu0AjcraD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Miguel Inclán');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Carmelo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 800 AND a.name = 'Miguel Inclán';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11972, 'Alfonso Mejía', '/lR8vMMpTX5dK5MrfidRYR4qDo5C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alfonso Mejía');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pedro', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 800 AND a.name = 'Alfonso Mejía';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11975, 'Roberto Cobo', '/kC6lOsSBDKoi4UaClUx7okHlxyQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Roberto Cobo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jaibo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 800 AND a.name = 'Roberto Cobo';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11976, 'Alma Delia Fuentes', '/vuxgGTLVUi3sTUO2GkzkR3A6SeP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alma Delia Fuentes');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Meche', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 800 AND a.name = 'Alma Delia Fuentes';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 793, '루이스 부뉴엘', '/a7wib1eRG6TyonDXpAbF7PZd0f8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '루이스 부뉴엘');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 800 AND d.name = '루이스 부뉴엘';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4LJqMc5nM48O18iNSrbSbMCKQu7.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 800;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/b4VAgPHGL33OA5QNZCYi0jU5Nma.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 800;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (823754, '보 번햄: 못 나가서 만든 쇼', '2021-07-22', '', '정말 이상한 1년이었다. 집 밖으로 나가지를 못했다. 그래도 새로운 노래와 신선한 시각을 얻었으니, 어떻게든 보여줘야지. 격리 상태의 보 번햄. 그가 쓰고 찍고 공연한 코미디 스페셜이다.', 87, '', 'RELEASED', 11.640000, 8.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 823754 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 823754 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 115128, 'Bo Burnham', '/xMAatohXadCfz9ipvqvIaTLwOmV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bo Burnham');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Self', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 823754 AND a.name = 'Bo Burnham';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 115128, 'Bo Burnham', '/xMAatohXadCfz9ipvqvIaTLwOmV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Bo Burnham');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 823754 AND d.name = 'Bo Burnham';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ku1UvTWYvhFQbSesOD6zteY7bXT.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 823754;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9sfVyE3sP2dkCwDyV7UlYP5TAAR.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 823754;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (785534, '구겨진 인생들', '2021-03-12', '', '빈곤의 그림자가 짙게 드리운 이스탄불의 어느 거리. 날로 악화되는 병마와 싸우던 고물상 메흐메트가 한 아이를 만난다. 오랜 세월 잊고 살았던, 불우한 어린 시절의 자신과 너무나 닮은 작고 소중한 아이를.', 96, '', 'RELEASED', 26.930000, 8.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 785534 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1252061, 'Çağatay Ulusoy', '/sKMcp6E7DYoWWKdiiFkhXp0kmxe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Çağatay Ulusoy');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mehmet', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 785534 AND a.name = 'Çağatay Ulusoy';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2934254, 'Emir Ali Doğrul', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Emir Ali Doğrul');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ali', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 785534 AND a.name = 'Emir Ali Doğrul';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1948899, 'Ersin Arıcı', '/5NOZpOapbhcGHPO3GhwTaQIuYc0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ersin Arıcı');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gonzales', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 785534 AND a.name = 'Ersin Arıcı';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 143249, 'Turgay Tanülkü', '/8SJXW2utHtBgV2RZZMYfIpNflP0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Turgay Tanülkü');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tahsin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 785534 AND a.name = 'Turgay Tanülkü';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1514727, 'Selen Öztürk', '/xgiTYVwDQA7jYDmnFdJWJS87PmD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Selen Öztürk');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mom', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 785534 AND a.name = 'Selen Öztürk';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1876416, 'Can Ulkay', '/37ZlEKDZUrYcysyHTD6YMee5EvI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Can Ulkay');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 785534 AND d.name = 'Can Ulkay';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/22iaAAr3LZucqLZJ5M8w52gwNiR.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 785534;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ctckqAvz9aTZDtfXLmDUdMflesU.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 785534;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (7347, '엘리트 스쿼드', '2007-10-12', '', '1980년대 중반 폴란드 출신 교황 바오로 6세가 브라질 리우데자네이로에 세 번째 방문을 하는데 하필 유명한 슬럼가 favela 역의 한 호텔에 묵는다고 고집을 피운다. 국민의 95% 이상이 천주교인이기 때문에 교황이 위태로워져서도 안되고 한 방의 총소리도 근처에서 들리지 않게 하기 위해 브라질 정부는 몸살이 난다.  교황방문 6개월 전, 극심한 부패로 경외와 경멸을 동시에 받으며 경찰 위신은 바닥에 떨어져 있는 상태에 언제 어디서 총을 맞을지 모르는 이 지역에 두 명의 경찰 신참이 들어오는데...', 115, '', 'RELEASED', 35.705000, 8.046000, 14759148, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 7347 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 7347 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 7347 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 52583, '바그네르 모라', '/6gcfwvOueJKhDpTP9KLGuWz0Hk4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '바그네르 모라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Capitão Nascimento', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 7347 AND a.name = '바그네르 모라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 52585, 'André Ramiro', '/t0UlmNhX0eqj0KMLaOijvHQ9qLa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'André Ramiro');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'André Matias', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 7347 AND a.name = 'André Ramiro';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 52584, 'Caio Junqueira', '/eBWowtTWdpSrwkObEF0ND8KWEHh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Caio Junqueira');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Neto', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 7347 AND a.name = 'Caio Junqueira';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 52586, 'Milhem Cortaz', '/vA9hgFemy6JHxgjdbQW78xZyAnq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Milhem Cortaz');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Capitao Fabio', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 7347 AND a.name = 'Milhem Cortaz';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 469968, 'Fernanda Machado', '/1jINiDIeYSO2FLjPmnzXWRFqZ2b.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Fernanda Machado');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maria', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 7347 AND a.name = 'Fernanda Machado';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 52576, 'José Padilha', '/1v2CvKDLEqxNjZk26Zby0dpasnC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'José Padilha');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 7347 AND d.name = 'José Padilha';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/atl4a9VFVP7JYvk4GeSgqhLOfjC.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 7347;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tGb044NgQYQJr58fta5O3OB6SpQ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 7347;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (26022, '내 이름은 칸', '2010-02-10', '천재 자폐증 남자 칸의 기적 같은 여정이 시작된다!', '자폐증을 가지고 있지만 천재적인 지적 능력과 어머니로부터 얻게 된, 세상을 바라보는 순수한 눈을 가진 칸. 그는 어머니의 죽음 이후 동생이 있는 미국으로 향한다. 칸은 우연히 만난 아름다운 싱글맘 만디라와 운명적인 사랑에 빠져 결혼을 하게 된다. 하지만, 9.11테러 이후 한 순간 행복은 깨지게 된다. 오해가 낳은 끔찍한 사건으로 모든 것을 잃은 만디라는 모든 원망을 칸에게 돌리게 되고 칸은 그녀와의 약속을 지키기 위해 대통령을 만나기 위한 여정을 시작한다. 과연 그는 대통령을 만날 수 있을까? 그리고 그가 전하려는 말은 무엇일까?', 165, '12', 'RELEASED', 25.175000, 8.000000, 42345360, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 26022 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 26022 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 35742, '샤 룩 칸', '/tCEppfUu0g2Luu0rS5VKMoL4eSw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '샤 룩 칸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rizwan Khan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 26022 AND a.name = '샤 룩 칸';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 55061, '카졸', '/akoZskln7QqmH0vgDppprc67ZbM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카졸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mandira Rathod Khan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 26022 AND a.name = '카졸';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4115011, 'Arjan Aujla', '/2CWIgJIuvR4QDDCBoAOm2CqT318.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Arjan Aujla');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sameer "Sam" Rathod Khan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 26022 AND a.name = 'Arjan Aujla';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 35792, 'Jimmy Shergill', '/1Pj38LAhEceystAgXOw4oP8Sr0m.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jimmy Shergill');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zakir Khan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 26022 AND a.name = 'Jimmy Shergill';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1332866, 'Sonya Jehan', '/oHXlXq9AfHyG8720YqY7Koo8jc6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sonya Jehan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hasina Khan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 26022 AND a.name = 'Sonya Jehan';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 35736, 'Karan Johar', '/zip1x7OXOBxXxcdYvKOgw6MnAWm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Karan Johar');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 26022 AND d.name = 'Karan Johar';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4ZI5xSdyDfuBSY4GeEJJLYfGDpQ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 26022;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/s7oObbrQrfTvcIwvmcGTUdnMCiw.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 26022;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (8422, '로코와 그의 형제들', '1960-10-07', '', '둘째 아들 시몬과 셋째 아들 로코 이야기에 나디아라는 여자가 끼어 있다. 시몬은 나디아와 사귀게 되지만 시몬의 도둑질 때문에 나디아가 결별을 통보한다. 로코는 군대에 간다. 1년 후 나디아와 로코가 우연히 길에서 마주친다. 이제 로코랑 나디아가 사귀게 된다. 북부로 이주한 한 시칠리아 가족의 삶을 통해 현대 산업 사회에서의 극빈 노동자들을 다룬 작품. <흔들리는 대지>, <레오파드>와 함께 루키노 비스콘티의 시칠리아 3부작 중 하나로 꼽는다.', 178, '', 'RELEASED', 18.518000, 8.043000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 8422 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 8422 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 15135, '알랭 들롱', '/jmu91SQe5qSmvpAnEVQTuP33FNd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '알랭 들롱');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rocco Parondi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 8422 AND a.name = '알랭 들롱';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 27442, 'Renato Salvatori', '/z6RqHnK5OpmLNDT4wRV3WkM83FM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Renato Salvatori');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Simone Parondi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 8422 AND a.name = 'Renato Salvatori';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6014, '아니 지라르도', '/2njhI92RBGwQgGhGFDA9wgdGDo9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아니 지라르도');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nadia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 8422 AND a.name = '아니 지라르도';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 54905, 'Katina Paxinou', '/gLrkWMG5OzOgUI3NmlwVKqoinYJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Katina Paxinou');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rosaria Parondi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 8422 AND a.name = 'Katina Paxinou';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 22475, 'Alessandra Panaro', '/drgFMoHrmZIt3uEamL90B47r1Gy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alessandra Panaro');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ciro''s Fiancee', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 8422 AND a.name = 'Alessandra Panaro';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 15127, '루키노 비스콘티', '/g5jT360l0LlvT9WT2UkHnQo2DhE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '루키노 비스콘티');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 8422 AND d.name = '루키노 비스콘티';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uwtuq39O7Pb4b0qrNExZXOfTiS3.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 8422;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mMY5nWGD5qQZxfpYGELsIJGrZCT.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 8422;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (310569, '세컨드 마더', '2015-06-04', '우리 엄마 어디에 있어요?', '부유한 가정에서 일하며 그 집 아들을 애지중지 키워 왔지만 정작 자신의 딸인 제시카와는 13년 째 떨어져 지내고 있는 ‘특별한 엄마’이자 완벽한 하우스메이드, ‘발’(헤지나 카제). 대학 입시를 위해 엄마가 일하는 곳으로 와 13년 만에 함께 살게 된 당차고 자유분방한 딸 ‘제시카’(카밀라 마르질라)는 꽉 막힌 엄마와 시종일관 부딪히는데...  반가운 듯 반갑지 않은 모녀의 특.별.한. 동거! ‘제시카’의 등장으로 그동안 ‘발’이 지켜왔던 평온한 삶은 흔들리고 서로를 이해할 수 없는 모녀의 갈등은 쌓여만 간다. 올 가을, 엄마와 딸 각자의 가슴 한 켠에 담아둔 이야기가 공개됩니다.', 112, '', 'RELEASED', 11.667000, 8.041000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 310569 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 228012, 'Regina Casé', '/rVtZBMj1N46vBxJ6e8HJ8CmsaAj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Regina Casé');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Val', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 310569 AND a.name = 'Regina Casé';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1342895, 'Camila Márdila', '/c2c4wh651nPAhtwD1OfBnG42DYl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Camila Márdila');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jéssica', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 310569 AND a.name = 'Camila Márdila';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1115320, 'Karine Teles', '/fj6uwX1nKxPwiNsM47gp4WVHxbY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Karine Teles');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bárbara', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 310569 AND a.name = 'Karine Teles';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 232517, 'Lourenço Mutarelli', '/fgLgbgpdxWeZ7qdqfeSzs1DmTmg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lourenço Mutarelli');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Carlos', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 310569 AND a.name = 'Lourenço Mutarelli';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1065193, 'Michel Joelsas', '/flxQFXUKmIjr38q2wDnZ2Hefwan.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Michel Joelsas');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fabinho', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 310569 AND a.name = 'Michel Joelsas';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 550280, 'Anna Muylaert', '/8oPBKPmVhZYZjUsj1rFO4BjNld6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Anna Muylaert');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 310569 AND d.name = 'Anna Muylaert';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/f9XO401g0H3FWxjzKFn2ZStqnPy.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 310569;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oirihXGa5nm08QssHHH4qi59Dm6.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 310569;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (147, '400번의 구타', '1959-06-03', '동정 없는 세상을 향한 이유 있는 반항', '열네 살 소년 앙트완은 마음 둘 곳이 없다. 엄마와 새아버지는 앙트완에게 무관심하고, 딱히 말썽을 피우려 한 것도 아닌데 학교에선 선생님에게 문제 학생으로 찍혀버렸다. 유일한 위안은 가장 친한 친구 르네와 함께 학교를 빼먹고 영화관에 가거나 거리를 돌아다니는 것. 숙제를 빼먹고, 무단 결석을 하는 등 갑갑한 현실을 벗어나고자 사소한 일탈을 일삼던 앙트완은 급기야 쪽지를 남긴 채 가출하고 가벼운 범죄를 저지르지만 냉혹한 어른들의 세상에서 그가 원하는 자유는 점점 멀어지기만 하는데...', 99, '15', 'RELEASED', 28.856000, 8.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 147 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1653, '장피에르 레오', '/zkWjuuyncnHfYpkUfEguwTTRntb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '장피에르 레오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Antoine Doinel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 147 AND a.name = '장피에르 레오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1654, 'Claire Maurier', '/rlMYKpiTIzZCw2ee3YGENJZQKPC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Claire Maurier');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gilberte Doinel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 147 AND a.name = 'Claire Maurier';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1655, 'Albert Rémy', '/k0IZ9pO6Be6pR0mRtdzVyPeuM3f.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Albert Rémy');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Julien Doinel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 147 AND a.name = 'Albert Rémy';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1658, 'Georges Flamant', '/lQwmtPsFWME63x5M7IRF6g8bLrR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Georges Flamant');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Bigey', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 147 AND a.name = 'Georges Flamant';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1659, 'Patrick Auffay', '/jpfw8Me36RsvrV8Qc8zCFfEghWe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Patrick Auffay');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'René', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 147 AND a.name = 'Patrick Auffay';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1650, '프랑수아 트뤼포', '/75zp0S5OTo8Y6nLOzherJ9s656A.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '프랑수아 트뤼포');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 147 AND d.name = '프랑수아 트뤼포';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dhr6UkJugFMTvr1p51l0iHlo9lf.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 147;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/cy7ymUaMEWRoig7LWXpfzaaw2vv.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 147;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (538362, '나의 피부로', '2018-09-12', '', '마약 공급 혐의로 이탈리아 군경찰에 체포된 청년. 경찰서와 구치소, 법원을 오가던 그는 어쩌다 병원에 실려 온 것일까. 누구도 말하지 못한 폭력의 실체가 드러난다.', 100, '', 'RELEASED', 16.163000, 8.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 538362 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1395660, 'Alessandro Borghi', '/cRnm7HQ84Ls6b91BONx0BrTUQXy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alessandro Borghi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Stefano Cucchi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 538362 AND a.name = 'Alessandro Borghi';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 128426, 'Max Tortora', '/d9qY7LSOiKe3oYSjYAjtInJr5RT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Max Tortora');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Giovanni Cucchi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 538362 AND a.name = 'Max Tortora';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 69489, '자스민 트린카', '/idxRGFkuTwxKZZNtDBTY84UzAPd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '자스민 트린카');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ilaria Cucchi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 538362 AND a.name = '자스민 트린카';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1312428, 'Milvia Marigliano', '/58GpwiQBK7ncDNVgpk32acgaxsl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Milvia Marigliano');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rita Calore', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 538362 AND a.name = 'Milvia Marigliano';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2126785, 'Elisa Casavecchia', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Elisa Casavecchia');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Giulia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 538362 AND a.name = 'Elisa Casavecchia';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1202504, 'Alessio Cremonini', '/9YlhXQ35b7i9PW4XHfCvQLmwIQg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Alessio Cremonini');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 538362 AND d.name = 'Alessio Cremonini';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jOvvIZjdbGVpPaQ8upPpZzttO3T.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 538362;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lpuehRS74pgVYIQ6ZQ2fIAaoAvo.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 538362;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (31439, '인생', '1994-05-18', '한 가족의 눈물겨운 투쟁사', '1940년대 중국, 지주의 아들로 태어난 부귀는 경제적으로 풍요롭고 아름다운 아내 가진이 있는 부러울 것 없는 남자였다. 하지만 도박에 빠져 살던 그는 결국 전 재산을 잃고, 아내는 노름에 빠진 그를 만류하다 못해 떠나버리며 아버지마저 충격으로 숨을 거두자 삶의 의욕을 잃는다. 그 후, 그는 가진이 두 아이를 데리고 돌아오자 다시 살아가기 위해 노력한다. 한번도 돈을 벌기 위해 노력해 본 적이 없는 그가 할 수 있는 것은 그림자극뿐이였다. 단원들을 모아 고달픈 공연길에 오른 부귀의 목소리에는 어느새 생의 활기가 가득하다. 어느날 공연 도중 갑자기 국민당군이 들이닥치고 부귀는 동료 추생과 함께 집에 알리지도 못하고 전쟁터로 끌려가는데...', 133, '15', 'RELEASED', 13.491000, 8.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 31439 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 31439 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 31439 AND g.name = '전쟁';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 76913, '葛优', '/s0JXQhCmKUmtxiuI2rjH8hfE470.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '葛优');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Xu Fugui', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 31439 AND a.name = '葛优';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 643, '공리', '/m3q1rIEdZmOnUVC0MSo1FcIGvp9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '공리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Xu Jiazhen', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 31439 AND a.name = '공리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 146044, 'Ben Niu', '/4OotJ4kv3BbLHfdBl5qRHyD25U3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ben Niu');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Town Chief', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 31439 AND a.name = 'Ben Niu';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 548608, '郭濤', '/s4g5lIlszWb1QxpMLO2YDNDUsMx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '郭濤');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chunsheng', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 31439 AND a.name = '郭濤';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 15170, '姜武', '/2eUlOQ4JlGUMMAPNHgxZ4uO4ONA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '姜武');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wan Erxi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 31439 AND a.name = '姜武';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 607, '장이머우', '/uU5vECl94jDQYjiRk4eOpVRMEi9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '장이머우');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 31439 AND d.name = '장이머우';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/orcM5Wqc8RUf3ycz1pkJGvk5xNV.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 31439;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/eNog8pV3p7I5OnBxDLIo97GnXOP.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 31439;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1955, '엘리펀트 맨', '1980-10-09', '', '차마 보기 힘들 만큼의 선천적인 기형을 가지고 태어나 시장에서 사람들에게 비인간적인 학대를 받으며 살아가는 ''엘리펀트 맨'', 존을 발견한 의사 프레디는 그를 병원으로 데려와 보살펴준다. 존은 흉측한 외모와는 달리 지적이고 선한 마음을 지닌 인물이였다. 그에 대한 기사와 연구논문이 세상에 알려지자 사람들은 그를 보기 위해 찾아오기 시작한다.', 124, '', 'RELEASED', 51.170000, 8.000000, 26000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1955 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1955 AND g.name = '역사';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4173, '안소니 홉킨스', '/9ukJS2QWTJ22HcwR1ktMmoJ6RSL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '안소니 홉킨스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frederick Treves', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1955 AND a.name = '안소니 홉킨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5049, '존 허트', '/8NriFCt6BxzW1Ex2TxGJfvQibrz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '존 허트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'John Merrick', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1955 AND a.name = '존 허트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10774, '앤 밴크로프트', '/ydabiabIsMBe2HsNmx43gBpqzxx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앤 밴크로프트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mrs Kendal', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1955 AND a.name = '앤 밴크로프트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11857, 'John Gielgud', '/rSyG2ypOnMVOuGtDJMYt5VV1bMr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'John Gielgud');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Carr Gomm', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1955 AND a.name = 'John Gielgud';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 13325, 'Wendy Hiller', '/eiMtiGA00Z3SzQStx7RRSVYxKUH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Wendy Hiller');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mothershead', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1955 AND a.name = 'Wendy Hiller';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 5602, '데이비드 린치', '/wwBzRDoIW6Ld64h6OkQ6ImCZKsR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '데이비드 린치');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1955 AND d.name = '데이비드 린치';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bQnsWfKx84msuplRbieAzmzAXWj.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1955;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hKpzq3U7X1C1lqnYh0WQwlPyxO5.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1955;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (106646, '더 울프 오브 월 스트리트', '2013-12-25', '세상을 발칵 뒤집은 희대의 사기극', '부자가 되는 게 꿈인 22살의 조던 벨포트는 꿈을 실현코자 월스트리트에 발을 들인다. 고객의 돈을 내 주머니로 끌어들이는 비법은 코카인과 마스터베이션에 있다고 말하는 괴짜들이 하루 종일 전화기를 붙들고 사기치는 곳, 조던에게 월스트리트의 첫인상은 그랬다. 첫 직장에 몸담은 지 1년 만에 블랙 먼데이를 경험하고 실직자가 된 조던은 현란한 언변을 무기로 위기를 기회로 만들어버린다. 친구들을 불러모아 스트래튼 오크몬트사를 세운 그는 수수료가 비싼 투기적 저가주을 팔아 돈을 긁어모으고, 주가 조작으로 억만장자가 된 후 술과 마약, 여자를 탐닉한다. 그사이 FBI는 그의 뒤를 캐기 시작하는데...', 180, '18', 'RELEASED', 124.716000, 8.000000, 392000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 106646 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 106646 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 106646 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6193, '레오나르도 디카프리오', '/wo2hJpn04vbtmh0B9utCFdsQhxM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레오나르도 디카프리오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jordan Belfort', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 106646 AND a.name = '레오나르도 디카프리오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 21007, '조나 힐', '/cymlWttB83MsAGR2EkTgANtjeRH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조나 힐');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Donnie Azoff', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 106646 AND a.name = '조나 힐';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 234352, '마고 로비', '/euDPyqLnuwaWMHajcU3oZ9uZezR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마고 로비');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Naomi Lapaglia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 106646 AND a.name = '마고 로비';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10297, '매튜 매커너히', '/rUxLWWCDUF8RnDaocSqrVDJ2MS1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '매튜 매커너히');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mark Hanna', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 106646 AND a.name = '매튜 매커너히';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3497, '카일 챈들러', '/ogmGlJKxRs1nZ8BD2bH4sAP4ws6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카일 챈들러');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agent Patrick Denham', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 106646 AND a.name = '카일 챈들러';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1032, '마틴 스콜세지', '/9U9Y5GQuWX3EZy39B8nkk4NY01S.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '마틴 스콜세지');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 106646 AND d.name = '마틴 스콜세지';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/g4WhlVecCbBNhVT67ootHe6oe4A.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 106646;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7Nwnmyzrtd0FkcRyPqmdzTPppQa.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 106646;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (400928, '어메이징 메리', '2017-04-07', '덜 똑똑해도 좋아, 더 행복해질 수 있다면', '해변가 조용한 마을에서 삼촌 프랭크(크리스 에반스)와 함께 살아가는 7살 수학 천재 소녀 메리(맥케나 그레이스).  메리가 학교에 들어가면서 그녀의 천부적 재능은 세상에 알려지기 시작하고,  세계적인 수학계 저명인사이자 메리의 할머니인 에블린(린제이 던칸)은 그녀가 세상을 바꿀 수학자가 되기를 희망한다.  바닷가에서 뛰어놀기 보다 어려운 수학문제 풀기를 즐거워하는 메리 그리고,  그녀에게 세상이 필요로 하는 수학자의 길을 열어주고자 하는 할머니.  촉망받는 천재 수학자였지만 불행한 죽음을 맞은 여동생과 약속한 메리의 평범하고 행복한 삶을 위해 이를 반대하는 삼촌 프랭크. 이들의 바람은 결국 특별한 천재 소녀 메리를 둘러싼 법적 분쟁으로 번지는데…  7살 사랑스러운 천재 소녀 메리의 선택은 어느 쪽일까?  과연 그녀는 행복해질 수 있을까?', 101, '', 'RELEASED', 57.800000, 8.029000, 40300000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 400928 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 400928 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16828, '크리스 에반스', '/3bOGNsHlrswhyW79uvIHH1V43JI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 에반스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frank Adler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 400928 AND a.name = '크리스 에반스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1172108, '맥케나 그레이스', '/9oKCy0z1AdV8j4oFitVy6e6X4OC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '맥케나 그레이스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mary Adler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 400928 AND a.name = '맥케나 그레이스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 30083, 'Lindsay Duncan', '/sgyf4vOUs5KlRmp4Uuw7UXKjU2b.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lindsay Duncan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Evelyn Adler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 400928 AND a.name = 'Lindsay Duncan';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 213001, '제니 슬레이트', '/iNpXig5Djkh5moYG4TCekIATs5B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제니 슬레이트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bonnie Stevenson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 400928 AND a.name = '제니 슬레이트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6944, '옥타비아 스펜서', '/35SOy4yQZ9xRSJ0q1L5RLhXfhqN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '옥타비아 스펜서');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Roberta Taylor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 400928 AND a.name = '옥타비아 스펜서';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 87742, '마크 웹', '/bWN7EexCL0H52bOuyVWvxRUu1H5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '마크 웹');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 400928 AND d.name = '마크 웹';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rn0TQDEXJyvwX49Ht33t3N3zq6y.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 400928;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6MmYsaK6poR8f4R8jsBnJBU5tfd.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 400928;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (912649, '베놈: 라스트 댄스', '2024-10-22', '죽음이 갈라놓을 때까지', '환상의 케미스트리의 에디 브록과 그의 심비오트 베놈은 그들을 노리는 정체불명 존재의 추격을 피해 같이 도망을 다니게 된다. 한편 베놈의 창조자 널은 고향 행성에서부터 그들을 찾아내기 위해 지구를 침략하고 에디와 베놈은 그동안 겪어보지 못한 최악의 위기를 맞이하게 되는데…', 109, '15', 'NOW_PLAYING', 3685.151000, 6.403000, 394000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 912649 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 912649 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 912649 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2524, '톰 하디', '/d81K0RH8UX7tZj49tZaQhZ9ewH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 하디');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eddie Brock / Venom', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 912649 AND a.name = '톰 하디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5294, '추이텔 에지오포', '/kq5DDnqqofoRI0t6ddtRlsJnNPT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '추이텔 에지오포');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'General Rex Strickland', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 912649 AND a.name = '추이텔 에지오포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 36594, '주노 템플', '/wMpZcKp7zaHnmNQooqbve33577Q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '주노 템플');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Teddy Paine', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 912649 AND a.name = '주노 템플';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1861573, 'Clark Backo', '/d24KKFxfoql6PBsBPsejFgzhSlH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Clark Backo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sadie Christmas', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 912649 AND a.name = 'Clark Backo';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7026, '리스 에반스', '/1D670EEsbky3EtO7XLG32A09p92.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리스 에반스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Martin Moon', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 912649 AND a.name = '리스 에반스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 940376, 'Kelly Marcel', '/thpdVW7O1975GcA3eNs1H8UIlmd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Kelly Marcel');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 912649 AND d.name = 'Kelly Marcel';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3flIDcZF3tnR7m5OU2h7lLPQwmr.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 912649;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3V4kLQg0kSqPLctI5ziYWabAZYF.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 912649;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1034541, '테리파이어 3', '2024-10-09', '', '"아트 더 클라운"이 크리스마스 이브에 평화롭게 잠든 "마일스 카운티"의 주민들을 향해 혼돈을 일으키려 한다', 125, '', 'RELEASED', 3304.003000, 6.919000, 78573405, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1034541 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1034541 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1034541 AND g.name = '미스터리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1882502, '로렌 라베라', '/qJYWq2oZcvHh7lnGskxkrYXCom0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로렌 라베라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sienna Shaw', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1034541 AND a.name = '로렌 라베라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2787720, 'Elliott Fullam', '/dNsFLihmWfA2KCENbZCtq9AjSob.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Elliott Fullam');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jonathan Shaw', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1034541 AND a.name = 'Elliott Fullam';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1880016, '데이비드 하워드 손턴', '/9nYijs4ACzjg93zKezLiLmuRGvp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이비드 하워드 손턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Art the Clown', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1034541 AND a.name = '데이비드 하워드 손턴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1676771, 'Samantha Scaffidi', '/jwd0XXuc4ibXAXjOxmhsFP0fQEO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Samantha Scaffidi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Victoria Heyes', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1034541 AND a.name = 'Samantha Scaffidi';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 37405, 'Margaret Anne Florence', '/c2EqBueLCrn6XEnmfutylUd1icl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Margaret Anne Florence');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jessica', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1034541 AND a.name = 'Margaret Anne Florence';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 933176, 'Damien Leone', '/nX2kkYD32x2PC9rRU7DrYCRPjFE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Damien Leone');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1034541 AND d.name = 'Damien Leone';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/l1175hgL5DoXnqeZQCcU3eZIdhX.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1034541;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/18TSJF1WLA4CkymvVUcKDBwUJ9F.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1034541;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1118031, '아포칼립스 Z: 종말의 시작', '2024-10-04', '', '광견병과 유사한 질병이 지구 전역에 퍼져 사람들이 공격적인 생명체로 변한다. 마넬은 고양이와 함께 집에 숨어서 재치를 발휘해 살아남는다. 곧 둘은 식량을 구하고 육지와 바다의 안전한 곳을 찾기 위해 떠나야 한다.', 119, '', 'RELEASED', 2835.786000, 6.800000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1118031 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1118031 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1118031 AND g.name = '공포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2422766, 'Francisco Ortiz', '/iIwGt05vG5smGDiLJ7f6bMRQOOY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Francisco Ortiz');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Manel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1118031 AND a.name = 'Francisco Ortiz';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 72128, 'José María Yázpik', '/uqZE7oXEADJ1NTg7g7xRELw59Hy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'José María Yázpik');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pritchenko', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1118031 AND a.name = 'José María Yázpik';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1457340, 'Berta Vázquez', '/2QNOI5L03XomONmCR42GPyVYryy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Berta Vázquez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lucía', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1118031 AND a.name = 'Berta Vázquez';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2264694, 'Iria del Río', '/z7Dqvpnb8R13P6B5pmUCDxb2Jvv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Iria del Río');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Julia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1118031 AND a.name = 'Iria del Río';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1460406, 'Marta Poveda', '/gsQvVa5uipx5YAQ8esJevlmPjsv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marta Poveda');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Belén', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1118031 AND a.name = 'Marta Poveda';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1017209, 'Carles Torrens', '/jBGDX4BwsytGhPehgrrPKFFlIgn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Carles Torrens');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1118031 AND d.name = 'Carles Torrens';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hofZ9t2zQEYjQWNZ8cPjMByVHci.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1118031;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2fxnTXr8NwyTFkunkimJkGkhqfy.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1118031;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1184918, '와일드 로봇', '2024-09-12', '너를 통해 더 넓은 세상을 만나다', '우연한 사고로 거대한 야생에 불시착한 로봇 로즈는 주변 동물들의 행동을 배우며 낯선 환경 속에 적응해 가던 중, 사고로 세상에 홀로 남겨진 아기 기러기 브라이트빌의 보호자가 된다. 로즈는 입력되어 있지 않은 새로운 역할과 관계에 낯선 감정을 마주하고 겨울이 오기 전에 남쪽으로 떠나야 하는 브라이트빌을 위해 동물들의 도움을 받아 이주를 위한 생존 기술을 가르쳐준다. 그러나 선천적으로 몸집이 작은 브라이트빌은 짧은 비행도 힘겨워 하는데...', 102, 'ALL', 'RELEASED', 2050.517000, 8.487000, 292583746, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1184918 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1184918 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1184918 AND g.name = '가족';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1267329, '루피타 뇽오', '/y40Wu1T742kynOqtwXASc5Qgm49.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루피타 뇽오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Roz / Rummage (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1184918 AND a.name = '루피타 뇽오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1253360, '페드로 파스칼', '/9VYK7oxcqhjd5LAH6ZFJ3XzOlID.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '페드로 파스칼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fink (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1184918 AND a.name = '페드로 파스칼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1538851, '킷 코너', '/gCIdbnV9D3lzTaOB0YtuKDz6Nt0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '킷 코너');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brightbill (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1184918 AND a.name = '킷 코너';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2440, '빌 나이', '/ixFI2YCGNGJfwlpI8iyhvVZRg8C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빌 나이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Longneck (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1184918 AND a.name = '빌 나이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1381186, '스테파니 수', '/8gb3lfIHKQAGOQyeC4ynQPsCiHr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스테파니 수');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vontra (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1184918 AND a.name = '스테파니 수';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 66193, '크리스 샌더스', '/6CtrIOCxggJ5eIAWeFQqd4Hs9FP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스 샌더스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1184918 AND d.name = '크리스 샌더스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8dkuf9IuVh0VZjDTk7kAY67lU0U.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1184918;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/v9acaWVVFdZT5yAU7J2QjwfhXyD.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1184918;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (533535, '데드풀과 울버린', '2024-07-24', '', '히어로 생활에서 은퇴한 후, 평범한 중고차 딜러로 살아가던 ‘데드풀’이 예상치 못한 거대한 위기를 맞아 모든 면에서 상극인 ‘울버린’을 찾아가게 되며 펼쳐지는 도파민 폭발 액션 블록버스터.', 128, '19', 'RELEASED', 2060.103000, 7.704000, 1336816114, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 533535 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 533535 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 533535 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10859, '라이언 레이놀즈', '/6m3hkkHmKkD4MUJhng7ojE7MLKC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '라이언 레이놀즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wade Wilson / Deadpool / Nicepool', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 533535 AND a.name = '라이언 레이놀즈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6968, '휴 잭맨', '/4Xujtewxqt6aU0Y81tsS9gkjizk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '휴 잭맨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Logan / Wolverine', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 533535 AND a.name = '휴 잭맨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2324569, '엠마 코린', '/wqGOVOsHzZaHeHymIS40elGCnY0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '엠마 코린');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cassandra Nova', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 533535 AND a.name = '엠마 코린';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 15576, '매튜 맥패디언', '/2FF3Yjxd7DYR4EIJL6s2GpKDMkJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '매튜 맥패디언');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Paradox', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 533535 AND a.name = '매튜 맥패디언';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1464650, '다프네 킨', '/g325OIjIHrFr0te8ewPfhKQ2SKj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다프네 킨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Laura / X-23', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 533535 AND a.name = '다프네 킨';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 17825, '숀 레비', '/j1CXZgmfvFeD7S3PYtsEk8H3ebB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '숀 레비');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 533535 AND d.name = '숀 레비';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4Zb4Z2HjX1t5zr1qYOTdVoisJKp.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 533535;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dvBCdCohwWbsP5qAaglOXagDMtk.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 533535;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (933260, '서브스턴스', '2024-09-07', '더 나은 버전의 당신을 꿈꿔본 적 있나요?', '더 나은 버전의 당신을 꿈꿔본 적 있나요? 당신의 인생을 바꿔줄 신제품 ‘서브스턴스’. ‘서브스턴스’는 또 다른 당신을 만들어냅니다. 새롭고, 젊고, 더 아름답고, 더 완벽한 당신을. 단 한가지 규칙, 당신의 시간을 공유하면 됩니다. 당신을 위한 일주일, 새로운 당신을 위한 일주일, 각각 7일간의 완벽한 밸런스. 쉽죠? 균형을 존중한다면… 무엇이 잘못될 수 있을까요?', 140, '15', 'RELEASED', 1676.118000, 7.300000, 46818041, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 933260 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 933260 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 933260 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3416, '데미 무어', '/brENIHiNrGUpoBMPqIEQwFNdIsc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데미 무어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elisabeth', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 933260 AND a.name = '데미 무어';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1392137, '마가렛 퀄리', '/pSRCcDQBibsr6wb3FlKmEvh7zen.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마가렛 퀄리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sue', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 933260 AND a.name = '마가렛 퀄리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6065, '데니스 퀘이드', '/lMaDAJHzsKH7U3dln2B3kY3rOhE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데니스 퀘이드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Harvey', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 933260 AND a.name = '데니스 퀘이드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2313436, 'Edward Hamilton-Clark', '/q1EWL2z2xMcbf84TpOTqGs6Csxs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Edward Hamilton-Clark');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fred', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 933260 AND a.name = 'Edward Hamilton-Clark';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1508131, 'Gore Abrams', '/bKMTqbl0FYlzIC6aTMKQZNAhhXK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gore Abrams');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Oliver', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 933260 AND a.name = 'Gore Abrams';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1607016, '코랄리 파르자', '/8TlTqFD5RnJGBxxzarpvygZlRXC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '코랄리 파르자');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 933260 AND d.name = '코랄리 파르자';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pq5Wh3DE0KIBjF2kdGHn98eV1PC.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 933260;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7h6TqPB3ESmjuVbxCxAeB1c9OB1.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 933260;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (698687, '트랜스포머 ONE', '2024-09-11', '모든 것이 바뀐다', '사이버트론 행성의 지하 광산에서 일하는 변신 못 하는 하급 로봇 오라이온 팩스와 D-16. 한 번도 가보지 못한 지상 세계를 꿈꾸던 둘은 쾌활한 수다쟁이 B-127, 카리스마 넘치는 엘리타 원과 함께 출입이 금지된 지상에 도달한다. 지상에서 잠들어 있던 알파 트라이온을 만난 넷은 그의 도움으로 잠재되어 있던 변신 능력을 얻게 된다. 막강한 힘과 변신 능력으로 자유를 느낀 것도 잠시, 자신들의 행성을 지배하고 있는 거대한 배후의 존재를 알게 되며 모든 것을 바꿀 전쟁을 시작하는데…', 104, 'ALL', 'RELEASED', 1468.358000, 8.100000, 124530200, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 698687 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 698687 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 698687 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 698687 AND g.name = '가족';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 74568, '크리스 헴스워스', '/piQGdoIQOF3C1EI5cbYZLAW1gfj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 헴스워스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Orion Pax / Optimus Prime (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 698687 AND a.name = '크리스 헴스워스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 226366, '브라이언 타이리 헨리', '/2MsJh0bpyzwvOUnXOltHp3j85Pb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브라이언 타이리 헨리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'D-16 / Megatron (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 698687 AND a.name = '브라이언 타이리 헨리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1245, '스칼렛 요한슨', '/6NsMbJXRlDZuDzatN2akFdGuTvx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스칼렛 요한슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elita-1 (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 698687 AND a.name = '스칼렛 요한슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 298410, '키건마이클 키', '/xmdzYXP9j87a43FSiL138nLesuS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키건마이클 키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'B-127 (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 698687 AND a.name = '키건마이클 키';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 65717, '존 햄', '/mrXE5fZbEDPc7BEE5G21J6qrwzi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '존 햄');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sentinel Prime (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 698687 AND a.name = '존 햄';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 84496, '조시 쿨리', '/eGN0vaFmKtqHu1nFi3Lv4roQ6P2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조시 쿨리');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 698687 AND d.name = '조시 쿨리';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/c2JXlWzvXegSda8qaATr8I47kMx.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 698687;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zViRwl3ySscZnbXZJ2Q9wq3SeUG.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 698687;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (558449, '글래디에이터 II', '2024-11-13', '역사로 기억될 새로운 반란이 시작된다!', '로마의 영웅이자 최고의 검투사였던 ‘막시무스’가 콜로세움에서 죽음을 맞이한 뒤 20여 년이 흐른 후. 쌍둥이 황제 ‘게타’와 ‘카라칼라’의 폭압 아래 시민을 위한 자유로운 나라 ‘로마의 꿈’은 잊힌 지 오래다. 한편 ‘아카시우스’ 장군이 이끄는 로마군에 대패한 후 모든 것을 잃고 노예로 전락한 ‘루시우스’는 강한 권력욕을 지닌 ‘마크리누스’의 눈에 띄어 검투사로 발탁된다. 로마를 향한 걷잡을 수 없는 분노, 타고난 투사의 기질로 콜로세움에 입성하게 된 ‘루시우스’는 결투를 거듭하며 자신이 진짜 누구인지 알게 되고 마침내 로마의 운명을 건 결전을 준비하게 되는데...!', 148, '19', 'NOW_PLAYING', 1333.762000, 7.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 558449 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 558449 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2326151, '폴 메스칼', '/vrzZ41TGNAFgfmZjC2sOJySzBLd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '폴 메스칼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lucius Verus / Hanno', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 558449 AND a.name = '폴 메스칼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5292, '덴젤 워싱턴', '/jj2Gcobpopokal0YstuCQW0ldJ4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '덴젤 워싱턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Macrinus', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 558449 AND a.name = '덴젤 워싱턴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1253360, '페드로 파스칼', '/9VYK7oxcqhjd5LAH6ZFJ3XzOlID.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '페드로 파스칼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'General Acacius', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 558449 AND a.name = '페드로 파스칼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 935, '코니 닐센', '/lvQypTfeH2Gn2PTbzq6XkT2PLmn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '코니 닐센');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lucilla', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 558449 AND a.name = '코니 닐센';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1597365, '조셉 퀸', '/zshhuioZaH8S5ZKdMcojzWi1ntl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조셉 퀸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Emperor Geta', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 558449 AND a.name = '조셉 퀸';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 578, '리들리 스콧', '/zABJmN9opmqD4orWl3KSdCaSo7Q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '리들리 스콧');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 558449 AND d.name = '리들리 스콧';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/b5UXjzW5cLZhprMnlAmsVAA3G4t.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 558449;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8mjYwWT50GkRrrRdyHzJorfEfcl.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 558449;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (945961, '에이리언: 로물루스', '2024-08-13', '비명마저 집어삼킬 극강의 공포', '2142년, 부모 세대가 맞닥뜨렸던 암울한 미래를 피하려는 청년들이 더 나은 삶을 찾기 위해 식민지를 떠날 계획을 세운다. 하지만 버려진 우주 기지 로물루스에 도착한 이들은 악몽과도 같은 에이리언의 무자비한 공격에 쫓기기 시작한다. 그 누구도 그들의 절규를 들을 수 없는 우주 한가운데, 생존을 위한 치열한 사투를 벌여야 하는데...', 119, '15', 'RELEASED', 1241.065000, 7.300000, 350752564, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 945961 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 945961 AND g.name = '공포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1683343, '케일리 스패니', '/oEkEzgRwVy2UAFtbvs1umiCQl7f.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케일리 스패니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rain', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 945961 AND a.name = '케일리 스패니';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2761308, '데이비드 존슨', '/nIT9PmgMHHwSYG39hjqL6vv3TWU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이비드 존슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Andy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 945961 AND a.name = '데이비드 존슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2164506, 'Archie Renaux', '/uTd18t2VJovN2jSJyhuG8Yy3PV6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Archie Renaux');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tyler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 945961 AND a.name = 'Archie Renaux';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1428070, '이사벨라 메르세드', '/zfLScjMHJWkGMzvDZmb1tpsBHuk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이사벨라 메르세드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kay', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 945961 AND a.name = '이사벨라 메르세드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2304140, 'Spike Fearn', '/o1WcXkDdlN5wdL5WIuGXNpNouZ9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Spike Fearn');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bjorn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 945961 AND a.name = 'Spike Fearn';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 932248, '페데 알바레즈', '/f8KjBkmqAyNGTUkZh1oYIURP4id.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '페데 알바레즈');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 945961 AND d.name = '페데 알바레즈';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/AmWTYg3RCMv7fbQxwCqrxiaUhkc.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 945961;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6vn6K9oX82i6E86ZiHVxqVEMQqP.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 945961;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1051896, '아카디안', '2024-04-12', '', '문명의 대부분이 파괴된 지구, 쌍둥이 형제들이 정체를 알 수 없는 괴물들로부터 아버지 ‘폴’과 이웃들을 지키기 위해 나서며 벌어지는 액션 스릴러', 92, '19', 'RELEASED', 1213.087000, 6.000000, 859453, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1051896 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1051896 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1051896 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1051896 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2963, '니콜라스 케이지', '/iqqNNhPMrd1jMPWNiVACURaDwii.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '니콜라스 케이지');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paul', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1051896 AND a.name = '니콜라스 케이지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1274508, '제이든 리버허', '/Anx0n2hsJnHKAnMQP7ptOTfTxTI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이든 리버허');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joseph', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1051896 AND a.name = '제이든 리버허';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1810651, 'Maxwell Jenkins', '/1fLzPGmVqAuktboeneJ3Ru1ab2v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Maxwell Jenkins');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Thomas', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1051896 AND a.name = 'Maxwell Jenkins';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2270402, 'Sadie Soverall', '/wGQgTJztCKwCZA79JgvZMQhhFFs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sadie Soverall');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Charlotte', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1051896 AND a.name = 'Sadie Soverall';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1321622, 'Samantha Coughlan', '/oTcw7AFY52UYyIjPLp9ZjySwivy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Samantha Coughlan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mrs. Rose', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1051896 AND a.name = 'Samantha Coughlan';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 3879718, 'Benjamin Brewer', '/vr0ZjHGlSg5mR1cs7yC26lRdIAP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Benjamin Brewer');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1051896 AND d.name = 'Benjamin Brewer';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/spWV1eRzlDxvai8LbxwAWR0Vst4.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1051896;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9s9o9RT9Yj6nDuRJjnJm78WFoFl.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1051896;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1116490, '캐시 아웃', '2024-04-26', '완벽한 작전은 사라졌다. 지금부터 플랜 B가 시작된다!', '전설적인 강도단의 보스 ‘메이슨’(존 트라볼타) 실패로 끝난 작전 이후 은퇴하고 잠적했던 그가 옛 팀원들의 다급한 요청으로 은행 강도 현장에 도착한다.  하지만 현장은 곧 치밀한 작전 따윈 사라지고 예상치 못한 FBI 협상가까지 등장하며 엉망이 되어버린다.  ‘메이슨’은 이제 FBI에 맞서 팀원들을 지키고 인생 마지막 한탕을 성공시키기 위해 완벽한 플랜 B를 설계하기 시작하는데…', 90, '12', 'RELEASED', 1155.410000, 6.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1116490 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1116490 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8891, '존 트래볼타', '/eVWcevrvGLLqt9gkDMruqgLJPsp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '존 트래볼타');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mason Goddard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1116490 AND a.name = '존 트래볼타';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 38025, '크리스틴 데이비스', '/61TjappibaZ1i8pEFlqwK2yrR2W.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스틴 데이비스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Amelia Decker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1116490 AND a.name = '크리스틴 데이비스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 526, '루카스 하스', '/6LNGu3o2aBiYNTDkbXMDIGyQtBh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루카스 하스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shawn Goddard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1116490 AND a.name = '루카스 하스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2138143, '퀘이보', '/xnNpJvPluhit6LFxLEFlbZwHtoJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '퀘이보');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1116490 AND a.name = '퀘이보';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4286420, '노엘 구글리에미', '/26khzGvkwfTdR3f6rNAtQ39Z8OF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '노엘 구글리에미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vernon Richter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1116490 AND a.name = '노엘 구글리에미';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 17211, '랜들 에멧', '/qkSvRlmJFSPl9Y1qMiOZyfP29mU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '랜들 에멧');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1116490 AND d.name = '랜들 에멧';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4r77ZO9pKgQuW1GxjMrktyY8eUP.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1116490;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6VoxDupaW2VXfLtJyeOoGCgXSjD.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1116490;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (845781, '레드 원', '2024-10-31', '크리스마스 실종 위기, 사라진 산타를 찾기 위한 대환장 플레이', '크리스마스 D-1, 철통같은 보안을 뚫고 코드명 ''레드 원'' 산타클로스가 납치되고 크리스마스가 사라질 위기에 처했다! ''레드 원''을 찾기 위해 사령관 ''칼럼 드리프트''는 산타클로스 따위는 없다고 믿는 현상금 사냥꾼 ''잭 오말리''와 협력하기로 한다. 시작부터 삐그덕 거리는 이들 앞에 크리스마스의 존재를 위협하는 위험천만한 적들이 나타나는데…', 124, '12', 'NOW_PLAYING', 1146.666000, 6.800000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 845781 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 845781 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 845781 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 18918, '드웨인 존슨', '/5QApZVV8FUFlVxQpIK3Ew6cqotq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '드웨인 존슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Callum Drift', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 845781 AND a.name = '드웨인 존슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16828, '크리스 에반스', '/3bOGNsHlrswhyW79uvIHH1V43JI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 에반스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jack O''Malley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 845781 AND a.name = '크리스 에반스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 18999, 'J.K. 시몬스', '/ScmKoJ9eiSUOthAt1PDNLi8Fkw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'J.K. 시몬스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nick', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 845781 AND a.name = 'J.K. 시몬스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 140, '루시 리우', '/9nbtjqsx3De7hO2XDtrBQ7M9VCH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루시 리우');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zoe', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 845781 AND a.name = '루시 리우';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 934289, '키어넌 십카', '/t2FWVLTIhVRIa398mQAfN4thO5R.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키어넌 십카');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gryla', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 845781 AND a.name = '키어넌 십카';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 51851, 'Jake Kasdan', '/pIpY7zcBSpq6Z3Q1eADPtKDB043.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jake Kasdan');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 845781 AND d.name = 'Jake Kasdan';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ryYEpxWiZFmJJZUyvQCBvM5UOCU.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 845781;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rOmUuQEZfPXglwFs5ELLLUDKodL.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 845781;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1084736, '몬테크리스토 백작', '2024-06-28', '', '에드먼드 단테스는  음모에 빠져 결혼식 날 자신이 저지르지도 않은 범죄로 체포된다. 샤토 디프에서 14년 동안의 수감 생활을 끝으로 탈옥에 성공하고  꿈에 그리던 부자가 된다. 단테스는 몬테크리스토 백작으로 신분을 위장하고 세 남자에게 복수를 실행에 옮긴다.', 178, '', 'RELEASED', 941.742000, 8.266000, 73924182, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '역사';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 145121, '피에르 니네이', '/aMsGsnRPet7pZ2ppAxaRdBz4yGU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '피에르 니네이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Edmond Dantès / le Comte de Monte-Cristo / Lord Halifax', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1084736 AND a.name = '피에르 니네이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 910944, 'Bastien Bouillon', '/NNaftwlsU8rvBY4e4LX25ZTKgB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bastien Bouillon');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fernand de Morcerf', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1084736 AND a.name = 'Bastien Bouillon';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 123989, '아나이스 드무스티에', '/kObYOu3UYkNcQGg1gnl4xitwhNc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아나이스 드무스티에');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mercédès Herrera', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1084736 AND a.name = '아나이스 드무스티에';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1021689, '아나마리아 바르톨로메이', '/oU56hySuXi4Q51gX6nPcplWybQo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아나마리아 바르톨로메이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Haydée', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1084736 AND a.name = '아나마리아 바르톨로메이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 93532, 'Laurent Lafitte', '/lpF5sb1aEMEmxxfZT3u8PWGEipC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Laurent Lafitte');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gérard de Villefort', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1084736 AND a.name = 'Laurent Lafitte';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 58255, 'Alexandre de La Patellière', '/er7ZbU5inozZfFmvpwswjujxBos.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Alexandre de La Patellière');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1084736 AND d.name = 'Alexandre de La Patellière';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 57558, 'Matthieu Delaporte', '/ofOMIBoC3FyRgfPRWhQxzJMCeLy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Matthieu Delaporte');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1084736 AND d.name = 'Matthieu Delaporte';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4MlHj9EWOFIDoa4uXwcQhnf66w5.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1084736;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/llIXQAndg5kB6SWlp6ouUdO7Zxd.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1084736;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (335983, '베놈', '2018-09-28', '영웅인가, 악당인가', '진실을 위해서라면 몸을 사리지 않고 사회의 부조리를 취재하는 정의로운 열혈 기자 에디 브록. 거대 기업 라이프 파운데이션의 생체실험에 의혹을 품고 뒤를 쫓던 그는 이들의 사무실에 잠입했다가 실험실에서 외계 생물체 심비오트의 기습 공격을 받게 된다. 심비오트가 숙주의 몸과 정신을 지배할 때 능력을 발휘하는 베놈은 에디의 몸에 기생하며 갖가지 소동을 일으킨다. 한편 비밀리에 인간과 심비오트를 결합해 새로운 생명체를 만들려는 시도를 계속하던 라이프 파운데이션의 회장 드레이크 또한 심비오트의 숙주가 된다.', 112, '15', 'RELEASED', 909.623000, 6.835000, 856085151, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 335983 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 335983 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2524, '톰 하디', '/d81K0RH8UX7tZj49tZaQhZ9ewH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 하디');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eddie Brock / Venom', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 335983 AND a.name = '톰 하디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1812, '미셸 윌리엄스', '/jn3BVMVbIptz2gc6Fhxo1qwJVvW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미셸 윌리엄스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anne Weying', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 335983 AND a.name = '미셸 윌리엄스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 53240, '리즈 아메드', '/1uP9RaX7BGVx7XGTEmwObBJJzsC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리즈 아메드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Carlton Drake / Riot', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 335983 AND a.name = '리즈 아메드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 87954, 'Scott Haze', '/6cd3Jt8Vo52j8cRKbNf1j7cERhs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Scott Haze');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Security Chief Roland Treece', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 335983 AND a.name = 'Scott Haze';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 81316, '리드 스콧', '/kBAeDUDA7XJRXFLGNALlpE5d3lA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리드 스콧');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Dan Lewis', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 335983 AND a.name = '리드 스콧';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 91268, '루빈 플라이셔', '/3JLxOPFTLigSy8FjFjDyMwD9GIp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '루빈 플라이셔');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 335983 AND d.name = '루빈 플라이셔';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/x4ojC59pYfPlAP4mmy2LSkCCuK2.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 335983;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/VuukZLgaCrho2Ar8Scl9HtV3yD.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 335983;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (519182, '슈퍼배드 4', '2024-06-20', '올여름은 우리가 씹어 먹는다!', '슈트-업 하고 악당 전담 처리반 AVL이 된 에이전트 미니언즈와 미니언즈 만큼 귀여운 그루 주니어가 태어나면서 더욱 완벽해진 그루 패밀리. 이들 앞에 과거 그루의 고등학교 동창이자 그에게 체포당했던 빌런 맥심이 등장하고, 오직 그루를 향한 복수심에 불타올라 탈옥까지 감행한 맥심은 그루 패밀리의 뒤를 바짝 추격하며 위협을 가하기 시작하는데... 과연 에이전트 미니언즈와 그루 패밀리는 맥심을 막아낼 수 있을까?', 94, 'ALL', 'RELEASED', 819.146000, 7.100000, 953140610, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 519182 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 519182 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 519182 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 519182 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4495, '스티브 카렐', '/1LQDqpcDQTtQb90o9vagbuCHueb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스티브 카렐');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gru (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 519182 AND a.name = '스티브 카렐';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 41091, '크리스틴 위그', '/N517EQh7j4mNl3BStMmjMN6hId.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스틴 위그');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lucy (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 519182 AND a.name = '크리스틴 위그';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 23659, '윌 페럴', '/xYPM1OOLXZguj4FsgmOzTSUXaXd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '윌 페럴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maxime (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 519182 AND a.name = '윌 페럴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 63522, '소피아 베르가라', '/7VZL8Lupwf3rgNyc7DC3m0XNtvq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '소피아 베르가라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Valentina (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 519182 AND a.name = '소피아 베르가라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17743, '미란다 코스그로브', '/qIGeoyXEVu1LxTH34TWx1YSHyQr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미란다 코스그로브');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Margo (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 519182 AND a.name = '미란다 코스그로브';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 124748, 'Chris Renaud', '/sumBJgBqRkK4XEJ2JYXpad3MTJs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Chris Renaud');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 519182 AND d.name = 'Chris Renaud';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5hl1PEpAvZ8Ok37kB7woIssHi3X.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 519182;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lgkPzcOSnTvjeMnuFzozRO5HHw1.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 519182;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (580489, '베놈 2: 렛 데어 비 카니지', '2021-09-30', '히어로의 시대는 끝났다', '‘베놈''과 완벽한 파트너가 된 ‘에디 브록'' 앞에 ‘클리터스 캐서디''가 ‘카니지''로 등장, 앞으로 닥칠 대혼돈의 세상을 예고한다. 대혼돈의 시대가 시작되고, 악을 악으로 처단할 것인가?', 97, '15', 'RELEASED', 741.630000, 6.799000, 506863592, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 580489 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 580489 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 580489 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2524, '톰 하디', '/d81K0RH8UX7tZj49tZaQhZ9ewH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 하디');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eddie Brock / Venom', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 580489 AND a.name = '톰 하디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 57755, '우디 해럴슨', '/x9jcwNJxpbqx3YARrifLR5xU4Ty.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '우디 해럴슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cletus Kasady / Carnage', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 580489 AND a.name = '우디 해럴슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1812, '미셸 윌리엄스', '/jn3BVMVbIptz2gc6Fhxo1qwJVvW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미셸 윌리엄스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anne Weying', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 580489 AND a.name = '미셸 윌리엄스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2038, '나오미 해리스', '/41TVAcYqKKF7PGf3x7QfaLvkLSW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나오미 해리스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frances Louise Barrison / Shriek', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 580489 AND a.name = '나오미 해리스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 81316, '리드 스콧', '/kBAeDUDA7XJRXFLGNALlpE5d3lA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리드 스콧');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Dan Lewis', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 580489 AND a.name = '리드 스콧';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1333, '앤디 서키스', '/eNGqhebQ4cDssjVeNFrKtUvweV5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '앤디 서키스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 580489 AND d.name = '앤디 서키스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fHnKlSp28U648O4vm95z86Jw5tT.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 580489;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vIgyYkXkg6NC2whRbYjBD7eb3Er.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 580489;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1196470, 'Survivre', '2024-06-19', '', '', 90, '', 'RELEASED', 713.208000, 5.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1196470 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1196470 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1196470 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1196470 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1073985, 'Andreas Pietschmann', '/2eXCr0GfkjVRbPgMacZlR8fMjYL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Andreas Pietschmann');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tom', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1196470 AND a.name = 'Andreas Pietschmann';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 23671, '에밀리 드켄', '/aNGdK8n9GCzgHbxcucqdgmKM8lR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에밀리 드켄');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Julia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1196470 AND a.name = '에밀리 드켄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4340928, 'Lucas Ebel', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lucas Ebel');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ben', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1196470 AND a.name = 'Lucas Ebel';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 234921, 'Arben Bajraktaraj', '/3MYjqNvkUv0ltieUw2Hhfrs3W6y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Arben Bajraktaraj');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'L''homme au harpon', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1196470 AND a.name = 'Arben Bajraktaraj';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4980097, 'Lisa Delamar', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lisa Delamar');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cassie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1196470 AND a.name = 'Lisa Delamar';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 232898, 'Frédéric Jardin', '/uiJA1LYyfFcFUuxYBl21F6Hx7BL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Frédéric Jardin');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1196470 AND d.name = 'Frédéric Jardin';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/901kRttzfLScns7ss7RyKqG6d2A.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1196470;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/csQSGH0QU8D3Ov5YLEYuHep8ihA.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1196470;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1094974, '테이크 커버', '2024-10-04', '', '호텔의 펜트하우스에 갇힌 2명의 사설 부대 용병이 외부의 저격수와 방으로 들어오는 킬러들과의 대결을 그린 이야기', 89, '', 'RELEASED', 690.172000, 6.729000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1094974 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1094974 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 78110, '스콧 애드킨스', '/9NRr2a1riIn5CWn5McZLJlk4vxR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스콧 애드킨스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sam', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1094974 AND a.name = '스콧 애드킨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 59860, '앨리스 이브', '/tJUSx0Cw7pCnRsCWbGTX2POiTKM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앨리스 이브');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tamara', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1094974 AND a.name = '앨리스 이브';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1810180, 'Jack Parr', '/9rva81mBAVFaZUA1x7njRb32Mdq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jack Parr');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ken', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1094974 AND a.name = 'Jack Parr';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2423284, 'Billy Clements', '/nipJ22DXJBsdM1teQodwop42U6S.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Billy Clements');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brutus', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1094974 AND a.name = 'Billy Clements';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1675742, 'Mădălina Bellariu Ion', '/8M8HNOixq1S8YpJUytlIYw72F66.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mădălina Bellariu Ion');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mona', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1094974 AND a.name = 'Mădălina Bellariu Ion';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1157595, 'Nick McKinless', '/7EE9cDfjV0eAHhGyeIQOOw4UEZK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Nick McKinless');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1094974 AND d.name = 'Nick McKinless';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xNLiMNyFzKTL9PVIEulG55Hei8j.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1094974;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1aOPPkXASkd2By3EKIw66Ilx5qF.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1094974;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (889737, '조커: 폴리 아 되', '2024-10-01', '온 세상이 바로 무대', '2년 전, 세상을 뒤흔들며 고담시 아이콘으로 자리한 아서 플렉은 아캄 수용소에 갇혀 최종 재판을 앞둔 무기력한 삶을 살아간다. 그러던 어느 날, 수용소에서 운명적으로 만난 리 퀸젤은 아서의 삶을 다시 뒤바꾸며 그의 마음 속에 잠들어 있던 조커를 깨우고 리 역시 각성하며 자신을 할리 퀸이라 지칭하며 서로에게 깊이 빠져든다. 무고한 시민을 죽인 죄로 재판에 오르게 된 아서. 그는 최후의 심판대에서 할리 퀸과 함께 자신, 조커의 이야기를 시작하는데…', 138, '15', 'RELEASED', 853.370000, 5.625000, 200714058, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 889737 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 889737 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 889737 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 73421, '호아킨 피닉스', '/u38k3hQBDwNX0VA22aQceDp9Iyv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '호아킨 피닉스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Arthur Fleck', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 889737 AND a.name = '호아킨 피닉스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 237405, '레이디 가가', '/8BEujpdfDScHepZ3j9Kq2SObhE4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레이디 가가');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lee Quinzel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 889737 AND a.name = '레이디 가가';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2039, '브렌던 글리슨', '/dTS2y7FLsnrskf0tPb8f9H7KAP3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브렌던 글리슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jackie Sullivan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 889737 AND a.name = '브렌던 글리슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2229, '캐서린 키너', '/n4CTwGszs6cwS1wJRlDQ5Mlh7Ex.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '캐서린 키너');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maryanne Stewart', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 889737 AND a.name = '캐서린 키너';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1545693, '재지 비츠', '/ijrT4pvALvxU0gphea4YxDnDh6e.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '재지 비츠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sophie Dumond', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 889737 AND a.name = '재지 비츠';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 57130, '토드 필립스', '/A6FPht87DiqXzp456WjakLi2AtP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '토드 필립스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 889737 AND d.name = '토드 필립스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dA1TGJPTVjlqPc8PiEE2PfvFBUp.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 889737;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uGmYqxh8flqkudioyFtD7IJSHxK.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 889737;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (976734, '카나리 블랙', '2024-10-10', '', 'CIA 최고 요원 에이버리 그레이브스(케이트 베킨세일)는 납치된 남편을 구하기 위해 조국을 배신하라는 테러리스트의 협박을 받는다. 팀과 단절된 그녀는 납치범들이 원하는 정보를 찾기 위해 지하세계의 인맥에 도움을 청한다. 매번 배신을 당하는 에이버리는 글로벌 위기를 촉발할 수 있는 몸값을 전달하기 위해 치명적인 경쟁에 뛰어들게 되는데...', 103, '', 'RELEASED', 701.920000, 6.318000, 525704, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 976734 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 976734 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 976734 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3967, '케이트 베킨세일', '/9RnPZhX9PXaHL4PFE65RUQLSewt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케이트 베킨세일');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Avery Graves', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 976734 AND a.name = '케이트 베킨세일';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 36669, '루퍼트 프렌드', '/mYgY8LrMkQ4OkGTIOf6MtkbMnnW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루퍼트 프렌드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'David Brooks', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 976734 AND a.name = '루퍼트 프렌드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 9825, 'Saffron Burrows', '/2qMLZh9XWquBt7TZF9wmDiOtJdm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Saffron Burrows');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elizabeth Mills', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 976734 AND a.name = 'Saffron Burrows';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 56614, '레이 스티븐슨', '/msafbswGI6uisRuNvQ8a1wMF5Ca.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레이 스티븐슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jarvis Hedlund', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 976734 AND a.name = '레이 스티븐슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 44736, 'Goran Kostić', '/m6CEa5UjqhPzLRbUNHku9GpvCmQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Goran Kostić');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Breznov', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 976734 AND a.name = 'Goran Kostić';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 35453, 'Pierre Morel', '/pfuvCNPt4BtK81GnMy4GpxYoCs9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Pierre Morel');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 976734 AND d.name = 'Pierre Morel';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hhiR6uUbTYYvKoACkdAIQPS5c6f.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 976734;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/begseNUKhZcc05Bc1UggaX5GeES.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 976734;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1022789, '인사이드 아웃 2', '2024-06-11', '비상! 새로운 감정들이 몰려온다!', '13살이 된 라일리의 행복을 위해 매일 바쁘게 머릿속 감정 컨트롤 본부를 운영하는 ‘기쁨’, ‘슬픔’, ‘버럭’, ‘까칠’, ‘소심’. 그러던 어느 날, 낯선 감정인 ‘불안’, ‘당황’, ‘따분’, ‘부럽’이가 본부에 등장하고, 언제나 최악의 상황을 대비하며 제멋대로인 ‘불안’이와 기존 감정들은 계속 충돌한다. 결국 새로운 감정들에 의해 본부에서 쫓겨나게 된 기존 감정들은 다시 본부로 돌아가기 위해 위험천만한 모험을 시작하는데…', 97, 'ALL', 'RELEASED', 647.620000, 7.602000, 1682636477, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1022789 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1022789 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1022789 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1022789 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1022789 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 56322, '에이미 폴러', '/rwmvRonpluV6dCPiQissYrchvSD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에이미 폴러');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joy (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1022789 AND a.name = '에이미 폴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1903874, '마야 호크', '/evjbbHM1bzA6Ma5Ptjwa4WkYkkj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마야 호크');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anxiety (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1022789 AND a.name = '마야 호크';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3020876, '켄싱턴 톨먼', '/tBqawwg2VJq1V4mZjAOFQ7fnXNW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '켄싱턴 톨먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Riley (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1022789 AND a.name = '켄싱턴 톨먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 51998, '리자 라피라', '/o3jvQAGWtxi5rEycslhC6CY8BWX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리자 라피라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Disgust (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1022789 AND a.name = '리자 라피라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 25147, '토니 헤일', '/3dEyZgTye0Ec17VGKp0mJ3aU6ty.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '토니 헤일');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fear (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1022789 AND a.name = '토니 헤일';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 182001, '켈시 만', '/fbZTKdt6wcZ6s6J0z91ZpxXpqOY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '켈시 만');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1022789 AND d.name = '켈시 만';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/x2BHx02jMbvpKjMvbf8XxJkYwHJ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1022789;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/p5ozvmdgsmbWe0H8Xk7Rc8SCwAB.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1022789;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1100856, 'Заклятье. Шепот ведьм', '2024-06-13', '', '', 90, '', 'RELEASED', 682.354000, 5.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1100856 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1100856 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2039476, 'Артур Бесчастный', '/yI8CXyhep0WWU7juFBUTN6MRyUY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Артур Бесчастный');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Пол', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100856 AND a.name = 'Артур Бесчастный';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1305990, 'Марьяна Спивак', '/rCCiNJW5CROYGSJtPbGsEUN1Ehe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Марьяна Спивак');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'София', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100856 AND a.name = 'Марьяна Спивак';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2018540, 'Софья Шидловская', '/t7n0y5pS5JLvsQfb7OEF9mNc0de.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Софья Шидловская');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Яна', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100856 AND a.name = 'Софья Шидловская';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1679513, 'Игорь Грабузов', '/6QtMjf3suh9Y8T5dBx5udR0bbwI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Игорь Грабузов');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ник', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100856 AND a.name = 'Игорь Грабузов';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1611594, 'Сергей Сафронов', '/4a6do04xgHTlIChDFULBX5aD67m.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Сергей Сафронов');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Артур', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100856 AND a.name = 'Сергей Сафронов';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 3183304, 'Serik Beyseu', '/5cYbNPD2hioVi47CFWp4Y20TOFq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Serik Beyseu');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1100856 AND d.name = 'Serik Beyseu';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/um3n8rQbr97uaGB2058TsktPtAy.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1100856;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xPVhaMMUZq1yclf4kCEYwJ1Cqr6.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1100856;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1142518, '자유', '2024-11-01', '', '1980년대 프랑스에서 가장 악명 높았던 비폭력 강도 브루노 술락의 실화를 바탕으로 한 이야기다. 그는 여러 번 강도질을 하고, 경찰에 잡혀도 대담하게 탈출해 대중의 관심을 끌었다. 그가 매번 탈출한 이유는 사랑하는 연인이자 공범인 애니와 다시 만나기 위해서였고, 결국 그는 프랑스의 공공의 적 1호이자 자유의 아이콘이 되었다.', 110, '', 'RELEASED', 696.129000, 6.700000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1142518 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1142518 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1142518 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2417980, 'Lucas Bravo', '/uO6vMlJBMASyOQMisvnPehjsfJB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lucas Bravo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruno Sulak', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1142518 AND a.name = 'Lucas Bravo';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2245, 'Yvan Attal', '/2VaxsiFuad8uHHWTM6Fc71wtNCx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Yvan Attal');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'George Moréas', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1142518 AND a.name = 'Yvan Attal';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3755824, 'Léa Luce Busato', '/TeeCdnPoSWH4ZihjXh71v4tLTw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Léa Luce Busato');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Annie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1142518 AND a.name = 'Léa Luce Busato';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1170608, 'Steve Tientcheu', '/zhKrlGuSLuRPg8Jev18k5z7SHwE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Steve Tientcheu');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Drago', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1142518 AND a.name = 'Steve Tientcheu';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1636467, 'David Ayala', '/g1FlhpnXANAvr80osb0rpazI5V6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'David Ayala');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Belina', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1142518 AND a.name = 'David Ayala';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 19119, '멜라니 로랑', '/pKV3XJ6mlzfj0B0MGS8uMcMI9cl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '멜라니 로랑');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1142518 AND d.name = '멜라니 로랑';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/trN0zFcrtcCPLWyqqQEVoToztNk.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1142518;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/n9Do4rv1Hl3QvQLMmT5w6pBadqq.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1142518;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1331375, '도미니크: 불사조', '2024-10-11', '지옥에 떨어진 천사, 거침없이 상대한다!', '킬러의 삶을 버리지만 범죄의 땅에 추락한 천사. 마을은 경찰까지 카르텔에 장악된 무법지대이다. 친절을 보인 가족이 위험에 처하고 운명은 그녀에게 다시 총을 잡게한다. 경찰특공대와 일당백의 전쟁이 시작된다.', 100, '', 'RELEASED', 631.492000, 7.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1331375 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1331375 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2044666, 'Oksana Orlan', '/lofMKIpjHygZ2p6g27FQj8otsjH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Oksana Orlan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dominique', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1331375 AND a.name = 'Oksana Orlan';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2198257, 'Sebastián Carvajal', '/cBaHCzpZe27KzWviS41heE01sSe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sebastián Carvajal');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Julio', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1331375 AND a.name = 'Sebastián Carvajal';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3862081, 'María del Rosario', '/ln83cpcticvSWbEMVUD3NtmmLCA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'María del Rosario');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paulina', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1331375 AND a.name = 'María del Rosario';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 48530, 'Maurice Compte', '/9PFInf2I0kqjAU0CmZhdDWmHfwT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Maurice Compte');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chief Santiago', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1331375 AND a.name = 'Maurice Compte';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 208702, 'Chase Coleman', '/eXrwo2UOgDLbywSUxUBBQcGZbgf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Chase Coleman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'John', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1331375 AND a.name = 'Chase Coleman';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 372442, 'Michael S. Ojeda', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Michael S. Ojeda');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1331375 AND d.name = 'Michael S. Ojeda';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5OTh8Xaoueck7g6qgJNJ6vtHcAP.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1331375;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jT4KqFTrR2ofpUUwzKCIn4uYWXp.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1331375;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1214484, '렛 고', '2024-11-01', '', '가정생활에 지쳐버린 엄마가 가족들의 화합을 위해 마지막 노력을 쏟아 보려 한다. 바로 10대 딸의 폴댄스 대회를 위해 온 가족이 여행을 떠나는 것.', 110, '19', 'RELEASED', 535.708000, 8.081000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1214484 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 116612, 'Josephine Bornebusch', '/nba2j9kEqZrFI1VdoYNXxWeK2Mv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Josephine Bornebusch');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Stella', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1214484 AND a.name = 'Josephine Bornebusch';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 76556, 'Pål Sverre Hagen', '/eJzuZZfFBaMSgcbR3Pe5zBxEC3z.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Pål Sverre Hagen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gustav', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1214484 AND a.name = 'Pål Sverre Hagen';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1882732, 'Sigrid Johnson', '/4jn1H17ZB2nJgT0oVqkoaDryPTm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sigrid Johnson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anna', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1214484 AND a.name = 'Sigrid Johnson';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4416644, 'Olle Tikkakoski Lundström', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Olle Tikkakoski Lundström');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Manne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1214484 AND a.name = 'Olle Tikkakoski Lundström';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3166282, 'Leon Mentori', '/1Y1niowpVEUgkXCRD4ZqGfX5YgX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Leon Mentori');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gabriel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1214484 AND a.name = 'Leon Mentori';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 116612, 'Josephine Bornebusch', '/nba2j9kEqZrFI1VdoYNXxWeK2Mv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Josephine Bornebusch');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1214484 AND d.name = 'Josephine Bornebusch';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5QqzteriIBTWlWMLNkshTDKx9Xx.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1214484;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lk2V8WFnAoXa44q8vqVeYyK6WJK.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1214484;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (420634, '테리파이어', '2018-01-25', '', '할로윈 밤. 술마시고 진탕 놀다 귀가하던 타라와 돈은 광대 복장의 남자와 맞닥뜨린다. 이들은 할로윈 코스프레를 한 찌질남으로 치부하지만, 그는 수년 전 세상을 떠들썩하게 만든 광대 살인마였고 할로윈 밤에 다시 돌아온 것이었다. 두 사람은 광대 살인마의 표적이 되는데...', 85, '', 'RELEASED', 472.733000, 6.387000, 416322, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 420634 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 420634 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1880016, '데이비드 하워드 손턴', '/9nYijs4ACzjg93zKezLiLmuRGvp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이비드 하워드 손턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Art the Clown', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 420634 AND a.name = '데이비드 하워드 손턴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1303873, 'Jenna Kanell', '/xrWxxvNsZvBVHeeS3RIlhi8rGyA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jenna Kanell');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tara Heyes', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 420634 AND a.name = 'Jenna Kanell';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1676771, 'Samantha Scaffidi', '/jwd0XXuc4ibXAXjOxmhsFP0fQEO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Samantha Scaffidi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Victoria Heyes', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 420634 AND a.name = 'Samantha Scaffidi';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1190554, 'Catherine Corcoran', '/vv3hncIfLPsTj5XonPrMV4UcbPl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Catherine Corcoran');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dawn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 420634 AND a.name = 'Catherine Corcoran';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1526694, 'Pooya Mohseni', '/k9KebLQpIfsBKAT5DUkMS5O8vOv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Pooya Mohseni');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cat Lady', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 420634 AND a.name = 'Pooya Mohseni';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 933176, 'Damien Leone', '/nX2kkYD32x2PC9rRU7DrYCRPjFE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Damien Leone');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 420634 AND d.name = 'Damien Leone';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sFaPj5UyIAsiRuIgVl60pCYUzmR.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 420634;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fBNnj5bQ5YhzPUzxIW1UvLVZepP.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 420634;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1029235, '아즈라엘', '2024-09-27', '', '종말이 일어난 지 여러 해가 지난 후, 말을 못 하는 광신도들로 구성된 종교 단체에서 탈출한 젊은 여성 아즈라엘을 추적하는 이야기. 무자비한 지도자들에게 붙잡혀 감금당한 아즈라엘은 주변 황야 깊은 곳에 숨어있는 고대의 악마를 달래기 위한 제물로 바쳐질 예정이었다. 그러나 그녀는 살기 위해 어떤 것도 주저하지 않는다. 그녀의 불타는 복수와 탈출을 위한 맹렬한 질주는 극적으로 치닫는다.', 86, '19', 'RELEASED', 521.307000, 6.174000, 631272, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1029235 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1029235 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1029235 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1372369, '사마라 위빙', '/7sHnBVEiJOzjdfzUHo9vvDLkoCH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사마라 위빙');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Azrael', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1029235 AND a.name = '사마라 위빙';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1141086, 'Vic Carmen Sonne', '/2ROtesSqxXDT9IszpKkspsHp42O.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Vic Carmen Sonne');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miriam', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1029235 AND a.name = 'Vic Carmen Sonne';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 137537, 'Katariina Unt', '/nJiJuzppxhOSWjCmt4tYm0vnylE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Katariina Unt');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Josefine', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1029235 AND a.name = 'Katariina Unt';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1460359, 'Peter Christoffersen', '/tJXFLKYVnKZTE0LxrdMeERcZyL1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Peter Christoffersen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Demian', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1029235 AND a.name = 'Peter Christoffersen';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 221980, 'Nathan Stewart-Jarrett', '/xWd7wOIgJlxAKoIo5sgrZh6G2jl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nathan Stewart-Jarrett');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kenan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1029235 AND a.name = 'Nathan Stewart-Jarrett';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 84697, 'E.L. Katz', '/y0QSBve9p7NZ3KR3RpPhDSlFp4P.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'E.L. Katz');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1029235 AND d.name = 'E.L. Katz';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qpdFKDvJS7oLKTcBLXOaMwUESbs.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1029235;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uLqNGzJwnj8JKkKuRM2dHWJKCtc.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1029235;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1371727, '씽: Thriller', '2024-10-16', '', '버스터 문이 마이클 잭슨의 ''Thriller''에 맞춰 스타들이 총출동하는 화려한 무대를 꿈꾼다. 인기 영화 《씽》의 캐릭터들이 출연하는 단편 애니메이션.', 11, 'ALL', 'RELEASED', 503.672000, 7.385000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1371727 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1371727 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1371727 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1371727 AND g.name = '공포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10297, '매튜 매커너히', '/rUxLWWCDUF8RnDaocSqrVDJ2MS1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '매튜 매커너히');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Buster Moon (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1371727 AND a.name = '매튜 매커너히';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1540615, '토리 켈리', '/jNKEWJf4FMac3yCK6jsM6TfFJG5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '토리 켈리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Meena (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1371727 AND a.name = '토리 켈리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 208519, '닉 크롤', '/vdgpGtSXqTBnIKrKNMZocdFu7pX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '닉 크롤');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gunter (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1371727 AND a.name = '닉 크롤';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1245, '스칼렛 요한슨', '/6NsMbJXRlDZuDzatN2akFdGuTvx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스칼렛 요한슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ash (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1371727 AND a.name = '스칼렛 요한슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1303037, '태런 에저턴', '/vYjk7d9MMQv8vL3rGvuBY8LI55U.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '태런 에저턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Johnny (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1371727 AND a.name = '태런 에저턴';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 52842, 'Garth Jennings', '/zl6ZWijGySSIYJRFalleAiGkxyQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Garth Jennings');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1371727 AND d.name = 'Garth Jennings';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/i77OInTKcrnRlAozFOaB6D5mk15.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1371727;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/m1MifWpNjOU1g8UfIyNSI2dMFZf.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1371727;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (663712, '테리파이어 2', '2022-10-06', '', '악명 높은 마일즈 카운티 대학살 이후 1년, 연쇄 살인마 ‘아트 더 크라운’이 한 유가족을 해치기 위해 다시 돌아온다. 악령의 환영에 이끌린 채, 살인마는 한 십대 소녀와 그녀의 남동생을 노린다. 악몽과 현실의 경계가 모호해질 수록 살인은 증가한다. 남매는 그들을 구원으로 이끌 한 가족의 비밀을 발견하고 ‘아트 더 크라운’의 학살을 멈추려한다.', 138, '18', 'RELEASED', 428.247000, 6.751000, 15740003, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 663712 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 663712 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1880016, '데이비드 하워드 손턴', '/9nYijs4ACzjg93zKezLiLmuRGvp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이비드 하워드 손턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Art the Clown', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 663712 AND a.name = '데이비드 하워드 손턴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1882502, '로렌 라베라', '/qJYWq2oZcvHh7lnGskxkrYXCom0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로렌 라베라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sienna Shaw', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 663712 AND a.name = '로렌 라베라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2787720, 'Elliott Fullam', '/dNsFLihmWfA2KCENbZCtq9AjSob.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Elliott Fullam');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jonathan Shaw', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 663712 AND a.name = 'Elliott Fullam';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3383606, 'Sarah Voigt', '/7OR1UUn0DrDykNcxakYkpxW5I1Z.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sarah Voigt');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Barbara', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 663712 AND a.name = 'Sarah Voigt';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3790695, 'Kailey Hyman', '/aiREJkXiIT2GIzZcl6M9LPOFbuI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kailey Hyman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brooke', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 663712 AND a.name = 'Kailey Hyman';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 933176, 'Damien Leone', '/nX2kkYD32x2PC9rRU7DrYCRPjFE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Damien Leone');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 663712 AND d.name = 'Damien Leone';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8gLhu8UFPZfH2Hv11JhTZkb9CVl.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 663712;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/cRdA9xjHBbobw4LJFsQ3j1CgpVq.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 663712;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1287717, '출입금지', '2024-08-06', '', '노동자 계급 출신인 두 명의 유튜버가 콘텐츠를 만들던 중 자신들의 농구공 가방을 되찾기 위해서 버려진 저택에 들어가 장난을 치다 길을 잃고 만다. 그들은 핸드폰으로 이 깜짝 어드벤처를 찍기 시작하고, 유튜브 채널의 구독자 수를 늘리려는 욕심에 유령이 나오는 것처럼 동영상을 조작한다. 동영상은 입소문을 타고 이들은 챌린지를 시작한다. 영상 조회수가 일정 수에 도달하면 그 집에 다시 들어가기로 한 것. 밤에, 혼자, 완전히 무방비 상태로 말이다. 팬들이 호응하자 그들은 약속한 대로 다시 그 집에 간다. 그리고 그곳에 사는 이들의 진짜 정체와 함께, 자신들 역시 더 이상 산 사람이 아닐 수 있다는 사실을 깨닫는다.', 85, '15', 'RELEASED', 505.740000, 7.500000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1287717 AND g.name = '공포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4895159, 'Pablo Martínez', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Pablo Martínez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1287717 AND a.name = 'Pablo Martínez';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4895160, 'Lucas Caballero', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lucas Caballero');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1287717 AND a.name = 'Lucas Caballero';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2385590, 'Rafael Alfaro', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rafael Alfaro');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1287717 AND a.name = 'Rafael Alfaro';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4895161, 'Lara Chamorro', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lara Chamorro');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1287717 AND a.name = 'Lara Chamorro';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4895162, 'Andy Romero', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Andy Romero');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1287717 AND a.name = 'Andy Romero';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1691764, 'Hugo Cardozo', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Hugo Cardozo');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1287717 AND d.name = 'Hugo Cardozo';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pi2pkIUeVk0z3iy67YKTxDjeAGr.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1287717;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xSQjJiAYiLdpVU20iSDAQisAVJY.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1287717;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (917496, '비틀쥬스 비틀쥬스', '2024-09-04', '산 자와 죽은 자, 누가 남을 것인가!', '유령과 대화하는 영매로 유명세를 타게 된 리디아와 그런 엄마가 마음에 들지 않는 10대 딸 아스트리드. 할아버지 찰스의 갑작스러운 죽음으로 가족들은 함께 시골 마을에 내려간다. 유령을 보는 엄마가 마음에 들지 않는 아스트리드는 방황하던 중 함정에 빠져 저세상에 발을 들이게 되고 딸을 구하기 위해 리디아는 인간을 믿지 않는 저세상 슈퍼스타 비틀쥬스를 소환한다. 이루지 못한 리디아와의 결혼을 조건으로 내민 비틀쥬스. 이번엔 아스트리드가 비틀쥬스를 다시 저세상으로 보내야 하는데···', 105, '12', 'RELEASED', 393.890000, 7.200000, 445300598, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 917496 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 917496 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 917496 AND g.name = '공포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2232, '마이클 키튼', '/82rxrGxOqQW2NjKsIiNbDYHFfmb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 키튼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Beetlejuice', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 917496 AND a.name = '마이클 키튼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1920, '위노나 라이더', '/nRB8LDsteteDJoUZPKLtu134GsS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '위노나 라이더');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lydia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 917496 AND a.name = '위노나 라이더';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11514, '캐서린 오하라', '/cMBxHeztNVc8YXKcj084Mdd3f3U.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '캐서린 오하라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Delia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 917496 AND a.name = '캐서린 오하라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 974169, '제나 오르테가', '/q1NRzyZQlYkxLY07GO9NVPkQnu8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제나 오르테가');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Astrid', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 917496 AND a.name = '제나 오르테가';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 15009, '저스틴 서로', '/vnI9L0rXBAw1HeC0Q8hJGeJMGAW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '저스틴 서로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rory', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 917496 AND a.name = '저스틴 서로';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 510, '팀 버튼', '/wcjuY5vD1nlfwWNbvvTGg5dGoRR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '팀 버튼');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 917496 AND d.name = '팀 버튼';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ypWQatJYyESE5PIzdlSdiOyWYja.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 917496;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xi1VSt3DtkevUmzCx2mNlCoDe74.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 917496;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1149912, 'Kelas Bintang - Hot Moms', '2023-02-09', '', '', 0, '', 'RELEASED', 466.267000, 5.700000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1149912 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1149912 AND g.name = '로맨스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7dBqZmErtrxN9ghOJoW6SimgDo1.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1149912;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1149912;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1125510, '더 플랫폼 2', '2024-09-27', '', '수직 구조로 된 감방. 정체 모를 리더가 잔혹한 시스템에 자체적인 규범을 도입시키고, 이후 새로운 인물이 나타나 수상한 배급 방식에 대해 반기를 든다.', 100, '19', 'RELEASED', 457.079000, 5.659000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1125510 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1125510 AND g.name = '공포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2560224, 'Milena Smit', '/aD7RhtQZZ6adyPiy4jp3RB4DhEs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Milena Smit');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Perempuán', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1125510 AND a.name = 'Milena Smit';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1131415, 'Hovik Keuchkerian', '/o5cGKWHlZl4RFROYlT2hD95j0lN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Hovik Keuchkerian');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zamiatin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1125510 AND a.name = 'Hovik Keuchkerian';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3300, 'Natalia Tena', '/7kN9NpECZoR4NLXb4SlpHOaJx7T.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Natalia Tena');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sahabat', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1125510 AND a.name = 'Natalia Tena';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 59129, '오스카르 하에나다', '/qwphNLIwMyQW2ZLA0g0l1zFiB3w.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오스카르 하에나다');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dagin Babi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1125510 AND a.name = '오스카르 하에나다';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 31422, 'Ivan Massagué', '/dmnJo2sGlfFjtKb8FDPlNjRhfyc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ivan Massagué');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Goreng', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1125510 AND a.name = 'Ivan Massagué';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2374023, '갈데르 가스텔루-우루티아', '/rAPQ6GjKHbmD0zuwizhu5g3GlCB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '갈데르 가스텔루-우루티아');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1125510 AND d.name = '갈데르 가스텔루-우루티아';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/poELZsrROLJW28gc1V9nB1kJigq.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1125510;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/epQfhIcfqWgrMhRvnxkVm7EeEpE.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1125510;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (573435, '나쁜 녀석들: 라이드 오어 다이', '2024-06-05', '용의자가 된 나쁜 녀석들의 화끈한 수사가 시작된다!', '마이애미 강력반 최고의 콤비 마이크와 마커스. 가족 같은 하워드 반장이 사망 전 마약 카르텔 조직의 비리에 연루되었다는 뉴스 속보를 접하게 된다. 하지만 아무도 믿지 말라는 하워드 반장의 비밀 메시지를 받은 마이크와 마커스 형사는 사건의 진실을 밝히기 위해 위험한 수사를 시작한다. 서서히 드러나는 거대한 음모와 마주하게 된 나쁜 녀석들. 그러나 이들 역시 함정에 빠져 사건의 용의자로 지목되며 동료 경찰들은 물론 마약 카르텔 조직에게도 쫓기는 신세가 되고 마는데…', 115, '15', 'RELEASED', 460.213000, 7.497000, 402529640, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 573435 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 573435 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2888, '윌 스미스', '/1QqaRZ8neYlqLx7ODZC4as47wUV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '윌 스미스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mike Lowrey', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 573435 AND a.name = '윌 스미스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 78029, '마틴 로런스', '/gIHaPE7THrubUGpK8nQGI0q9EIQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마틴 로런스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marcus Burnett', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 573435 AND a.name = '마틴 로런스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 67599, '바네사 허진스', '/ssFXWN5li5OWJLgUoFlUDY0ZyPc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '바네사 허진스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kelly', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 573435 AND a.name = '바네사 허진스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 23498, '알렉산더 루드위그', '/unP5YUgEdECL2gMLs0zCNya6is6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '알렉산더 루드위그');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dorn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 573435 AND a.name = '알렉산더 루드위그';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 544442, '파올라 누녜스', '/5k8tBBvoV43iK6u0k2YUSVXPmuK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '파올라 누녜스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rita', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 573435 AND a.name = '파올라 누녜스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1399841, '아딜 엘 아르비', '/hpl12TXFDUjzomftx7zST3M2aLg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '아딜 엘 아르비');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 573435 AND d.name = '아딜 엘 아르비';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1399842, '빌랄 팔라흐', '/thwiN6FPRkCtzrP7PrmrwaEIFtv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '빌랄 팔라흐');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 573435 AND d.name = '빌랄 팔라흐';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wIrhEUBWjRmZuL1Ix41cF2LhJrW.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 573435;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tncbMvfV0V07UZozXdBEq4Wu9HH.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 573435;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1328814, 'Amityville: Where the Echo Lives', '2024-10-28', '', '', 89, '', 'RELEASED', 456.840000, 5.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1328814 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1328814 AND g.name = '미스터리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4449979, 'Sarah McDonald', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sarah McDonald');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Heather West', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1328814 AND a.name = 'Sarah McDonald';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4881205, 'Breanna Rossi', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Breanna Rossi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mary Gonzalez', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1328814 AND a.name = 'Breanna Rossi';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4950812, 'Adela Perez', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Adela Perez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1328814 AND a.name = 'Adela Perez';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4881202, 'Nicholas J. Barelli', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nicholas J. Barelli');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'John Madison', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1328814 AND a.name = 'Nicholas J. Barelli';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4950814, 'Hector De Alva', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Hector De Alva');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1328814 AND a.name = 'Hector De Alva';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 4881199, 'Carlos Ayala', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Carlos Ayala');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1328814 AND d.name = 'Carlos Ayala';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jqhAgE9ceTX8f9xTcqBlmXSuMG3.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1328814;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5VYqB2T9L0WetvN9Bxk3Wg4vKoJ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1328814;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (827931, '타임 컷', '2024-10-29', '', '한 십 대 소녀가 시간을 거슬러 2024년에서 2003년으로 돌아간다. 언니가 마스크를 쓴 살인마에게 살해당하기 며칠 전으로 돌아간 소녀. 과연 미래를 파괴하지 않고 과거를 바꿀 수 있을까?', 90, '15', 'RELEASED', 464.432000, 5.679000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 827931 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 827931 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 827931 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2232225, '매디슨 베일리', '/7sCoQ7hsoQ92v3X1O1JO8ueWjMI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '매디슨 베일리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lucy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 827931 AND a.name = '매디슨 베일리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2388486, '앤터니아 젠트리', '/2XgTZZS6gPqUPN6cSXnFNR1OkxO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앤터니아 젠트리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Summer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 827931 AND a.name = '앤터니아 젠트리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 971299, '그리핀 글럭', '/j7KSBKYLgnLxkZfhQ679HRSDIjj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '그리핀 글럭');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Quinn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 827931 AND a.name = '그리핀 글럭';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2511594, '메간 베스트', '/w3M6fxedhJTCXCxcv7U4mJIoTs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '메간 베스트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Emmy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 827931 AND a.name = '메간 베스트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 26086, '마이클 섕크스', '/4YkOrSUmfKljqTMwGIo50oviKe1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 섕크스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gil', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 827931 AND a.name = '마이클 섕크스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1616880, 'Hannah Macpherson', '/oEdhRg9GDWvKdht4TEjRrtHmMNO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Hannah Macpherson');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 827931 AND d.name = 'Hannah Macpherson';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/59k1QVE0fiDJWqoGGKS8TcTqZPI.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 827931;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qYvOcinXcnebhmCxYeivurh91T1.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 827931;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1063877, '돈 무브', '2024-10-24', '', '사랑하는 이를 잃은 슬픔을 달래려 외딴 숲을 찾은 여자. 우연히 마주친 살인마에게 마비성 약물을 주입당하는데. 온몸이 점점 마비되어 가는 가운데, 그녀의 생존을 건 싸움이 시작된다.', 92, '19', 'RELEASED', 401.796000, 6.452000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1063877 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1063877 AND g.name = '공포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 205976, 'Kelsey Asbille', '/8mXqxKaPc6FpAnLeZlPaaUaJHdC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kelsey Asbille');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Iris', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1063877 AND a.name = 'Kelsey Asbille';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 168877, 'Finn Wittrock', '/gwGMGTmli0uBF7eAhhXePWhYNFJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Finn Wittrock');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Richard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1063877 AND a.name = 'Finn Wittrock';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1768996, '대니얼 프랜시스', '/ltLYFcQHcaS5wdxX085Lhn0vX5v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '대니얼 프랜시스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dontrell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1063877 AND a.name = '대니얼 프랜시스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1791599, 'Moray Treadwell', '/hmaqML3iwGouEACUzjWDBJN6Sdz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Moray Treadwell');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bill', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1063877 AND a.name = 'Moray Treadwell';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2890151, 'Dylan Beam', '/udzwdodFTx4dvfwoyUX4sU5XdNL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Dylan Beam');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Daughter (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1063877 AND a.name = 'Dylan Beam';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1183516, 'Adam Schindler', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Adam Schindler');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1063877 AND d.name = 'Adam Schindler';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1183515, 'Brian Netto', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Brian Netto');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1063877 AND d.name = 'Brian Netto';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oYWAVAhvpB9CmlJuZD3n23vEgiU.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1063877;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6Rjsm5khNaYa4Gnw4iHnGX2E34T.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1063877;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (173705, '여교사: 학생의 눈앞에서', '1982-04-09', '', '사랑스러운 레이코는 소름 끼치는 오래된 고등학교에서 새로운 교직을 얻었습니다. 그녀는 매우 매력적인 여성이며 같은 반의 어린 학생들은 그녀에게 반했습니다. 어느 날 밤, 테니스 연습을 마친 그녀는 탈의실 샤워실에서 얼굴에 스타킹을 가린 남자에게 잔인하게 폭행을 당합니다. 알몸으로 충격에 빠진 채 바닥에 남겨진 그녀는 미친 남자가 남긴 퍼즐 조각 하나를 발견합니다. 며칠 후, 한 쌍의 학생이 테니스 팀에서 누군가를 쫓아낸 레이코에게 변태적인 성적 복수를 합니다. 이 학생들 중 한 명이 탈의실에서 그녀를 잔인하게 만든 남자일까요? 이상한 퍼즐 조각의 주인은 누구입니까? 수수께끼가 풀리면서 레이코는 자신의 성적 충동과 운명을 받아들여야 합니다.', 69, '', 'RELEASED', 553.925000, 7.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 173705 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 173705 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 173705 AND g.name = '공포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1156434, 'Rushia Santô', '/83wE43nx2rnSiovDW6LF6iPONMU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rushia Santô');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Reiko / Teacher', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 173705 AND a.name = 'Rushia Santô';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1863811, 'Rina Oka', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rina Oka');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kumi / Girl Friend of Takuya', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 173705 AND a.name = 'Rina Oka';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1276619, 'Kyôko Sagami', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kyôko Sagami');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Syôko / Teacher', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 173705 AND a.name = 'Kyôko Sagami';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 134551, '北見敏之', '/bcLSC5ZT7VmASi3om23k1EukUyr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '北見敏之');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Akiyama / Teacher', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 173705 AND a.name = '北見敏之';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1167973, '中根徹', '/vPCb73DYW5wyYWt78c5lCm0jPnS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '中根徹');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Takuya / High School Boy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 173705 AND a.name = '中根徹';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1014966, '上垣保朗', '/wdF0fCsWMSGKrI9mfvB4Zpa1nhL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '上垣保朗');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 173705 AND d.name = '上垣保朗';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rwGW7zhFKaojtJiSMnoLyVkKZnx.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 173705;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/27FRFe8lu1C1LStWmzwOa87vo98.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 173705;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (957452, '더 크로우', '2024-08-21', '죽음마저 두려워할 사랑!', '인생에서 가장 어둡고 외로웠던 순간, 자신과 비슷한 영혼을 가진 ''셸리''를 만나 영원한 사랑을 약속한 ''에릭''. 완벽한 행복을 만끽하던 그때, 두 사람은 의문의 괴한들에게 무참히 살해 당하고 ''셸리''는 과거의 끔찍한 실수로 지옥에 끌려가게 된다. 지옥에서 ''셸리''를 되찾기 위해 ''에릭''은 까마귀의 저주를 받아 불사의 몸이 되고 죽여도 죽지 않는 복수의 화신으로 부활하게 되는데…', 111, '', 'RELEASED', 444.514000, 5.900000, 24008667, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 957452 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 957452 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 957452 AND g.name = '공포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 137905, '빌 스카스가드', '/wGQidITqyDl4Igmq9TCQjRpegsk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빌 스카스가드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eric', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 957452 AND a.name = '빌 스카스가드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1503200, 'FKA twigs', '/8bUUu7jPEY1aQgAtJXM2NyYpfgN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'FKA twigs');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shelly', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 957452 AND a.name = 'FKA twigs';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6413, '대니 휴스턴', '/7Wdh73SltnllH4KVd64PvqKQ5NJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '대니 휴스턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vincent Roeg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 957452 AND a.name = '대니 휴스턴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 174708, 'Josette Simon', '/uLvLGR6a60To8AAlj0C5124d7Xu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Josette Simon');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sophia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 957452 AND a.name = 'Josette Simon';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 212815, 'Laura Birn', '/7aFAUPKj1joqQ2VOWOuGh88biuH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Laura Birn');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marion', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 957452 AND a.name = 'Laura Birn';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 228134, 'Rupert Sanders', '/jG07WemmHOWQvYnKPSdNGioGg7A.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Rupert Sanders');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 957452 AND d.name = 'Rupert Sanders';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rcedPQYtPIBK5uN3gJJyKdDCPax.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 957452;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/Asg2UUwipAdE87MxtJy7SQo08XI.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 957452;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (991610, '인베이젼', '2024-04-11', '', '아무런 경고도 없이 이웃 독재 국가 베라과가 퀴라소와 아루바를 공격한다. 네덜란드의 정치인들은 당황한다. 갈등이 급격히 고조되면서 세 명의 젊은 해병대원들이 나서서 행동해야 한다. 아루바의 병영은 공격을 받고 있고, 영공은 폐쇄되었지만, 네덜란드 대사는 여전히 적대 지역에서 대피하지 못한 상태다. 갓 임명된 해병대원들은 자신들의구조 임무가 시간 싸움이 되었다는 것을 깨닫는다.', 92, '15', 'RELEASED', 375.300000, 4.900000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 991610 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 991610 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 991610 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1272047, 'Tarikh Janssen', '/v2i38M9I8CTTBHVvHpI703flM1J.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tarikh Janssen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Andy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 991610 AND a.name = 'Tarikh Janssen';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1279249, '하이스 블롬', '/fBt9qOW4EA1miKaLXFIMYOHAled.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하이스 블롬');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jack', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 991610 AND a.name = '하이스 블롬';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1645771, 'Ortál Vriend', '/dhb5Xa3q4L1JB0EQkFzRR8RcHq6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ortál Vriend');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Noa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 991610 AND a.name = 'Ortál Vriend';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1286985, 'Jasha Rudge', '/5oGoUNizhJdklX7WoDCD05IPnNQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jasha Rudge');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Judsel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 991610 AND a.name = 'Jasha Rudge';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 45754, '페드야 반 휴엣', '/fIN5xMtn1B7XD0HD5Qqg6uZIDd8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '페드야 반 휴엣');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Stan Bot', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 991610 AND a.name = '페드야 반 휴엣';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 569301, '바비 보어만스', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '바비 보어만스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 991610 AND d.name = '바비 보어만스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/osPKnn1Q1BoZ88kLcksR7iPJKVg.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 991610;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rivlyJuBKNnSgzOU0GkEWIuawjt.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 991610;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1159311, '나의 히어로 아카데미아 더 무비: 유어 넥스트', '2024-08-02', '평화의 상징에 도전하라', '“다음은 너다” 초자연능력 ‘개성’을 가진 인간이 당연해진 세계에서 옛 ‘평화의 상징’ NO.1 히어로 ‘올마이트’가 악의 제왕 ‘올 포 원’과의 사투 직후 한 말. ‘올마이트’의 의지는 데쿠와 유에이 고등학교 히어로과로 이어져 왔다. 유에이 2년 차 봄, 히어로 VS 빌런의 전면전이 발발하고 황폐해진 사회에 수수께끼의 남자가 나타난다. 스스로를 ‘올마이트를 대신하는 새로운 상징’이라고 말하는 ‘다크마이트’는 자신의 야망을 위해 ‘개성’으로 거대한 요새를 만들어 마을과 사람들을 차례로 삼켜간다! ‘다크마이트’의 등장과 동시에 특별한 ‘개성’을 지닌 ‘안나’라는 소녀, 그리고 그녀를 ‘아가씨’라고 부르는 ‘줄리오’라는 남자가 나타나는데… 데쿠와 바쿠고, 토도로키, 그리고 유에이 고교 1학년 A반은 ‘다크마이트’에 맞서 세계를 지킬 수 있을까? “다음은 우리다!”', 110, '12', 'NOW_PLAYING', 402.980000, 6.900000, 30568047, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1159311 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1159311 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1159311 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1159311 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1325962, '야마시타 다이키', '/rQNdJdZewk7VGP16ZNbpfJ9ZeMd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '야마시타 다이키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Izuku Midoriya (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1159311 AND a.name = '야마시타 다이키';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1245094, '오카모토 노부히코', '/41BGKnwmE2573X2ve9rGXeLw3oW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오카모토 노부히코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Katsuki Bakugo (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1159311 AND a.name = '오카모토 노부히코';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 149894, '카지 유우키', '/8wKdPV11IwowfwoqGqMMNt9hmp6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카지 유우키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shoto Todoroki (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1159311 AND a.name = '카지 유우키';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 93803, '미야노 마모루', '/i8n9U3JlujjyPmiZPHGkpwxkh7X.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미야노 마모루');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Giulio Gandini (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1159311 AND a.name = '미야노 마모루';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3046087, '生見愛瑠', '/bZjwmpUt9J3GtRLzNH5LUNDu29s.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '生見愛瑠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anna Scervino (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1159311 AND a.name = '生見愛瑠';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 187, '오카무라 텐사이', '/uOu6uNXRMDZKyXY47T9WTa0cbeY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '오카무라 텐사이');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1159311 AND d.name = '오카무라 텐사이';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rSJnz7FqxEIe5uzAZbWSzc8bk5f.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1159311;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hd1TvTUGjkoYoqvXYfSBpI5Ri9B.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1159311;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1104171, '다음 크리스마스에 만나요', '2024-11-05', '', '낭만에 죽고 사는 골수 로맨티스트. 이상형의 남자를 만나기 위해 뉴욕을 동분서주하는 대장정에 나선다. 그를 만나려면 이미 매진된 펜타토닉스 크리스마스 공연 티켓을 어떻게든 구해야 한다!', 105, '', 'RELEASED', 405.210000, 6.324000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1104171 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1104171 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1104171 AND g.name = 'TV 영화';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 37936, 'Christina Milian', '/mzqhZVTYbgQd3SBZrb9KGlCuRnu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Christina Milian');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Layla', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1104171 AND a.name = 'Christina Milian';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1996085, 'Devale Ellis', '/5uv5YeS9d1kAnnRpLkh0JdPJTAR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Devale Ellis');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Teddy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1104171 AND a.name = 'Devale Ellis';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1451543, 'Kofi Siriboe', '/uJXuRtPvTlrAfwdVGCziOOXr0N8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kofi Siriboe');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'James', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1104171 AND a.name = 'Kofi Siriboe';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2631731, 'Kalen Allen', '/qWYhQPQCjI82EpySx7LoLCs58Ac.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kalen Allen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1104171 AND a.name = 'Kalen Allen';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1542849, 'Mitch Grassi', '/4JAR45cCmK2JygeGpI1iPsaU3b4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mitch Grassi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mitch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1104171 AND a.name = 'Mitch Grassi';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 141825, 'Rusty Cundieff', '/14re77GRWUNrI3gEGIiCSRGqtVL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Rusty Cundieff');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1104171 AND d.name = 'Rusty Cundieff';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2CpaK4kzfAB4tIUkMV53PizJkKu.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1104171;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8jujdLr4OAQoWGgfNmaE4RR0mqb.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1104171;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (616446, '형제들', '2024-10-10', '', '''형제들''은 새사람이 되어 정직하게 살고자 하는 전과자(조시 브롤린)가 항상 자신을 미치게 만드는 쌍둥이 형제(피터 딘클리지)와 재회하면서 의도치 않게 일생일대의 한탕을 노리고 국토를 횡단하게 되는 이야기다. 두 형제가 서로 죽여버리고 마는 불상사를 막으려면 총알과 법망, 남의 말이라곤 전혀 듣지 않는 어머니를 피해 가며 잃어버린 가족애를 되찾아야 한다.', 89, '', 'RELEASED', 384.304000, 6.144000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 616446 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 616446 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 616446 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16851, '조쉬 브롤린', '/sX2etBbIkxRaCsATyw5ZpOVMPTD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조쉬 브롤린');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Moke Munger', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 616446 AND a.name = '조쉬 브롤린';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 22970, '피터 딘클리지', '/9CAd7wr8QZyIN0E7nm8v1B6WkGn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '피터 딘클리지');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jady Munger', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 616446 AND a.name = '피터 딘클리지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 515, '글렌 클로즈', '/eNTn3OmlnsQYLIp7HVGeH9kOJiA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '글렌 클로즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cath Munger', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 616446 AND a.name = '글렌 클로즈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 18269, '브랜든 프레이저', '/tFj5PaWWQbb8rHBBhu1EHklznph.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브랜든 프레이저');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Farful', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 616446 AND a.name = '브랜든 프레이저';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1335818, '테일러 페이지', '/KTX1trmIfVa7MFkZmES1MVjl79.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '테일러 페이지');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Abby Munger-Jacobson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 616446 AND a.name = '테일러 페이지';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1704882, 'Max Barbakow', '/nJjznElTpKtQNOoGRaFtDIgcnqi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Max Barbakow');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 616446 AND d.name = 'Max Barbakow';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/Akweo95FGyDpucYVT81h0SbX8Ky.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 616446;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bAO9hLGRWOJMUFXmKwa4kST6I5N.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 616446;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1010581, '나의 잘못', '2023-06-08', '', '노아는 남자 친구와 친구들이 있는 동네를 뒤로하고 엄마의 새 부자 남편 저택으로 이사를 가게 된다. 의붓오빠 닉과는 첫 만남부터 삐걱댔지만 곧 서로에게 이끌려 금지된 관계를 맺는다. 반항심과 고뇌로 가득 찬 그들의 인생은 송두리째 흔들리고 둘은 결국 뜨거운 사랑에 빠진다.', 117, '', 'RELEASED', 378.284000, 7.920000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1010581 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1010581 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2527414, '니콜 월리스', '/xlvq6OYCN6yQef4fpJQtwVyQxqr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '니콜 월리스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Noah Morgan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1010581 AND a.name = '니콜 월리스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2786960, '가브리엘 게바라', '/pviRYKEEmoPUfLYwP1VHJ6LQcRg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '가브리엘 게바라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nick Leister', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1010581 AND a.name = '가브리엘 게바라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 970027, 'Marta Hazas', '/1dbeTFRCbWBt70dIGjYHKVLnpaG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marta Hazas');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rafaela', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1010581 AND a.name = 'Marta Hazas';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1251336, 'Iván Sánchez', '/woVz8D7t1VUKjFJnsTAdc8tyz5C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Iván Sánchez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'William Leister', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1010581 AND a.name = 'Iván Sánchez';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4105602, 'Eva Ruiz', '/bcu0nmQvhxwTzh4csc4kuxJsQee.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Eva Ruiz');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jenna', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1010581 AND a.name = 'Eva Ruiz';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1739102, 'Domingo González', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Domingo González');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1010581 AND d.name = 'Domingo González';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/duT8Vks5FXwDkpxoR84xb2a6VB6.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1010581;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lntyt4OVDbcxA1l7LtwITbrD3FI.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1010581;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (978796, '백맨', '2024-09-20', '', '', 92, '', 'RELEASED', 343.560000, 6.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 978796 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 978796 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 237455, '샘 클라플린', '/e5CU4tjCNZFfm7ITmZfzjZse2Bb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '샘 클라플린');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Patrick McKee', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 978796 AND a.name = '샘 클라플린';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 221981, 'Antonia Thomas', '/ybmnPYUzcr3RMdaXnZIw2jEw9ju.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Antonia Thomas');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Karina', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 978796 AND a.name = 'Antonia Thomas';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5033809, 'Caréll Vincent Rhoden', '/vaEX3jxuAHQ6qQZ2TNuoDK0UqBX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Caréll Vincent Rhoden');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jake McKee', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 978796 AND a.name = 'Caréll Vincent Rhoden';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3769810, 'Will Davis', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Will Davis');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bagman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 978796 AND a.name = 'Will Davis';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2190584, 'Adelle Leonce', '/zL3CdzHhQQdqNi6hrronOoh9jHQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Adelle Leonce');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anna', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 978796 AND a.name = 'Adelle Leonce';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1231927, 'Colm McCarthy', '/iTVWq0wCVoKf6pfrJvdTlVWyems.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Colm McCarthy');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 978796 AND d.name = 'Colm McCarthy';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hzrvol8K2VWm2BsDTwb8YvRMzIH.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 978796;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mpMDztY5OmV7i4ypYpWgqsP4DHs.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 978796;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (269509, '캔터빌의 유령', '2023-09-22', '', '', 89, '', 'RELEASED', 397.079000, 6.600000, 2000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 269509 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 269509 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 269509 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 269509 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11275, '스티븐 프라이', '/dH7GuUZ8QPM9RN99ak9KKOkSkdS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스티븐 프라이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sir Simon de Canterville (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 269509 AND a.name = '스티븐 프라이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 41419, '휴 로리', '/akArncggHnusP5jxzMBKmJDRrMo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '휴 로리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Grim Reaper / Gardener / Swordsman / Monster / Old Duke (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 269509 AND a.name = '휴 로리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1281, '프레디 하이모어', '/9larfGVg8ALIVFkr7cZzv4Emh1F.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '프레디 하이모어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Henry Duke of Cheshire (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 269509 AND a.name = '프레디 하이모어';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1590758, 'Emily Carey', '/cH93v8Ig7yaVh3QZCVsrDCXjkr1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Emily Carey');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Virginia Otis (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 269509 AND a.name = 'Emily Carey';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11356, '이멜다 스턴튼', '/95KKeFajyuRlqc65mBBKgXkXGpL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이멜다 스턴튼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mrs Umney (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 269509 AND a.name = '이멜다 스턴튼';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1318897, 'Kim Burdon', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Kim Burdon');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 269509 AND d.name = 'Kim Burdon';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dFu8oHN805ZRzpQZNOjkiLzMbep.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 269509;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vhbXuEonV3wc8k48qhucWrx49Fv.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 269509;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (726139, '탈출: 프로젝트 사일런스', '2024-07-11', '생존자 전원이 타겟이 된다', '한치 앞도 구분할 수 없는 짙은 안개 속 붕괴 직전의 공항대교에 고립된 사람들이 그 안에 도사리고 있는 예기치 못한 위협으로부터 살아남기 위해 고군분투하는 이야기.', 96, '15', 'RELEASED', 346.105000, 7.012000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 726139 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 726139 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 726139 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 726139 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 115290, '이선균', '/mwF2HgyEF2UzxSvNRJEtbWlKbAj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이선균');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cha Jung-won', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 726139 AND a.name = '이선균';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 150125, '주지훈', '/7PYfUrBBXhYv5PIsTalJhjbRteg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '주지훈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jobak', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 726139 AND a.name = '주지훈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 550683, '김희원', '/sDCxskfmmNidOjV2LwsWh9dAVbN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김희원');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Yang', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 726139 AND a.name = '김희원';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 240948, '문성근', '/wQjOvAFqCItwMw7dxa486KnGgEE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '문성근');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Byung-hak', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 726139 AND a.name = '문성근';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1351055, '예수정', '/rwGPhu8Ge36eMkrOlzfdKKFargw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '예수정');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Soon-ok', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 726139 AND a.name = '예수정';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1135344, '김태곤', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '김태곤');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 726139 AND d.name = '김태곤';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rXuSca6qEb4xPrSRT7XRzYCFbZB.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 726139;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hPIWQT70wQK6akqfLXByEvr62u0.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 726139;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1144962, 'Transmorphers: Mech Beasts', '2023-06-09', '', '', 84, '', 'RELEASED', 335.498000, 5.400000, 65452, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1144962 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1144962 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 74036, 'Tom Arnold', '/z2ajL1ozVCS4Ug04zOGCNH06OPP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tom Arnold');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brady', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1144962 AND a.name = 'Tom Arnold';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1849379, 'Tania Fox', '/dlQJEd0XxzyCKR8GyDPkTLMNKU3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tania Fox');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lana', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1144962 AND a.name = 'Tania Fox';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1229670, 'Jolene Anderson', '/l4SPMWGpEpVvA5wrLG1vguJ99ZZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jolene Anderson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agnes', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1144962 AND a.name = 'Jolene Anderson';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2599776, 'Andrew Rogers', '/oSBBuN3SWGeYIsIm1RkyK7qWPLj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Andrew Rogers');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Captain Watts', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1144962 AND a.name = 'Andrew Rogers';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4133255, 'Mica Javier', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mica Javier');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mila', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1144962 AND a.name = 'Mica Javier';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1768215, 'Michael Su', '/yNvnLqEHb2FtdB7AW2O0lZelKBO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Michael Su');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1144962 AND d.name = 'Michael Su';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oqhaffnQqSzdLrYAQA5W4IdAoCX.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1144962;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tCKWksaQI8XkAQLVou0AlGab5S6.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1144962;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (824003, 'Diabolik chi sei?', '2023-11-30', '', '', 124, '', 'RELEASED', 330.774000, 6.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 824003 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 824003 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1362995, 'Giacomo Gianniotti', '/gym2kTV6aqHYRK2zFEhVnYBuPiR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Giacomo Gianniotti');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Diabolik', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 824003 AND a.name = 'Giacomo Gianniotti';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1097436, 'Miriam Leone', '/kOl4gte94tJKXl8csCEYIxhZV0B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Miriam Leone');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eva Kant', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 824003 AND a.name = 'Miriam Leone';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 56843, 'Valerio Mastandrea', '/tE7JkSuyv2N8vtEN0YypsCAxW9B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Valerio Mastandrea');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ginko', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 824003 AND a.name = 'Valerio Mastandrea';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 28782, '모니카 벨루치', '/7g3k3u2gZpE7XU8GRYwHDuN1jlM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '모니카 벨루치');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Altea di Vallenberg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 824003 AND a.name = '모니카 벨루치';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 234821, 'Pier Giorgio Bellocchio', '/hZTd1cLRnlB9eibCZTeBq1UvDOQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Pier Giorgio Bellocchio');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sgt. Palmer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 824003 AND a.name = 'Pier Giorgio Bellocchio';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 129628, 'Marco Manetti', '/hdTxWCnCr2BYXDkEcfs5beGNRD6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Marco Manetti');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 824003 AND d.name = 'Marco Manetti';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 129627, 'Antonio Manetti', '/isbb4gEK4AKp1JcD8tL4qEX8ku1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Antonio Manetti');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 824003 AND d.name = 'Antonio Manetti';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1DAXwi4y941ryPoGbzUlFEEiPAo.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 824003;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hLYH6wbi3Mgscdv2KuYcTdWGlUV.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 824003;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (179387, 'Heavenly Touch', '2009-05-12', '', '', 89, '', 'RELEASED', 354.122000, 6.310000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 179387 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 179387 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1182545, 'Paolo Serrano', '/nZhbmyjaQSAshWtQ3GlQxE3oOGH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Paolo Serrano');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rodel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 179387 AND a.name = 'Paolo Serrano';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1182546, 'Joash Balejado', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Joash Balejado');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jonard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 179387 AND a.name = 'Joash Balejado';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1182547, 'Marco Morales', '/slIb6dJVStEngxKC6Z4QJShP3xm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marco Morales');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Biboy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 179387 AND a.name = 'Marco Morales';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1052894, 'Gwen Garci', '/8ul2ti0wMAEPty5Gmc3QVXdUJWt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gwen Garci');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sheila', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 179387 AND a.name = 'Gwen Garci';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 559357, 'Paolo Rivero', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Paolo Rivero');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sandy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 179387 AND a.name = 'Paolo Rivero';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 225421, 'Joel Lamangan', '/lKEVNg8HFfsGrfzHxGZjLHVQ5ir.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Joel Lamangan');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 179387 AND d.name = 'Joel Lamangan';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ory8WuAqznTE7lfopTSymHpop2t.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 179387;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9msuazXGWAyl7vhxVFU7e7Bb5Ik.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 179387;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1151949, '섀도우의 13', '2024-09-10', '', '살인 훈련을 받은 젊은 킬러가 무자비한 범죄 조직으로부터 한 소년을 구출하려 한다. 소년만 구할 수 있다면 멘토를 등지는 것은 물론, 그 길을 가로막는 누구라도 제거할 것이다.', 145, '19', 'RELEASED', 352.969000, 7.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1151949 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1151949 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1151949 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1909697, 'Aurora Ribero', '/oUK71SxqHVp3OXWptYNEnVsOlr5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Aurora Ribero');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agent 13 / Nomi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1151949 AND a.name = 'Aurora Ribero';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2587281, 'Hana Malasan', '/g6ETjwEnzgoYpwb7zurcxyGCRE3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Hana Malasan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agent Umbra', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1151949 AND a.name = 'Hana Malasan';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1830161, 'Andri Mashadi', '/nKBg1kOv7ElDnI2pPrfRK1vLkSf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Andri Mashadi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ariel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1151949 AND a.name = 'Andri Mashadi';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1307917, 'Adipati Dolken', '/p0RmTWjypOrRK613v763mpnQRiO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Adipati Dolken');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Prasetyo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1151949 AND a.name = 'Adipati Dolken';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2752309, 'Kristo Immanuel', '/xPaRIpL5PfiCB3qFPLOxHqzEKwf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kristo Immanuel');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jeki', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1151949 AND a.name = 'Kristo Immanuel';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 235430, '티모 차얀토', '/gYBBoFnY4ualTvxwThF3FTLfzas.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '티모 차얀토');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1151949 AND d.name = '티모 차얀토';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mLxunT78TAbvH8Gjv1hlmfIsECd.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1151949;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wB8HiUiFWo1EsxrdvB6bsMNW81g.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1151949;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (823219, '플로우', '2024-08-29', '', '대홍수가 세상을 덮친 뒤, 유일한 피난처가 된 배 한 척을 타고 다양한 동물 친구들과 항해를 시작한 ‘고양이’의 눈부신 모험담', 85, 'ALL', 'RELEASED', 333.313000, 8.575000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 823219 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 823219 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 823219 AND g.name = '모험';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1328012, 'Gints Zilbalodis', '/kVRvFXr1Vzyy7KFYGlzVj0P7mtC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Gints Zilbalodis');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 823219 AND d.name = 'Gints Zilbalodis';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kX9gzHyfwXCkTszBcPekQZxPnzP.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 823219;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/b3mdmjYTEL70j7nuXATUAD9qgu4.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 823219;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (653346, '혹성탈출: 새로운 시대', '2024-05-08', '세상의 주인이 바뀌었다', '진화한 유인원과 퇴화된 인간들이 살아가는 땅. 유인원 리더 프록시무스는 완전한 군림을 위해 인간들을 사냥하며 자신의 제국을 건설한다. 한편, 또 다른 유인원 노아는 우연히 숨겨진 과거의 이야기와 시저의 가르침을 듣게 되고 인간과 유인원이 함께 할 새로운 세상을 꿈꾼다. 어느 날 그의 앞에 나타난 의문의 한 인간 소녀. 노아는 그녀와 함께 자유를 향한 여정을 시작하게 되는데…', 145, '12', 'RELEASED', 333.100000, 7.112000, 397366385, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 653346 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 653346 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 653346 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1586047, '오웬 티그', '/tgCkGE0LIggyjMmgSwHhpZAkfJs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오웬 티그');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Noa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 653346 AND a.name = '오웬 티그';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2146942, '프레이아 앨런', '/xq33JCqUjBzPz3drN48N2N7ySKI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '프레이아 앨런');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nova / Mae', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 653346 AND a.name = '프레이아 앨런';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 79072, '케빈 듀랜드', '/hINvryvce5tpod6kTnUg9ZTH8wg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케빈 듀랜드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Proximus Caesar', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 653346 AND a.name = '케빈 듀랜드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1444816, '피터 메이컨', '/jF4jzgtWB2NAJ6BfVTSDQOlOHLr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '피터 메이컨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Raka', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 653346 AND a.name = '피터 메이컨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3905, '윌리엄 H. 메이시', '/hdVEGSrP8qWlJnt0v5vSVcGOjy7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '윌리엄 H. 메이시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Trevathan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 653346 AND a.name = '윌리엄 H. 메이시';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1179066, '웨스 볼', '/zVPXrhuAxYAWlwDEWCaqeUPycFx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '웨스 볼');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 653346 AND d.name = '웨스 볼';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/plNOSbqkSuGEK2i15A5btAXtB7t.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 653346;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/iHYh4cdO8ylA3W0dUxTDVdyJ5G9.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 653346;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1079091, '우리가 끝이야', '2024-08-07', '15초면 충분해요. 모든 게 뒤바뀌기까지', '아버지의 장례식을 멋지게 망치고 아지트로 향한 ‘릴리’는 어딘가 위태롭지만 매력적인 남자 ‘라일’에게 순식간에 마음을 빼앗긴다. 새로운 도시에서 자신의 이름을 건 꽃집을 오픈한 릴리는 운명처럼 라일을 다시 만나게 되고 걷잡을 수 없는 사랑에 빠져든다. 그러던 어느 날, 어린 시절의 모든 상처를 알고 있는 첫사랑 ‘아틀라스’와 우연히 재회한 후 감당하기 벅찬 라일의 위협적인 모습을 목격하게 되고 완벽했던 관계가 순식간에 요동치면서 릴리는 피할 수 없는 선택의 기로에 서게 되는데… 외면하고 싶지만 마주해야 하는 사랑과 선택의 순간 올가을, 모두에게 위로와 용기를 선사하는 특별한 이야기!', 131, '15', 'RELEASED', 344.514000, 7.227000, 348276888, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1079091 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1079091 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 59175, '블레이크 라이블리', '/rkGVjd6wImtgjOCi0IpeffdEWtb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '블레이크 라이블리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lily Bloom', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1079091 AND a.name = '블레이크 라이블리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 88675, 'Justin Baldoni', '/2sc6iUWljADnqtjsaKU3s6f0DGW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Justin Baldoni');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ryle Kincaid', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1079091 AND a.name = 'Justin Baldoni';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 213001, '제니 슬레이트', '/iNpXig5Djkh5moYG4TCekIATs5B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제니 슬레이트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Allysa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1079091 AND a.name = '제니 슬레이트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1855143, '브랜든 스클레나', '/unM5wewbqrmE2cf6DSyyKLeA05I.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브랜든 스클레나');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Atlas Corrigan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1079091 AND a.name = '브랜든 스클레나';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 552252, 'Hasan Minhaj', '/6vHHhLnbKBCPmYc90qAV2Cde95F.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Hasan Minhaj');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marshall', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1079091 AND a.name = 'Hasan Minhaj';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 88675, 'Justin Baldoni', '/2sc6iUWljADnqtjsaKU3s6f0DGW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Justin Baldoni');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1079091 AND d.name = 'Justin Baldoni';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/287MYoxjfINSyfaaV636Z2ioR36.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1079091;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zAqBIeO71BFL7bAtP5TFzVjVamy.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1079091;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1100782, '스마일 2', '2024-10-16', '이번엔 너도 같이 웃게 될 거야', '월드투어를 앞두고 자신의 눈 앞에서 기괴한 미소와 함께 끔찍한 죽음을 맞은 친구를 목격한 팝스타 ‘스카이’. 그 날 이후 공연 리허설과 팬 미팅 행사 등 그녀의 삶 곳곳에서 끔찍한 일들이 잇따라 발생한다. 화려한 스타의 삶을 뒤덮은 공포에서 벗어나기 위해 몸부림치던 ‘스카이’는 자신이 죽어야만 전염처럼 번지는 저주가 끝난다는 사실을 듣게 되는데…', 128, '19', 'NOW_PLAYING', 372.541000, 6.900000, 123787540, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1100782 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1100782 AND g.name = '미스터리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 240724, '나오미 스콧', '/nNqqgP2yF1jkLZq9ndYcXOzTD2G.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나오미 스콧');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Skye Riley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100782 AND a.name = '나오미 스콧';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 14892, 'Rosemarie DeWitt', '/44sxIdGtYN24R14OmnZbCpcd8J8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rosemarie DeWitt');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elizabeth Riley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100782 AND a.name = 'Rosemarie DeWitt';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1308373, 'Dylan Gelula', '/nqXd0gVNlma8knaykJh5ArXSYqy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Dylan Gelula');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gemma', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100782 AND a.name = 'Dylan Gelula';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1371509, '루카스 게이지', '/j7Zub5J9PgCnsfgEC5QCr160JtH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루카스 게이지');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lewis Fregoli', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100782 AND a.name = '루카스 게이지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 31514, '피터 제이컵슨', '/pGi9CnzEG4cLa2viUP89yvlPCyR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '피터 제이컵슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Morris', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100782 AND a.name = '피터 제이컵슨';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2218465, '파커 핀', '/lw1I0voNLS2llYTlDgd6qZzAMZ6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '파커 핀');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1100782 AND d.name = '파커 핀';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4nQk1OgbtdnKYMEQiOwwMB4yGxn.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1100782;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wLxGa71pt0P4e7BuINR8vYSeLow.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1100782;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (7451, '트리플 엑스', '2002-08-09', '', '싸이렌이 온 거리를 울려 퍼지며 요란한 추격씬이 벌어지는 도중 한 녀석이 콜벳를 몰고 다리를 돌진, 200미터 높이에서 자동차 번지를 시도한다. 짜릿한 곡예를 선보인 후 낙하산을 펴고 유유히 사라지는 녀석의 이름은 ''젠더 케이지''. 인터넷에 생방송된 이 장면은 전세계 네티즌들에게 열렬한 환호를 받는다. 또 한 번의 멋진 프로젝트로 영웅 대접을 받는 젠더 케이지. 그러나 파티가 무르익을 무렵, 갑자기 들이닥친 특수부대는 그에게 신경 안정제를 쏜 후 잠들게 한다. 깨어난 곳은 알 수 없는 레스토랑. 어리둥절한 그 곳은 갑자기 강도들의 침입장으로 돌변하고, 단숨에 상황을 정리해버린 그에게 기븐스가 축하 인사를 전한다. 미국 비밀첩보국 NSA의 1차 테스트를 통과한 것. 이후 또 다시 잠에서 깨어난 곳은 비행기 안. 2번째 테스트로 콜럼비아 마약 밀매상의 아지트에 던져진 젠더 케이지. 때마침 콜럼비아 정부와 마약상들의 충돌로 아수라장이 된 그곳에서 살아남기 위한 치열한 전쟁이 펼쳐지는데...  상황종료 후 유유히 나타난 기븐스는 NSA의 테스트를 유일하게 통과한 그에게 비밀요원이 되어줄 것을 부탁한다. 단 그렇지 않을 경우는 감옥행뿐이라는 단서를 둔다. 젠더 케이지의 코드명은 트리플 X. 첫번째 임무지는 비밀요원의 무덤이라는 별칭을 가지고 있는 도시 프라하. 이제 얼떨결에 비밀요원이 되어버린 트리플 X의 위험한 여정이 시작되는데.', 124, '', 'RELEASED', 311.501000, 5.936000, 277448382, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 7451 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 7451 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 7451 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 7451 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12835, '빈 디젤', '/nZdVry7lnUkE24PnXakok9okvL4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빈 디젤');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Xander Cage', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 7451 AND a.name = '빈 디젤';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 18514, '아시아 아르젠토', '/dYbYNxMnqhNyAJyrPU7e2C9jcRz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아시아 아르젠토');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yelena', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 7451 AND a.name = '아시아 아르젠토';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20982, '마튼 초카스', '/y065G0CPTpvweDUksPWhFzsNhqH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마튼 초카스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yorgi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 7451 AND a.name = '마튼 초카스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2231, '사무엘 L. 잭슨', '/AiAYAqwpM5xmiFrAIeQvUXDCVvo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사무엘 L. 잭슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agent Augustus Gibbons', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 7451 AND a.name = '사무엘 L. 잭슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 53347, 'Michael Roof', '/qhP35tsTTuAPUFcKYMGOxaw1s4j.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Michael Roof');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agent Toby Lee Shavers', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 7451 AND a.name = 'Michael Roof';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 18878, 'Rob Cohen', '/kVbB8Q0g8eXsn8l81flyC6TgMPW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Rob Cohen');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 7451 AND d.name = 'Rob Cohen';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xeEw3eLeSFmJgXZzmF2Efww0q3s.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 7451;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qwK9soQmmJ7kRdjLZVXblw3g7AQ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 7451;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (592695, '플레저', '2021-10-08', '', '벨라 체리는 포르노 영화 배우의 꿈을 안고 로스앤젤레스에 도착하지만,  그녀는 그녀의 야망과 교활함을 활용하여 이 매혹적이고 독특한 세계의  정상에 오르기 위해 노력하지만 그런 명성이 쉽게 오지 않는다는 것을 곧 알게 된다.', 108, '', 'RELEASED', 367.121000, 6.200000, 393824, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 592695 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2280178, 'Sofia Kappel', '/y2yMZ37bM9b4oYcsrZFnPpeun4G.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sofia Kappel');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bella Cherry', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 592695 AND a.name = 'Sofia Kappel';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1908347, 'Zelda Morrison', '/8suRdN1ds2iJTPJnLUfoy98CbPa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Zelda Morrison');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 592695 AND a.name = 'Zelda Morrison';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 139422, 'Tee Reel', '/lYnzxsQMdj0CJWA4KuGtqhvo3aP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tee Reel');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mike', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 592695 AND a.name = 'Tee Reel';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1903886, 'Evelyn Claire', '/gJWQ1gfCrjGdI9ZFMgSOD1ElPwS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Evelyn Claire');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ava', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 592695 AND a.name = 'Evelyn Claire';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1202732, 'Chris Cock', '/7ZQURgnph71tP4cD3UvWSpAyoTA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Chris Cock');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bear', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 592695 AND a.name = 'Chris Cock';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1202063, 'Ninja Thyberg', '/9uY75TQt9lX3mK9v3eAmChFUxaC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Ninja Thyberg');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 592695 AND d.name = 'Ninja Thyberg';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/t3SEI2YI81oO3nEgjJ9jMAIKApY.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 592695;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5tqkP8NNWdteskVBYPRXE6h82ts.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 592695;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1354627, 'SpongeBob Squarepants: Kreepaway Kamp', '2024-10-10', '', '', 45, '', 'RELEASED', 332.367000, 7.255000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1354627 AND g.name = 'TV 영화';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1354627 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1354627 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1354627 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1354627 AND g.name = '애니메이션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 78798, '톰 케니', '/dKOxpGnRkIMaPkZSHKIns99WxQa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 케니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'SpongeBob / Cabin / Clam / Snail / Tall Tail / Vampire Monster / Sea Urchins / Jellyfish / Anchovies (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1354627 AND a.name = '톰 케니';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 34398, 'Bill Fagerbakke', '/zntKKc1uT53BnIihmzbq601eWKZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bill Fagerbakke');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Patrick / Anchovy #2 / Roh / Sea Urchins / Anchovies (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1354627 AND a.name = 'Bill Fagerbakke';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 70615, 'Rodger Bumpass', '/lGQkw6adxqB6Hcm7VK8nVHbKupe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rodger Bumpass');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Squidward / Regigilled / The Creeper / Sea Urchins (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1354627 AND a.name = 'Rodger Bumpass';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6574, '클랜시 브라운', '/1JeBRNG7VS7r64V9lOvej9bZXW5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '클랜시 브라운');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Krabs / Anchovies (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1354627 AND a.name = '클랜시 브라운';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 78799, 'Carolyn Lawrence', '/7Ehx4bEO8loovbmbntXl0sBNjtj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Carolyn Lawrence');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sandy / Rea / Teen Girls / Sea Urchins / Anchovies (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1354627 AND a.name = 'Carolyn Lawrence';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2816967, 'Ian Vasquez', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Ian Vasquez');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1354627 AND d.name = 'Ian Vasquez';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 3929223, 'Dave Cunningham', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Dave Cunningham');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1354627 AND d.name = 'Dave Cunningham';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1684583, 'Fred Osmond', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Fred Osmond');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1354627 AND d.name = 'Fred Osmond';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 4007242, 'Kurt Snyder', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Kurt Snyder');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1354627 AND d.name = 'Kurt Snyder';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1113191, 'Sherm Cohen', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Sherm Cohen');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1354627 AND d.name = 'Sherm Cohen';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/blRsgsexoBqnjcEJkV8beKAVT6J.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1354627;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aFDYcmwEWRiEh58Ri1tMpCUWPBp.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1354627;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1241982, '모아나 2', '2024-11-27', '바다 저 너머 새로운 항해가 시작된다!', '바다를 누볐던 선조들에게서 예기치 못한 부름을 받은 모아나가 마우이와 다시 만나 새로운 선원들과 함께 오랫동안 잊혀진 멀고 위험한 바다 너머로 떠나는 특별한 모험을 담은 이야기', 100, '', 'UPCOMING', 335.704000, 0.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1241982 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1241982 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1241982 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1241982 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1564846, '아울리이 크러발리오', '/vEroqcnM2g6yY7qXDAie7hx2Cyp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아울리이 크러발리오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Moana (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1241982 AND a.name = '아울리이 크러발리오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 18918, '드웨인 존슨', '/5QApZVV8FUFlVxQpIK3Ew6cqotq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '드웨인 존슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maui (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1241982 AND a.name = '드웨인 존슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 21088, '앨런 튜딕', '/jUuUbPuMGonFT5E2pcs4alfqaCN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앨런 튜딕');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hei Hei (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1241982 AND a.name = '앨런 튜딕';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 15298, '레이철 하우스', '/m8D9XlTGfI0ZmauMKtYp5tw8eNi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레이철 하우스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gramma Tala (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1241982 AND a.name = '레이철 하우스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7242, '테무에라 모리슨', '/1ckHDFgKXJ8pazmvLCW7DeOKqA0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '테무에라 모리슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chief Tui (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1241982 AND a.name = '테무에라 모리슨';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 4524084, 'David G. Derrick Jr.', '/j5JOtRua5KduoPsQVix0rwY3jOo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'David G. Derrick Jr.');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1241982 AND d.name = 'David G. Derrick Jr.';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1461394, 'Jason Hand', '/gepbkgavGdDXdNbQzdFaxayTpoH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jason Hand');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1241982 AND d.name = 'Jason Hand';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1513971, 'Dana Ledoux Miller', '/wKqVtkgOv6iMcv1P0YPxV7UtQS9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Dana Ledoux Miller');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1241982 AND d.name = 'Dana Ledoux Miller';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2WVvPcVRqfjyVzIUVIcszGb6zT4.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1241982;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tElnmtQ6yz1PjN1kePNl8yMSb59.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1241982;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1140648, '더블 블라인드', '2024-02-09', '잠들면 죽는다!', '이중맹검 임상시험에 참여한 클레어는 다른 참가자들과 함께 통신이 터지지 않는 시설에서 지내게 된다. 정량대로 약을 복용하면서 경과를 지켜보던 참가자들은 순탄할 거라는 버크 박사의 말과는 달리 밤에 잠을 이루지 못하고, 제약사는 참가자들에게 거액의 돈을 제안하며 임상시험의 조건을 변경하는데...', 90, '', 'RELEASED', 271.817000, 5.800000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1140648 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1140648 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1140648 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1460120, 'Millie Brady', '/8IBIRaUl4QyttlieUfKVBR2Ia5J.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Millie Brady');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Claire', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1140648 AND a.name = 'Millie Brady';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 92730, '폴리애너 매킨토시', '/n9jfF6pEutTz6qeofHFz2mxh95e.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '폴리애너 매킨토시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Burke', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1140648 AND a.name = '폴리애너 매킨토시';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1812314, 'Akshay Kumar', '/ynbrjFIC9jRKUL2xw4G3HvvFSIH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Akshay Kumar');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Amir', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1140648 AND a.name = 'Akshay Kumar';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1009108, 'Diarmuid Noyes', '/saynEGgbzlYOyzFaEKfNhvBLKbA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Diarmuid Noyes');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ray', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1140648 AND a.name = 'Diarmuid Noyes';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1600596, 'Brenock O''Connor', '/n32zOLtJ1BP8UnCEkZfaGLsdp6L.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Brenock O''Connor');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paul', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1140648 AND a.name = 'Brenock O''Connor';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1752029, 'Ian Hunt Duffy', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Ian Hunt Duffy');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1140648 AND d.name = 'Ian Hunt Duffy';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5U4wqXmRf2FbwS0NMDlArDr7xq2.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1140648;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pcjWAV4Iw7sl3dpV1dfIoxbbTuu.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1140648;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (402431, '위키드', '2024-11-20', '마법 같은 운명의 시작', '자신의 진정한 힘을 아직 발견하지 못한 엘파바와 자신의 진정한 본성을 발견하지 못한 글린다, 전혀 다른 두 인물이 우정을 쌓아가며 맞닥뜨리는 예상치 못한 위기와 모험을 그린 이야기', 160, 'ALL', 'UPCOMING', 325.040000, 1.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 402431 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 402431 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 402431 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1765068, '신시아 에리보', '/4cpvSGrJg2hwddkTPMyDKj0c3O.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '신시아 에리보');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elphaba', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 402431 AND a.name = '신시아 에리보';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 226001, '아리아나 그란데', '/cslFyOh3sTWDeWXgsxmjJ1uqE0P.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아리아나 그란데');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Galinda / Glinda', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 402431 AND a.name = '아리아나 그란데';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 80860, '조나단 베일리', '/mZNzekZo8eaHMuXKgDTNLp0EvYM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조나단 베일리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fiyero', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 402431 AND a.name = '조나단 베일리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1620, '양자경', '/1X64WNBSitgqUPcZXxMoIo7143W.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '양자경');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Madame Morrible', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 402431 AND a.name = '양자경';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4785, '제프 골드블룸', '/o3PahuK7OmCI0RAQUq38CUBWYZ9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제프 골드블룸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Wonderful Wizard of Oz', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 402431 AND a.name = '제프 골드블룸';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 54507, '존 M. 추', '/yuspEo9AXGbdCYcrWfnbhG7U5Jo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '존 M. 추');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 402431 AND d.name = '존 M. 추';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4FKnORrMQZtvk96YM4zdJLDwC9E.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 402431;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ljNVBysYnPCwLqP3HXL7T1thZxu.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 402431;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (365177, '보더랜드', '2024-08-07', '', '베일에 쌓인 과거를 가진 악명 높은 현상금 사냥꾼 릴리스는 갑작스럽게 그녀의 고향인 은하계에서 가장 혼란스러운 행성 ''판도라''로 돌아간다. 그 내역은 우주에서 매우 강대한 권력을 지닌 아틀라스 회장의 잃어버린 딸을 찾기 위해서였다. 릴리스는 예상치 못한 나사빠진 연합을 만들었다. 임무를 위해 온 용병 롤랜드, 흉포한 10살 배기 폭파전문가 타이니 티나, 티나의 근육질 보디가드 크리그, 보이는 게 전부인 괴짜 과학자 태니스, 그리고 허풍쟁이 클랩트랩이 판도라의 가장 뜨거운 비밀을 파헤치기 위해 외계 종족과 위험천만한 도적떼와 맞짱을 떠야하는 우주의 운명이 그들 손에 달려 있지만 그보다 더한 것과 싸울 것이다. 보더랜드에 어서오세요.', 101, '', 'RELEASED', 279.978000, 5.863000, 30863794, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 365177 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 365177 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 365177 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 112, '케이트 블란쳇', '/vUuEHiAR0eD3XEJhg2DWIjymUAA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케이트 블란쳇');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lilith', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 365177 AND a.name = '케이트 블란쳇';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 55638, '케빈 하트', '/byiNydUlM6oP8diA7WMvYbNM7a1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케빈 하트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Roland', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 365177 AND a.name = '케빈 하트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 25616, '에드가 라미레즈', '/o9xJcedad1BwpMcgDGtW5dVgzH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에드가 라미레즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Atlas', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 365177 AND a.name = '에드가 라미레즈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8944, '제이미 리 커티스', '/9KWvPVeiLOXlOGl0XVyHZtJWQtx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이미 리 커티스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tannis', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 365177 AND a.name = '제이미 리 커티스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1767250, '아리아나 그린블랫', '/3Y3Xk8jwE1Ju0zIn31zBMuD7Fkn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아리아나 그린블랫');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tiny Tina', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 365177 AND a.name = '아리아나 그린블랫';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 16847, '일라이 로스', '/qQTkpxzh1FlBGL1HD5hzdUMxv49.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '일라이 로스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 365177 AND d.name = '일라이 로스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3NPUQ6Ywayb5ES2IP1HWrDRt1Gc.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 365177;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mKOBdgaEFguADkJhfFslY7TYxIh.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 365177;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (639720, '이프: 상상의 친구', '2024-05-08', '믿어야만 보이는 세계가 열린다', '상상의 친구 ‘이프’를 볼 수 있는 능력을 지닌 한 소녀가 아이들에게 잊혀졌던 ‘이프’를 다시 되찾아주기 위해 마법 같은 모험을 시작하는 이야기를 그린 영화', 104, 'ALL', 'RELEASED', 283.328000, 7.273000, 186240904, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 639720 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 639720 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 639720 AND g.name = '가족';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1709047, '케일리 플레밍', '/yF2p16KK9gFlGnYKd2PLQqwmsek.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케일리 플레밍');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bea', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 639720 AND a.name = '케일리 플레밍';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10859, '라이언 레이놀즈', '/6m3hkkHmKkD4MUJhng7ojE7MLKC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '라이언 레이놀즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cal', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 639720 AND a.name = '라이언 레이놀즈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17697, '존 크래신스키', '/pmVGDb6Yl6OyFcHVGbu1EYNfyFK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '존 크래신스키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dad / Marshmallow (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 639720 AND a.name = '존 크래신스키';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10981, '피오나 쇼', '/tjM74LcxwnYM77Csg1EtlXb1F9a.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '피오나 쇼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Grandmother', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 639720 AND a.name = '피오나 쇼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4495, '스티브 카렐', '/1LQDqpcDQTtQb90o9vagbuCHueb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스티브 카렐');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Blue (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 639720 AND a.name = '스티브 카렐';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 17697, '존 크래신스키', '/pmVGDb6Yl6OyFcHVGbu1EYNfyFK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '존 크래신스키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 639720 AND d.name = '존 크래신스키';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9GAOhSzXjXJR4AxYCa2AMzMGPVg.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 639720;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/nxxCPRGTzxUH8SFMrIsvMmdxHti.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 639720;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1124641, 'Classified', '2024-09-19', '', '', 105, '', 'RELEASED', 314.693000, 5.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1124641 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1124641 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6383, '에런 엑하트', '/6rI3cYhdxOaOFSRB4C29MalpwDC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에런 엑하트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Evan Shaw', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1124641 AND a.name = '에런 엑하트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3129, '팀 로스', '/qSizF2i9gz6c6DbAC5RoIq8sVqX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '팀 로스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kevin Angler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1124641 AND a.name = '팀 로스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17140, '아비게일 브레스린', '/1MQMfcb3fuN0lC1egdaOnHcTlm8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아비게일 브레스린');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kacey Walker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1124641 AND a.name = '아비게일 브레스린';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1075104, 'Matt Hookings', '/iPmO808tQE0Pm52vQFhevRGZIEn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Matt Hookings');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Antonio Griffin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1124641 AND a.name = 'Matt Hookings';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4916739, 'Lucky Ali', '/6jVOyyw9LqFeS8N8gYgCKI2Rj6Q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lucky Ali');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Luca', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1124641 AND a.name = 'Lucky Ali';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 97555, 'Roel Reiné', '/nOc53uSl8bBNfkuLGlXnOZwbYdu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Roel Reiné');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1124641 AND d.name = 'Roel Reiné';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3k8jv1kSAAc0rCfFGtWDDQL4dfK.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1124641;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1FBHAQnq7Bs3djBmaNkfdVbnCUE.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1124641;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1011985, '쿵푸팬더 4', '2024-03-02', '오랜만이지! 드림웍스 레전드 시리즈 마침내 컴백!', '마침내 내면의 평화… 냉면의 평화…가 찾아왔다고 믿는 용의 전사 ‘포’ 이젠 평화의 계곡의 영적 지도자가 되고, 자신을 대신할 후계자를 찾아야만 한다. “이제 용의 전사는 그만둬야 해요?” 용의 전사로의 모습이 익숙해지고 새로운 성장을 하기보다 지금 이대로가 좋은 ‘포’ 하지만 모든 쿵푸 마스터들의 능력을 그대로 복제하는 강력한 빌런 ‘카멜레온’이 나타나고 그녀를 막기 위해 정체를 알 수 없는 쿵푸 고수 ‘젠’과 함께 모험을 떠나게 되는데… 포는 가장 강력한 빌런과 자기 자신마저 뛰어넘고 진정한 변화를 할 수 있을까?', 94, 'ALL', 'RELEASED', 285.434000, 7.092000, 543900620, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1011985 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1011985 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1011985 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1011985 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 70851, '잭 블랙', '/rtCx0fiYxJVhzXXdwZE2XRTfIKE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '잭 블랙');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Po (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1011985 AND a.name = '잭 블랙';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1625558, '아콰피나', '/l5AKkg3H1QhMuXmTTmq1EyjyiRb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아콰피나');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zhen (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1011985 AND a.name = '아콰피나';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19492, '비올라 데이비스', '/y6Qq5FP3AlnDDQ5s0cOhOnNFrPh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '비올라 데이비스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Chameleon (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1011985 AND a.name = '비올라 데이비스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4483, '더스틴 호프만', '/yFjTzJHE6AFbwQifOlnNDzmiwlq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '더스틴 호프만');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shifu (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1011985 AND a.name = '더스틴 호프만';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17419, '브라이언 크랜스턴', '/kNyTXGkiSP8W4Gs60hF7UoxZnWN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브라이언 크랜스턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Li (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1011985 AND a.name = '브라이언 크랜스턴';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 64151, 'Mike Mitchell', '/w6ibMbbw7KBrcWxUb7N7h3GEQGO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Mike Mitchell');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1011985 AND d.name = 'Mike Mitchell';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1ZNOOMmILNUzVYbzG1j7GYb5bEV.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1011985;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4z88bpDf7aqZcYkLDDEIdj8TfZU.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1011985;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (748783, '가필드 더 무비', '2024-04-30', '환상의 팀플레이 냥가능', '세상귀찮 집냥이, 바쁘고 험난한 세상에 던져졌다! 집사 ‘존’과 반려견 ‘오디’를 기르며 평화로운 나날을 보내던 집냥이 ‘가필드’. 어느 날, 험악한 길냥이 무리에게 납치당해 냉혹한 거리로 던져진다. 돌봐주는 집사가 없는 집 밖 세상은 너무나도 정신없게 돌아가고 길에서 우연히 다시 만난 아빠 길냥이 ‘빅’은 오히려 ‘가필드’를 위기에 빠지게 하는데… 험난한 세상, 살아남아야 한다!', 101, 'ALL', 'RELEASED', 264.387000, 7.108000, 230295748, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 748783 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 748783 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 748783 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 748783 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 748783 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 73457, '크리스 프랫', '/6DdoTgW9jdJwDmVFZRP8D0AtVFs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 프랫');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Garfield (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 748783 AND a.name = '크리스 프랫';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2231, '사무엘 L. 잭슨', '/AiAYAqwpM5xmiFrAIeQvUXDCVvo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사무엘 L. 잭슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vic (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 748783 AND a.name = '사무엘 L. 잭슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1278487, '해나 워딩엄', '/eHAICyhvjiRZCgzKyJCk9hWnnjr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '해나 워딩엄');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jinx (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 748783 AND a.name = '해나 워딩엄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10182, '빙 레임스', '/4gpLVNKPZlVucc4fT2fSZ7DksTK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빙 레임스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Otto (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 748783 AND a.name = '빙 레임스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3292, '니콜라스 홀트', '/laeAYQVBV9U3DkJ1B4Cn1XhpT8P.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '니콜라스 홀트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jon (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 748783 AND a.name = '니콜라스 홀트';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 61411, 'Mark Dindal', '/333OWiQBGLBjAWUemWySFzxCbhx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Mark Dindal');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 748783 AND d.name = 'Mark Dindal';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/57g3pHYi3p0JNVO1LkcyYbeMDBf.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 748783;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1wP1phHo2CROOqzv7Azs0MT5esU.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 748783;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (569094, '스파이더맨: 어크로스 더 유니버스', '2023-05-31', '한 명을 구할 것인가, 모두를 구할 것인가', '여러 성장통을 겪으며 새로운 스파이더맨이 된 마일스 모랄레스. 그 앞에 다른 평행세계의 스파이더우먼 그웬이 다시 나타난다. 모든 차원의 멀티버스 속 스파이더맨들을 만나게 되지만, 질서에 대한 신념이 부딪히며 예상치 못한 균열이 생기는데… 상상 그 이상을 넘어서는 멀티버스의 세계가 열린다!', 140, 'All', 'RELEASED', 218.674000, 8.400000, 690897910, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 569094 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 569094 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 569094 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 569094 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 587506, '셔믹 무어', '/ovUKfVOwJ7CadEHaG3NDsfA5xRq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '셔믹 무어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miles Morales (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 569094 AND a.name = '셔믹 무어';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 130640, '헤일리 스타인펠드', '/dxSDWkiVaC6JYjrV3XRAZI7HOSS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헤일리 스타인펠드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gwen Stacy (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 569094 AND a.name = '헤일리 스타인펠드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 226366, '브라이언 타이리 헨리', '/2MsJh0bpyzwvOUnXOltHp3j85Pb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브라이언 타이리 헨리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jeff Morales (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 569094 AND a.name = '브라이언 타이리 헨리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 141610, '로런 벨레스', '/98BvmTJCZHx0jPv0oNcv04Jkmfb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로런 벨레스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rio Morales (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 569094 AND a.name = '로런 벨레스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 543505, '제이크 존슨', '/3UNfW2qZgRkW81neNVfQvaRC92K.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이크 존슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Peter B. Parker (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 569094 AND a.name = '제이크 존슨';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2451598, '켐프 파워스', '/oE4TcENMQw25t4UTAjrnl0m4JyH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '켐프 파워스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 569094 AND d.name = '켐프 파워스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1046497, '저스틴 톰슨', '/mRMi8Q2fmlfbDYkE7A63gzFtGsZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '저스틴 톰슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 569094 AND d.name = '저스틴 톰슨';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 89596, '조아킴 도스 샌토스', '/w45GPb3cW6TqPw4FxB5Hc6zzAwx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조아킴 도스 샌토스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 569094 AND d.name = '조아킴 도스 샌토스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lMWTlGr9jVUC18T515hPRKym5QQ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 569094;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kVd3a9YeLGkoeR50jGEXM6EqseS.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 569094;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (98, '글래디에이터', '2000-05-04', '느낄수 있는가, 이 거대한 스펙터클의 전율을', '죽을 날이 머지않은 황제 마르쿠스 아우렐리우스는 막시무스를 총애하여 아들이 아닌 그에게 권력을 넘겨주기로 한다. 황제의 아들 코모두스는 이에 질투와 분노를 느껴 황제를 살해한다. 왕좌를 이어받은 코모두스는 막시무스와 그의 가족을 죽이라고 명령한다. 가족을 모두 잃고 겨우 살아남은 막시무스는 노예로 전락하고, 투기장의 검투사가 된다. 그에게 남은 건 오직 황제 코모두스에 대한 복수 뿐. 검투사로서 매 경기마다 승리로 이끌면서 살아남자 그의 명성은 날로 높아 간다. 그러던 어느 날 오래 전 사랑했던 황제의 누이 루실라를 다시 만나게 되는데...', 154, '15', 'RELEASED', 300.480000, 8.216000, 465361176, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 98 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 98 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 98 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 934, '러셀 크로우', '/rsxGCRtPu42uKDJZlz7qknvz8h6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '러셀 크로우');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maximus', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 98 AND a.name = '러셀 크로우';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 73421, '호아킨 피닉스', '/u38k3hQBDwNX0VA22aQceDp9Iyv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '호아킨 피닉스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Commodus', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 98 AND a.name = '호아킨 피닉스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 935, '코니 닐센', '/lvQypTfeH2Gn2PTbzq6XkT2PLmn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '코니 닐센');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lucilla', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 98 AND a.name = '코니 닐센';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 936, 'Oliver Reed', '/dWfotc1X71wNCGyPO9hXpv8U9Gw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Oliver Reed');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Proximo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 98 AND a.name = 'Oliver Reed';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 194, '리처드 해리스', '/lCvcVMuxrg1f5A8OMqY9AqkkcZR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리처드 해리스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marcus Aurelius', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 98 AND a.name = '리처드 해리스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 578, '리들리 스콧', '/zABJmN9opmqD4orWl3KSdCaSo7Q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '리들리 스콧');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 98 AND d.name = '리들리 스콧';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yemF0xxGU56Pf3JXxVr4C6kuKng.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 98;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vlAVk0rdG6oyZ8by6bkE9rFVACf.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 98;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (482600, '일본 엄마', '2017-02-09', '', '얼굴은 청순, 가슴은 D컵, 밤 기술은 퍼펙트! ""아들아, 이제부터 네 여친이 아니라 엄마다." 아들 기호가 결혼하겠다며 일본에서 데려온 그녀, 유키. 그러나 기호는 한국에 오자 전 여친을 만나며 바람을 피우기 시작한다. 처음에는 예비 며느리를 달래는 마음으로 유키를 위로하던 민철은 어느 순간부터 자신이 유키를 여자로 보고 있다는 사실을 깨닫는다. 결국, 기호 몰래 민철과 유키의 뜨거운 정사가 펼쳐지는데...', 91, '19+', 'RELEASED', 297.125000, 6.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 482600 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 482600 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4841560, 'Jeon Ji-hak', '/6PFRMnyLaHXKrKmDWg7whQicRvf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jeon Ji-hak');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Min-cheol (민철)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 482600 AND a.name = 'Jeon Ji-hak';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1827228, 'Choi Min-ho', '/2sdgTHmfm14RHee5gqoiyC165xR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Choi Min-ho');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gi-ho', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 482600 AND a.name = 'Choi Min-ho';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1995708, 'Saki Mizumi', '/iPTdfxma79VtGy9M3ky0JZwnXhL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Saki Mizumi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yuki', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 482600 AND a.name = 'Saki Mizumi';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1909641, 'Ha Roo', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ha Roo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Minky - Cameo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 482600 AND a.name = 'Ha Roo';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1708576, 'Ahn So-hee', '/7OWRPTEPYi7dV5a97fhXLiiHpPM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ahn So-hee');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eun-ji', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 482600 AND a.name = 'Ahn So-hee';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1758809, 'Kim Moo-won', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Kim Moo-won');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 482600 AND d.name = 'Kim Moo-won';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hq1EaYIqUNrPM3QFYAbnH2UHoX8.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 482600;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 482600;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (354912, '코코', '2017-10-27', '죽은 자들의 세상은 더욱 화려하다', '미구엘은 멕시코의 자랑인 에르네스토 델라 크루즈 같은 뮤지션이 되길 꿈꾸지만 미구엘 집안 사람들에게 음악은 금기다. 먼 옛날 조상 중에 음악 때문에 가족을 버린 인물이 있었기 때문. 미구엘은 죽은 자의 날이 되자 실력으로 인정받겠다는 결심을 하고 경연 무대에 오르려 하는데, 우연히 에르네스토의 기타에 손을 댔다가 죽은 자들의 세상에 들어서게 된다. 이승과 저승을 이어주는 마리골드 꽃길을 건너 죽은 자들의 세상에 도착한 미구엘은 거짓말과 위변조가 장기인 헥터를 만난다. 그리고 꿈에 그리던 우상 에르네스토를 만나러 가는 여정에서 가족의 비밀을 알게 된다.', 105, 'All', 'RELEASED', 263.230000, 8.209000, 807816196, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 354912 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 354912 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 354912 AND g.name = '음악';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 354912 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1193391, 'Anthony Gonzalez', '/WF7bn6t0LkxwBWyDMWvomVujn7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Anthony Gonzalez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miguel Rivera (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 354912 AND a.name = 'Anthony Gonzalez';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 258, '가엘 가르시아 베르날', '/7mq3EQN1oJfYNXkv9xKXKu6Ccw5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '가엘 가르시아 베르날');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Héctor (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 354912 AND a.name = '가엘 가르시아 베르날';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4589, '벤저민 브랫', '/hBenHPT4iJEG2kt5z2TOGnkRZwh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '벤저민 브랫');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ernesto de la Cruz (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 354912 AND a.name = '벤저민 브랫';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10402, 'Alanna Ubach', '/ffyBAEoW3bDgVJQV3GaHsZ9x29W.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alanna Ubach');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mamá Imelda Rivera (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 354912 AND a.name = 'Alanna Ubach';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 154004, 'Renee Victor', '/wAVDqwFhQsRQgO6VIYq6T9Wbbx8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Renee Victor');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elena Rivera (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 354912 AND a.name = 'Renee Victor';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 8, '리 언크리치', '/crb297utC6W4HSstOe5djDPTwEN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '리 언크리치');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 354912 AND d.name = '리 언크리치';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pQu93NuwR90AaCULzglVD5Ge4Ml.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 354912;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/askg3SMvhqEl4OL52YuvdtY40Yb.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 354912;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (814889, '네버 렛 고', '2024-09-18', '한 번의 접촉이면 충분하다.', '악마에 의해 멸망한 세상에서 엄마는 악마를 피하기 위해 쌍둥이 아들을 데리고 악이 침입할 수 없는 태곳적 목재로 지은 오두막으로 왔는데... 유일하게 안전한 숲 속 외딴 오두막에서, 가족을 지키려는 엄마와 인간을 미혹하는 악마와의 투쟁을 그린 작품', 101, '', 'RELEASED', 270.265000, 6.200000, 13111608, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 814889 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 814889 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4587, '할리 베리', '/peJWU9QVTkWkXxqDi9heUIQ647T.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '할리 베리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Momma', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 814889 AND a.name = '할리 베리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3401898, 'Anthony B. Jenkins', '/v0hZpeChlytBx0MwUhkKoeFpedF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Anthony B. Jenkins');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Samuel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 814889 AND a.name = 'Anthony B. Jenkins';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1962720, 'William Catlett', '/1GzaCfhYEfg2s2lQzlQykijlUY8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'William Catlett');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Father', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 814889 AND a.name = 'William Catlett';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2215763, 'Percy Daggs IV', '/dhn9bDGhBSbVKWkzFC86rtg1nHj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Percy Daggs IV');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nolan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 814889 AND a.name = 'Percy Daggs IV';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 565222, 'Matthew Kevin Anderson', '/lSCwDQjV2qaPapwq5q77aQW2Ndv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Matthew Kevin Anderson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Stranger', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 814889 AND a.name = 'Matthew Kevin Anderson';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 59291, '알렉상드르 아자', '/qODWbFXeWk3quoDKzhfmAhxn4Dx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '알렉상드르 아자');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 814889 AND d.name = '알렉상드르 아자';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3EpZ2ksjijmdr8BhISP03PYzNFW.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 814889;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/l8OyAXEp5FKZWmDhqJMbiwAEvz.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 814889;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (634649, '스파이더맨: 노 웨이 홈', '2021-12-15', '무너진 세계, 차원을 뛰어넘는 위협', '미스테리오의 계략으로 세상에 정체가 탄로난 스파이더맨 피터 파커는 하루 아침에 평범한 일상을 잃게 된다. 문제를 해결하기 위해 닥터 스트레인지를 찾아가 도움을 청하지만 뜻하지 않게 멀티버스가 열리면서 각기 다른 차원의 불청객들이 나타난다. 닥터 옥토퍼스를 비롯해 스파이더맨에게 깊은 원한을 가진 숙적들의 강력한 공격에 피터 파커는 사상 최악의 위기를 맞게 되는데…', 148, '12', 'RELEASED', 225.522000, 7.956000, 1921847111, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 634649 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 634649 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 634649 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1136406, '톰 홀랜드', '/6ZCeGtdrat1n74K7WHpQ90HaZ5Y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 홀랜드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Peter Parker / Spider-Man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 634649 AND a.name = '톰 홀랜드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 505710, '젠데이아', '/3WdOloHpjtjL96uVOhFRRCcYSwq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '젠데이아');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'MJ', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 634649 AND a.name = '젠데이아';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 71580, '베네딕트 컴버배치', '/fBEucxECxGLKVHBznO0qHtCGiMO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '베네딕트 컴버배치');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Doctor Strange', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 634649 AND a.name = '베네딕트 컴버배치';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1649152, 'Jacob Batalon', '/53YhaL4xw4Sb1ssoHkeSSBaO29c.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jacob Batalon');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ned Leeds', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 634649 AND a.name = 'Jacob Batalon';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 134, '제이미 폭스', '/zD8Nsy4Xrghp7WunwpCj5JKBPeU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이미 폭스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Max Dillon / Electro', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 634649 AND a.name = '제이미 폭스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1293994, '존 왓츠', '/fkXChMX6CUXY1yOxBehAzvaTCl7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '존 왓츠');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 634649 AND d.name = '존 왓츠';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fvqoI9r1GU2EFkc0xjZ6dKCuDVR.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 634649;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zD5v1E4joAzFvmAEytt7fM3ivyT.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 634649;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1244492, '룩백', '2024-06-28', '함께 그리자', '4학년인 ''후지노''는 학교 신문에 네컷 만화를 그리며 친구들의 극찬을 받는다. 그림에 대한 자신감으로 만화가를 꿈꾸던 ‘후지노’는 학교에 나오지 않는 동급생 ‘쿄모토’와 함께 네컷 만화를 연재하며 그림을 향한 한결 같은 마음으로 눈부신 우정을 쌓아 간다. 그러던 어느 날, 단 하나의 사건이 그들을 찾아 오는데... 만화만이 세상이 전부였던 두 소녀의 가슴 벅찬 성장 이야기가 시작된다!', 62, 'ALL', 'RELEASED', 281.432000, 7.800000, 11497666, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1244492 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1244492 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2797433, '카와이 유미', '/qDJUUlqjhsRBpLYPfm0xVFNbBTY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카와이 유미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fujino (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1244492 AND a.name = '카와이 유미';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2762775, '요시다 미즈키', '/7bMv0ajEYjp70AKHxH63Xfng2ga.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '요시다 미즈키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kyomoto (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1244492 AND a.name = '요시다 미즈키';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20708, '斉藤陽一郎', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '斉藤陽一郎');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Homeroom Teacher (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1244492 AND a.name = '斉藤陽一郎';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5012790, '岡幸太', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '岡幸太');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Man (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1244492 AND a.name = '岡幸太';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4980600, '牧紅葉', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '牧紅葉');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fujino''s Sister (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1244492 AND a.name = '牧紅葉';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1456621, '오시야마 키요타카', '/vAvvzl7p1019S44K8SiF4m4GPBl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '오시야마 키요타카');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1244492 AND d.name = '오시야마 키요타카';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ehl2Du38qbg9M2cqfoVPUKgVDTy.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1244492;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1MzBCKjwDyQg2Cu8XJR8Ox59sWY.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1244492;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1047373, 'The Silent Hour', '2024-10-03', '', '', 95, '', 'RELEASED', 276.411000, 6.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1047373 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1047373 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1047373 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 92404, '조엘 키너먼', '/kymJrfLvDF6hXRkNWVUUr0sb5va.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조엘 키너먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frank Shaw', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1047373 AND a.name = '조엘 키너먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1997501, 'Sandra Mae Frank', '/giviV3KhxVeem0WhGBm7VlJbR2d.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sandra Mae Frank');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ava Fremont', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1047373 AND a.name = 'Sandra Mae Frank';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 327, '메키 파이퍼', '/b9qbdKiuJdNROpIdZCuUdN5Smam.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '메키 파이퍼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mason Lynch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1047373 AND a.name = '메키 파이퍼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2983, '마크 스트롱', '/3cNmatYsoifytg7TfQhI1EHow3v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마크 스트롱');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Doug Slater', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1047373 AND a.name = '마크 스트롱';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 67979, 'Michael Eklund', '/la3J6E12pbZHe0sE73EipKkzQOp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Michael Eklund');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Angel Flores', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1047373 AND a.name = 'Michael Eklund';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 37948, 'Brad Anderson', '/4XCOsnXocIsOTLdVjktj3gqTu2b.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Brad Anderson');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1047373 AND d.name = 'Brad Anderson';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/j736cRzBtEPCm0nHnpRN1prqiqj.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1047373;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3C3LTPEdkH0la3LMbCEgMXzMHlh.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1047373;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1087822, '헬보이: 크룩드 맨', '2024-08-29', '세상을 구할 악마가 온다', '불가사의한 심령 현상을 해결하는 B.R.P.D의 베테랑 해결사 ''헬보이''. 유령 거미를 퇴치하는 임무 중, 기차 탈선 사고로 애팔레치아 산맥 깊숙이 위치한 음산한 마을에 도착한다. 그곳은 흑마법사 ‘크룩드 맨’이 지배하고 있다. 마녀와 저주, 그리고 죽음이 들끓는 마을을 구하기 위해 ''헬보이''는 신입 요원 ''조''와 함께 죽은 자들을 불러오는 ''크룩드 맨''에 맞서는데…', 99, '', 'RELEASED', 274.406000, 5.400000, 1289658, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1087822 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1087822 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1087822 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1292258, 'Jack Kesy', '/lQ8nUYK6InbCFk2TWNnXjjvG9IY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jack Kesy');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hellboy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1087822 AND a.name = 'Jack Kesy';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1385813, 'Jefferson White', '/8QSrhrWpqTBGJN3rfijXCvmOcb5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jefferson White');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tom Ferrell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1087822 AND a.name = 'Jefferson White';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2168270, 'Adeline Rudolph', '/8j0zvHIqvW9kwOFLWI7QOa4V62y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Adeline Rudolph');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bobbie Jo Song', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1087822 AND a.name = 'Adeline Rudolph';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1361520, 'Martin Bassindale', '/gsMepIrek14cuV2vQPEo9GhuoRs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Martin Bassindale');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Crooked Man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1087822 AND a.name = 'Martin Bassindale';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1490856, 'Leah McNamara', '/ecVaqYk9SlH0sOJ8eDgwqsbKceS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Leah McNamara');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Effie Kolb', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1087822 AND a.name = 'Leah McNamara';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 20192, 'Brian Taylor', '/1TXxgF48STiUb3F9cp1L5iEx5Pb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Brian Taylor');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1087822 AND d.name = 'Brian Taylor';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/90upwAQ60ENSHLcT8uF7IhveuT1.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1087822;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/g1z1ZvYKcmk9EnVOTYXR6vkNjkZ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1087822;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1069387, '페드로 파라모', '2024-09-12', '속삭임 외에는 아무 소리도 들리지 않았다.', '후안 룰포의 걸작 소설을 원작으로 한 작품. 한 남자가 생부인 페드로 파라모를 찾아 외딴 마을로 떠난다. 그러나 도착해 보니, 마을은 좌절된 사랑에서 비롯된 분노와 폭력으로 황폐해져 있다.', 131, '19', 'RELEASED', 271.520000, 6.708000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1069387 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1069387 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1069387 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1069387 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1168097, '마누엘 가르시아 룰포', '/54Rk1hKfNdNKGHQMnONDGmNtUv3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마누엘 가르시아 룰포');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pedro Páramo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1069387 AND a.name = '마누엘 가르시아 룰포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 87265, 'Tenoch Huerta Mejía', '/5qoAmQpcPCjf4Pd6aTZOeINGYzk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tenoch Huerta Mejía');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Juan Preciado', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1069387 AND a.name = 'Tenoch Huerta Mejía';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 224507, '돌로레스 헤레디아', '/vQM2QmixTyU2kBr72qjuuOCmbQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '돌로레스 헤레디아');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eduviges', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1069387 AND a.name = '돌로레스 헤레디아';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1304459, 'Ilse Salas', '/rvS2mb25dzyRqBOIjtA2LtHyswu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ilse Salas');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Susana San Juan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1069387 AND a.name = 'Ilse Salas';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 133766, 'Hector Kotsifakis', '/yMlCG0Yqigqo1dg8SCBrwUrjW8H.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Hector Kotsifakis');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fulgor Sedano', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1069387 AND a.name = 'Hector Kotsifakis';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 275, '로드리고 프리에토', '/h05yRvGOoLk0s9RTwOQL9pVuU23.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '로드리고 프리에토');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1069387 AND d.name = '로드리고 프리에토';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/XR9Q1Z81Tf8fRbG7dzkHwfPZMM.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1069387;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rijaG2Z2XEeIUfWUn4fzmzTVCuK.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1069387;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (86328, '테리파이어', '2011-08-09', '', '', 19, '', 'RELEASED', 223.560000, 6.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 86328 AND g.name = '공포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1375767, 'Marie Maser', '/iFLTBR6mC32zjSsTruT7m7aLCqo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marie Maser');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Woman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 86328 AND a.name = 'Marie Maser';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1375765, 'Mike Giannelli', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mike Giannelli');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Art the Clown', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 86328 AND a.name = 'Mike Giannelli';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1487368, 'Michael Chmiel', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Michael Chmiel');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Attendant', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 86328 AND a.name = 'Michael Chmiel';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2712634, 'Daniel Rodas', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Daniel Rodas');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Man in Car', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 86328 AND a.name = 'Daniel Rodas';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2712635, 'Jennifer Castellano', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jennifer Castellano');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mutilated Woman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 86328 AND a.name = 'Jennifer Castellano';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 933176, 'Damien Leone', '/nX2kkYD32x2PC9rRU7DrYCRPjFE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Damien Leone');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 86328 AND d.name = 'Damien Leone';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uP5k78WkCVrxrFp4AJflHbC61Ao.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 86328;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1U7EVGj7Noc26owNOreCTKn59Bd.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 86328;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (568124, '엔칸토: 마법의 세계', '2021-10-13', '평범함도 특별해지는 이 곳', '콜롬비아의 깊은 산 속, 놀라운 마법과 활기찬 매력이 넘치는 세계 엔칸토. 이곳을 만든 장본인은 마드리갈 가문의 기둥인 알마 할머니다. 그녀는 젊었을 때 세 쌍둥이를 데리고 이곳으로 오던 중에 위기를 맞았다. 그때 그녀가 들고 있던 촛불에 기적이 일어났고 그이후로 마법의 능력이 손주 세대까지 대물림된다. 3대에 걸친 이대가족은 음식으로 병을 고치는 능력, 꽃을 피우는 능력, 날씨를 조종 하는 능력 등 저마다 독특한 능력을 지니게 됐다. 하지만 가족 중 유일하게 미라벨만 아무런 능력이 없다. 어느 날 엔칸토가 지닌 마법의 힘이 위험에 처하고 가족들은 점차 자신의 능력을 잃어가기 시작한다. 이를 감지한 미라벨은 유일하게 평범한 자신이 특별한 이 가족의 마지막 희망일지 모른다고 생각하는데...', 102, 'ALL', 'RELEASED', 268.372000, 7.600000, 261289554, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 568124 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 568124 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 568124 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 568124 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 968367, 'Stephanie Beatriz', '/pGo7zMGsMXOMSMZc68Xi3LvzeP0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Stephanie Beatriz');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mirabel Madrigal (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 568124 AND a.name = 'Stephanie Beatriz';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2521631, 'María Cecilia Botero', '/nH6eBBgv1PI9J6Ftkn01ny1TMt1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'María Cecilia Botero');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Abuela Alma Madrigal (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 568124 AND a.name = 'María Cecilia Botero';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5723, '존 레귀자모', '/kwYCdxTlDh9zauUCg4mp2XTCQTw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '존 레귀자모');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruno Madrigal (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 568124 AND a.name = '존 레귀자모';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1010157, 'Diane Guerrero', '/suyRRuMIjBdAzTxdFM7U9zHMPTv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Diane Guerrero');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Isabela Madrigal (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 568124 AND a.name = 'Diane Guerrero';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2489411, 'Jessica Darrow', '/rJojc1ZUasEnUxSk7lL42RxyQbP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jessica Darrow');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Luisa Madrigal (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 568124 AND a.name = 'Jessica Darrow';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 76595, '바이런 하워드', '/ePJXkxrD44nM0VB7Xx9Q4ityzfT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '바이런 하워드');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 568124 AND d.name = '바이런 하워드';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1318201, '재러드 부시', '/2gIwj1cnqZIKWaFg0ihmZnuZypR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '재러드 부시');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 568124 AND d.name = '재러드 부시';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/b8gz7UKMwMz39mz6EH5Jjicjdth.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 568124;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3G1Q5xF40HkUBJXxt2DQgQzKTp5.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 568124;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1329336, '배드 가이즈: 오싹한 핼러윈', '2024-10-02', '', '훔치는 솜씨라면 알아주는 배드 가이즈 일당이 위험한 핼러윈 한탕에 나서기로 한다. 으스스한 저택에 들어가 값비싼 펜던트를 슬쩍할 계획인데. 뭐 잘못되기야 하겠어?', 24, 'ALL', 'RELEASED', 268.330000, 7.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1329336 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1329336 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 972294, 'Michael Godere', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Michael Godere');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wolf (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1329336 AND a.name = 'Michael Godere';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3320600, 'Ezekiel Ajeigbe', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ezekiel Ajeigbe');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shark (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1329336 AND a.name = 'Ezekiel Ajeigbe';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3700657, 'Raul Ceballos', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Raul Ceballos');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Piranha (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1329336 AND a.name = 'Raul Ceballos';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1217648, '크리스 디어먼토펄러스', '/rD9KI3FYwy3rFJhdTg2K5mhr7W3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 디어먼토펄러스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Snake / Reginald E. Scary (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1329336 AND a.name = '크리스 디어먼토펄러스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1213391, 'Mallory Low', '/amS893X6E4w2n3Go73HkbuYZjI9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mallory Low');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tarantula (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1329336 AND a.name = 'Mallory Low';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1479536, 'Kevin Peaty', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Kevin Peaty');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1329336 AND d.name = 'Kevin Peaty';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oEJC05CqPugMxC4rFu9r6r6vg6m.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1329336;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vGaBqgY8YRzQVUbBMPnd5SmYvL7.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1329336;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1079485, '곰돌이 푸: 피와 꿀 2', '2024-03-26', '', '', 93, '', 'RELEASED', 229.028000, 6.200000, 7582541, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1079485 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1079485 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1482026, 'Scott Chambers', '/pANsw8kWaQzSwuVmr1Em5di9u4o.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Scott Chambers');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Christopher Robin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1079485 AND a.name = 'Scott Chambers';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1325532, 'Ryan Oliva', '/8BtMbBj9tdkDkRxeBkK5HdLCaEk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ryan Oliva');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Winnie-the-Pooh', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1079485 AND a.name = 'Ryan Oliva';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1508760, 'Marcus Massey', '/zc9ZKD32JPDLabXWraX43O6BN4c.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marcus Massey');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Owl', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1079485 AND a.name = 'Marcus Massey';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 93492, 'Tallulah Evans', '/51iKIxfVjvVEm1e5L7P9ZpQTPb8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tallulah Evans');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lexy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1079485 AND a.name = 'Tallulah Evans';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4429409, 'Lewis Santer', '/bWI56wKghtybdIbLjOCiDKIIV9D.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lewis Santer');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tigger', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1079485 AND a.name = 'Lewis Santer';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 3122176, 'Rhys Frake-Waterfield', '/a0ETg5j54Nca7dO2s9Tfhco0u40.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Rhys Frake-Waterfield');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1079485 AND d.name = 'Rhys Frake-Waterfield';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2sADrLwMQof6yYmrJRSa04tFZuS.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1079485;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/p4INKu77iuTG1o1a5N3Y9vqeEGq.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1079485;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (762441, '콰이어트 플레이스: 첫째 날', '2024-06-26', '쉿! 절대 소리내지 말 것', '평균 소음 90 데시벨을 자랑하는 미국 최대도시 뉴욕, 고양이 프로도와 함께 간만에 외출을 나온 사미라는 공연을 보고 돌아가던 중 하늘에서 떨어져 내리는 섬광을 목격하고 곧 사람들을 닥치는 대로 공격하는 정체불명 괴생명체의 출현에 충격에 휩싸인다. 아수라장이 된 뉴욕 도심에 ‘절대 소리 내지 말라’는 안내방송이 울려퍼지는 가운데 맨해튼의 모든 다리가 폭격으로 끊어지고, 사람들은 온갖 위협이 도사리는 도시에 고립되고 만다. 살아남기 위해 홀로 사투를 벌이던 ''사미라''는 우연히 또 다른 생존자 에릭을 만나고 두 사람은 괴생명체를 피해 지하철역부터 시가지, 할렘까지 숨죽인 여정을 이어 나가는데…', 99, '15', 'RELEASED', 276.813000, 6.800000, 260894737, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 762441 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 762441 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 762441 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1267329, '루피타 뇽오', '/y40Wu1T742kynOqtwXASc5Qgm49.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루피타 뇽오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Samira', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762441 AND a.name = '루피타 뇽오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1597365, '조셉 퀸', '/zshhuioZaH8S5ZKdMcojzWi1ntl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조셉 퀸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eric', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762441 AND a.name = '조셉 퀸';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 934281, '알렉스 울프', '/7PMu5zFOEH7PqFDzrKThgKD4Ndf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '알렉스 울프');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Reuben', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762441 AND a.name = '알렉스 울프';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 938, '자이먼 혼수', '/tpvtxxvCx2Mb5DV632hmuYlHoiY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '자이먼 혼수');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Henri', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762441 AND a.name = '자이먼 혼수';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1847948, 'Eliane Umuhire', '/u2q6nQtLsKGyTnWHtmKGyeYAyXq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Eliane Umuhire');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zena', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762441 AND a.name = 'Eliane Umuhire';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2580328, '마이클 사노스키', '/s2bl2Ct2BNLZjXqxHt7SpYgYzLD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '마이클 사노스키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 762441 AND d.name = '마이클 사노스키';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/eufjDFIHtFSmcblWpvw5BiNzmO6.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 762441;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6XjMwQTvnICBz6TguiDKkDVHvgS.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 762441;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1373893, 'Joni pata de conejo', '2024-10-11', '', '', 0, '', 'RELEASED', 269.552000, 7.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1373893 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5011693, 'Jose Valero', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jose Valero');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1373893 AND a.name = 'Jose Valero';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1690568, 'Gregor Acuña-Pohl', '/3wbgpPWm92rsZz3IVlEIUUBm2o2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gregor Acuña-Pohl');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1373893 AND a.name = 'Gregor Acuña-Pohl';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 5011691, 'Ismael Vazquez Nervión', '/ywKMwyUBTywb5NcUW1tmgO26A1F.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Ismael Vazquez Nervión');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1373893 AND d.name = 'Ismael Vazquez Nervión';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/a3nKPtKs7SRB6bdlaxPbD7f7eKJ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1373893;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7pa3mMBIHJXPJantNvlbyNVI5a1.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1373893;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (259872, 'Des jours plus belles que la nuit', '2010-02-19', '', '', 60, '', 'RELEASED', 254.181000, 6.500000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 259872 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1593298, 'Wim van Damme', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Wim van Damme');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Himself', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 259872 AND a.name = 'Wim van Damme';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1593299, 'Floor Wyns', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Floor Wyns');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Herself', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 259872 AND a.name = 'Floor Wyns';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1003968, 'Jennifer Lyon Bell', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jennifer Lyon Bell');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 259872 AND d.name = 'Jennifer Lyon Bell';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 229033, 'Murielle Scherre', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Murielle Scherre');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 259872 AND d.name = 'Murielle Scherre';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uCkANtG6ezb7hjRKVudY3PUcbvn.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 259872;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dzY2ZYyPRbXcw8UOupHK3V5VQYk.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 259872;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1255208, 'Bag of Lies', '2024-03-29', '', '', 96, '', 'RELEASED', 246.778000, 6.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1255208 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1255208 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1387577, 'John Wells', '/udDheh1OOGggBFQm56N5QSdrc6q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'John Wells');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Harold', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1255208 AND a.name = 'John Wells';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4300965, 'Madison Pullins', '/oFCAinWBkcWA0Sq8ezOYO2vxAJq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Madison Pullins');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Peggy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1255208 AND a.name = 'Madison Pullins';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4198153, 'Patrick Taft', '/ysRAylTNXaH6FQyAgFG47KKSANk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Patrick Taft');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Matt', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1255208 AND a.name = 'Patrick Taft';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2310325, 'Brandi Botkin', '/P2ZLDHo0wfPphKKc3uZKmVRkUs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Brandi Botkin');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Claire', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1255208 AND a.name = 'Brandi Botkin';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2534103, 'Terry Tocantins', '/p1kCwSKaTcQ43Dbf6tY0dHJSvgL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Terry Tocantins');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Al', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1255208 AND a.name = 'Terry Tocantins';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 4576110, 'David Andrew James', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'David Andrew James');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1255208 AND d.name = 'David Andrew James';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pPElE8npavUirQWmscJUGZyPiP6.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1255208;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/r5NvzqWUpOdy4eQ7OENzb73XY25.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1255208;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (3933, '유령 신부', '2005-09-12', '한 번의 결혼, 두 명의 신부, 뭔가 잘못되었다', '생선 통조림 공장을 하며 벼락부자가 된 반 도르트 일가와 세습귀족이지만 가난한 에버글롯 일가는 각기 서로의 신분과 재산 때문에 사돈으로서의 연을 맺기로 결정한다. 결혼식 전날, 예행연습을 위해 처음 만나게 된 빅터와 빅토리아. 두 사람은 쑥스럽고 어색한 분위기 속에서도 사랑의 가능성을 발견하게 된다. 하지만 빅터는 결혼 리허설에서 계속해서 실수를 저지르고 급기야 연습을 더 하고 오라며 갤스웰 목사에게 쫓겨난다. 숲 속에서 홀로 연습하던 도중, 땅 위로 튀어나온 손가락 뼈에 반지를 끼웠다가 유령 신부의 오해로 지하세계에 끌려가게 되는 색다른 경험을 하게 된다.', 77, 'All', 'RELEASED', 263.250000, 7.600000, 118133252, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 3933 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 3933 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 3933 AND g.name = '애니메이션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 85, '조니 뎁', '/6GkSSnhlLirHidf6hThCEFCfYhZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조니 뎁');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Victor Van Dort (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3933 AND a.name = '조니 뎁';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1283, '헬레나 본햄 카터', '/hJMbNSPJ2PCahsP3rNEU39C8GWU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헬레나 본햄 카터');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Corpse Bride (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3933 AND a.name = '헬레나 본햄 카터';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1639, '에밀리 왓슨', '/bd0qiJXHoLNpkCqABsh67AKRtjC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에밀리 왓슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Victoria Everglot (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3933 AND a.name = '에밀리 왓슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 30364, '트레이시 울만', '/cmug3uUXKBo9fhCcJk3pkgt1nvM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '트레이시 울만');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nell Van Dort / Hildegarde (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3933 AND a.name = '트레이시 울만';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 34900, 'Paul Whitehouse', '/v24xgnX50qEmH04RUmgC6dSCRYh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Paul Whitehouse');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'William Van Dort / Mayhew / Paul the Head Waiter (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3933 AND a.name = 'Paul Whitehouse';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 34891, 'Mike Johnson', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Mike Johnson');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 3933 AND d.name = 'Mike Johnson';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 510, '팀 버튼', '/wcjuY5vD1nlfwWNbvvTGg5dGoRR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '팀 버튼');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 3933 AND d.name = '팀 버튼';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/AinoobwUR3mDspc1O9exQHgUAyv.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 3933;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/v23fWgJUEt8EMmvn19btIacxP8E.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 3933;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1357459, 'Tatsulok: Tatlo Magkasalo', '2024-10-11', '', '', 61, '', 'RELEASED', 255.978000, 6.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1357459 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1357459 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4766807, 'Mariane Saint', '/8JaQnDOA5nBLr6TTUb8X02z05rg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mariane Saint');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Iza', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1357459 AND a.name = 'Mariane Saint';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2252696, 'Marlon Marcia', '/9LEfMCMhN0KX3XGANJggXLKx8fJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marlon Marcia');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Roland', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1357459 AND a.name = 'Marlon Marcia';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4866792, 'Skye Gonzaga', '/sU8yAC7mptg5argRh46ccaZAz2B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Skye Gonzaga');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Raquel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1357459 AND a.name = 'Skye Gonzaga';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3950893, 'Daniela Carolino', '/k9YKk2mX1D65p9bkyg8is7AgLHT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Daniela Carolino');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Myra', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1357459 AND a.name = 'Daniela Carolino';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4982826, 'Mianne Agualada', '/wJKOWmoZMgEoh96yWKuJ3AQ4XJS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mianne Agualada');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Doctor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1357459 AND a.name = 'Mianne Agualada';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1580799, 'Jojo Nadela', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jojo Nadela');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1357459 AND d.name = 'Jojo Nadela';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zcmPxGIBxxsGVyYuzNWPCWjlQ8X.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1357459;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/eFlx3fW8FHXOktGa7Tzy57RajtG.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1357459;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1153291, 'Llamada privada', '2023-07-11', '', '', 79, '', 'RELEASED', 248.310000, 0.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1153291 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1153291 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2779770, 'Gabriel Ng', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gabriel Ng');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Valentino Lombardi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1153291 AND a.name = 'Gabriel Ng';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4167876, 'Carolina Herrera', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Carolina Herrera');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wife', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1153291 AND a.name = 'Carolina Herrera';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4170301, 'Santiago Rodríguez', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Santiago Rodríguez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Killer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1153291 AND a.name = 'Santiago Rodríguez';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4170302, 'Christian Cosse', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Christian Cosse');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Police', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1153291 AND a.name = 'Christian Cosse';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 4167877, 'Alex Bries', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Alex Bries');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1153291 AND d.name = 'Alex Bries';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2779770, 'Gabriel Ng', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Gabriel Ng');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1153291 AND d.name = 'Gabriel Ng';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tUjSG0q3NghJ1UT9KzDUq3EyjJk.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1153291;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1153291;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (783110, '밀수', '2023-07-26', '열길 물속은 알아도 한길 사람 속은 모른다!', '1970년대, 바닷가에 인접한 작은 마을 군천엔 절친인 두 해녀 춘자와 진숙, 그리고 진숙의 동생이 살고 있다. 그들은 생계를 위해 항상 물 속에서 해산물들을 채집하는 일을 한다. 하지만 해변 근처에 공장들이 하나 둘 지어지면서, 해녀들의 생계에 곤란이 생기고 선원들은 생계를 위해서 밀수 일에 뛰어들게 된다. 그렇게 시작된 밀수업은 진숙의 가족이 감당하기 벅찰만큼 규모가 커지고 마을의 평화도 점차 깨지기 시작한다.', 129, '15', 'RELEASED', 257.792000, 6.600000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 783110 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 783110 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 146245, '김혜수', '/mTC57xEYJluTvygkIVmfYW2SfJU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김혜수');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jo Choon-ja', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 783110 AND a.name = '김혜수';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 37939, '염정아', '/5qIkgP0VcfF0YhO3bixzBtA1jH2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '염정아');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Uhm Jin-sook', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 783110 AND a.name = '염정아';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 127564, '조인성', '/69gbyFI0ET0l0dyjKChlx1Zx269.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조인성');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kwon Pil-sam', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 783110 AND a.name = '조인성';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 571172, '박정민', '/4ulrJOpIwgCjYjEsq8zdBoRnDDy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '박정민');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hammer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 783110 AND a.name = '박정민';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1295417, '김종수', '/bcZLy3t0EXvRY4EWsD5BoEt3xOM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김종수');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lee Jang-choon', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 783110 AND a.name = '김종수';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 86325, '류승완', '/mvLK4P2n5fMlE0Sdxfw6flRk09s.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '류승완');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 783110 AND d.name = '류승완';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ayLXqPZCu3uaLLhXiqvw5NBb7Lw.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 783110;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vZaIAIX5XcXLsF4jRSp5x7wsRzn.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 783110;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (385687, '분노의 질주: 라이드 오어 다이', '2023-05-17', '달리거나 죽거나, 그들의 마지막 질주가 시작된다!', '돔과 그의 패밀리 앞에 나타난 운명의 적 단테. 과거의 그림자는 돔의 모든 것을 파괴하기 위해 달려온다. 단테에 의해 산산히 흩어진 패밀리들은 모두 목숨을 걸고 맞서야 하는 함정에 빠지고 마는데...', 142, '15', 'RELEASED', 254.255000, 7.082000, 704709660, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 385687 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 385687 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 385687 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12835, '빈 디젤', '/nZdVry7lnUkE24PnXakok9okvL4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빈 디젤');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dominic Toretto', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 385687 AND a.name = '빈 디젤';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17647, '미셸 로드리게즈', '/wVcbrae4eRqGMFZz8Eh52Dl1biP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미셸 로드리게즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Letty Ortiz', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 385687 AND a.name = '미셸 로드리게즈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8169, '타이리스 깁슨', '/1K315wBQBvDBuZMlzoozuGsqFXZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '타이리스 깁슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Roman Pearce', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 385687 AND a.name = '타이리스 깁슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8171, '루다크리스', '/erkJijujhe48vhJ8iCEtVpNEeVn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루다크리스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tej Parker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 385687 AND a.name = '루다크리스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 56446, '존 시나', '/rgB2eIOt7WyQjdgJCOuESdDlrjg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '존 시나');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jakob Toretto', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 385687 AND a.name = '존 시나';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 18865, 'Louis Leterrier', '/bpqqRRyCLeoAup2OAv1Dtm5C8Tn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Louis Leterrier');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 385687 AND d.name = 'Louis Leterrier';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wXNihLltMCGR7XepN39syIlCt5X.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 385687;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4XM8DUTQb3lhLemJC51Jx4a2EuA.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 385687;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1145491, 'Operation Black Ops', '2023-07-11', '', '', 80, '', 'RELEASED', 243.435000, 5.861000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1145491 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1145491 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 83522, 'Tito Ortiz', '/ivG0rCc5FE1XWdh6CIBTWfeIgBk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tito Ortiz');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Noah', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1145491 AND a.name = 'Tito Ortiz';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 123604, 'Cristiane Justino', '/gbHhIXul6LhOE8P91nom5lANxNS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Cristiane Justino');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chicago', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1145491 AND a.name = 'Cristiane Justino';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2091809, 'Mike Ferguson', '/fgmxWHKESApKHtu1Rar0iCVi6if.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mike Ferguson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Schroder', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1145491 AND a.name = 'Mike Ferguson';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1928557, 'Kelsey Johnson', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kelsey Johnson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1145491 AND a.name = 'Kelsey Johnson';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 99224, 'Mike Markoff', '/d7Z0hSmCOleHt1BycaAbU9doKMR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mike Markoff');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1145491 AND a.name = 'Mike Markoff';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2165026, 'Jamaal Burden', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jamaal Burden');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1145491 AND d.name = 'Jamaal Burden';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vMgkjQM2fHirExilsTZWJTqL33G.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1145491;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bEJyUUygNSLhe4BPykEHf3hPnsh.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1145491;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1064028, '메이드', '2024-08-15', '당신만을 위한 치명적 서비스 ON', '아내 매기의 부재로 인해 AI가 탑재된 메이드를 들이기로 한 닉. 딸이 마음에 들어한 메이드를 집에 입주시키고 ‘앨리스’라는 이름을 붙인다.  청소, 요리, 장보기까지 완벽하게 집안일을 해내는 앨리스. 닉은 편리함을 느끼지만 그것도 잠시, 앨리스는 닉을 위한다는 명목 아래 아슬아슬한 행동을 이어간다.  “마음이 힘들면 능률이 떨어지죠. 제가 도와드릴게요”  아내 매기의 목소리까지 흉내 내는 앨리스와 금단의 선을 넘은 닉. 매기가 집으로 돌아오고 닉은 모든 것을 없었던 일로 하고 싶지만 앨리스는 닉에 대한 집착을 멈추지 않는다. 위험한 일도 서슴지 않으며 그녀는 폭주하기 시작하는데…', 105, '19', 'RELEASED', 241.460000, 6.737000, 159422, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1064028 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1064028 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1064028 AND g.name = '공포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19537, '메간 폭스', '/9khvk5svs81TLqIGlI3ZJqYtqaY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '메간 폭스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alice', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1064028 AND a.name = '메간 폭스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2349355, '미켈레 모로네', '/90IF4aQKrr7zXmtcsNAYbrvcIg2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미켈레 모로네');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nick', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1064028 AND a.name = '미켈레 모로네';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 84613, 'Madeline Zima', '/6hmUs5Q1EETapn32yKNt3c3i1sn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Madeline Zima');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maggie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1064028 AND a.name = 'Madeline Zima';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3844059, 'Matilda Firth', '/vV8kntBeW0zFJS7WvlyFrBYp1py.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Matilda Firth');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Isla', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1064028 AND a.name = 'Matilda Firth';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1231852, 'Andrew Whipp', '/xOwjS0x7I1mCsyFRDWCcb3pnkjd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Andrew Whipp');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Monty', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1064028 AND a.name = 'Andrew Whipp';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2263272, 'SK Dale', '/8ZwQLeDswGXnnCBpcEdprrUDUZ5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'SK Dale');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1064028 AND d.name = 'SK Dale';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/p0708UyphVhP7PfmAhf3Ds62VBk.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1064028;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/co7oxvpWxgd6FZU24DnljDDHYQA.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1064028;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1147710, '하이재킹', '2024-06-21', '목적지가 다른 승객이 탑승했다', '1971년 겨울 속초공항 여객기 조종사 태인과 규식은 김포행 비행에 나선다. 승무원 옥순의 안내에 따라 탑승 중인 승객들의 분주함도 잠시, 이륙한지 얼마 되지 않아 사제폭탄이 터지며 기내는 아수라장이 된다. 여객기를 통째로 납치하려는 용대는 조종실을 장악하고 무작정 북으로 기수를 돌리라 협박한다. 폭발 충격으로 규식은 한 쪽 시력을 잃고 이제 여객기를 조종할 수 있는 사람은 태인 뿐. 이들은 여객기를 무사히 착륙시키기 위한 사투를 시작하는데...', 100, '12', 'RELEASED', 229.845000, 6.100000, 14, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1147710 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1147710 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1147710 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 75913, '하정우', '/alHcDyLYbc6C2X9yOHw8mNHZVGu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하정우');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tae-in', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1147710 AND a.name = '하정우';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1207629, '여진구', '/f9Gj12cCk66vdIaDVjltTGAZPC9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '여진구');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yong-dae', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1147710 AND a.name = '여진구';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1020859, '성동일', '/9VLRIvOyQSHkpJaeaBcmHzcEUQn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '성동일');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gyu-sik', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1147710 AND a.name = '성동일';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1466233, '채수빈', '/bf38XUHvsgz1IVwtHX6N8HLDMa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '채수빈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ok-soon', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1147710 AND a.name = '채수빈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3003147, '문유강', '/69bOe5fyGaUFZy7JUsq40hWd75F.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '문유강');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chang-bae', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1147710 AND a.name = '문유강';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 3084810, 'Kim Sung-han', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Kim Sung-han');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1147710 AND d.name = 'Kim Sung-han';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pLEenJ0I1XqySVezRdETf2n2w7H.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1147710;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4mN2sHsGBR7NEQaUU34S6VAnj97.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1147710;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (823464, '고질라 X 콩: 뉴 엠파이어', '2024-03-27', '이번에는 한 팀이다', '두 타이탄의 전설적인 대결 이후 할로우 어스에 남은 콩은 드디어 애타게 찾던 동족을 발견하지만 그 뒤에 도사리고 있는 예상치 못한 위협에 맞닥뜨린다. 한편, 깊은 동면에 빠진 고질라는 알 수 없는 신호로 인해 깨어나고 푸른 눈의 폭군 스카 킹의 지배 아래 위기에 처한 할로우 어스를 마주하게 된다. 할로우 어스는 물론, 지구상에도 출몰해 전세계를 초토화시키는 타이탄들의 도발 속에서 고질라와 콩은 사상 처음으로 한 팀을 이뤄 반격에 나서기로 하는데…', 115, '12', 'RELEASED', 248.478000, 7.150000, 567156493, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 823464 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 823464 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 823464 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 15556, '레베카 홀', '/coC58ANiDbqRIyle5zEl9QDektf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레베카 홀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ilene Andrews', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 823464 AND a.name = '레베카 홀';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 226366, '브라이언 타이리 헨리', '/2MsJh0bpyzwvOUnXOltHp3j85Pb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브라이언 타이리 헨리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bernie Hayes', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 823464 AND a.name = '브라이언 타이리 헨리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 221018, '댄 스티븐스', '/fFsgginZKH527o38ZfdDxuzx7Ew.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '댄 스티븐스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Trapper', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 823464 AND a.name = '댄 스티븐스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2948491, 'Kaylee Hottle', '/xpQQZgptOUI6duMMBDyCiaJ4JUv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kaylee Hottle');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 823464 AND a.name = 'Kaylee Hottle';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 60416, 'Alex Ferns', '/3V3L7MJGURXU6lVaqai80zFT4Wa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alex Ferns');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mikael', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 823464 AND a.name = 'Alex Ferns';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 98631, '애덤 윈가드', '/csunrewJCACuvM3Ntd9kIi31twa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '애덤 윈가드');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 823464 AND d.name = '애덤 윈가드';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4z1VMmlxHrziG45901esjB4dpIa.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 823464;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/veIyxxi5Gs8gvztLEW1Ysb8rrzs.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 823464;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (157336, '인터스텔라', '2014-11-05', '우린 답을 찾을 것이다, 늘 그랬듯이', '세계 각국의 정부와 경제가 완전히 붕괴된 미래가 다가온다. 지난 20세기에 범한 잘못이 전 세계적인 식량 부족을 불러왔고, NASA도 해체되었다. 나사 소속 우주비행사였던 쿠퍼는 지구에 몰아친 식량난으로 옥수수나 키우며 살고 있다. 거센 황사가 몰아친 어느 날 알 수 없는 힘에 이끌려 딸과 함께 도착한 곳은 인류가 이주할 행성을 찾는 나사의 비밀본부. 이 때 시공간에 불가사의한 틈이 열리고, 이 곳을 탐험해 인류를 구해야 하는 임무를 위해 쿠퍼는 만류하는 딸을 뒤로한 채 우주선에 탑승하는데...', 169, '12', 'RELEASED', 247.217000, 8.441000, 701729206, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 157336 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 157336 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 157336 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10297, '매튜 매커너히', '/rUxLWWCDUF8RnDaocSqrVDJ2MS1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '매튜 매커너히');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cooper', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 157336 AND a.name = '매튜 매커너히';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1813, '앤 해서웨이', '/kRYxBuUtN3vNz5pLfqCf32ZYlw2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앤 해서웨이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brand', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 157336 AND a.name = '앤 해서웨이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3895, '마이클 케인', '/bVZRMlpjTAO2pJK6v90buFgVbSW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 케인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Professor Brand', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 157336 AND a.name = '마이클 케인';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 83002, '제시카 차스테인', '/xRvRzxiiHhgUErl0yf9w8WariRE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제시카 차스테인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Murph', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 157336 AND a.name = '제시카 차스테인';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1893, '케이시 애플렉', '/vD5MtCjHPHpmU9XNn74EPGMHT7o.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케이시 애플렉');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tom', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 157336 AND a.name = '케이시 애플렉';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 525, '크리스토퍼 놀란', '/xuAIuYSmsUzKlUMBFGVZaWsY3DZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스토퍼 놀란');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 157336 AND d.name = '크리스토퍼 놀란';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/evoEi8SBSvIIEveM3V6nCJ6vKj8.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 157336;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xJHokMbljvjADYdit5fK5VQsXEG.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 157336;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (940551, '인투 더 월드', '2023-12-06', '우린 멋진 모험을 하게 될 거야! 하지만 불시착했습니다. 어디로 가야 될까요?', '가족을 과잉보호하는 아빠 ‘맥’ 때문에 평생을 작은 연못에서 안전하게 살아온 말러드 가족. 하지만 호기심 가득한 남매 ‘댁스’와 ‘그웬’을 위해 새로운 세상을 모험하고 싶은 엄마 ‘팸’의 설득으로 가족들은 항상 꿈꿔온 자메이카로 생애 첫 가족 모험을 떠나기로 한다! 설렘 넘치는 시작과 달리 태풍을 만나 길을 잃고, 낯선 친구들을 만나고, 위험 가득한 뉴욕에 불시착하게 된다. 인생 처음으로 모든 계획이 틀어지고 위기에 빠진 말러드 가족은 서툴지만 서로를 의지하며 모험을 계속한다. 새로운 세상, 함께라면 두려울 것 없어!', 83, 'ALL', 'RELEASED', 236.017000, 7.436000, 298776052, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 940551 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 940551 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 940551 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 940551 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 940551 AND g.name = '가족';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 466505, '쿠마일 난지아니', '/9EyrK1Cv7ey1h1GgmsVAOn45w6G.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '쿠마일 난지아니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mack Mallard (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 940551 AND a.name = '쿠마일 난지아니';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 9281, '엘리자베스 뱅크스', '/q0wvK0Nr6FCpvx9UCMTqTby6kNW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '엘리자베스 뱅크스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pam Mallard (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 940551 AND a.name = '엘리자베스 뱅크스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1736671, '카스파르 제닝스', '/hDp0awwLRghXYtXZ4FRrubjrMRa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카스파르 제닝스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dax Mallard (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 940551 AND a.name = '카스파르 제닝스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4031156, 'Tresi Gazal', '/vRatzYeWD5T6Fum52vtfJo0OY03.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tresi Gazal');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gwen Mallard (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 940551 AND a.name = 'Tresi Gazal';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1625558, '아콰피나', '/l5AKkg3H1QhMuXmTTmq1EyjyiRb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아콰피나');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chump (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 940551 AND a.name = '아콰피나';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1092607, 'Benjamin Renner', '/yp4ucXRYU5TdMj16glyoYYoxJcw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Benjamin Renner');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 940551 AND d.name = 'Benjamin Renner';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2xE3NI6zElWhwN9WJ92fqbZKmzZ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 940551;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2KGxQFV9Wp1MshPBf8BuqWUgVAz.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 940551;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (575264, '미션 임파서블: 데드 레코닝 PART ONE', '2023-07-08', '가장 위험한 작전, 그의 마지막 선택', '모든 인류를 위협할 새로운 무기를 추적하게 된 에단 헌트와 IMF팀은 이 무기가 인류의 미래를 통제할 수 있다는 사실을 알게 된다. 전 세계가 위태로운 상황에 처한 가운데, 이를 추적하던 에단 헌트에게 어둠의 세력까지 접근하고 마침내 미스터리하고 강력한 빌런과 마주하게 된 그는 가장 위험한 작전을 앞두고 자신이 아끼는 사람들의 생명과 중요한 임무 사이에서 선택을 해야 하는 상황에 놓이게 되는데…', 164, '15', 'RELEASED', 190.620000, 7.548000, 567535383, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 575264 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 575264 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 500, '톰 크루즈', '/3mShHjSQR7NXOVbdTu5rT2Qd0MN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 크루즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ethan Hunt', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 575264 AND a.name = '톰 크루즈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 39459, '헤일리 앳웰', '/x57wXHexIjD2ywly9cRA4rov7cu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헤일리 앳웰');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Grace', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 575264 AND a.name = '헤일리 앳웰';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10182, '빙 레임스', '/4gpLVNKPZlVucc4fT2fSZ7DksTK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빙 레임스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Luther Stickell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 575264 AND a.name = '빙 레임스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11108, '사이먼 페그', '/7M0Bj8oncM3ICBgx565bWtlU65U.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사이먼 페그');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Benji Dunn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 575264 AND a.name = '사이먼 페그';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 933238, '레베카 퍼거슨', '/lJloTOheuQSirSLXNA3JHsrMNfH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레베카 퍼거슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ilsa Faust', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 575264 AND a.name = '레베카 퍼거슨';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 9033, '크리스토퍼 맥쿼리', '/7FcybX1uFpMKHSI0p15LGPG3O3x.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스토퍼 맥쿼리');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 575264 AND d.name = '크리스토퍼 맥쿼리';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dIcLgXA6R54EZ0XPSMKW4XDNCAA.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 575264;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/TFTfzrkX8L7bAKUcch6qLmjpLu.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 575264;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (786892, '퓨리오사: 매드맥스 사가', '2024-05-22', '분노가 깨어나다', '문명 붕괴 45년 후, 황폐해진 세상 속 누구에게도 알려지지 않은 풍요가 가득한 녹색의 땅에서 자란 퓨리오사는 바이커 군단의 폭군 디멘투스의 손에 모든 것을 잃고 만다. 가족도 행복도 모두 빼앗기고 세상에 홀로 내던져진 퓨리오사는 반드시 고향으로 돌아가겠다는 어머니와의 약속을 지키기 위해 인생 전부를 건 복수를 시작하는데...', 149, '15', 'RELEASED', 221.255000, 7.535000, 172775791, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 786892 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 786892 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 786892 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1397778, '안야 테일러조이', '/qYNofOjlRke2MlJVihmJmEdQI4v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '안야 테일러조이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Furiosa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 786892 AND a.name = '안야 테일러조이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 74568, '크리스 헴스워스', '/piQGdoIQOF3C1EI5cbYZLAW1gfj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 헴스워스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dementus', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 786892 AND a.name = '크리스 헴스워스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 52891, '톰 버크', '/9L2O1mAwFQcfEbaB5CHIZUvnqUW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 버크');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Praetorian Jack', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 786892 AND a.name = '톰 버크';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2431565, '알릴라 브라운', '/tcAQAzqk1z0PsVXqi8HODOVPQoY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '알릴라 브라운');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Young Furiosa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 786892 AND a.name = '알릴라 브라운';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 148899, '조지 셰프소브', '/cuOoCZShfvNrOvrWqH2dPyBfrZS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조지 셰프소브');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The History Man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 786892 AND a.name = '조지 셰프소브';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 20629, '조지 밀러', '/35NQ8HjFXQlGYDz9UkhT08lKl5C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조지 밀러');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 786892 AND d.name = '조지 밀러';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zaUFDdJidS4Nyyd6jb2Ok3Kq4Vo.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 786892;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wNAhuOZ3Zf84jCIlrcI6JhgmY5q.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 786892;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (566525, '샹치와 텐 링즈의 전설', '2021-09-01', '열 개의 힘, 단 하나의 운명', '초인적인 능력을 가진 텐 링즈의 힘으로 수세기 동안 어둠의 세상을 지배해 온 웬우. 샹치는 아버지 웬우 밑에서 암살자로 훈련을 받았지만 이를 거부하고 평범함 삶을 선택한다. 샌프란시스코로 떠나와 자신의 진짜 이름을 숨긴 채 션이란 가명으로 살아가는 샹치. 웬우가 수장으로 있는 조직 텐 링즈의 일원인 레이저 피스트가 찾아와 샹치의 펜던트를 훔쳐가자 샹치는 친구 케이티와 함께 연이 끊겼던 동생 샤링을 염려하며 그녀가 숨어 지내는 마카오로 찾아간다. 텐 링즈의 마법 같은 힘을 통해 수천년 동안 지구의 역사를 혼란에 빠뜨렸던 웬우는 자신의 아들딸을 다시 불러들여 새로운 계략을 꾸민다.', 132, '12', 'RELEASED', 244.245000, 7.546000, 432243292, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 566525 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 566525 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 566525 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1489211, '시무 리우', '/xc7I32luBZfJgx9lm92aT9xiI6T.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시무 리우');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shaun / Shang-Chi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 566525 AND a.name = '시무 리우';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1337, '양조위', '/q7epM4SkAWOSyeMqFHxSZ360eU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '양조위');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Xu Wenwu', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 566525 AND a.name = '양조위';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1625558, '아콰피나', '/l5AKkg3H1QhMuXmTTmq1EyjyiRb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아콰피나');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Katy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 566525 AND a.name = '아콰피나';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2282, '벤 킹슬리', '/vQtBqpF2HDdzbfXHDzR4u37i1Ac.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '벤 킹슬리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Trevor Slattery', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 566525 AND a.name = '벤 킹슬리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2979464, 'Meng''er Zhang', '/yMiYThzzkeVSsUI2sxh3iIWmMTy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Meng''er Zhang');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Xialing', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 566525 AND a.name = 'Meng''er Zhang';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1144604, '데스틴 다니엘 크레턴', '/s8uAUG9egZlRIU0PKNkTkIz9E6g.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '데스틴 다니엘 크레턴');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 566525 AND d.name = '데스틴 다니엘 크레턴';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/14L4NGrqO4r7gJtVRiSRP5rNsL5.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 566525;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/r7K6Xt0RX4Mw0cAbZVw5cyb1Tux.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 566525;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (231001, '할로윈: 살인영상', '2013-10-29', '', '어린 남매를 돌보는 베이비시터가 있는 한 가정집에서 이상한 비디오테잎을 발견한다. 아이들의 요구에 틀어보니 다큐멘터리 같은 영화는 잔인하게 사람을 살해하는 내용이었다. 오싹한 느낌에 베이비시터는 영상을 끄고 아이들이 영상을 못보게 하지만 그 이후로 집에서 이상한 일들이 일어나기 시작한다.', 82, '', 'RELEASED', 213.067000, 5.700000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 231001 AND g.name = '공포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 225216, 'Katie Maguire', '/e2NArSgGrpFTVxG8OrvuSSPMGCZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Katie Maguire');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sarah', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 231001 AND a.name = 'Katie Maguire';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1375766, 'Catherine A. Callahan', '/wfHL971lj7uzJPHFDluCdcMMh61.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Catherine A. Callahan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Caroline', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 231001 AND a.name = 'Catherine A. Callahan';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1375767, 'Marie Maser', '/iFLTBR6mC32zjSsTruT7m7aLCqo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marie Maser');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Costume Designer (archive footage)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 231001 AND a.name = 'Marie Maser';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1375770, 'Kayla Lian', '/6J3dxOTHnyrnRP7zuMqZTYNEfHc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kayla Lian');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Casey (archive footage)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 231001 AND a.name = 'Kayla Lian';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1375765, 'Mike Giannelli', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mike Giannelli');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Art the Clown', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 231001 AND a.name = 'Mike Giannelli';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 933176, 'Damien Leone', '/nX2kkYD32x2PC9rRU7DrYCRPjFE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Damien Leone');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 231001 AND d.name = 'Damien Leone';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bSe8CBqK8HkbP6sqZWzcJfQV9Ci.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 231001;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/cCBdL7v7msKHE0T5lPbaAY8GTJ5.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 231001;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1075676, '전,란', '2024-10-02', '혼란의 시대, 주어진 운명에 맞서 싸워라', '조선 최고 무신 집안의 아들 종려와 그의 몸종 천영. 함께 자란 두 남자가 왜란의 시대에 적이 되어 다시 만난다. 한 사람은 선조의 최측근 무관으로, 다른 사람은 의병으로, 파란의 세월을 헤쳐간다.', 126, '19', 'RELEASED', 232.250000, 7.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1075676 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1075676 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1075676 AND g.name = '역사';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 83014, '강동원', '/xGPT8rgvWuK8Qh7BKNd7fhKs8Sk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '강동원');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cheon-young', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1075676 AND a.name = '강동원';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 571172, '박정민', '/4ulrJOpIwgCjYjEsq8zdBoRnDDy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '박정민');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lee Jong-ryeo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1075676 AND a.name = '박정민';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1248450, '차승원', '/flO3R7rKFuyoVQkthXIMrI6ESye.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '차승원');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'King Seonjo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1075676 AND a.name = '차승원';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3038410, '김신록', '/nR8DnqtTq7PgOjZrZB8F6PuNo6r.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김신록');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Beom-dong', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1075676 AND a.name = '김신록';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1989290, '진선규', '/m9kX4DzTOz5kFOVPzfYooPTArRY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '진선규');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kim Ja-ryeong', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1075676 AND a.name = '진선규';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 548654, '김상만', '/5KUAUqmGUfyXKdUwBK1pXpoCeW9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '김상만');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1075676 AND d.name = '김상만';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gnfNGXdW7J9HGNeHyaDpkAFJkHK.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1075676;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/64tinBsds1nVp4wOCgYhMbSgsRW.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1075676;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (718821, '트위스터스', '2024-07-10', '쫓아라! 막아라! 살아남아라! 역대급 토네이도에 정면돌파 선언!', '뉴욕 기상청 직원 케이트는 대학 시절 토네이도에 맞서다 소중한 사람들을 잃고 죄책감에 살고 있다. 그런 그녀 앞에 옛 친구 하비가 찾아와 토네이도를 소멸시킬 수 있는 획기적인 방법을 제안한다.  고민 끝에 합류하게 된 케이트는 하비와 오클라호마로 향하고, 일명 토네이도 카우보이라 불리는 유명 인플루언서 타일러를 만난다. 마치 자연을 정복한 듯이 자신감 넘치는 타일러와 매사 부딪히게 되는 케이트. 어느 날, 모든 것을 집어삼킬 거대한 토네이도가 휘몰아칠 것을 감지하게 되는데…', 123, '12', 'RELEASED', 237.870000, 7.000000, 369590675, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 718821 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 718821 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2230991, '데이지 에드거존스', '/uhrgWinc0W2Q1K0ynUmyTaWd8dv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이지 에드거존스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kate', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 718821 AND a.name = '데이지 에드거존스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 83271, '글렌 파월', '/fUnIaJkdgvQTztyR1nLeUceSzly.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '글렌 파월');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tyler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 718821 AND a.name = '글렌 파월';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1560244, '안소니 라모스', '/seFm2fKh6reyZaaCg7DmRpodLCw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '안소니 라모스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Javi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 718821 AND a.name = '안소니 라모스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1602972, '브랜든 페레아', '/hEzljVgsho0Uwd8tg7AGB5Uy3Lr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브랜든 페레아');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Boone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 718821 AND a.name = '브랜든 페레아';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16307, 'Maura Tierney', '/4BCrwdHdC4iRSDimvkoYaXg2qki.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Maura Tierney');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cathy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 718821 AND a.name = 'Maura Tierney';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 931952, '정이삭', '/fwiIh7jECjefCco3ZCdug6i3t9U.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '정이삭');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 718821 AND d.name = '정이삭';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/w5mXdM9AIf7urUtoUVYjABdp3g8.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 718821;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7aPrv2HFssWcOtpig5G3HEVk3uS.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 718821;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (947891, '마이 올드 애스', '2024-09-13', '나이 든 자신에게 무엇을 물어보고 싶을까?', '18번째 생일에 버섯 환각을 경험한 자유분방한 엘리엇은 농담을 일삼는 39세의 자신과 마주하게 된다. 하지만 나이 든 ‘자기 자신’이 어린 엘리엇에게 무엇을 해야 하고 하지 말아야 할지 경고를 건네기 시작하자, 엘리엇은 가족과 사랑, 그리고 인생이 바뀌어 가는 여름에 대해 모든 것을 다시 생각해봐야 한다는 사실을 깨닫게 된다.', 89, '', 'RELEASED', 331.412000, 6.738000, 5671147, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 947891 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 947891 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1104567, '메이지 스텔라', '/hv01GL5eT8cI7WK73e7XcbAgkPU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '메이지 스텔라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elliott', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 947891 AND a.name = '메이지 스텔라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 119592, '오브리 플라자', '/dHcjm5tJWZzbHK8de5lonhYvZ9w.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오브리 플라자');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Older Elliott', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 947891 AND a.name = '오브리 플라자';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1477961, 'Percy Hynes White', '/hOS1vYWvTTXugOWhAGXoBH7dGHN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Percy Hynes White');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chad', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 947891 AND a.name = 'Percy Hynes White';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1483976, '매디 지글러', '/3Vrnm6cea9FU8OtGLRpG4d14f2f.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '매디 지글러');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ruthie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 947891 AND a.name = '매디 지글러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2813970, 'Kerrice Brooks', '/AfVXStImMwjCfCqMTNdaraJNRme.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kerrice Brooks');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ro', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 947891 AND a.name = 'Kerrice Brooks';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 55615, 'Megan Park', '/gKRr9DaU91WMh9BAAM3HgkauJhf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Megan Park');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 947891 AND d.name = 'Megan Park';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yUs4Sw9AyTg2sA1qWBkNpD2mGSj.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 947891;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/iPHsjvbFyGbeCEDC7u8Ib8U1zS6.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 947891;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1059264, 'The Inseparables', '2023-09-01', '', '', 90, '', 'RELEASED', 199.565000, 6.500000, 311198, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1059264 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1059264 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1059264 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1059264 AND g.name = '가족';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1222961, 'Monica Young', '/zHXhNXWoHjNMykEU3DFWnvSdMUn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Monica Young');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dee (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1059264 AND a.name = 'Monica Young';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2204541, 'Danny Fehsenfeld', '/r8QaMkBnatNEwNXuAZQBigNSztl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Danny Fehsenfeld');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dragon (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1059264 AND a.name = 'Danny Fehsenfeld';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2205627, 'Olivier Paris', '/5LeGe0MGRf2YqC3mY3glVOTC3HW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Olivier Paris');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pat (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1059264 AND a.name = 'Olivier Paris';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4179597, 'Dakota West', '/bTeixRUVvEVgidvdQqNMOzYAG8A.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Dakota West');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Don (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1059264 AND a.name = 'Dakota West';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2618972, 'Jordan Baird', '/oTznUH155fVgx261rjPrFNnBTCc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jordan Baird');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'DJ Doggy Dog (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1059264 AND a.name = 'Jordan Baird';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1324172, 'Jérémie Degruson', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jérémie Degruson');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1059264 AND d.name = 'Jérémie Degruson';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dmftU2Rnmv9KTteMUwjalOuZHke.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1059264;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vmzauGqSgx25rzavUbuN6c5Vdfc.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1059264;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (929590, '시빌 워: 분열의 시대', '2024-04-10', '', '극단적 분열로 나눠진 세상, 역사상 최악의 미국 내전 한복판에서 숨막히는 전쟁의 순간들을 생생하게 담아낸 영화', 110, '15', 'RELEASED', 233.617000, 6.908000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 929590 AND g.name = '전쟁';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 929590 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 929590 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 205, '커스틴 던스트', '/5dI5s8Oq2Ook5PFzTWMW6DCXVjm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '커스틴 던스트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lee', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 929590 AND a.name = '커스틴 던스트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 52583, '바그네르 모라', '/6gcfwvOueJKhDpTP9KLGuWz0Hk4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '바그네르 모라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 929590 AND a.name = '바그네르 모라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1683343, '케일리 스패니', '/oEkEzgRwVy2UAFtbvs1umiCQl7f.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케일리 스패니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jessie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 929590 AND a.name = '케일리 스패니';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 196179, '스티븐 맥킨리 헨더슨', '/z2weSPo4sdMNj47tP5o0me41r2z.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스티븐 맥킨리 헨더슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sammy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 929590 AND a.name = '스티븐 맥킨리 헨더슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 109019, '넬슨 리', '/3zKvaCGrZnxQLnlUxnCITeMp86K.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '넬슨 리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tony', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 929590 AND a.name = '넬슨 리';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2036, '알렉스 가랜드', '/qSWzYnDw68xm4i5xprH9BwQ6q25.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '알렉스 가랜드');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 929590 AND d.name = '알렉스 가랜드';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/t2RpGQOvemrV7NtbEyRWiy9tYA0.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 929590;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/en3GU5uGkKaYmSyetHV4csHHiH3.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 929590;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (637649, '캐시트럭', '2021-04-22', '그의 분노가 폭발한다!', '캐시트럭을 노리는 무장 강도에 의해 아들을 잃은 H(제이슨 스타뎀). 분노에 휩싸인 그는 아들을 죽인 범인의 단서를 찾기 위해 현금 호송 회사에 위장 취업한다. 첫 임무부터 백발백중 사격 실력을 자랑하며, 단숨에 에이스로 급부상한 H. 캐시트럭을 노리는 자들을 하나 둘 처리하며, 아들을 죽인 범인들과 점점 가까워지는데… 자비는 없다, 분노에 가득 찬 응징만이 남았다.', 118, '19', 'RELEASED', 232.725000, 7.631000, 103966489, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 637649 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 637649 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 637649 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 976, '제이슨 스타뎀', '/whNwkEQYWLFJA8ij0WyOOAD5xhQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이슨 스타뎀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'H', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637649 AND a.name = '제이슨 스타뎀';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7497, 'Holt McCallany', '/8NvOcP35qv5UHWEdpqAvQrKnQQz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Holt McCallany');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bullet', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637649 AND a.name = 'Holt McCallany';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2299, '조쉬 하트넷', '/8nTEioiir92fGHcASarPxkjF6kG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조쉬 하트넷');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Boy Sweat Dave', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637649 AND a.name = '조쉬 하트넷';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 928572, '스콧 이스트우드', '/hBqXeKe2Z7VnAYe7tLTzIvr8po4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스콧 이스트우드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637649 AND a.name = '스콧 이스트우드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 186396, 'Darrell D''Silva', '/9T8nhJYRCvEVXsSdbI9MFqBkwQm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Darrell D''Silva');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mike', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637649 AND a.name = 'Darrell D''Silva';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 956, '가이 리치', '/9pLUnjMgIEWXi0mlHYzie9cKUTD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '가이 리치');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 637649 AND d.name = '가이 리치';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qEkQy6H83Sz7vPWN9ZQXWl9RiBF.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 637649;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/70AV2Xx5FQYj20labp0EGdbjI6E.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 637649;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1215162, '죽음의 암살자 2', '2024-09-24', '', '총격 사건 후, 간호사 수잔은 심한 상처를 입은 의문의 남자 필립을 정성껏 돌본다. 어느 날, 필립을 죽이기 위해 무장한 갱들이 병원에 들이닥치고, 필립은 살아남기 위해 그들과 맞선다.', 85, '', 'RELEASED', 230.666000, 6.688000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1215162 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1215162 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1215162 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 15111, '장클로드 반담', '/7DP3bm3MS0qa0L8tBLHGebbCu6H.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '장클로드 반담');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Philip', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1215162 AND a.name = '장클로드 반담';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 95505, '재클린 페르난데즈', '/x7RQ5uI2WFaXOPW1kIe0yUQ0jbe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '재클린 페르난데즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vanessa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1215162 AND a.name = '재클린 페르난데즈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1504796, 'Andrei Lenart', '/5n1S06vvL7YgurFYfG9QNgRV5yM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Andrei Lenart');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vlad Petrovic', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1215162 AND a.name = 'Andrei Lenart';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 53, '피터 스토메어', '/5muzSVt66Qxc8KuVbq0phZIN9tj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '피터 스토메어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agent Holman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1215162 AND a.name = '피터 스토메어';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3465747, 'Talia Asseraf', '/w177HiELyQRAum0MpSrEheTqSvn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Talia Asseraf');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lydia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1215162 AND a.name = 'Talia Asseraf';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1040955, 'Valeri Milev', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Valeri Milev');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1215162 AND d.name = 'Valeri Milev';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hgA5hN3NjNNSTXYOmAI6KNKOzbp.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1215162;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wh1IhMWkW7u5c5bkzSGFylF9G8r.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1215162;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (238, '대부', '1972-03-14', '영화사상 최고의 걸작', '시실리에서 이민온 뒤, 정치권까지 영향력을 미치는 거물로 자리잡은 돈 꼴레오네는 갖가지 고민을 호소하는 사람들의 문제를 해결해주며 대부라 불리운다. 한편 솔로소라는 인물은 꼴레오네가와 라이벌인 탓타리아 패밀리와 손잡고 새로운 마약 사업을 제안한다. 돈 꼴레오네가 마약 사업에 참여하지 않기로 하자, 돈 꼴레오네를 저격해 그는 중상을 입고 사경을 헤매게 된다. 그 뒤, 돈 꼴레오네의 아들 소니는 조직력을 총 동원해 다른 패밀리들과 피를 부르는 전쟁을 시작하는데... 가족의 사업과 상관없이 대학에 진학한 뒤 인텔리로 지내왔던 막내 아들 마이클은 아버지가 총격을 당한 뒤, 아버지를 구하기 위해 위험천만한 협상 자리에 나선다.', 175, '19', 'RELEASED', 228.602000, 8.700000, 245066411, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 238 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 238 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3084, '말론 브란도', '/fuTEPMsBtV1zE98ujPONbKiYDc2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '말론 브란도');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Don Vito Corleone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 238 AND a.name = '말론 브란도';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1158, '알 파치노', '/2dGBb1fOcNdZjtQToVPFxXjm4ke.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '알 파치노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Michael Corleone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 238 AND a.name = '알 파치노';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3085, '제임스 칸', '/oRTyqWg0LReELvjms8WwkeTsDFS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제임스 칸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sonny Corleone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 238 AND a.name = '제임스 칸';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3087, '로버트 듀발', '/ybMmK25h4IVtfE7qrnlVp47RQlh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 듀발');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tom Hagen', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 238 AND a.name = '로버트 듀발';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3086, 'Richard S. Castellano', '/1vr75BdHWret81vuSJ3ugiCBkxw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Richard S. Castellano');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Clemenza', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 238 AND a.name = 'Richard S. Castellano';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1776, '프랜시스 포드 코폴라', '/3Pblihd6KjXliie9vj4iQJwbNPU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '프랜시스 포드 코폴라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 238 AND d.name = '프랜시스 포드 코폴라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/I1fkNd5CeJGv56mhrTDoOeMc2r.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 238;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tmU7GeKVybMWFButWEGl2M4GeiP.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 238;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1014505, '극장판 오버로드 성왕국', '2024-09-20', '지극히 흉악한 정의, 왕림', '성왕녀 칼카가 통치하는 로블 성왕국은 길고 거대한 성벽을 쌓고 그 안에서 평화로운 시대를 구가해 왔다. 하지만, 갑자기 나타난 마황 얄다바오트와 아인 연합군의 침공으로 평화는 너무나도 쉽게 붕괴되고 말았다. 성기사 단장 레메디오스, 신관 단장 케랄트를 시작으로 성왕국은 전력을 모아 맞섰지만 얄다바오트와의 압도적인 힘의 차이에 손쓸 도리 없이 국가는 붕괴 위기에 직면하게 됐다. 레메디오스는 얄다바오트에게 대항할 힘을 얻기 위해 직접 성기사단과 종자 네이아를 이끌고 어떤 나라에 도움을 요청하러 갔다. 그 나라의 이름은 아인즈 울 고운 마도국. 성왕국의 사람들이 꺼림칙하게 여기는 언데드가 통치하는 이형의 국가였는데.', 136, '15', 'NOW_PLAYING', 187.166000, 7.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1014505 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1014505 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1014505 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1014505 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 224413, '히노 사토시', '/8ZJIiwIVF2zDyyFr7oXewj0eEuu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '히노 사토시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ainz Ooal Gown / Momonga (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1014505 AND a.name = '히노 사토시';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1353244, '하라 유미', '/dbMtB3stkZarEbHSulpzXXp0un0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하라 유미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Albedo (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1014505 AND a.name = '하라 유미';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1287796, '加藤将之', '/1BKgxx1FXJ99WanpgWCBRG6YOHT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '加藤将之');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Demiurge (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1014505 AND a.name = '加藤将之';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1643476, '아오야마 요시노', '/18nwTfvgurEelSQqPKbMMtUnKja.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아오야마 요시노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Neia Baraja (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1014505 AND a.name = '아오야마 요시노';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1241562, '나바타메 히토미', '/jidfw5qDgZjC4TPY3YunJQxlEmr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나바타메 히토미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Remedios Custodio (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1014505 AND a.name = '나바타메 히토미';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1321076, '伊藤尚往', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '伊藤尚往');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1014505 AND d.name = '伊藤尚往';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9tQfPUNd1KA2u55zA81BNXrXuZu.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1014505;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hkJhGayONXn96CqIRM9GhWKnlCf.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1014505;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1160018, '킬', '2024-07-03', '1명의 특수 요원, 40명의 무장 강도, 52개의 무기!', '질주하는 야간열차에 잠입한 무장 강도 집단.열차 승객들을 구하기 위해 나선 특수 요원. 문, 커튼, 손잡이. 손에 잡히는 모든 것이 무기가 된다!  40명의 빌런, 52개의 무기, 9번의 위기! 용서도, 자비도 없다! 짜릿하고 무자비한 복수가 시작된다!', 105, '19', 'RELEASED', 224.036000, 7.200000, 5400000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1160018 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1160018 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1160018 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1160018 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2011444, 'Lakshya Lalwani', '/iabAj9GCIkGnAMvzyIvdUXeCPTo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lakshya Lalwani');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Amrit Rathod', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1160018 AND a.name = 'Lakshya Lalwani';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1374676, 'Raghav Juyal', '/dX1hoTwnZnT8qnFIsXxoDTRgoDt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Raghav Juyal');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fani', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1160018 AND a.name = 'Raghav Juyal';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2368989, 'Tanya Maniktala', '/hW0q6MjqGzPEZKx6OftGcvxeheo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tanya Maniktala');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tulika Singh', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1160018 AND a.name = 'Tanya Maniktala';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2489738, 'Abhishek Chauhan', '/4AlRwGSxWfcJdG0T65NuMh43zs3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Abhishek Chauhan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Viresh Chatwal / Bhukhan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1160018 AND a.name = 'Abhishek Chauhan';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 85684, 'Ashish Vidhyarthi', '/iBUUpfHZIfpC5afHrHwcyGTHKQF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ashish Vidhyarthi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Beni', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1160018 AND a.name = 'Ashish Vidhyarthi';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2119237, 'Nikhil Nagesh Bhat', '/rY4WDYSWktZ7QlBr2o9NT0GiInr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Nikhil Nagesh Bhat');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1160018 AND d.name = 'Nikhil Nagesh Bhat';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hJxdfkQVSzM67uKjInnZA2mJTua.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1160018;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/okVLmXL5y18dfN2R4ufMZEGaeCd.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1160018;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1249532, 'Rippy', '2024-10-25', '', '', 83, '', 'RELEASED', 218.154000, 4.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1249532 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1249532 AND g.name = '미스터리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2712, '마이클 빈', '/9oFLsADWQm2TvU8XzLIzBbjdMkU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 빈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Uncle Schmitty', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1249532 AND a.name = '마이클 빈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1057485, 'Tess Haubrich', '/pNvjKa3Rl2q681EM6kQrwbEfJeg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tess Haubrich');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maddy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1249532 AND a.name = 'Tess Haubrich';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 126579, 'Aaron Pedersen', '/3SoOwjIPULquiuo0yBWAwVamJFj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Aaron Pedersen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1249532 AND a.name = 'Aaron Pedersen';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1184801, 'Angie Milliken', '/pfQZoIwFxaPiaxxuxJBHNQNrmQi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Angie Milliken');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Aunt Donna', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1249532 AND a.name = 'Angie Milliken';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 56496, 'Mungo McKay', '/qDINC4HtgaLNNmJXKnbt2SJb1kL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mungo McKay');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Stan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1249532 AND a.name = 'Mungo McKay';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1488203, 'Ryan Coonan', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Ryan Coonan');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1249532 AND d.name = 'Ryan Coonan';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/cZ5U4Ae74g29E02JR5oR98RQhiR.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1249532;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tPfXJcXxQ3MHyvhzNsDgsXoyPEM.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1249532;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (567811, '10 라이브즈', '2024-04-18', '어디서도 본 적 없는 냥아치의 환생!', '9번째 냥생을 살고 있는 거만한 고양이 ‘베킷’은  완벽한 집사 ‘로즈’의 사랑 덕분에 더할 나위 없이 행복한 냥생을 보내던 중  어이없는 사고로 마지막 목숨을 잃게 된다.  천국의 천사에게 원래의 삶으로 되돌아가게 해달라고  간절하게 빌어 다시 한번 목숨을 얻게 되지만 조건이 하나 있었는데?!  고양이가 아닌 엉뚱한 동물로 환생하게 되는 ‘베킷’은  과연 ‘로즈’의 품으로 다시 돌아갈 수 있을까?!', 87, 'ALL', 'RELEASED', 190.064000, 8.083000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 567811 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 567811 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 567811 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 567811 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2185015, 'Mo Gilligan', '/i6heWKdRr6QJYO9VZ3ag2kFsE9H.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mo Gilligan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Beckett (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 567811 AND a.name = 'Mo Gilligan';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2223752, '시몬 애슐리', '/NoWUSMGBrQrX23XK7eVjHlfaqY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시몬 애슐리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rose (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 567811 AND a.name = '시몬 애슐리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2598, '소피 오코네도', '/fpqohSUUSs1hjc9aHo5x6ypDr5Y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '소피 오코네도');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Grace (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 567811 AND a.name = '소피 오코네도';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1146050, 'Zayn Malik', '/nzCk09tN15NOMpKPoCwegcJnx3j.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Zayn Malik');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kirk / Cameron (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 567811 AND a.name = 'Zayn Malik';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1312166, 'Dylan Llewellyn', '/1NAgIljZXDGwTrzKEQEIWNqGSfe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Dylan Llewellyn');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Larry (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 567811 AND a.name = 'Dylan Llewellyn';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 58421, 'Christopher Jenkins', '/vAP7L1vMOhm7LArXGESmL7WsPD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Christopher Jenkins');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 567811 AND d.name = 'Christopher Jenkins';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/m4WQh0iMxTnMbsI31GPUcAlzSxO.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 567811;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/FzntbxhtPGp5gVmie16ry3k7Ow.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 567811;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (588648, 'Dragonkeeper', '2024-04-11', '', '', 99, '', 'RELEASED', 202.123000, 7.393000, 5427272, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 588648 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 588648 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 588648 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 588648 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 588648 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4665403, 'Lucía Pérez', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lucía Pérez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ping (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 588648 AND a.name = 'Lucía Pérez';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 589542, 'Mario Gas', '/rJfShkLP8AV9A2sgcTo9olSmJ14.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mario Gas');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Danzi (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 588648 AND a.name = 'Mario Gas';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4665405, 'Fernando Castro', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Fernando Castro');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Diao (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 588648 AND a.name = 'Fernando Castro';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4665408, 'Carlos de Luna', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Carlos de Luna');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wang Chao (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 588648 AND a.name = 'Carlos de Luna';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4665409, 'José Gómez Adán', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'José Gómez Adán');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kwan (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 588648 AND a.name = 'José Gómez Adán';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2556462, 'Jian-Ping Li', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jian-Ping Li');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 588648 AND d.name = 'Jian-Ping Li';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1078616, 'Salvador Simó', '/gN3PDilh4Fu3OzLcKBVv0V1P80w.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Salvador Simó');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 588648 AND d.name = 'Salvador Simó';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hfdmvuLY8vADVthLNyn5EUO1ria.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 588648;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/h9YlRHAZWOWtGonllmj6JJg1FrE.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 588648;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1182047, '어프렌티스', '2024-10-09', '거물인가, 괴물인가! 트럼프가 감추고 싶은 모든 것', '세입자들에게 밀린 집세를 받으러 다니는 뉴욕 부동산 업자의 아들 ‘도널드 트럼프’는 어느 날 정·재계 고위 인사들을 변호하며 정치 브로커로 활동하는 변호사 ‘로이 콘’을 만나게 된다. 성공을 향한 강한 야망을 가진 ‘도널드 트럼프’는 불법 수사와 협박, 사기, 선동으로 인간의 탈을 쓴 악마라고 불리는 ‘로이 콘’을 스승으로 삼고 더욱 악랄한 괴물로 거듭나는데!', 122, '19', 'NOW_PLAYING', 304.878000, 7.000000, 5582372, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1182047 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1182047 AND g.name = '역사';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 60898, '세바스찬 스탠', '/nKZgixTbHFXpkzzIpMFdLX98GYh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '세바스찬 스탠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Donald Trump', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1182047 AND a.name = '세바스찬 스탠';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 239271, '제레미 스트롱', '/jcMhXWICSi4QjQttJVhFSiKVvpF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제레미 스트롱');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Roy Cohn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1182047 AND a.name = '제레미 스트롱';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 42993, '마틴 도노반', '/wTCmpcmd8mcAbsX6Yc7zFs2J98Q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마틴 도노반');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fred Trump', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1182047 AND a.name = '마틴 도노반';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2408703, '마리아 바칼로바', '/vCz0ycZr1PgJVOAeS29fIiZE8pN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마리아 바칼로바');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ivana Trump', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1182047 AND a.name = '마리아 바칼로바';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 185185, 'Catherine McNally', '/it1OM4ZBAfbtfFBwq3NtgSNZfcQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Catherine McNally');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mary Anne Trump', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1182047 AND a.name = 'Catherine McNally';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1574550, '알리 압바시', '/1mwdpvwjAG1NkvUwpdBMEMJnjK2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '알리 압바시');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1182047 AND d.name = '알리 압바시';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/36t19mk84eUaAysyWb29CHp3Rcv.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1182047;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kv9xVrxfLpudBLyYf1QvLCpUQuy.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1182047;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (76600, '아바타: 물의 길', '2022-12-14', '판도라의 바다, 새로운 세계가 펼쳐진다', '판도라 행성에서 제이크 설리와 네이티리가 이룬 가족이 겪게 되는 무자비한 위협과 살아남기 위해 떠나야 하는 긴 여정과 전투, 그리고 견뎌내야 할 상처에 대한 이야기를 그렸다. 살아남기 위해 설리 가족이 숲에서 바다로 터전을 옮기면서 겪게 되는 화합의 과정, 그리고 곳곳에서 도사리는 새로운 위협까지 역경 속에서 더 아름답게 펼쳐진다.', 192, '', 'RELEASED', 232.936000, 7.600000, 2320250281, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 76600 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 76600 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 76600 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 65731, '샘 워싱턴', '/mflBcox36s9ZPbsZPVOuhf6axaJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '샘 워싱턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jake Sully', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 76600 AND a.name = '샘 워싱턴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8691, '조 샐다나', '/snQ1rfO9Bb2LRG9MAOQnn3JXVHy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조 샐다나');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Neytiri', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 76600 AND a.name = '조 샐다나';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10205, '시고니 위버', '/wTSnfktNBLd6kwQxgvkqYw6vEon.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시고니 위버');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kiri', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 76600 AND a.name = '시고니 위버';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 32747, '스티븐 랭', '/xEBuFWrCKDQD6r6CZK71GYIc4UW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스티븐 랭');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Colonel Miles Quaritch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 76600 AND a.name = '스티븐 랭';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 204, '케이트 윈슬렛', '/e3tdop3WhseRnn8KwMVLAV25Ybv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케이트 윈슬렛');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ronal', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 76600 AND a.name = '케이트 윈슬렛';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2710, '제임스 카메론', '/9NAZnTjBQ9WcXAQEzZpKy4vdQto.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '제임스 카메론');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 76600 AND d.name = '제임스 카메론';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/z56bVX93oRG6uDeMACR7cXCnAbh.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 76600;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8rpDcsfLJypbO6vREc0547VKqEv.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 76600;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (299536, '어벤져스: 인피니티 워', '2018-04-25', '영화의 역사를 뒤바꿀 마블의 클라이맥스!', '타노스는 6개의 인피니티 스톤을 획득해 신으로 군림하려 한다. 그것은 곧 인류의 절반을 학살해 우주의 균형을 맞추겠다는 뜻. 타노스는 닥터 스트레인지가 소유한 타임 스톤, 비전의 이마에 박혀 있는 마인드 스톤을 차지하기 위해 지구를 침략한다. 아이언맨과 스파이더맨은 가디언즈 오브 갤럭시의 멤버들과 타노스를 상대한다. 지구에선 캡틴 아메리카, 완다, 블랙 위도우, 블랙 팬서 등이 비전을 지키기 위해 뭉친다.', 149, '12', 'RELEASED', 217.298000, 8.200000, 2052415039, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 299536 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 299536 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 299536 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3223, '로버트 다우니 주니어', '/5qHNjhtjMD4YWH3UP0rm4tKwxCL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 다우니 주니어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tony Stark / Iron Man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299536 AND a.name = '로버트 다우니 주니어';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16828, '크리스 에반스', '/3bOGNsHlrswhyW79uvIHH1V43JI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 에반스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Steve Rogers / Captain America', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299536 AND a.name = '크리스 에반스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 74568, '크리스 헴스워스', '/piQGdoIQOF3C1EI5cbYZLAW1gfj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 헴스워스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Thor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299536 AND a.name = '크리스 헴스워스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16851, '조쉬 브롤린', '/sX2etBbIkxRaCsATyw5ZpOVMPTD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조쉬 브롤린');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Thanos', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299536 AND a.name = '조쉬 브롤린';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 103, '마크 러팔로', '/5GilHMOt5PAQh6rlUKZzGmaKEI7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마크 러팔로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruce Banner / Hulk', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299536 AND a.name = '마크 러팔로';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 19271, '안소니 루소', '/xbINBnWn28YygYWUJ1aSAw0xPRv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '안소니 루소');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 299536 AND d.name = '안소니 루소';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 19272, '조 루소', '/o0OXjFzL10jCy89iAs7UzzSbyoK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조 루소');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 299536 AND d.name = '조 루소';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kmP6viwzcEkZeoi1LaVcQemcvZh.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 299536;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mDfJG3LC3Dqb67AZ52x3Z0jU0uB.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 299536;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (390159, 'La invención de la carne', '2009-01-01', '', '', 82, '', 'RELEASED', 216.850000, 3.800000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 390159 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2316363, 'Umbra Colombo', '/t1vbjodh6aKupypoQQKvWUlDKOe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Umbra Colombo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'María', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 390159 AND a.name = 'Umbra Colombo';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2088527, 'Diego Benedetto', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Diego Benedetto');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mateo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 390159 AND a.name = 'Diego Benedetto';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2487454, 'Gaby Lerner', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gaby Lerner');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Perla', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 390159 AND a.name = 'Gaby Lerner';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 567744, 'Lisandro Rodríguez', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lisandro Rodríguez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Taxi boy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 390159 AND a.name = 'Lisandro Rodríguez';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2487455, 'Mariano Villamarín', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mariano Villamarín');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cómico', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 390159 AND a.name = 'Mariano Villamarín';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1145479, 'Santiago Loza', '/cnBlwVGatKMpfo9vnDhW0t0Kz8I.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Santiago Loza');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 390159 AND d.name = 'Santiago Loza';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zPbnEjLhOF1wYexwGPYcnb65rEJ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 390159;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jeaf43W4Koo2tWYqHjp45vTx9ST.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 390159;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (453395, '닥터 스트레인지: 대혼돈의 멀티버스', '2022-05-04', '상상의 경계를 무너뜨릴 광기', '아메리카는 어느 날 멀티버스 사이를 오갈 수 있는 힘에 눈을 뜨지만 완전히 제어하지 못한다. 정체불명의 악마가 아메리카를 죽이려 하자 다른 우주의 스트레인지가 이를 막아보지만 결국 살해당한다. 우여곡절 끝에 우리가 알고 있는 우주로 넘어온 아메리카는 어벤져스 멤버인 닥터 스트레인지의 도움과 보호를 받는다. 닥터 스트레인지는 웨스트뷰 사건 이후 잠적한 완다에게 도움을 청하지만 곧바로 그녀가 사건의 진정한 흑막, 스칼렛 위치임이 드러난다. 스칼렛 위치는 자신의 원하는 멀티버스로 가기 위해 아메리카의 힘을 흡수하려 한다. 닥터 스트레인지와 아메리카는 압도적인 힘을 지닌 스칼렛 위치를 피해 또 한번 다른 멀티버스로 도망치지만 그의 끈질긴 추격을 받는다.', 126, '12', 'RELEASED', 216.734000, 7.284000, 955775804, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 453395 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 453395 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 453395 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 71580, '베네딕트 컴버배치', '/fBEucxECxGLKVHBznO0qHtCGiMO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '베네딕트 컴버배치');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Doctor Stephen Strange', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 453395 AND a.name = '베네딕트 컴버배치';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1912381, 'Xochitl Gomez', '/lVbrWJIFqGAqk3o2NAEwKkMmygJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Xochitl Gomez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'America Chavez', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 453395 AND a.name = 'Xochitl Gomez';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 550843, '엘리자베스 올슨', '/mbMsmQE5CyMVTIGMGCw2XpcPCOc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '엘리자베스 올슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wanda Maximoff / The Scarlet Witch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 453395 AND a.name = '엘리자베스 올슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5294, '추이텔 에지오포', '/kq5DDnqqofoRI0t6ddtRlsJnNPT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '추이텔 에지오포');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Baron Mordo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 453395 AND a.name = '추이텔 에지오포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 30082, '베네딕트 웡', '/yYfLyrC2CE6vBWSJfkpuVKL2POM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '베네딕트 웡');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wong', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 453395 AND a.name = '베네딕트 웡';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 7623, '샘 레이미', '/8gssvwiPrFRuFRlr5ruKx68k1Jl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '샘 레이미');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 453395 AND d.name = '샘 레이미';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vL5ktZauR0fZMDOHKjakb1idhuU.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 453395;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gUNRlH66yNDH3NQblYMIwgZXJ2u.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 453395;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (667538, '트랜스포머: 비스트의 서막', '2023-06-06', '함께하라 새로운 시작을', '전 우주의 행성을 집어삼키는 절대자, ‘유니크론’의 부하 ‘스커지’는 ‘테러콘’들을 이끌고 지구에 당도한다. 그에 맞서기 위해 지구에 정체를 숨기고 있던 트랜스포머 ‘오토봇’ 군단이 모습을 드러내고 또 다른 트랜스포머 진영인 ‘맥시멀’과 힘을 합친다. 옵티머스 프라임이 이끄는 ‘오토봇’과 옵티머스 프라이멀을 중심으로 한 ‘맥시멀’. 모두의 운명을 건 그들의 압도적 전투가 시작된다!', 127, '12', 'RELEASED', 207.998000, 7.300000, 439000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 667538 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 667538 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 667538 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1560244, '안소니 라모스', '/seFm2fKh6reyZaaCg7DmRpodLCw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '안소니 라모스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Noah Diaz', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 667538 AND a.name = '안소니 라모스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1676520, 'Dominique Fishback', '/zduC0PM7xKzFX4F7DH8CCt5gt6O.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Dominique Fishback');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elena Wallace', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 667538 AND a.name = 'Dominique Fishback';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19540, 'Peter Cullen', '/9Snf4fBUkk5MrAjqtNtgZRJYJbj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Peter Cullen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Optimus Prime (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 667538 AND a.name = 'Peter Cullen';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2372, '론 펄먼', '/9riPBfsWpzEzh2y9ucxTW22iakI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '론 펄먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Optimus Primal (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 667538 AND a.name = '론 펄먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 22970, '피터 딘클리지', '/9CAd7wr8QZyIN0E7nm8v1B6WkGn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '피터 딘클리지');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Scourge (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 667538 AND a.name = '피터 딘클리지';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1551545, 'Steven Caple Jr.', '/aU8p958QyhfV2jurc3L5pn7sN6L.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Steven Caple Jr.');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 667538 AND d.name = 'Steven Caple Jr.';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/chUZNPNd7EiETSB4xBGykXhuXRr.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 667538;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2vFuG6bWGyQUzYS9d69E5l85nIz.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 667538;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1042657, 'Latency', '2024-06-14', '', '', 94, '', 'RELEASED', 200.089000, 5.500000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1042657 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1042657 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1042657 AND g.name = '공포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1411561, 'Sasha Luss', '/pviPtS13SzKiUCGIjBO4cUnQ2XE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sasha Luss');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hana', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1042657 AND a.name = 'Sasha Luss';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2384925, 'Alexis Ren', '/qYQi1B12afoIgbQxAQGT0fIpxtY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alexis Ren');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jen', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1042657 AND a.name = 'Alexis Ren';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2272457, 'Ava Caryofyllis', '/nZBnwdPshKxeqqjzUFVkMuITin7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ava Caryofyllis');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Young Girl (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1042657 AND a.name = 'Ava Caryofyllis';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 190826, 'Robert Coleby', '/uEKduzndAp23MNJqNHEeHzHABRg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Robert Coleby');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Landlord', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1042657 AND a.name = 'Robert Coleby';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1906318, 'Kelly B. Jones', '/q9dCfirS0zzOtYsdOCvmC4AHAp8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kelly B. Jones');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Officer #1', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1042657 AND a.name = 'Kelly B. Jones';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2617697, 'James Croke', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'James Croke');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1042657 AND d.name = 'James Croke';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oeSUxCFa0LFsExzTvuz2wjaObyU.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1042657;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9GzQ4bT6gdeq4fKMrzpJLwx40sI.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1042657;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (150540, '인사이드 아웃', '2015-06-17', '진짜 나를 만날 시간', '모든 사람의 머릿속에 존재하는 감정 컨트롤 본부. 그곳에서 불철주야 열심히 일하는 기쁨, 슬픔, 버럭, 까칠, 소심 다섯 감정들. 정든 옛 동네를 떠나 도시로 이사하는 라일리 가족. 이사 후 새로운 환경에 적응해야 하는 라일리를 위해 그 어느 때 보다 바쁘게 감정의 신호를 보내지만 우연한 실수로 기쁨과 슬픔이 본부를 이탈하게 되자 라일리의 마음 속에 큰 변화가 찾아온다. 라일리가 예전의 모습을 되찾기 위해서는 기쁨과 슬픔이 본부로 돌아가야만 한다. 그러나 엄청난 기억들이 저장되어 있는 머릿속 세계에서 본부까지 가는 길은 험난하기만 한데...', 102, 'ALL', 'RELEASED', 190.037000, 7.912000, 857611174, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 150540 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 150540 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 150540 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 150540 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 150540 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 56322, '에이미 폴러', '/rwmvRonpluV6dCPiQissYrchvSD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에이미 폴러');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joy (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 150540 AND a.name = '에이미 폴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 169200, '필리스 스미스', '/h9w9pQbiderRWAC2mi7spjzuIGz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '필리스 스미스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sadness (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 150540 AND a.name = '필리스 스미스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 21125, '리처드 카인드', '/yWmuVQeQUzb5OSMVDoWkR0IylCK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리처드 카인드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bing Bong (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 150540 AND a.name = '리처드 카인드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19278, '빌 헤이더', '/cOKfCWhMYMHkb2Ikt0Ywn48XEj6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빌 헤이더');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fear (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 150540 AND a.name = '빌 헤이더';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 59258, '루이스 블랙', '/1Yvp5dwnJ1UI0KtXGNhZ384wTgv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루이스 블랙');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anger (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 150540 AND a.name = '루이스 블랙';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 12890, '피트 닥터', '/vITDphkNpSn1LP5gUEheAnlclnl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피트 닥터');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 150540 AND d.name = '피트 닥터';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rMXHvHzpuYZXrJUhRVJ3TvDSwe5.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 150540;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/j29ekbcLpBvxnGk6LjdTc2EI5SA.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 150540;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (278, '쇼생크 탈출', '1994-09-23', '두려움은 너를 죄수로 가두고 희망은 너를 자유롭게 하리라', '촉망받는 은행 간부 앤디 듀프레인은 아내와 그녀의 정부를 살해했다는 누명을 쓴다. 주변의 증언과 살해 현장의 그럴듯한 증거들로 그는 종신형을 선고받고 악질범들만 수용한다는 지옥같은 교도소 쇼생크로 향한다. 인간 말종 쓰레기들만 모인 그곳에서 그는 이루 말할 수 없는 억압과 짐승보다 못한 취급을 당한다. 그러던 어느 날, 간수의 세금을 면제받게 해 준 덕분에 그는 일약 교도소의 비공식 회계사로 일하게 된다. 그 와중에 교도소 소장은 죄수들을 이리저리 부리면서 검은 돈을 긁어 모으고 앤디는 이 돈을 세탁하여 불려주면서 그의 돈을 관리하는데...', 142, '15', 'RELEASED', 212.057000, 8.707000, 28341469, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 278 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 278 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 504, '팀 로빈스', '/djLVFETFTvPyVUdrd7aLVykobof.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '팀 로빈스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Andy Dufresne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 278 AND a.name = '팀 로빈스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 192, '모건 프리먼', '/905k0RFzH0Kd6gx8oSxRdnr6FL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '모건 프리먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ellis Boyd ''Red'' Redding', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 278 AND a.name = '모건 프리먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4029, 'Bob Gunton', '/ulbVvuBToBN3aCGcV028hwO0MOP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bob Gunton');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Warden Norton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 278 AND a.name = 'Bob Gunton';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6573, 'William Sadler', '/rWeb2kjYCA7V9MC9kRwRpm57YoY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'William Sadler');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Heywood', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 278 AND a.name = 'William Sadler';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6574, '클랜시 브라운', '/1JeBRNG7VS7r64V9lOvej9bZXW5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '클랜시 브라운');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Captain Byron T. Hadley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 278 AND a.name = '클랜시 브라운';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 4027, '프랭크 다라본트', '/7LqmE3p1XTwCdNCOmBxovq210Qk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '프랭크 다라본트');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 278 AND d.name = '프랭크 다라본트';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oAt6OtpwYCdJI76AVtVKW1eorYx.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 278;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zfbjgQE1uSd9wiPTX4VzsLi0rGG.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 278;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (14836, '코렐라인: 비밀의 문', '2009-02-05', '소원은 함부로 말하면 안돼!', '새로운 집으로 이사해 모든 것이 낯선 코렐라인은 부모님도 일 때문에 바쁘자, 혼자 집안을 돌아다니던 중 숨겨진 작은 문을 발견한다. 그날 밤 우연히 문을 열어 본 코렐라인은 그 문을 통해 또 다른 세계로 가게 되고, 상상으로만 생각하던 모든 것이 다 실현되는 또 다른 세계에 점점 마음을 뺏기게 된다. 이 곳에는 단추 눈을 한 가족, 친구, 이웃 등 모든 사람이 자신의 말을 들어주는 신나고 완벽한 세상인 것. 하지만 이 곳에 머물기 위해 필요한 무시무시하고 엄청난 비밀을 알게 된 코렐라인이 현실의 세계로 돌아가려 하자, 또 다른 세계의 엄마는 이를 막기 위해 본색을 드러내는데...', 100, 'All', 'RELEASED', 211.952000, 7.891000, 172750668, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 14836 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 14836 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 14836 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 501, '다코타 패닝', '/hwcO08SVWkelfvgfIa5HsTMxsK8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다코타 패닝');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Coraline Jones (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 14836 AND a.name = '다코타 패닝';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10742, 'Teri Hatcher', '/ySmnfZm8ZGabcwp4UwaMDeSzXqx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Teri Hatcher');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mel Jones / Other Mother (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 14836 AND a.name = 'Teri Hatcher';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12094, 'Jennifer Saunders', '/pTgxwHcz9L8SNVYvPJS0o0lgHya.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jennifer Saunders');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'April Spink (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 14836 AND a.name = 'Jennifer Saunders';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5539, '돈 프렌치', '/eLFCJSTEeh7CDRw50RzowKz4h7V.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '돈 프렌치');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miriam Forcible (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 14836 AND a.name = '돈 프렌치';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 65827, '키스 데이비드', '/jJLJuR7FNHYL1fB5igjj7IXzOel.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키스 데이비드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cat (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 14836 AND a.name = '키스 데이비드';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 57646, 'Henry Selick', '/2LvtcpV8njWrp2W9eXmTNjsAWev.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Henry Selick');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 14836 AND d.name = 'Henry Selick';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/iGp4wBc0ZBVFd2HPicyDgl6Pn1r.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 14836;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hofnlIyF6bePkgQOpcuRWLvzf15.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 14836;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (587727, '가슴 큰 여자친구', '2019-03-08', '', '민철과 수희는 결혼을 앞두고 민철 아버지(대식)에게 인사를 드리러 간다. 대식은 예비 며느리인 수희를 반갑게 맞이하고 수희 또한 인자한 대식을 좋은 사람이라 여긴다.  하지만 결혼 전 성격차이로 민철과 수희는 파혼 되고… 결혼준비만 하던 수희는 곧 생활고를 격어….. 수희의 오랜 친구이자 벗인 민주가 일하는 키스방에서 일하게 된다.  어느 날과 마찬가지로 수희는 키스방에서 손님을 기다리는데…. 키스방 문으로 들어오는 손님인 대식과 마주치게 되는데…', 71, '', 'RELEASED', 201.975000, 6.955000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 587727 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2349944, '유정', '/an05J38LZGz3sdDe0CxxXUIGHe9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '유정');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 587727 AND a.name = '유정';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2263928, 'Kang Min-sik', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kang Min-sik');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 587727 AND a.name = 'Kang Min-sik';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2263929, 'Kim Wan- jin', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kim Wan- jin');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 587727 AND a.name = 'Kim Wan- jin';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2263930, 'Lee Ji- su', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lee Ji- su');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 587727 AND a.name = 'Lee Ji- su';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2263931, 'Junsei', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Junsei');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 587727 AND d.name = 'Junsei';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/f6PfAXtFEkJRcBtOjbzOgz8qqSK.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 587727;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zQKFPx03M9RKfEcRETXR2HoUZn1.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 587727;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (507241, '더 킬러스 게임', '2024-09-12', '승리는 실행에 달려 있다.', '최고의 청부 살인업자 조 플러드는 말기 질환 진단을 받자, 스스로에게 청부를 의뢰하며 자신의 운명을 직접 결정하기로 한다. 그러나 그가 고용한 암살자들이 그의 전 여자친구까지 노리게 되면서, 조는 동료 암살자들의 공격을 막아내고 인생의 사랑을 되찾기 위해 시간과 싸워야 한다.', 104, '', 'RELEASED', 206.596000, 6.500000, 5090881, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 507241 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 507241 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 507241 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 543530, '데이브 바티스타', '/ymn6iQBJbQZN6BYI60YJDXVP4gF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이브 바티스타');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joe Flood', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 507241 AND a.name = '데이브 바티스타';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 568657, '소피아 부텔라', '/lGFhhjcjARQCM8AiGidyyyfDowh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '소피아 부텔라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maize Arnaud', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 507241 AND a.name = '소피아 부텔라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 53256, '테리 크루즈', '/pxTY4SglLo5hFcMH00MxPeC5u55.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '테리 크루즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Creighton Lovedahl', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 507241 AND a.name = '테리 크루즈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 139820, '폼 클레멘티에프', '/hfUKAI2kXTMMWjno0i4sLPJud5N.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '폼 클레멘티에프');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Antoinette', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 507241 AND a.name = '폼 클레멘티에프';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2282, '벤 킹슬리', '/vQtBqpF2HDdzbfXHDzR4u37i1Ac.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '벤 킹슬리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zvi Rabinowitz', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 507241 AND a.name = '벤 킹슬리';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 131532, 'J.J. Perry', '/57assDPZceZ4x7YWrkPE5FqVn1f.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'J.J. Perry');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 507241 AND d.name = 'J.J. Perry';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4bKlTeOUr5AKrLky8mwWvlQqyVd.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 507241;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zGLQmrmIB56kMZPnzqReIOBay1B.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 507241;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (877817, '''울프스'' - Wolfs', '2024-09-20', '', '유명 뉴욕 공직자의 실수를 무마해 달라는 요청을 받은 두 라이벌 해결사가 맞닥뜨린다. 일촉즉발의 긴장감이 감도는 하룻밤 동안 두 사람은 각자의 불만과 자존심을 내려놓고 함께 일을 마쳐야 한다.', 108, '15', 'RELEASED', 190.958000, 6.587000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 877817 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 877817 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 877817 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1461, '조지 클루니', '/djpIprpdFKF0WKN7Hxtni6voyUW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조지 클루니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Margaret''s Man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 877817 AND a.name = '조지 클루니';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 287, '브래드 피트', '/9OfnD7lxgIj3BNQpJFnwxnwl6w5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브래드 피트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pam''s Man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 877817 AND a.name = '브래드 피트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 148992, '오스틴 에이브럼스', '/9pSpSAk9NsYC5puqAVsmSK3OSeu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오스틴 에이브럼스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kid', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 877817 AND a.name = '오스틴 에이브럼스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 39388, '에이미 라이언', '/rE0YBJr3R6GcKu6Gw4K2lGW0ctC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에이미 라이언');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Margaret', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 877817 AND a.name = '에이미 라이언';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 428440, '푸르나 자가나탄', '/cdfzpja6kif9NsWlN2K91RVn1Xt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '푸르나 자가나탄');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'June', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 877817 AND a.name = '푸르나 자가나탄';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1293994, '존 왓츠', '/fkXChMX6CUXY1yOxBehAzvaTCl7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '존 왓츠');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 877817 AND d.name = '존 왓츠';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/isf7Z8Ze3dvmaOuJG1hfF2LTtUh.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 877817;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uXDwP5qPhuRyPpQ7WkLbE6t2z5W.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 877817;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1114513, '스픽 노 이블', '2024-09-11', '악은 절대 말하지 말 것', '휴양지에서 처음 만나 우연히 함께 휴가를 보내게 된 두 가족. 패트릭(제임스 맥어보이)은 자신의 집으로 루이스(맥켄지 데이비스)의 가족을 초대한다. 다시 만나 즐거운 시간을 보낼 것이라 예상한 것도 잠시, 거절할 수 없는 호의와 불편한 상황들이 계속되며 불길한 두려움을 느끼고 집에 돌아가려 하던 중 숨겨진 진실을 마주하게 되는데…', 110, '15', 'RELEASED', 208.921000, 7.339000, 75711395, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1114513 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1114513 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5530, '제임스 맥어보이', '/vB6qYlFXgONGVwwxWXE4gf0F8SQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제임스 맥어보이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paddy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1114513 AND a.name = '제임스 맥어보이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1110405, '맥켄지 데이비스', '/ekQbEIKh26jbz17P0wwLbo6uNs9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '맥켄지 데이비스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Louise Dalton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1114513 AND a.name = '맥켄지 데이비스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 59233, 'Scoot McNairy', '/2rF69vkyzpD2MG0T375RYSiBbpe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Scoot McNairy');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ben Dalton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1114513 AND a.name = 'Scoot McNairy';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1323109, 'Aisling Franciosi', '/qtXgCx5vMlAMIjMbYydDjjzY08T.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Aisling Franciosi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ciara', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1114513 AND a.name = 'Aisling Franciosi';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2556026, '알릭스 웨스트 레플러', '/eF3uyAlOjRmzero5b8xYukvu5Mr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '알릭스 웨스트 레플러');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agnes Dalton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1114513 AND a.name = '알릭스 웨스트 레플러';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 63306, 'James Watkins', '/ik0bbpMrqAaaJlOYB1DbdslQHwh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'James Watkins');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1114513 AND d.name = 'James Watkins';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mXGlp8K10JhiY5ZNY7zMldm2lss.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1114513;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1fL2S8LKxCVE9KoPRBXeagmBtex.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1114513;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1226578, '롱레그스', '2024-05-31', '지난 10년간 가장 무서운 영화 ‘롱레그스’가 찾아온다.', 'FBI 요원 리 하커는 찾기 힘든 연쇄 살인범의 미해결 사건에 배정된 재능 있는 신입 요원이다. 사건이 복잡하고, 오컬트 관습과의 연관성을 밝혀내는 증거가 사라지면서, 하커는 무자비한 살인범과의 개인적 연관성을 발견하고, 그가 다시 공격하기 전에 그를 막기 위해 시간과 경주해야 한다.', 101, '15', 'NOW_PLAYING', 191.195000, 6.656000, 102469694, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1226578 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1226578 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1094091, '마이카 먼로', '/x4yiKkMnCdf8g4eOrDoqla9FYEA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이카 먼로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agent Lee Harker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1226578 AND a.name = '마이카 먼로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2963, '니콜라스 케이지', '/iqqNNhPMrd1jMPWNiVACURaDwii.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '니콜라스 케이지');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Longlegs', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1226578 AND a.name = '니콜라스 케이지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 56871, '블레어 언더우드', '/3e6my8gZYS3L2OP4ZTN1psQDYIT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '블레어 언더우드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agent Carter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1226578 AND a.name = '블레어 언더우드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3128, '얼리샤 윗', '/vQ2McAjHjY3A7oDrPMx6aLSsvkW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '얼리샤 윗');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ruth Harker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1226578 AND a.name = '얼리샤 윗';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1840725, '미셸 최 리', '/WOlWIDRFwHdNWO3y2wXuYW89ug.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미셸 최 리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agent Browning', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1226578 AND a.name = '미셸 최 리';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 90609, '오즈 퍼킨스', '/olBiDWBll8xlfcvcPUusODun6cP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '오즈 퍼킨스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1226578 AND d.name = '오즈 퍼킨스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/maGzdLxWjgLgr4iOZ26Rfpst29A.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1226578;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4CmxmxgiFdTaNmsscochV9rBcnF.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1226578;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1064213, '아노라', '2024-10-11', '결코 이 사랑을 놓지 않을 것', '뉴욕의 스트리퍼 ‘아노라’는 자신의 바를 찾은 철부지 러시아 재벌2세 ‘이반’을 만나게 되고 충동적인 사랑을 믿고 허황된 신분 상승을 꿈꾸며 결혼식을 올리게 된다. 그러나 신데렐라 스토리를 꿈꿨던 것도 잠시, 한 번도 본 적 없는 ‘이반’의 부모님이 아들의 결혼 사실을 알게 되자 길길이 날뛰며 미국에 있는 하수인 3인방에게 둘을 잡아 혼인무효소송을 진행할 것을 지시한다. 하수인 3인이 들이닥치자 부모님이 무서워 겁에 질린 남편 ‘이반’은 ‘아노라’를 버린채 홀로 도망친다. ‘이반’을 찾아 결혼 생활을 유지하고 싶은 ‘아노라’와 어떻게든 ‘이반’을 찾아 혼인무효소송을 시켜야만 하는 하수인 3인방의 대환장 발악이 시작된다.', 140, '19', 'NOW_PLAYING', 154.810000, 7.513000, 10008712, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1064213 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1064213 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1064213 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1640439, '마이키 매디슨', '/gyiw7fAsqVYYrfRbYxwLfaJSOR7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이키 매디슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ani', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1064213 AND a.name = '마이키 매디슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3051936, 'Марк Эйдельштейн', '/BkNtikGK42nClLBnOwOt3Xxs2L.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Марк Эйдельштейн');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ivan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1064213 AND a.name = 'Марк Эйдельштейн';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 966306, 'Karren Karagulian', '/rxyx8OFgShe0Kolptm5LpbsOUJj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Karren Karagulian');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Toros', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1064213 AND a.name = 'Karren Karagulian';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1266686, '유리 보리소프', '/zLcD2UmXJG6m3qOQhNZs13SQRIp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '유리 보리소프');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Igor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1064213 AND a.name = '유리 보리소프';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4338956, 'Vache Tovmasyan', '/cKHEEer9V0zK96f1gE0gvQ5IvZq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Vache Tovmasyan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Garnick', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1064213 AND a.name = 'Vache Tovmasyan';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 118415, '션 베이커', '/i0qiOKGXRHK3FqIUcjav09KAruk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '션 베이커');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1064213 AND d.name = '션 베이커';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mwguqSMRCA3NgpPoRsXdFhid25m.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1064213;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/cnUpZo6sNTdfbFx7ufs7ubi5MWX.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1064213;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1129598, '더 라이언: 사막의 생존자들', '2024-03-15', '인간과 짐승에 맞서 생존하라!', '극단주의 무장 단체의 위협을 받은 한 젊은 부부는 칼라하리 사막의 선교 기지를 떠나야 한다. 부패한 밀수업자가 조종하는 허술한 비행기에 겨우 탑승하여 탈출을 시도하지만,비행기가 추락하며 더 큰 위협에 직면하게 된다. 그들이 불시착한 곳은 사자, 표범, 하이에나 같은 맹수들이 서식하는 칼라하리 사막 한가운데…무장 단체에게 추적당하는 승객들은 인간과 야생 동물 모두와 싸워야만 한다. 과연 누가 이 치열한 생존 싸움에서 살아남을 것인가?', 86, '15', 'RELEASED', 203.309000, 6.320000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1129598 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1129598 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1129598 AND g.name = '공포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11864, '라이언 필립', '/riNUvjLNsa2JDLrgDIBHH9nze6o.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '라이언 필립');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Andrew', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1129598 AND a.name = '라이언 필립';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 46593, '에밀 허쉬', '/qxshYNcE9yYBvdY5oXp9v6lglG0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에밀 허쉬');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Grun', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1129598 AND a.name = '에밀 허쉬';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8211, '미나 수바리', '/2hRoibF2WkPyML3PD0ijmJo2OKE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미나 수바리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sue', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1129598 AND a.name = '미나 수바리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2743359, 'Dylan Flashner', '/nMDE5OFcc1cSioewYSlJDdbt9X7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Dylan Flashner');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tyler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1129598 AND a.name = 'Dylan Flashner';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4006376, 'Tristan Thompson', '/sOLyHorcm20lndYmj9LzfUPnLwi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tristan Thompson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Max', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1129598 AND a.name = 'Tristan Thompson';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1163471, 'Mukunda Michael Dewil', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Mukunda Michael Dewil');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1129598 AND d.name = 'Mukunda Michael Dewil';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dcUmzoiHChYmtef2yEe06QcML5o.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1129598;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/n3JeGELHa9V6k9mL81ItMxWLSS6.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1129598;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1306764, '아웃사이드', '2024-10-17', '', '좀비 바이러스 사태에서 살아남기 위해 버려진 농가로 피신한 가족. 하지만 황량한 세상을 헤쳐 나가는 과정에서 수년간 감춰온 고통스러운 비밀이 드러나면서 큰 충격에 빠진다.', 131, '19', 'RELEASED', 202.126000, 5.900000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1306764 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1306764 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 586013, '시드 루세로', '/aQO18wSvyfIZUMKTUvk4ceEw2AT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시드 루세로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Francis', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1306764 AND a.name = '시드 루세로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1193808, 'Beauty Gonzalez', '/3idu5IUTSEfJQ6usqyYmtrvzjld.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Beauty Gonzalez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Iris', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1306764 AND a.name = 'Beauty Gonzalez';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1502359, 'Marco Antonio Masa', '/4DdskufJNteNaJRO503YpOMMzob.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marco Antonio Masa');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Josh', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1306764 AND a.name = 'Marco Antonio Masa';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4786561, 'Aiden Patdu', '/40ofnFkkxTIDM2v748xs2DIrdCP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Aiden Patdu');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lucas', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1306764 AND a.name = 'Aiden Patdu';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 114871, 'James Blanco', '/gOiW5CYWt2aIirl8ST31oak3yHS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'James Blanco');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Diego', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1306764 AND a.name = 'James Blanco';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 135479, 'Carlo Ledesma', '/8qMLTlk1YnOnSL4DLc25TamgdbH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Carlo Ledesma');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1306764 AND d.name = 'Carlo Ledesma';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pghYvzRA9BgeXguO1ndB9qpoqmx.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1306764;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fy5HuDMPAwiGtRQlRP0zqLN3zM4.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1306764;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1210794, '미스터 트러블', '2024-10-02', '', '어느 날 억울하게 살인자로 몰린 허술한 전자제품 영업 사원. 그가 부패한 경찰에 맞서 자신의 무고함을 증명하고자 분투한다. 어쩌면 온갖 불법적인 계획을 총동원해야 할지도 모른다.', 98, '15', 'RELEASED', 200.597000, 6.800000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1210794 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1210794 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1210794 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 986805, 'Filip Berg', '/6VU8AUvXw5VYO7ykyESItSDFZRk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Filip Berg');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Conny', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1210794 AND a.name = 'Filip Berg';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1421388, 'Amy Deasismont', '/epQ8c7UbGUbvvCW3Kb2C3y32jwp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Amy Deasismont');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Diana', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1210794 AND a.name = 'Amy Deasismont';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2126383, 'Joakim Sällquist', '/ythpM2ReXonVoO92OmRsUgnUinZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Joakim Sällquist');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Musse', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1210794 AND a.name = 'Joakim Sällquist';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 132245, 'Eva Melander', '/r4MHAB7yvlKNHLYTSdwYnlzUIOq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Eva Melander');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Helena', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1210794 AND a.name = 'Eva Melander';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 74713, 'Måns Nathanaelson', '/r6rhoKLvu9X3jNzlQlka9AEvNi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Måns Nathanaelson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hasse', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1210794 AND a.name = 'Måns Nathanaelson';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2172186, 'Jon Holmberg', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jon Holmberg');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1210794 AND d.name = 'Jon Holmberg';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/liWKsgB2W48cssyfmEkEjjSEQdJ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1210794;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/AowNXLFNKWDRYBKHLsgTK0T7Bxf.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1210794;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (916192, '여름을 향한 터널, 이별의 출구', '2022-09-09', '터널 안 10초, 바깥 세상에선 6시간...', '소원을 이루어 주지만 안팎의 시간이 다르게 흐르는 ''우라시마 터널''을 발견한 고등학생 ''카오루''와 전학생 ''안즈'' 터널의 비밀을 알아내기 위해 뜨거웠던 여름을 함께 보낸 두 사람은 어느새 서로에게 가장 소중한 존재가 되는데...', 83, '12', 'RELEASED', 158.853000, 7.729000, 872000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 916192 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 916192 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 916192 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 916192 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2269331, '스즈카 오지', '/k5hKLBwSvxcwfSxetS4uo60Knx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스즈카 오지');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kaoru Tōno (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 916192 AND a.name = '스즈카 오지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1309932, '飯豊まりえ', '/aPe3k3pB1aDG6rROVFrMuvSRouQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '飯豊まりえ');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anzu Hanashiro (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 916192 AND a.name = '飯豊まりえ';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1256915, '하타나카 타스쿠', '/xPDqoxAia1ShoVC2aMS2ZDPDWzG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하타나카 타스쿠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shōhei Kaga (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 916192 AND a.name = '하타나카 타스쿠';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1161468, '코미야 아리사', '/kQNteaY9vYGXW1wklQSCfkEukod.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '코미야 아리사');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Koharu Kawasaki (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 916192 AND a.name = '코미야 아리사';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1492474, '照井春佳', '/tXqj7kZJaJuYKyOEA0Zmu4fEXH0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '照井春佳');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ms. Hamamoto (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 916192 AND a.name = '照井春佳';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1373229, '田口智久', '/c2UHmjFjfQ9fxoFjz2990VdXWhF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '田口智久');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 916192 AND d.name = '田口智久';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7GpbaeBa52vgSjfeqAwdW90pQmv.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 916192;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vGZHjvyAcmD1mHg5kLwITCgh74U.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 916192;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (929563, '빅 시티 그린 무비: 우주방학', '2024-06-06', '', '짜릿한 모험을 즐기는 크리켓 그린은 자신의 시골 가족을 속여 우주로 ''자동차 여행''을 떠나고, 그 결과 빅 시티 전체가 위험에 빠진다.', 82, '12', 'RELEASED', 199.464000, 7.900000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 929563 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 929563 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 929563 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 929563 AND g.name = '음악';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 929563 AND g.name = 'TV 영화';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2215054, 'Chris Houghton', '/zHzNLynNwXbAVqmU6F1hWG9sLPk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Chris Houghton');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cricket Green (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 929563 AND a.name = 'Chris Houghton';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1218767, '린제이 토렌스', '/hahOfW8PG20pTXtNF8FtZd5pqd4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '린제이 토렌스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tilly Green (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 929563 AND a.name = '린제이 토렌스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 179702, '밥 졸스', '/ohczCcTm5u8Grlf5KGxjDZiQkI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '밥 졸스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bill Green (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 929563 AND a.name = '밥 졸스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1214638, '아티미스 페브다니', '/ctwVQYbcOuTIQJ866fi3AhzqKBM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아티미스 페브다니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alice ''Gramma'' Green (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 929563 AND a.name = '아티미스 페브다니';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 63234, '웬디 매클렌던커비', '/d8VKC8Ms3u9XiW4e4jsy2grP02d.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '웬디 매클렌던커비');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nancy Green (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 929563 AND a.name = '웬디 매클렌던커비';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2878527, 'Anna O''Brian', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Anna O''Brian');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 929563 AND d.name = 'Anna O''Brian';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rAzrGHgBl8m32MC2RlrwlnErB7t.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 929563;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hu6bwaSRG8GZwH3yEVtRxrgAnjq.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 929563;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1100099, '위 리브 인 타임', '2024-10-10', '', '', 108, '', 'RELEASED', 200.337000, 8.000000, 24779174, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1100099 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1100099 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1100099 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 37625, '앤드류 가필드', '/5ydZ6TluPtxlz5G8nlWMB7SGmow.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앤드류 가필드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tobias', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100099 AND a.name = '앤드류 가필드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1373737, '플로렌스 퓨', '/6Sjz9teWjrMY9lF2o9FCo4XmoRh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '플로렌스 퓨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Almut', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100099 AND a.name = '플로렌스 퓨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4984032, 'Grace Delaney', '/pZaiUYfapa7vj6vdFjNQWNS6VUT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Grace Delaney');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ella', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100099 AND a.name = 'Grace Delaney';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4984038, 'Lee Braithwaite', '/sUekD712makzFOvg7wg4y1EfuMy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lee Braithwaite');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jade', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100099 AND a.name = 'Lee Braithwaite';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2014269, 'Aoife Hinds', '/5Gckrcs7WXkMClFWszNOtuJqRou.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Aoife Hinds');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Skye', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1100099 AND a.name = 'Aoife Hinds';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 77269, '존 크로울리', '/2s24bopQ131ZTF3lrBLRFKMHPQG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '존 크로울리');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1100099 AND d.name = '존 크로울리';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bZU0YDWUYuaufxfJNYNitiESD3s.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1100099;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/p9uplKCEPJq4xGJPJJV46KW1dsA.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1100099;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (989662, '어 디프런트 맨', '2024-08-24', '', '', 112, '', 'RELEASED', 180.566000, 7.300000, 1169365, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 989662 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 989662 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 989662 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 989662 AND g.name = '공포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 60898, '세바스찬 스탠', '/nKZgixTbHFXpkzzIpMFdLX98GYh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '세바스찬 스탠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Edward Lemuel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 989662 AND a.name = '세바스찬 스탠';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1576786, '레나테 레인스베', '/wAXYfmwSWBb885WYejXcVqNBBHO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레나테 레인스베');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ingrid Vold', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 989662 AND a.name = '레나테 레인스베';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1675188, 'Adam Pearson', '/49QdMfuyzmhIDsyMPk0suOCEdip.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Adam Pearson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Oswald', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 989662 AND a.name = 'Adam Pearson';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1803734, 'Miles G. Jackson', '/3RK7Ze3Z83kgcl93gUTqgKQURkx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Miles G. Jackson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sean', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 989662 AND a.name = 'Miles G. Jackson';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 928931, 'Patrick Wang', '/oj8vjG3wZ1ZY3NIUc4SGuLY606R.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Patrick Wang');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Director', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 989662 AND a.name = 'Patrick Wang';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1184053, 'Aaron Schimberg', '/h3B3m62HD1YAyky3gWEIvOB7FN0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Aaron Schimberg');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 989662 AND d.name = 'Aaron Schimberg';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lZZKTEvo92u1J5pm7QoEA5yN3du.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 989662;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bv9tOAIACAdQioCs80dKytYV3G7.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 989662;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1138194, '헤레틱', '2024-10-31', '', '', 111, '', 'RELEASED', 117.949000, 7.325000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1138194 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1138194 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1981044, '소피 대처', '/3a8jTH1q4p9G4QHlLynFnNBbv57.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '소피 대처');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sister Barnes', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1138194 AND a.name = '소피 대처';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1512280, 'Chloe East', '/7yFO6DB8O7FmkJpi2mBRJZApbiQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Chloe East');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sister Paxton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1138194 AND a.name = 'Chloe East';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3291, '휴 그랜트', '/hsSfxSHzkKJ6ZKq1Ofngcp7aAnT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '휴 그랜트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Reed', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1138194 AND a.name = '휴 그랜트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17052, '토퍼 그레이스', '/pXaSwE0StHM0lhJ06y45xYlEfhG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '토퍼 그레이스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elder Kennedy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1138194 AND a.name = '토퍼 그레이스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2019444, 'Elle Young', '/rEcGyAm06RMBgR8T7xPOjZNMElO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Elle Young');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Prophet', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1138194 AND a.name = 'Elle Young';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1317685, 'Scott Beck', '/AhRtX9KRTAVNFTAF9sKDQrlqJfE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Scott Beck');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1138194 AND d.name = 'Scott Beck';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1317686, 'Bryan Woods', '/253lxpX7nAJIGWigf1XSyNxGlH8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Bryan Woods');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1138194 AND d.name = 'Bryan Woods';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5HJqjCTcaE1TFwnNh3Dn21be2es.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1138194;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tmvbyMIv56hc03Mtgusj2koFWKj.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1138194;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (772, '나 홀로 집에 2: 뉴욕을 헤매다', '1992-11-15', '', '시카고에 살고 있는 케빈의 가족은 크리스마스에 플로리다에 가기로 되어있다. 그러나 공항의 소란 속에, 홀로 뉴욕행 비행기에 오르게 되어 거대한 도시에 혼자 남게 된 케빈은 기지를 발휘하여 아버지 카드로 플로리자 호텔에 묶게되고, 의심스러워 하는 종업원들을 멋지게 따돌린다. 한편, 감옥을 탈출한 2인조 강도 마브와 해리는 뉴욕의 장난감 가게를 털어 한 몫 잡을 꿈에 부풀어 있는데...', 115, 'ALL', 'RELEASED', 184.057000, 6.700000, 358994850, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 772 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 772 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 772 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11510, '맥컬리 컬킨', '/5lSoFnWb4HmxEREqcFvBGgXu5H.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '맥컬리 컬킨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kevin McCallister', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 772 AND a.name = '맥컬리 컬킨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11511, '다니엘 스턴', '/939oerf8bJPrqT2a0N0oGuM1bjn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다니엘 스턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marv Murchins', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 772 AND a.name = '다니엘 스턴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4517, '조 페시', '/4AO0Rwdg2ky8Usmgzgj0dvhy7Zw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조 페시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Harry Lyme', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 772 AND a.name = '조 페시';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11514, '캐서린 오하라', '/cMBxHeztNVc8YXKcj084Mdd3f3U.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '캐서린 오하라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kate McCallister', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 772 AND a.name = '캐서린 오하라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11512, 'John Heard', '/ltTHVEGuLbtHSndFNDzWHttFJ1Z.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'John Heard');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Peter McCallister', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 772 AND a.name = 'John Heard';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 10965, '크리스 콜럼버스', '/yCyEz90NqjEXKZ7HYcEhDXlLlPc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스 콜럼버스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 772 AND d.name = '크리스 콜럼버스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8lxJrcl24SWRAbLxOJNsvgFlSGa.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 772;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kjby7cr8JnIPkfqMGKutOFrM2at.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 772;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (640146, '앤트맨과 와스프: 퀀텀매니아', '2023-02-15', '모든 것을 지배할 정복자가 온다', '슈퍼히어로 파트너인 스캇 랭과 호프 반 다인, 호프의 부모 재닛 반 다인과 행크 핌, 그리고 스캇의 딸 캐시 랭까지 미지의 양자 영역 세계 속에 빠져버린 앤트맨 패밀리. 그 곳에서 새로운 존재들과 무한한 우주를 다스리는 정복자 캉을 만나며, 그 누구도 예상 못 한 모든 것의 한계를 뛰어넘는 모험을 시작하게 되는데…', 125, '12', 'RELEASED', 132.539000, 6.300000, 476071180, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 640146 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 640146 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 640146 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 22226, '폴 러드', '/6jtwNOLKy0LdsRAKwZqgYMAfd5n.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '폴 러드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Scott Lang / Ant-Man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 640146 AND a.name = '폴 러드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19034, '에반젤린 릴리', '/hAwppQxJoQG5Y3ZS2iPnitfbUjC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에반젤린 릴리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hope Van Dyne / The Wasp', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 640146 AND a.name = '에반젤린 릴리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3392, '마이클 더글라스', '/kVYGPIZowzXLEQfAGUNOqKjAbBb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 더글라스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Hank Pym', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 640146 AND a.name = '마이클 더글라스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1160, '미셸 파이퍼', '/1sMxCGVcxxWd6Z6TuTuQllEeyDs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미셸 파이퍼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Janet Van Dyne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 640146 AND a.name = '미셸 파이퍼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1674162, '조너선 메이저스', '/mD5Ws5WTnuHrH8y9OXyjp9bhi62.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조너선 메이저스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kang the Conqueror', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 640146 AND a.name = '조너선 메이저스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 59026, '페이턴 리드', '/aucXNycAtFREMIKr6ikmHvd2Mmp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '페이턴 리드');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 640146 AND d.name = '페이턴 리드';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sz6mTIDDQmR3DYgJudiTmoW2gR5.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 640146;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/m8JTwHFwX7I7JY5fPe4SjqejWag.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 640146;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (693134, '듄: 파트 2', '2024-02-27', '운명의 반격이 시작된다!', '황제의 모략으로 멸문한 가문의 유일한 후계자 폴. 어머니 레이디 제시카와 간신히 목숨만 부지한 채 사막으로 도망친다. 그곳에서 만난 반란군들과 숨어 지내다 그들과 함께 황제의 모든 것을 파괴할 전투를 준비한다. 한편 반란군들의 기세가 높아질수록 불안해진 황제와 귀족 가문은 잔혹한 암살자 페이드 로타를 보내 반란군을 몰살하려 하는데…', 167, '12', 'RELEASED', 192.150000, 8.200000, 711844359, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 693134 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 693134 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1190668, '티모시 샬라메', '/BE2sdjpgsa2rNTFa66f7upkaOP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '티모시 샬라메');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paul Atreides', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 693134 AND a.name = '티모시 샬라메';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 505710, '젠데이아', '/3WdOloHpjtjL96uVOhFRRCcYSwq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '젠데이아');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chani', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 693134 AND a.name = '젠데이아';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 933238, '레베카 퍼거슨', '/lJloTOheuQSirSLXNA3JHsrMNfH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레베카 퍼거슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jessica', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 693134 AND a.name = '레베카 퍼거슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3810, '하비에르 바르뎀', '/iQnY4JYe7mFoaO2IH1pFNIDL0MH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하비에르 바르뎀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Stilgar', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 693134 AND a.name = '하비에르 바르뎀';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16851, '조쉬 브롤린', '/sX2etBbIkxRaCsATyw5ZpOVMPTD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조쉬 브롤린');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gurney Halleck', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 693134 AND a.name = '조쉬 브롤린';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 137427, '드니 빌뇌브', '/zdDx9Xs93UIrJFWYApYR28J8M6b.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '드니 빌뇌브');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 693134 AND d.name = '드니 빌뇌브';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8uUU2pxm6IYZw8UgnKJyx7Dqwu9.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 693134;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xOMo8BRK7PfcJv9JCnx7s5hj0PX.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 693134;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (155, '다크 나이트', '2008-07-16', '이 도시에 정의는 죽었다', '범죄와 부정부패를 제거하여 고담시를 지키려는 배트맨. 그는 짐 고든 형사와 패기 넘치는 고담시 지방 검사 하비 덴트와 함께 도시를 범죄 조직으로부터 영원히 구원하고자 한다. 세 명의 의기투합으로 위기에 처한 악당들이 모인 자리에 보라색 양복을 입고 얼굴에 짙게 화장을 한 괴이한 존재가 나타나 배트맨을 죽이자는 사상 초유의 제안을 한다. 그는 바로 어떠한 룰도, 목적도 없는 사상 최악의 악당 미치광이 살인광대 조커. 배트맨을 죽이고 고담시를 끝장내버리기 위한 조커의 광기 어린 행각에 도시는 혼란에 빠지는데...', 152, '15', 'RELEASED', 191.301000, 8.500000, 1004558444, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 155 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 155 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 155 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 155 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3894, '크리스찬 베일', '/7Pxez9J8fuPd2Mn9kex13YALrCQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스찬 베일');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruce Wayne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 155 AND a.name = '크리스찬 베일';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1810, '히스 레저', '/p2z2bURSg7nuMsN9P2s61e2RvNz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '히스 레저');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 155 AND a.name = '히스 레저';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6383, '에런 엑하트', '/6rI3cYhdxOaOFSRB4C29MalpwDC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에런 엑하트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Harvey Dent', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 155 AND a.name = '에런 엑하트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3895, '마이클 케인', '/bVZRMlpjTAO2pJK6v90buFgVbSW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 케인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alfred', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 155 AND a.name = '마이클 케인';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1579, '메기 질렌할', '/vsfkWdYWmA9CpzMHTJzrFxlDnEZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '메기 질렌할');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rachel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 155 AND a.name = '메기 질렌할';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 525, '크리스토퍼 놀란', '/xuAIuYSmsUzKlUMBFGVZaWsY3DZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스토퍼 놀란');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 155 AND d.name = '크리스토퍼 놀란';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/f6dNinWX8rBM79JXKcShkfSh2oA.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 155;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oOv2oUXcAaNXakRqUPxYq5lJURz.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 155;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (671, '해리 포터와 마법사의 돌', '2001-11-16', '마법이 시작된다', '해리 포터는 위압적인 버논 숙부와 냉담한 이모 페투니아, 욕심 많고 버릇없는 사촌 더즐리 밑에서 갖은 구박을 견디며 계단 밑 벽장에서 생활한다. 이모네 식구들 역시 해리와의 동거가 불편하기는 마찬가지. 이모 페투니아에겐 해리가 이상한 언니 부부에 관한 기억을 떠올리게 만드는 달갑지 않은 존재다. 11살 생일이 며칠 앞으로 다가왔지만 한번도 생일파티를 치르거나 제대로 된 생일선물을 받아 본 적이 없는 해리로서는 특별히 신날 것도 기대 할 것도 없다. 11살 생일을 며칠 앞둔 어느 날 해리에게 초록색 잉크로 쓰여진 한 통의 편지가 배달된다. 그 편지의 내용은 다름 아닌 해리의 11살 생일을 맞이하여 호그와트에서 보낸 입학 초대장이었다. 그리고 해리의 생일을 축하하러 온 거인 해그리드는 해리가 모르고 있었던 해리의 진정한 정체를 알려주는데...', 152, 'All', 'RELEASED', 185.627000, 7.914000, 976475550, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 671 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 671 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10980, '다니엘 래드클리프', '/iPg0J9UzAlPj1fLEJNllpW9IhGe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다니엘 래드클리프');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Harry Potter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 671 AND a.name = '다니엘 래드클리프';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10989, '루퍼트 그린트', '/iFlkpTaOF6fGLqxz8b0PhI0i0zN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루퍼트 그린트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ron Weasley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 671 AND a.name = '루퍼트 그린트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10990, '엠마 왓슨', '/A14lLCZYDhfYdBa0fFRpwMDiwRN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '엠마 왓슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hermione Granger', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 671 AND a.name = '엠마 왓슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 194, '리처드 해리스', '/lCvcVMuxrg1f5A8OMqY9AqkkcZR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리처드 해리스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Albus Dumbledore', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 671 AND a.name = '리처드 해리스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10993, '톰 펠튼', '/etmtUBzJ1i1XJTLS6MkotJFE1se.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 펠튼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Draco Malfoy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 671 AND a.name = '톰 펠튼';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 10965, '크리스 콜럼버스', '/yCyEz90NqjEXKZ7HYcEhDXlLlPc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스 콜럼버스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 671 AND d.name = '크리스 콜럼버스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/unEtC8uWn2lcQLnwKG9PZJX0h0c.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 671;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hziiv14OpD73u9gAak4XDDfBKa2.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 671;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (360778, 'くノ一忍法帖 IV 忠臣蔵秘抄', '1994-03-24', '', '', 79, '', 'RELEASED', 161.050000, 3.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 360778 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1467439, 'Makiko Ueno', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Makiko Ueno');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 360778 AND a.name = 'Makiko Ueno';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1325619, 'Toshihide Wakamatsu', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Toshihide Wakamatsu');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 360778 AND a.name = 'Toshihide Wakamatsu';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1802089, 'Nanae Shindo', '/tpXlG5Bykc4D2zV5ofSgf0sL23W.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nanae Shindo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 360778 AND a.name = 'Nanae Shindo';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1138028, 'Ryo Narushima', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ryo Narushima');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 360778 AND a.name = 'Ryo Narushima';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1512633, 'Sayoko Yoda', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sayoko Yoda');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 360778 AND a.name = 'Sayoko Yoda';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1274107, '津島勝', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '津島勝');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 360778 AND d.name = '津島勝';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7TyWl7VX3dvKxPJUTsu4h9Yh8Az.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 360778;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tcn8pfSvqntCHrjgHRYlP7b8pUX.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 360778;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (122, '반지의 제왕: 왕의 귀환', '2003-12-17', '곤도르의 진정한 왕이 돌아왔다', '사우론이 인간들의 마지막 요새인 곤도르를 향해 야욕을 드러내고 있는 한편, 아라곤은 쇠락해가고 있는 곤도르의 재건을 위해 왕위 계승을 신중하게 결정지어야만 하는 상황. 이제 중간대륙의 미래는 그의 어깨에 달려있는 것. 사우론이 이끄는 어둠의 군대와의 마지막 전투를 위해 간달프는 곤도르에 흩어져 있던 병사들을 모으고, 로한의 왕 세오덴에게 도움을 받기도 하지만 사우론의 군대에 비하면 열세를 면치 못한다. 그러나 그들은 중간대륙을 사우론의 야욕으로부터 지키려는 사명감과, 마지막 반지 운반자에게 임무를 끝낼 기회를 주기 위해 어둠의 군대를 향해 돌진하게 되는데...', 199, '12', 'RELEASED', 177.661000, 8.500000, 1118888979, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 122 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 122 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 122 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 109, '일라이저 우드', '/7UKRbJBNG7mxBl2QQc5XsAh6F8B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '일라이저 우드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frodo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122 AND a.name = '일라이저 우드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1327, '이안 맥켈런', '/5cnnnpnJG6TiYUSS7qgJheUZgnv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이안 맥켈런');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gandalf', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122 AND a.name = '이안 맥켈런';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 110, '비고 모텐슨', '/vH5gVSpHAMhDaFWfh0Q7BG61O1y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '비고 모텐슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Aragorn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122 AND a.name = '비고 모텐슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1328, '숀 애스틴', '/ywH1VvdwqlcnuwUVr0pV0HUZJQA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '숀 애스틴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sam', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122 AND a.name = '숀 애스틴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1333, '앤디 서키스', '/eNGqhebQ4cDssjVeNFrKtUvweV5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앤디 서키스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gollum / Smeagol', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122 AND a.name = '앤디 서키스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 108, '피터 잭슨', '/bNc908d59Ba8VDNr4eCcm4G1cR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피터 잭슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 122 AND d.name = '피터 잭슨';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/n8BPIRqvj1SdTRND828ANXhmSng.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 122;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5JrZAtyk3LwiiAWLW0kwz41XZJC.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 122;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (799583, '더 미니스트리 오브 언젠틀맨리 워페어', '2024-04-18', '역사상 최초의 특수부대 임무를 발견하라.', '제2차 세계 대전 중에 일어난 영국 육군은 적진 뒤에 있는 나치 세력에 대항하는 임무를 수행할 유능한 군인들의 그룹을 배정하게 된다. 이 영화는 영국의 제2차 세계 대전 비밀 조직인 특수 작전 집행부에 대한 실화이며, 윈스턴 처칠이 창설한 이 조직의 독일군에 대한 변화무쌍한 전쟁은 전쟁의 방향을 바꾸는데 도움을 주었고 현대적인 비밀 작전(블랙 오퍼레이션)을 탄생시키게 된다.', 120, '', 'RELEASED', 174.340000, 7.129000, 27450915, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 799583 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 799583 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 799583 AND g.name = '전쟁';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 73968, '헨리 카빌', '/iWdKjMry5Pt7vmxU7bmOQsIUyHa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헨리 카빌');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gus March-Phillips', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 799583 AND a.name = '헨리 카빌';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1222992, '에이사 곤살레스', '/w2pZ8gLqZNguj8cqrDGbMw2Ibj0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에이사 곤살레스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marjorie Stewart', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 799583 AND a.name = '에이사 곤살레스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 64295, '앨런 리치슨', '/wdmLUSPEC7dXuqnjTM4NgbjvTKk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앨런 리치슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anders Lassen', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 799583 AND a.name = '앨런 리치슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1807132, '헨리 골딩', '/iiTLFGXgMrobajYvgpvZxQNqFvy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헨리 골딩');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Freddy Alvarez', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 799583 AND a.name = '헨리 골딩';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2130, '케리 엘위스', '/9P0JD0LC4j3Y43s6TGM8rOqmbwb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케리 엘위스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brigadier Gubbins ''M''', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 799583 AND a.name = '케리 엘위스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 956, '가이 리치', '/9pLUnjMgIEWXi0mlHYzie9cKUTD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '가이 리치');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 799583 AND d.name = '가이 리치';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/y3vmrUSHS8T7rEcyIKzQT9zos3a.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 799583;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/s5znBQmprDJJ553IMQfwEVlfroH.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 799583;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (346698, '바비', '2023-07-19', '바비는 무엇이든 될 수 있어', '원하는 무엇이든 될 수 있는 바비랜드에서 살아가던 바비가 현실 세계와 이어진 포털의 균열을 발견하게 되고, 이를 해결하기 위해 켄과 예기치 못한 여정을 떠나면서 펼쳐지는 이야기', 114, '12', 'RELEASED', 184.978000, 7.007000, 1445638421, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 346698 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 346698 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 234352, '마고 로비', '/euDPyqLnuwaWMHajcU3oZ9uZezR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마고 로비');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Barbie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 346698 AND a.name = '마고 로비';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 30614, '라이언 고슬링', '/lyUyVARQKhGxaxy0FbPJCQRpiaW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '라이언 고슬링');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ken', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 346698 AND a.name = '라이언 고슬링';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 59174, '아메리카 페레라', '/7F84Lh2lKpvkM3EiOvqqvlOmw93.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아메리카 페레라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gloria', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 346698 AND a.name = '아메리카 페레라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1767250, '아리아나 그린블랫', '/3Y3Xk8jwE1Ju0zIn31zBMuD7Fkn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아리아나 그린블랫');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sasha', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 346698 AND a.name = '아리아나 그린블랫';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1455336, '이사 레이', '/yGnwkmwA0hJsVx2qzImxsoRSelS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이사 레이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Barbie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 346698 AND a.name = '이사 레이';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 45400, '그레타 거윅', '/3H0xzU12GTNJyQTpGysEuI9KyiQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '그레타 거윅');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 346698 AND d.name = '그레타 거윅';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/h3mUJ9WEJ8PzA450ad4hrjsaiqG.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 346698;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ctMserH8g2SeOAnCw5gFjdQF8mo.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 346698;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (414906, '더 배트맨', '2022-03-01', '영웅이 될 것인가, 악당이 될 것인가', '지난 2년 간 고담시의 어둠 속에서 범법자들을 응징하며 배트맨으로 살아온 브루스 웨인. 알프레드와 제임스 고든 경위의 도움 아래 그는 도시의 부패한 공직자들과 고위 관료들 사이에서 복수의 화신으로 활약한다. 고담의 시장 선거를 앞두고 고담의 엘리트 집단을 목표로 잔악한 연쇄살인을 저지르는 수수께끼 킬러 리들러가 나타나자, 최고의 탐정 브루스 웨인이 수사에 나서고 남겨진 단서를 풀어가며 캣우먼, 펭귄, 카마인 팔코네, 리들러를 차례대로 만난다. 사이코 범인의 미스터리를 수사하면서 그 모든 증거가 자신을 향한 의도적인 메시지였음을 깨닫고,  리들러에게 농락 당한 배트맨은 광기에 사로잡힌다. 범인의 무자비한 계획을 막고 오랫동안 고담시를 썩게 만든 권력 부패의 고리를 끊어야 하지만, 부모님의 죽음에 얽힌 진실이 밝혀지자 복수와 정의 사이에서 갈등하는데...', 176, '15', 'RELEASED', 184.670000, 7.700000, 771000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 414906 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 414906 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 414906 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11288, '로버트 패틴슨', '/8A4PS5iG7GWEAVFftyqMZKl3qcr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 패틴슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruce Wayne / The Batman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 414906 AND a.name = '로버트 패틴슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 37153, '조이 크래비츠', '/A8Ig9UHh8NSiUGg3xChcoF7749w.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조이 크래비츠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Selina Kyle', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 414906 AND a.name = '조이 크래비츠';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2954, '제프리 라이트', '/yGcuHGW4glqRpOPxgiCvjcren7F.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제프리 라이트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lt. James Gordon', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 414906 AND a.name = '제프리 라이트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 72466, '콜린 파렐', '/5FdalJbrbZ5UCsED5rFrXpvbqJa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '콜린 파렐');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Oz / The Penguin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 414906 AND a.name = '콜린 파렐';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17142, '폴 다노', '/gOD5bO0hKnzzJm7sJeGeEJjfBBw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '폴 다노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Riddler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 414906 AND a.name = '폴 다노';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 32278, '맷 리브스', '/5rA459xpMt6IeJG7ZqvhLbSozEH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '맷 리브스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 414906 AND d.name = '맷 리브스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jicHGaOX5pHs7RKjfexMxvLkwjf.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 414906;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tRS6jvPM9qPrrnx2KRp3ew96Yot.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 414906;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (762509, '무파사: 라이온 킹', '2024-12-18', '하나의 왕좌, 엇갈린 운명', '길을 잃고 혼자가 된 새끼 사자 ‘무파사’는 광활한 야생을 떠돌던 중 왕의 혈통이자 예정된 후계자 ‘타카(스카)’와 우연히 만나게 된다. 마치 친형제처럼 끈끈한 우애를 나누며 함께 자란 ‘무파사’와 ‘타카’는 운명을 개척하기 위해 거대한 여정을 함께 떠난다. 한 치 앞을 알 수 없는 적들의 위협 속에서 두 형제의 끈끈했던 유대에 금이 가기 시작하고 예상치 못한 위기까지 맞닥뜨리게 되는데…', 0, '', 'UPCOMING', 164.037000, 0.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 762509 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 762509 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 762509 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1763709, '에런 피어', '/z2cMMZyWzv5ztT6pFdAAjB3u7CQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에런 피어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mufasa (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762509 AND a.name = '에런 피어';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1344361, '케빈 해리슨 주니어', '/bQC7SUnUiLw2wxnXGYr9tm7wDLW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케빈 해리슨 주니어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Taka (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762509 AND a.name = '케빈 해리슨 주니어';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1074676, '티파니 분', '/9LwqRFdSzxVtnutDUg98YLq0bSz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '티파니 분');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sarabi (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762509 AND a.name = '티파니 분';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 107529, 'Kagiso Lediga', '/nfqx3CqFVsAMelk6ry560SuN7Y0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kagiso Lediga');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Young Rafiki (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762509 AND a.name = 'Kagiso Lediga';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1251835, 'Preston Nyman', '/eidKvLDCRw68tG3CN6fGhvHUnW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Preston Nyman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zazu (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 762509 AND a.name = 'Preston Nyman';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 92784, '배리 젠킨스', '/6nld5eQwiJmuLmyesk4EUeCaoo3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '배리 젠킨스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 762509 AND d.name = '배리 젠킨스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1VUExee8iFohFTwYVi4IOArYyaM.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 762509;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/c6nouvFYnmNO50WQDLcKMI3p0jA.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 762509;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (603692, '존 윅 4', '2023-03-22', '돌아갈 길은 없고, 앞으로 나아갈 길만 있다!', '죽을 위기에서 살아난 존 윅은 최고 회의를 쓰러트릴 방법을 찾아낸다. 비로소 완전한 자유의 희망을 보지만, 빌런 그라몽 후작과 전 세계의 최강 연합은 존 윅의 오랜 친구까지 적으로 만들어 버리고, 새로운 위기에 놓인 존 윅은 최후의 반격을 준비하는데...', 170, '18', 'RELEASED', 172.422000, 7.700000, 440157245, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 603692 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 603692 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 603692 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6384, '키아누 리브스', '/4D0PpNI0kmP58hgrwGC3wCjxhnm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키아누 리브스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'John Wick', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 603692 AND a.name = '키아누 리브스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1341, '견자단', '/hTlhrrZMj8hZVvD17j4KyAFWBHc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '견자단');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Caine', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 603692 AND a.name = '견자단';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 137905, '빌 스카스가드', '/wGQidITqyDl4Igmq9TCQjRpegsk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빌 스카스가드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marquis', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 603692 AND a.name = '빌 스카스가드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6972, '이언 맥셰인', '/rteBJYNgD1yGsHg2HGZAIrYHz1t.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이언 맥셰인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Winston', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 603692 AND a.name = '이언 맥셰인';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2975, '로렌스 피시번', '/aBRISux1AGCqkFNTKHYfLcJunWA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로렌스 피시번');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bowery King', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 603692 AND a.name = '로렌스 피시번';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 40644, '채드 스타헬스키', '/eRCryGwKDH4XqUlrdkERmeBWPo8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '채드 스타헬스키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 603692 AND d.name = '채드 스타헬스키';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/h3LsdSBzhRnBebz4BTpAhh63PD3.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 603692;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7I6VUdPj6tQECNHdviJkUHD2u89.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 603692;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1337309, '방콕 브레이킹: 천국과 지옥', '2024-09-26', '', '한 응급 구조대원이 목숨을 위협하는 방콕의 지하 세계 갱단과 엮이게 되면서 생존을 위한 사투를 벌인다.', 147, '19', 'RELEASED', 182.925000, 6.600000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1337309 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1337309 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1337309 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1337309 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1259384, 'ศุกลวัฒน์ คณารศ', '/v0tNea70dRSyOqC6OtIL8MuWEIq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'ศุกลวัฒน์ คณารศ');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wanchai', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1337309 AND a.name = 'ศุกลวัฒน์ คณารศ';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3875985, 'Atitaya Tribudarak', '/k1qWYWTT38PLWY5HmXv4sOOm8hz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Atitaya Tribudarak');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Meiji', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1337309 AND a.name = 'Atitaya Tribudarak';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1270506, 'Sanya Kunakorn', '/3DQGTDFdAvWMf8XTp8GsOG2VNR1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sanya Kunakorn');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1337309 AND a.name = 'Sanya Kunakorn';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1877887, 'Natthaya Ongsritragul', '/i2EefIqNyCdAn7smey8rxYxOmgj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Natthaya Ongsritragul');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Duangkamol', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1337309 AND a.name = 'Natthaya Ongsritragul';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4466879, 'Day Thaitanium', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Day Thaitanium');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Darlie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1337309 AND a.name = 'Day Thaitanium';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 80733, 'ก้องเกียรติ โขมศิริ', '/dAjEAoTXXpmZ1ZgbJ31fiHejW6b.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'ก้องเกียรติ โขมศิริ');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1337309 AND d.name = 'ก้องเกียรติ โขมศิริ';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/HFtb46fmiNtbYboIuS6vn27LdS.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1337309;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/igtm12Wy9EUlxFeyb4v8bRyuYSY.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1337309;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1025596, 'Blood for Dust', '2024-04-19', '', '', 98, '', 'RELEASED', 172.518000, 5.700000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1025596 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1025596 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1025596 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 59233, 'Scoot McNairy', '/2rF69vkyzpD2MG0T375RYSiBbpe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Scoot McNairy');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cliff', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1025596 AND a.name = 'Scoot McNairy';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 239019, '키트 해링턴', '/htGBMno71BJAEGF3Y9f62MdA3Yt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키트 해링턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ricky', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1025596 AND a.name = '키트 해링턴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6164, 'Josh Lucas', '/fNCvgTrXHG07cPcY7wPz4KtqSfW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Josh Lucas');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'John', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1025596 AND a.name = 'Josh Lucas';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10822, '스티븐 도프', '/wbVVPJVJaI4EXueLCa8D4Un1ezz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스티븐 도프');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gus', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1025596 AND a.name = '스티븐 도프';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 34070, 'Nora Zehetner', '/sMGaRvtMmWorucXAVBIvGElGhnC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nora Zehetner');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Amy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1025596 AND a.name = 'Nora Zehetner';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1043983, 'Rod Blackhurst', '/t6lSuBMhfbZ8itrn7EQkkOHUrJd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Rod Blackhurst');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1025596 AND d.name = 'Rod Blackhurst';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/nvaCnkl8RilLhVAQXPFei0tqkqW.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1025596;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bkENfmxUY3UYsRLizJAhF5IQPvS.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1025596;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (12153, '화이트 칙스', '2004-06-23', '이쁜 것들 다 죽었어!!!', '위장술 하나는 끝내주지만 정작 사건 해결은 못해본 FBI 명물 콤비 마커스(말론 웨이언스)와 케빈(숀 웨이언스)은 순간의 착각으로 거물급 마약상을 놓치는 일대 실수를 저지르고 만다. FBI에서 퇴출 위기에 몰린 둘은 얼떨결에 자선파티 참석을 위해 LA에 오는 호텔재벌 윌슨가 자매의 모두가 꺼려하는 경호를 떠맡게 된다. 하지만 첫날부터 호틀갑 자매의 귀하신 얼굴에 상처를 내는 대형사고(?)를 치고 마는데…  FBI고 뭐고 발각되면 인생 끝장이다! 힙 올리고 가슴 더 키워!!!  길길이 날뛰는 자매 앞에 이들이 살아남는 방법은 딱 하나! ‘뽕 넣고 찍어 발라서라도’ 그녀들로 변신, 그녀들 대신 사교계를 휘어잡는 것! 이제 풍만한 가슴에 쭉빠진 바디라인의 금발미녀가 된 그들, 아니 그녀들은 알고보면 첩보전을 능가하는 칵테일 파티와 총격전보다 살벌한 패션쇼 등 재벌계의 엄청난 사생활에 말려들기 시작하는데…?!', 109, '', 'RELEASED', 183.205000, 6.954000, 113100000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 12153 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 12153 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 35690, '숀 웨이언스', '/Cat25uXhB680QLmvg9Tu16W563.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '숀 웨이언스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kevin Copeland', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12153 AND a.name = '숀 웨이언스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 9562, '말런 웨이언스', '/r0Ol5exKLKYXEbVqLTHxX64GvIr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '말런 웨이언스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marcus Copeland', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12153 AND a.name = '말런 웨이언스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 13936, 'Frankie Faison', '/3717JOXK2Z8qelfyvScDGimfFBf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Frankie Faison');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elliott Gordon', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12153 AND a.name = 'Frankie Faison';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 53256, '테리 크루즈', '/pxTY4SglLo5hFcMH00MxPeC5u55.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '테리 크루즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Latrell Spencer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12153 AND a.name = '테리 크루즈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 58953, 'Faune Chambers Watkins', '/iP1x9TsE9RzluXQjTtY0Ujxhp9r.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Faune Chambers Watkins');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gina Copeland', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12153 AND a.name = 'Faune Chambers Watkins';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 35689, 'Keenen Ivory Wayans', '/e9XRdXolDV8RjGPHPXH6IISDTSP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Keenen Ivory Wayans');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 12153 AND d.name = 'Keenen Ivory Wayans';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4caC5bNljJiakF2r18Bb3j4URAe.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 12153;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/di47xqYMCYpjqwnqNlO17X5qXMX.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 12153;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (975022, '유아 킬링 미', '2023-04-07', '', '꿈에 그리던 아이비리그 대학교 대기자 명단에 올라와 있는 이든은 고등학교 졸업을 앞두고 친구 자라와 함께 대학교에 입학하기 위해 계획을 세운다. 부유하고 인기 있는 동급생 슈로더에게 접근하여 그의 국회의원 아버지에게 추천서를 받는 것이다. 하지만 이든의 요청에도 ''슈로더의 반응은 시큰둥하고 이든은 마지못해  슈로더의 저택에서 열리는 파티에 참석하기로 한다. 파티에서 슈로더의 친구 구치가 기괴한 행동을 하는 것을 목격하고, 그의 휴대폰을 손에 넣게 된다. 하지만 이 휴대폰에서 실종된 동급생의 흔적을 발견하면서 예상치 못한 상황에 휘말리게 되는데...', 95, '', 'RELEASED', 180.949000, 5.900000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 975022 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 975022 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 975022 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1355176, 'McKaley Miller', '/qOOtarE3Qo42LySHveOPl38s1bs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'McKaley Miller');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eden', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 975022 AND a.name = 'McKaley Miller';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20212, '더멋 멀로니', '/oWQFwlkRWl9xmuRDI5pHu4ZKnL8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '더멋 멀로니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Congressman Schroder', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 975022 AND a.name = '더멋 멀로니';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8256, 'Anne Heche', '/65LVuA01bmKCmr8yqY2Ae3IgeC4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Anne Heche');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Astrid', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 975022 AND a.name = 'Anne Heche';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2648357, 'Wil Deusner', '/uIo2SXuel3aeVRq6NX3AivuWCo5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Wil Deusner');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gooch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 975022 AND a.name = 'Wil Deusner';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2898008, 'Brice Anthony Heller', '/df4FcjRlRoqE8Cxejs7IHAckiMD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Brice Anthony Heller');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Schroder', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 975022 AND a.name = 'Brice Anthony Heller';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2883290, 'Jerren Lauder', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jerren Lauder');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 975022 AND d.name = 'Jerren Lauder';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 3546860, 'Beth Hanna', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Beth Hanna');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 975022 AND d.name = 'Beth Hanna';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tAnwQKYkRlXS6Lgaq5XQ7JqS58x.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 975022;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/cX3Vs8pVD2FbFuFPkF7OMgswmq7.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 975022;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1066262, '더 컨버트', '2024-03-14', '평화를 위한 싸움. 전쟁에 휩싸인 마음.', '병사에서 평신도 설교자로 변신한 먼로는 첫 번째 영국 이주민들에게 설교하기 위해 뉴질랜드로 오지만, 강력한 추장 마이아누이에 의해 다른 목적을 섬기도록 변화된다.', 119, '', 'RELEASED', 181.344000, 6.200000, 692018, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1066262 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1066262 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 529, '가이 피어스', '/vTqk6Nh3WgqPubkS23eOlMAwmwa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '가이 피어스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Thomas Munro', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1066262 AND a.name = '가이 피어스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1622074, 'Tioreore Ngatai-Melbourne', '/ap57F4wZtopJ38ORdjleC0yVg6R.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tioreore Ngatai-Melbourne');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rangimai', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1066262 AND a.name = 'Tioreore Ngatai-Melbourne';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1254271, 'Antonio Te Maioha', '/zqefmIKmQK4z3sixxJIX0haLY7n.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Antonio Te Maioha');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maianui', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1066262 AND a.name = 'Antonio Te Maioha';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 28744, 'Jacqueline McKenzie', '/hH93PT4yKLtrXyBVw7AF7DbCh3p.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jacqueline McKenzie');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Charlotte', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1066262 AND a.name = 'Jacqueline McKenzie';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1345307, 'Te Kohe Tuhaka', '/uZOpFSMX3XRuU6JOja3MKZHlaCP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Te Kohe Tuhaka');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Captive Warrior', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1066262 AND a.name = 'Te Kohe Tuhaka';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 7256, '리 타마호리', '/lkivtT9U7gLXVnhq5qF9GL3k7NN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '리 타마호리');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1066262 AND d.name = '리 타마호리';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mR8sjStC6M4kQRC7cPrCfv4XzgD.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1066262;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tqSg1hHiSWhHAhnjDhhevaFGsP0.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1066262;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (475557, '조커', '2019-10-01', '내 인생이 비극인 줄 알았는데, 코미디였어', '홀어머니와 사는 아서 플렉은 코미디언을 꿈꾸지만 그의 삶은 좌절과 절망으로 가득 차 있다. 광대 아르바이트는 그에게 모욕을 가져다주기 일쑤고, 긴장하면 웃음을 통제할 수 없는 신경병 증세는 그를 더욱 고립시킨다. 정부 예산 긴축으로 인해 정신과 약물을 지원하던 공공의료 서비스마저 없어져 버린 어느 날, 아서는 지하철에서 시비를 걸어온 증권사 직원들에게 얻어맞던 와중에 동료가 건네준 권총으로 그들을 쏴 버리고 만다. 군중들은 지배계급에 대한 저항의 아이콘이 된 그를 추종하기 시작하며 광대 마스크로 얼굴을 가리고 거리로 쏟아져 나오기 시작하는데...', 122, '15', 'RELEASED', 180.128000, 8.100000, 1078958629, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 475557 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 475557 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 475557 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 73421, '호아킨 피닉스', '/u38k3hQBDwNX0VA22aQceDp9Iyv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '호아킨 피닉스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Arthur Fleck', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 475557 AND a.name = '호아킨 피닉스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 380, '로버트 드 니로', '/cT8htcckIuyI1Lqwt1CvD02ynTh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 드 니로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Murray Franklin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 475557 AND a.name = '로버트 드 니로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1545693, '재지 비츠', '/ijrT4pvALvxU0gphea4YxDnDh6e.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '재지 비츠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sophie Dumond', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 475557 AND a.name = '재지 비츠';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4432, '프랜시스 콘로이', '/aJRQAkO24L6bH8qkkE5Iv1nA3gf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '프랜시스 콘로이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Penny Fleck', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 475557 AND a.name = '프랜시스 콘로이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16841, '브래트 컬렌', '/4P6TsRcnr9MRbXlCdHitulGM5LT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브래트 컬렌');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Thomas Wayne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 475557 AND a.name = '브래트 컬렌';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 57130, '토드 필립스', '/A6FPht87DiqXzp456WjakLi2AtP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '토드 필립스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 475557 AND d.name = '토드 필립스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wrCwH6WOvXQvVuqcKNUrLDCDxdw.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 475557;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gZWl93sf8AxavYpVT1Un6EF3oCj.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 475557;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1147400, 'Miraculous World : Paris, Les Aventures de Toxinelle et Griffe Noire', '2023-10-21', '', '', 48, 'ALL', 'RELEASED', 140.042000, 7.191000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1147400 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1147400 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1147400 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1147400 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1147400 AND g.name = '가족';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1762588, 'Annouck Hautbois', '/5D66aDzc8QrkNtdeFb0nsFku6Zh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Annouck Hautbois');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marinette / Ladybug / Shadybug (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1147400 AND a.name = 'Annouck Hautbois';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1558832, 'Benjamin Bollen', '/qAvG7VqmZp6s2XE3KZooEfYDfW9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Benjamin Bollen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Adrien Agreste / Cat Noir / Claw Noir (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1147400 AND a.name = 'Benjamin Bollen';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1373143, 'Marie Nonnenmacher', '/b0F4vbkVIWEk849tWKL04WcLJ6S.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marie Nonnenmacher');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tikki (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1147400 AND a.name = 'Marie Nonnenmacher';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1762589, 'Thierry Kazazian', '/7sqA1L6pwKmmBccMdmzNJwlXBWk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Thierry Kazazian');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Plagg (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1147400 AND a.name = 'Thierry Kazazian';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1762590, 'Fanny Bloc', '/7qcsMqQNNZ0Im1j0i9EUTBDdjaP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Fanny Bloc');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alya Césaire / Ubiquity / Scarabella (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1147400 AND a.name = 'Fanny Bloc';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1565301, 'Thomas Astruc', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Thomas Astruc');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1147400 AND d.name = 'Thomas Astruc';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4wHrXw9zB4wsibWaAPDkvjNGPnQ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1147400;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hU1Q9YVzdYhokr8a9gLywnSUMlN.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1147400;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (829557, '365일: 오늘', '2022-04-26', '', '재결합하여 그 어느 때보다도 열렬한 관계를 이어가는 라우라와 마시모. 하지만 마시모의 가족 관계, 그리고 라우라의 마음을 얻으려는 수수께끼의 남자로 인해 삶이 복잡해진다.', 111, '19', 'RELEASED', 171.055000, 5.900000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 829557 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 829557 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2511949, 'Anna-Maria Sieklucka', '/c5Rhg0pewnANvLfx2fDXKTLawTb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Anna-Maria Sieklucka');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Laura Torricelli', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 829557 AND a.name = 'Anna-Maria Sieklucka';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2349355, '미켈레 모로네', '/90IF4aQKrr7zXmtcsNAYbrvcIg2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미켈레 모로네');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Massimo Torricelli / Adriano Torricelli', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 829557 AND a.name = '미켈레 모로네';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3090060, '시모네 수신나', '/ave6292vdlcySUKee9T3oMUVhvY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시모네 수신나');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marcelo ''Nacho'' Matos', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 829557 AND a.name = '시모네 수신나';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1637039, 'Magdalena Lamparska', '/miJQ7KIOIkANmQ957Ujfe4xL5cz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Magdalena Lamparska');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Olga', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 829557 AND a.name = 'Magdalena Lamparska';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1616974, 'Otar Saralidze', '/fqY7p0kotc9uuwB7UF3aYXXmY0R.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Otar Saralidze');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Domenico', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 829557 AND a.name = 'Otar Saralidze';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 88253, 'Barbara Białowąs', '/vhf5l82ItqfVTwioqlZv1ab0v19.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Barbara Białowąs');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 829557 AND d.name = 'Barbara Białowąs';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1192152, '토마시 만데스', '/wmYwPfWSXfjXpwvljvXEX8h0wfC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '토마시 만데스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 829557 AND d.name = '토마시 만데스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ee7qhbFyw4adAHgDTAELuiskkht.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 829557;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zBG5Mg29NH9xxpWMMG7BIvKwYhL.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 829557;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (672, '해리 포터와 비밀의 방', '2002-11-13', '어둠의 세력이 호그와트로 돌아왔다', '해리 포터에겐 이번 여름방학이 별로 즐겁질 못했다. 마법이라면 질색을 하는 페투니아 이모와 버논 이모부의 구박도 그렇지만, 무엇보다 속상한 건 단짝이었던 론 위즐리와 헤르미온느 그레인저가 그 사이 자신을 까맣게 잊었는지 자신의 편지에 답장 한 통 없다는 것.  그러던 어느날 꼬마 집요정 도비가 해리의 침실에 나타나 뜻밖의 얘기를 한다. 호그와트 마법학교로 돌아가면 무서운 일을 당할 거라는 것. 도비는 해리를 학교에 못 가게 하려고 자신이 여태까지 론과 헤르미온느의 답장을 가로채 왔음을 고백한다. 그러나 도비와 더즐리 가족의 방해에도 불구, 해리는 론과 그의 형제들이 타고 온 하늘을 나는 자동차를 타고 이모집을 탈출, 따뜻한 가족애가 넘치는 론의 집으로 가는데...', 160, 'All', 'RELEASED', 161.407000, 7.700000, 876688482, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 672 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 672 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10980, '다니엘 래드클리프', '/iPg0J9UzAlPj1fLEJNllpW9IhGe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다니엘 래드클리프');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Harry Potter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 672 AND a.name = '다니엘 래드클리프';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10989, '루퍼트 그린트', '/iFlkpTaOF6fGLqxz8b0PhI0i0zN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루퍼트 그린트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ron Weasley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 672 AND a.name = '루퍼트 그린트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10990, '엠마 왓슨', '/A14lLCZYDhfYdBa0fFRpwMDiwRN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '엠마 왓슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hermione Granger', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 672 AND a.name = '엠마 왓슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11181, '케네스 브래너', '/AbCqqFxNi5w3nDUFdQt0DGMFh5H.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케네스 브래너');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gilderoy Lockhart', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 672 AND a.name = '케네스 브래너';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 13014, '토비 존스', '/1qNisdp4f1KstdfvAgYXMdrhwfk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '토비 존스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dobby (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 672 AND a.name = '토비 존스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 10965, '크리스 콜럼버스', '/yCyEz90NqjEXKZ7HYcEhDXlLlPc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스 콜럼버스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 672 AND d.name = '크리스 콜럼버스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sfs4U6XpiKFngbbSzrpZbkM1ySI.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 672;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yHzyPJrVqlTySQ9mc379yxrLBYQ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 672;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (447365, '가디언즈 오브 갤럭시 Volume 3', '2023-05-03', '이 느낌 그대로, 다시 한번 볼륨 업!', '가모라를 잃고 슬픔에 빠져 있던 피터 퀼이 위기에 처한 은하계와 동료를 지키기 위해 다시 한 번 가디언즈 팀과 힘을 모으고, 성공하지 못할 경우 그들의 마지막이 될지도 모르는 미션에 나서는 이야기.', 150, '12', 'RELEASED', 153.910000, 8.000000, 845600000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 447365 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 447365 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 447365 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 73457, '크리스 프랫', '/6DdoTgW9jdJwDmVFZRP8D0AtVFs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 프랫');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Peter Quill / Star-Lord', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447365 AND a.name = '크리스 프랫';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8691, '조 샐다나', '/snQ1rfO9Bb2LRG9MAOQnn3JXVHy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조 샐다나');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gamora', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447365 AND a.name = '조 샐다나';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 543530, '데이브 바티스타', '/ymn6iQBJbQZN6BYI60YJDXVP4gF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이브 바티스타');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Drax', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447365 AND a.name = '데이브 바티스타';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 543261, '카렌 길런', '/52kqB0Bei1TaTBx2rABrijVhhTG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카렌 길런');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nebula', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447365 AND a.name = '카렌 길런';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 139820, '폼 클레멘티에프', '/hfUKAI2kXTMMWjno0i4sLPJud5N.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '폼 클레멘티에프');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mantis', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447365 AND a.name = '폼 클레멘티에프';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 15218, '제임스 건', '/pnKqZub3IlKYbyH9RRTMDOoqEn0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '제임스 건');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 447365 AND d.name = '제임스 건';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zK0FTsXvkWVS3yubZkbenbAFcnY.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 447365;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5YZbUmjbMa3ClvSW1Wj3D6XGolb.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 447365;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (360920, '그린치', '2018-11-08', '크리스마스 훔치기 대작전이 시작된다!', '모두가 행복한 크리스마스를 참을 수 없는 그린치는 크리스마스를 훔치기 위해 산타가 되기로 결심한다. 그린치는 만능집사 맥스, 덩치만 큰 소심 루돌프 프레드와 함께 슈퍼배드한 크리스마스 훔치기 대작전에 돌입하는데…', 85, 'ALL', 'RELEASED', 146.471000, 6.900000, 508600000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 360920 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 360920 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 360920 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 360920 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 71580, '베네딕트 컴버배치', '/fBEucxECxGLKVHBznO0qHtCGiMO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '베네딕트 컴버배치');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Grinch (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 360920 AND a.name = '베네딕트 컴버배치';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 80591, '라시다 존스', '/jjp33eRM6oavyesW0UM6XBCxQSa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '라시다 존스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Donna Lou Who (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 360920 AND a.name = '라시다 존스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 77330, '키넌 톰슨', '/vHPhDGc1om91TzoIQ4zMscpNmxF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키넌 톰슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bricklebaum (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 360920 AND a.name = '키넌 톰슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1952744, 'Cameron Seely', '/btT8UCFUlhDR1NE4bFc2kj9gYWF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Cameron Seely');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cindy Lou Who (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 360920 AND a.name = 'Cameron Seely';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 14730, '안젤라 랜즈베리', '/oOu8IaWtrn6d0NEbsWtZPnpfohv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '안젤라 랜즈베리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mayor McGerkle (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 360920 AND a.name = '안젤라 랜즈베리';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 61300, 'Yarrow Cheney', '/3j0F9ViGOUdGbszLKWKgK1hvWbp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Yarrow Cheney');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 360920 AND d.name = 'Yarrow Cheney';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 20503, 'Scott Mosier', '/oEQcuNy9uYGMNq3e49VSJ7oPsJw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Scott Mosier');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 360920 AND d.name = 'Scott Mosier';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/clJYtRBUhDtvKhPk2HNfXouviKF.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 360920;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5lWIYxYEqWi8j3ZloxXntw3ImBo.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 360920;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1269108, 'Santet Segoro Pitu', '2024-11-07', '', '', 94, '', 'RELEASED', 160.562000, 6.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1269108 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1269108 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1825362, 'Ari Irham', '/1GL3vMkA2MedpOskKMsNXTmZ2GO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ari Irham');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ardi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1269108 AND a.name = 'Ari Irham';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1789946, 'Sandrinna Michelle', '/jfRc9ZU10uLgceofOu34lBBn0Hn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sandrinna Michelle');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Syifa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1269108 AND a.name = 'Sandrinna Michelle';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1157417, 'Christian Sugiono', '/rnrSWoQRpGZUtTdHzAOXOyHndvF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Christian Sugiono');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sucipto', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1269108 AND a.name = 'Christian Sugiono';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1680930, 'Sara Wijayanto', '/m6VzEOqLeMwpxIGBlBCZLUsr64T.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sara Wijayanto');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marni', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1269108 AND a.name = 'Sara Wijayanto';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4609472, 'Agus Firmansyah', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Agus Firmansyah');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rustam', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1269108 AND a.name = 'Agus Firmansyah';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2411247, 'Tommy Dewo', '/lI4Wrt9EESuiXUNG3XHBD30BFHN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Tommy Dewo');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1269108 AND d.name = 'Tommy Dewo';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9s4esglPlA8FdVDhfrvzxudkdEd.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1269108;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/AorubnsLNfPEx136uxxFQAqrF0g.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1269108;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1269108, 'Santet Segoro Pitu', '2024-11-07', '', '', 94, '', 'RELEASED', 160.562000, 6.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1269108 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1269108 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1825362, 'Ari Irham', '/1GL3vMkA2MedpOskKMsNXTmZ2GO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ari Irham');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ardi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1269108 AND a.name = 'Ari Irham';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1789946, 'Sandrinna Michelle', '/jfRc9ZU10uLgceofOu34lBBn0Hn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sandrinna Michelle');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Syifa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1269108 AND a.name = 'Sandrinna Michelle';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1157417, 'Christian Sugiono', '/rnrSWoQRpGZUtTdHzAOXOyHndvF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Christian Sugiono');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sucipto', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1269108 AND a.name = 'Christian Sugiono';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1680930, 'Sara Wijayanto', '/m6VzEOqLeMwpxIGBlBCZLUsr64T.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sara Wijayanto');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marni', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1269108 AND a.name = 'Sara Wijayanto';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4609472, 'Agus Firmansyah', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Agus Firmansyah');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rustam', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1269108 AND a.name = 'Agus Firmansyah';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2411247, 'Tommy Dewo', '/lI4Wrt9EESuiXUNG3XHBD30BFHN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Tommy Dewo');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1269108 AND d.name = 'Tommy Dewo';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9s4esglPlA8FdVDhfrvzxudkdEd.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1269108;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/AorubnsLNfPEx136uxxFQAqrF0g.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1269108;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (923667, '구룡성채: 무법지대', '2024-04-23', '압도하라! 전율의 액션 사이클론', '1980년대 홍콩 내 위험하고 불가사의했던 무법지대, 구룡성채! 악명 높은 갱단에게서 도망치려던 ''진락군''은 우연히 구룡성채로 도망가게 되고,  성채의 일원들의 도움을 받아 목숨을 건진다. 그 후 ''진락군''은 성채의 일원이 되어 생애 첫 보금자리를 가지게 되는데...  행복도 잠시, 오랫동안 성채를 노린 악당들이 들이닥치고 그들은 최후의 전쟁을 시작하게 된다.', 125, '15', 'NOW_PLAYING', 175.936000, 6.600000, 95335412, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 923667 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 923667 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 923667 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 923667 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 89409, '임봉', '/Ak40P6TWthdQ9diRki5RIcJ6r95.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '임봉');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chan Lok-kwun (Lok)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 923667 AND a.name = '임봉';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 78875, '고천락', '/yQuDBTzm7xWlJICNvl20OmcJP80.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '고천락');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cyclone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 923667 AND a.name = '고천락';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2217481, '류준겸', '/12UjFLBUTopW0O9UB9f2TK18dSl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '류준겸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 923667 AND a.name = '류준겸';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1674432, 'Tony Wu', '/bWYyRg8eFxrOdsgzuC1guPtrLoO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tony Wu');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Twelfth Master', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 923667 AND a.name = 'Tony Wu';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1455929, '장문걸', '/k8FKv1WgRQfsJlGi4l3J8YyeMYQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '장문걸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'AV', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 923667 AND a.name = '장문걸';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 93991, '정바오루이', '/5PKTT0o0Sbkuo2m2I9iooOALYug.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '정바오루이');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 923667 AND d.name = '정바오루이';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aUXq8aK2UX1CoQbxUi4fyioPOgH.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 923667;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9juRmk8QjcsUcbrevVu5t8VZy5G.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 923667;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1362961, 'Intercambiadas', '2024-09-27', '', '', 97, '', 'RELEASED', 163.304000, 8.056000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1362961 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 545346, 'Silvia Navarro', '/sfJyujqUl5zgygVXEjHwqf8rKlw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Silvia Navarro');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1362961 AND a.name = 'Silvia Navarro';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2153303, 'Michelle Rodríguez', '/nLuOLXauZhInejLSFqUl18nfoHn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Michelle Rodríguez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1362961 AND a.name = 'Michelle Rodríguez';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 133759, 'Mauricio Islas', '/v0rKtMzI3EjPZyFpTAKX0BZOrBI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mauricio Islas');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1362961 AND a.name = 'Mauricio Islas';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1018058, 'Alejandro Calva', '/zd7yOpxs3vsHgZXmTD3ueydYA6B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alejandro Calva');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1362961 AND a.name = 'Alejandro Calva';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3658307, 'Kaled Acab', '/c4xkpGSXTphRNziOcKKNcVsYJcT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kaled Acab');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1362961 AND a.name = 'Kaled Acab';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1309479, 'Fernando Urdapilleta', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Fernando Urdapilleta');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1362961 AND d.name = 'Fernando Urdapilleta';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/AnvUGHyV21rJOG9KyJojJNHg3nA.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1362961;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ulxlhYuVYzDNwnLt49AYjwUUowZ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1362961;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (361743, '탑건: 매버릭', '2022-05-21', '한순간의 실수도 용납되지 않는 하늘 위, 가장 압도적인 비행이 시작된다', '최고의 파일럿이자 전설적인 인물 매버릭은 자신이 졸업한 훈련학교 교관으로 발탁된다. 그의 명성을 모르던 팀원들은 매버릭의 지시를 무시하지만 실전을 방불케 하는 상공 훈련에서 눈으로 봐도 믿기 힘든 전설적인 조종 실력에 모두가 압도된다. 매버릭의 지휘 아래 견고한 팀워크를 쌓아가던 팀원들에게 국경을 뛰어넘는 위험한 임무가 주어지자 매버릭은 자신이 가르친 동료들과 함께 마지막이 될지 모를 하늘 위 비행에 나서는데...', 131, '12', 'RELEASED', 172.831000, 8.202000, 1488732821, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 361743 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 361743 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 500, '톰 크루즈', '/3mShHjSQR7NXOVbdTu5rT2Qd0MN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 크루즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Capt. Pete ''Maverick'' Mitchell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 361743 AND a.name = '톰 크루즈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 996701, '마일스 텔러', '/cg3LW0xX6RKr8dmescxq1bepcb5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마일스 텔러');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lt. Bradley ''Rooster'' Bradshaw', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 361743 AND a.name = '마일스 텔러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1525043, '모니카 바바로', '/hiOYXzSkkuKyCEcjLxBoAc4bLZS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '모니카 바바로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lt. Natasha ''Phoenix'' Trace', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 361743 AND a.name = '모니카 바바로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1700685, '루이스 풀먼', '/jAo0Rxl9EYVxLnhUlBww5Uxl89v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루이스 풀먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lt. Robert ''Bob'' Floyd', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 361743 AND a.name = '루이스 풀먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 151680, '제이 엘리스', '/78JH7CfMrWrI3Vx2XLbx0GW4c2X.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이 엘리스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lt. Reuben ''Payback'' Fitch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 361743 AND a.name = '제이 엘리스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 86270, '조셉 코신스키', '/oWLUXWY0j8TYzwnf2wETYWO181S.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조셉 코신스키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 361743 AND d.name = '조셉 코신스키';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jeqXUwNilvNqNXqAHsdwm5pEfae.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 361743;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/AaV1YIdWKnjAIAOe8UUKBFm327v.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 361743;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1359227, '레고 마블 어벤져스: 미션 데몰리션', '2024-10-17', '', '완전히 새로운 애니메이션 스페셜 ‘레고 마블: 미션 데몰리션’은 독창적인 매력이 확실한 유명 시리즈의 10번째 작품이다. 마블과 레고 그룹이 선보이는 이 최신 스페셜의 주인공은 히어로가 되고자 하는 젊은 슈퍼히어로 팬으로, 어벤져스의 세상을 파괴할 기회를 노리고 있는 강력한 새 악당을 우연한 계기로 해방시키고 만다.', 44, 'ALL', 'RELEASED', 161.858000, 6.925000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1359227 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1359227 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1359227 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 76621, 'Will Friedle', '/Ao3fp9f4loVQ1Vvk6ph8HU5p0Lu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Will Friedle');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dennis / Demolition Man (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1359227 AND a.name = 'Will Friedle';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19303, '케빈 스미스', '/g8sC36zUTkSTh7y9HjWa4Rbr0JP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케빈 스미스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Terry / Terrax (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1359227 AND a.name = '케빈 스미스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1048574, 'David Kaye', '/fAK9KpVtPeZ9MTUXamfVqwUGBId.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'David Kaye');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vision / Hot Dog Suit Vendor (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1359227 AND a.name = 'David Kaye';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 32600, 'John Stamos', '/5hFEsxkqI6uGa9ltX2soVqt8r1M.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'John Stamos');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Iron Man (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1359227 AND a.name = 'John Stamos';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 75038, 'Roger Craig Smith', '/6oE356GbRHAf91Llw7LDpvsAf5L.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Roger Craig Smith');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Steve Rogers / Captain America / Frank Castle / The Thing (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1359227 AND a.name = 'Roger Craig Smith';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2741073, 'Ken Cunningham', '/8e2qCGzpDXvAsLdPpzrUyDamyqD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Ken Cunningham');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1359227 AND d.name = 'Ken Cunningham';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2gLpCJNao2AgHhCuuhwwlvL5hb1.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1359227;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/Al127H6f1RXpESdg0MGNL2g8mzO.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1359227;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (315162, '장화신은 고양이: 끝내주는 모험', '2022-11-26', '당신의 소원을 이루어 줄 2023년 새해 첫 어드벤처', '아홉 개의 목숨 중 단 하나의 목숨만 남은 장화신은 고양이.  마지막 남은 목숨을 지키기 위해 히어로의 삶 대신 반려묘의 삶을 선택한 그에게 찾아온 마지막 기회, 바로 소원을 들어주는 소원별이 있는 곳을 알려주는 지도!  잃어버린 목숨을 되찾고 다시 히어로가 되기를 꿈꾸는 장화신은 고양이는 뜻밖에 동료가 된 앙숙 파트너 ''키티 말랑손'', 그저 친구들과 함께라면 모든 게 행복한 강아지 ''페로''와 함께 소원별을 찾기 위해 길을 떠난다.  그리고 소원별을 노리는 또 다른 빌런들과 마주치게 되는데…', 103, 'All', 'RELEASED', 175.650000, 8.221000, 484700000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 315162 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 315162 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 315162 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 315162 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 315162 AND g.name = '가족';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3131, '안토니오 반데라스', '/fce7zl6elUzsv7wudHFc7RgFtjD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '안토니오 반데라스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Puss in Boots (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 315162 AND a.name = '안토니오 반데라스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3136, '셀마 헤이엑', '/1qfYF7NGRObmeKR7IVXUFVIC0CN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '셀마 헤이엑');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kitty Softpaws (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 315162 AND a.name = '셀마 헤이엑';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 210172, '하비 길렌', '/yiNBonobPwqMVweB02JWufzp2l9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하비 길렌');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Perrito (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 315162 AND a.name = '하비 길렌';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 52583, '바그네르 모라', '/6gcfwvOueJKhDpTP9KLGuWz0Hk4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '바그네르 모라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wolf (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 315162 AND a.name = '바그네르 모라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1373737, '플로렌스 퓨', '/6Sjz9teWjrMY9lF2o9FCo4XmoRh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '플로렌스 퓨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Goldilocks (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 315162 AND a.name = '플로렌스 퓨';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1450348, 'Joel Crawford', '/3F60mZB4sGgB51jAIglwn6OrUgB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Joel Crawford');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 315162 AND d.name = 'Joel Crawford';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rKgvctIuPXyuqOzCQ16VGdnHxKx.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 315162;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jr8tSoJGj33XLgFBy6lmZhpGQNu.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 315162;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1104844, '극장판 블루 록 -에피소드 나기-', '2024-04-19', '세계 최고의 스트라이커가 되기 위한 꿈의 도전이 시작된다!', '“귀찮아”가 말버릇인 고등학교 2학년, ‘나기 세이시로’는 하루하루를 무기력하게 살고 있었다. 축구로 전 세계 제패를 꿈꾸는 동급생 ‘미카게 레오’가 그의 재능을 찾아내기 전까지는. ‘레오’의 권유로 축구를 시작하게 된 ‘나기’는 압도적인 축구 센스를 발휘하고 어느 날, 그들에게 ‘블루 록’ 프로젝트 초대장이 도착한다. 그곳에서 ‘이사기 요이치’, ‘바치라 메구루’, ‘이토시 린’ 등, 전국에서 선별된 스트라이커들이 기다리고 있는데…', 91, '12', 'RELEASED', 148.821000, 7.184000, 11201738, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1104844 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1104844 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1104844 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1210634, '시마자키 노부나가', '/iJFlSanoNgJMP31qBGCT9HzxFbi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시마자키 노부나가');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Seishiro Nagi (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1104844 AND a.name = '시마자키 노부나가';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1492992, '우치다 유우마', '/k5yOai4JnkjpTVzSwIFzXxQ2LBP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '우치다 유우마');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Reo Mikage (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1104844 AND a.name = '우치다 유우마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1254260, '오키츠 카즈유키', '/vgyaK5dAxhvzAi6LJM3ZyaJd4mJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오키츠 카즈유키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zantetsu Tsurugi (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1104844 AND a.name = '오키츠 카즈유키';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2534630, '우라 카즈키', '/7eUgENWREmWSMnLPUFCQhvUSpdI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '우라 카즈키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yoichi Isagi (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1104844 AND a.name = '우라 카즈키';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3195937, '카이토 타스쿠', '/eDtru6RxBnCtuYtU2mIXidKekJv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카이토 타스쿠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Meguru Bachira (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1104844 AND a.name = '카이토 타스쿠';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1885025, '石川俊介', '/wLhbaY4oEljkV1mcpXDrkFh5bs9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '石川俊介');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1104844 AND d.name = '石川俊介';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yN773yRQjwG6KPjUGqBsmiLfKom.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1104844;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7ks7A3mAO7twDOvBVE4cR8LaIM8.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1104844;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1631, '진실한 소녀', '1976-01-01', '', '때는 1963년 8월,14세 소녀 알리스는 여름방학을 랑드지방에 있는 부모님 집에서 보내게 된다. 침울한 엄마와 뚱뚱한 아빠 사이에서 외로운 소녀는 일기 속에다가 속마음과 섹스에 대한 호기심을 솔직하게 풀어놓는다.그녀는 또한 깨진 달걀, 밀초, 귀지, 토사물, 소변, 혈액 심지어 정액을 만지며 촉각을 즐긴다.그녀는 속바지도 없이 걸어 다니며, 자전거도 타고, 바닷가에 앉아 있기도 한다.어느날 ''짐''이라는 건장한 체격과 조각 같은 얼굴의 20대 청년이 아버지의 목재소에 고용된다. 그녀는 그를 첫번째 애인으로 만들리라 결심하고 유혹을 하기 시작한다. 그러나 이미 약혼자가 있는 짐은 그녀의 유혹을 거절하고 그러면 그럴수록 알리스는 둘사이의 에로틱한 정사,나아가 사도매저키즘(가학적이며 피학적)인 환상에 빠져든다.드디어 짐과 밤에 만나기로 약속을 한 날, 눈치를 챈 부모는 그녀를 나가지 못하게 한다.', 89, '', 'RELEASED', 240.057000, 5.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1631 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 18240, 'Charlotte Alexandra', '/e4Q6t0NFP57171TTCfHqykyPoau.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Charlotte Alexandra');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alice Bonnard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1631 AND a.name = 'Charlotte Alexandra';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 18241, 'Hiram Keller', '/wD2P3zKgKaweJufPhoG5gD9XoLD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Hiram Keller');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pierre-Evariste Renard / ''Jim'' / ''Earthworm Jim''', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1631 AND a.name = 'Hiram Keller';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 18242, 'Rita Maiden', '/z21gHqDxwCgBxdzySbmZVYHNARQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rita Maiden');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mrs. Bonnard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1631 AND a.name = 'Rita Maiden';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 18243, 'Bruno Balp', '/pM4nvsJTKvDDM0PISAjyYcK7aYO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bruno Balp');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Bonnard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1631 AND a.name = 'Bruno Balp';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 101315, 'Georges Guéret', '/yblJtWBPu3mwMiPs8AAS9yaRwod.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Georges Guéret');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Martial', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1631 AND a.name = 'Georges Guéret';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 6295, '카트린 브레야', '/bD8hYMlanryLzimvCagK47wGYwF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '카트린 브레야');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1631 AND d.name = '카트린 브레야';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sYLZxnRBoNekrbcLaEzBJSmRRh8.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1631;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fEfFaByobTu2RR2KMMohmCNLReg.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1631;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (753342, '나폴레옹', '2023-11-22', '스스로 황제가 된 영웅', '프랑스군 지휘관이었던 나폴레옹의 기원과 빠르고 냉혹하게 황제 자리에 오르게 된 이야기를 아내이자 유일한 참사랑이었던 조세핀과 맺었던 중독적이고 불안정한 관계를 통해 가까이서 들여다본다.', 158, '15', 'RELEASED', 139.815000, 6.400000, 220597098, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 753342 AND g.name = '역사';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 753342 AND g.name = '전쟁';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 753342 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 753342 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 73421, '호아킨 피닉스', '/u38k3hQBDwNX0VA22aQceDp9Iyv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '호아킨 피닉스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Napoleon Bonaparte', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 753342 AND a.name = '호아킨 피닉스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 556356, '바네사 커비', '/aB0o6r5msso6tCXTuVgKVO4wRqg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '바네사 커비');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Josephine Bonaparte', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 753342 AND a.name = '바네사 커비';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 81051, '타하르 라힘', '/r1SJ9nkG9q4JbPHbtcvcVxmRcHw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '타하르 라힘');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paul Barras', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 753342 AND a.name = '타하르 라힘';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4757, '루퍼트 에버렛', '/g0kqfIxf9eIV7rOMQcbebsgMS9Z.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루퍼트 에버렛');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Duke of Wellington', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 753342 AND a.name = '루퍼트 에버렛';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1231402, 'Mark Bonnar', '/qEOp1lj0HGAVy1wpqIxMNkxIzn7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mark Bonnar');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Junot', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 753342 AND a.name = 'Mark Bonnar';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 578, '리들리 스콧', '/zABJmN9opmqD4orWl3KSdCaSo7Q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '리들리 스콧');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 753342 AND d.name = '리들리 스콧';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/cFOpMbj28ZKhXDy50mrIcLhLb8g.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 753342;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/33pMXav77ICRnceEBLhL8lXTywv.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 753342;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (937278, '오토라는 남자', '2022-12-28', '미워할 수 없는 반전매력 이웃이 온다!', '모든 것을 포기하려는 ‘오토’ 는 죽고 싶을 타이밍마다 이를 방해하는 이웃들로 분노가 치밀어 오른다. 인생 최악의 순간, 뜻하지 않은 이웃들과의 사건들로 인해 상황은 생각지도 못한 방향으로 흘러가는데…', 126, '12', 'RELEASED', 140.276000, 7.760000, 108961677, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 937278 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 937278 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 31, '톰 행크스', '/eKF1sGJRrZJbfBG1KirPt1cfNd3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 행크스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Otto Anderson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 937278 AND a.name = '톰 행크스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1309844, 'Mariana Treviño', '/d1N3CLQzrARgFLTLTJdKNgtlapB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mariana Treviño');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marisol', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 937278 AND a.name = 'Mariana Treviño';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1365769, 'Rachel Keller', '/zrHOD8p6avOBOsHWu0y3kCKSksc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rachel Keller');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sonya', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 937278 AND a.name = 'Rachel Keller';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3631835, 'John Higgins', '/5I76pJfOfDRngMmtheVjiGHku3d.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'John Higgins');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hardware Store Clerk', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 937278 AND a.name = 'John Higgins';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1711069, 'Tony Bingham', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tony Bingham');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hardware Store Customer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 937278 AND a.name = 'Tony Bingham';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 12995, '마크 포스터', '/kxmrePc7bRGEcK6YGWKOjTGOe9o.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '마크 포스터');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 937278 AND d.name = '마크 포스터';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kfxi1tsQAkpZtCl72A3Wrl7iplz.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 937278;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/v2LilmCylr3bL9TCZSj6syjowZh.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 937278;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (120, '반지의 제왕: 반지 원정대', '2001-12-18', '마지막 반지를 차지하는 자, 모든 힘을 지배하게 될 것이다', '호빗이라 불리우는 난장이 종족 중의 한 명인 프로도는 자신의 삼촌에게서 우연히 절대 반지를 물려받게 되고, 마법사 간달프를 통해서 절대반지가 사우론의 손에 들어가면 악의 세력이 세상을 지배하게 된다는 것을 알게 된다. 하지만 절대반지를 영원히 파괴할 수 있는 유일한 방법은 반지가 만들어진 불의 산의 용암에 그것을 던져 넣는 길 뿐이다. 마침내 프로도와 그의 친구들, 엘프족인 레골라스, 난장이족 김리, 두명의 인간 전사 아라곤과 보로미르, 그리고 마법사 간달프로 구성된 반지 원정대가 길고도 험난한 여정을 떠나게 되는데...', 227, '12', 'RELEASED', 169.691000, 8.416000, 871368364, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 120 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 120 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 120 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 109, '일라이저 우드', '/7UKRbJBNG7mxBl2QQc5XsAh6F8B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '일라이저 우드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frodo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 120 AND a.name = '일라이저 우드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1327, '이안 맥켈런', '/5cnnnpnJG6TiYUSS7qgJheUZgnv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이안 맥켈런');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gandalf', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 120 AND a.name = '이안 맥켈런';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 110, '비고 모텐슨', '/vH5gVSpHAMhDaFWfh0Q7BG61O1y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '비고 모텐슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Aragorn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 120 AND a.name = '비고 모텐슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1328, '숀 애스틴', '/ywH1VvdwqlcnuwUVr0pV0HUZJQA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '숀 애스틴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sam', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 120 AND a.name = '숀 애스틴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 65, '이안 홈', '/cOJDgvgj4nMec6Inzj1H5nugTO5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이안 홈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bilbo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 120 AND a.name = '이안 홈';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 108, '피터 잭슨', '/bNc908d59Ba8VDNr4eCcm4G1cR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피터 잭슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 120 AND d.name = '피터 잭슨';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/r18JdjImbWDRwkbVDIzWoLQqkCo.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 120;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/x2RS3uTcsJJ9IfjNPcgDmukoEcQ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 120;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (675353, '수퍼 소닉 2', '2022-03-30', '', '강력한 파워의 ‘너클즈’와 함께 돌아온 천재 과학자 ‘닥터 로보트닉’에 맞서 지구를 구하기 위해 ‘소닉’과 새로운 파트너 ‘테일즈’가 전 세계를 누비는 스피드 액션 블록버스터.', 125, 'ALL', 'RELEASED', 152.411000, 7.500000, 405421518, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 675353 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 675353 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 675353 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 675353 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 222121, '벤 슈와츠', '/5vV52TSEIhe4ZZLWwv3i7nfv8we.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '벤 슈와츠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sonic (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 675353 AND a.name = '벤 슈와츠';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11006, '제임스 마스던', '/lf7OnfKZnMgNh9b98764tqSocGK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제임스 마스던');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tom Wachowski', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 675353 AND a.name = '제임스 마스던';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 110742, '티카 섬프터', '/1zTXufyuQFPXVthryH7KVoZAfb7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '티카 섬프터');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maddie Wachowski', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 675353 AND a.name = '티카 섬프터';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1212864, '콜린 오샤우너시', '/y3Kl5tCX1XD6uyL9wefTRbEXTwj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '콜린 오샤우너시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tails (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 675353 AND a.name = '콜린 오샤우너시';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17605, '이드리스 엘바', '/be1bVF7qGX91a6c5WeRPs5pKXln.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이드리스 엘바');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Knuckles (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 675353 AND a.name = '이드리스 엘바';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 93364, 'Jeff Fowler', '/wExdubFgeBkEUP8MojKPKoOcgdZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jeff Fowler');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 675353 AND d.name = 'Jeff Fowler';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/arCDDZdvamNY628gWJVjlCycf69.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 675353;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8wwXPG22aNMpPGuXnfm3galoxbI.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 675353;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (934632, 'Rebel Moon — 파트 2: 스카기버', '2024-04-19', '', '마더월드의 무자비한 세력에 대항해 전투를 준비하는 반란군들. 서로를 단단히 이어주는 유대가 형성되면서 영웅이 등장하고 전설이 탄생한다.', 123, '15', 'RELEASED', 146.778000, 6.132000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 934632 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 934632 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 568657, '소피아 부텔라', '/lGFhhjcjARQCM8AiGidyyyfDowh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '소피아 부텔라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kora', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 934632 AND a.name = '소피아 부텔라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 91520, '미힐 하위스만', '/locFnkndNNGKoPtghV1kcMBfGkT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미힐 하위스만');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gunnar', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 934632 AND a.name = '미힐 하위스만';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1047649, '에드 스크레인', '/AaMTvZkroI8uo5JXQiJ5pSLEgSJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에드 스크레인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Atticus Noble', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 934632 AND a.name = '에드 스크레인';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 938, '자이먼 혼수', '/tpvtxxvCx2Mb5DV632hmuYlHoiY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '자이먼 혼수');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Titus', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 934632 AND a.name = '자이먼 혼수';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 21688, '배두나', '/owMv65TuU4thBBJCpv3uWr1bWfc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '배두나');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nemesis', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 934632 AND a.name = '배두나';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 15217, '잭 스나이더', '/iD0GDqkvJXDXiNEZej198hjt3Tt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '잭 스나이더');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 934632 AND d.name = '잭 스나이더';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xqHdyufmN0xzGM116dZReFWVwfy.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 934632;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tpiqEVTLRz2Mq7eLq5DT8jSrp71.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 934632;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (646097, '레블 리지', '2024-08-27', '', '작은 도시를 방문한 전직 해병대원. 사촌의 보석 신청에 쓰려던 현금 가방을 관할 경찰에게 부당하게 압수당하자 그곳에 만연한 부패에 정면으로 맞서기로 한다.', 132, '19', 'RELEASED', 169.461000, 7.014000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 646097 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 646097 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 646097 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 646097 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1763709, '에런 피어', '/z2cMMZyWzv5ztT6pFdAAjB3u7CQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에런 피어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Terry Richmond', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 646097 AND a.name = '에런 피어';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 25129, '돈 존슨', '/6s6oav541p7xspCG6PvXut7knkP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '돈 존슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chief Sandy Burnne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 646097 AND a.name = '돈 존슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1285, '애나소피아 로브', '/tWlnAuyQeFidHcAo2zUVxNv0G0T.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '애나소피아 로브');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Summer McBride', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 646097 AND a.name = '애나소피아 로브';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1041440, '에모리 코헨', '/mtummZcNxmcJQ1JIoQUcV3Fwb3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에모리 코헨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Officer Steve Lann', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 646097 AND a.name = '에모리 코헨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 62562, '데이비드 덴맨', '/4I06ZD8SQ6pU1QYShiUXb711fJW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이비드 덴맨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Officer Evan Marston', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 646097 AND a.name = '데이비드 덴맨';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 74655, '제레미 솔니에', '/tTvAWJQFg0uMTCpIb3QphrQQMZA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '제레미 솔니에');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 646097 AND d.name = '제레미 솔니에';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ltAyMY5j73LtIqTzlFwPlfZb1K.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 646097;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/cyKH7pDFlxIXluqRyNoHHEpxSDX.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 646097;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (931944, '데블스 배스', '2024-03-08', '', '아나는 18세기 북 오스트리아의 스티리아 지방의 산골 마을 보금자리에서 행복한 신혼의 삶을 꿈꾼다. 하지만 익숙지 않은 매일의 고된 노동과 시어머니의 자잘한 간섭 그리고 신혼 첫날밤부터 시작된 남편의 무관심이 이어지면서, 아나의 일상은 점점 불행의 나락으로 침잠해 간다.', 121, '19', 'RELEASED', 168.971000, 6.800000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 931944 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 931944 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 931944 AND g.name = '역사';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1325205, 'Anja Plaschg', '/3iSnU8v3U44pP36naUYDP3BrFCW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Anja Plaschg');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agnes', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 931944 AND a.name = 'Anja Plaschg';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 40525, 'Maria Hofstätter', '/vTZrok9eKbeq9vIlN7zNocfHSJw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Maria Hofstätter');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mother-in-law Gänglin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 931944 AND a.name = 'Maria Hofstätter';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3120551, 'David Scheid', '/moM5LzfYwcE9opIAMmXMYJN3sME.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'David Scheid');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wolf', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 931944 AND a.name = 'David Scheid';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 40523, 'Natalya Baranova', '/fT07CIQSoALREgox0gB6eqTOnDI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Natalya Baranova');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ewa Schikin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 931944 AND a.name = 'Natalya Baranova';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2897770, 'Lukas Walcher', '/tSz6SH0qGFx9PhfLxS7O3SXt9xA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lukas Walcher');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lukas', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 931944 AND a.name = 'Lukas Walcher';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1347619, 'Severin Fiala', '/bggZwvIGePHoS5C5dkcZrS14He1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Severin Fiala');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 931944 AND d.name = 'Severin Fiala';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 40509, 'Veronika Franz', '/xheCMLPimcMkT9bgMcxP7wIepnr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Veronika Franz');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 931944 AND d.name = 'Veronika Franz';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7xw7NSRlnBB5AZLqmasgKNlKD6o.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 931944;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8y9mgkTlaEUAtjrHr9akapFd6hQ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 931944;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1091181, '루가루: 늑대인간', '2024-10-22', '', '오래된 카드 게임의 내용이 현실이 되고, 일가족이 시간을 거슬러 중세 시대 마을에 떨어진다. 이제 이들은 집으로 돌아가기 위해 마을 안에 숨은 늑대인간들을 찾아내야 한다.', 95, '12', 'RELEASED', 136.409000, 5.719000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1091181 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1091181 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1091181 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1091181 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 24893, 'Franck Dubosc', '/2sCXXZYrWSO1nGxuyVBGETj2wdE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Franck Dubosc');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jérôme Vassier', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1091181 AND a.name = 'Franck Dubosc';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1003, '장 르노', '/dEQGpWhgRAN1xU8O1jyOVuQTHwo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '장 르노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gilbert Vassier', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1091181 AND a.name = '장 르노';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 142689, 'Suzanne Clément', '/kNANyCoqGqiYd5meAGfCDvzkzIF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Suzanne Clément');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1091181 AND a.name = 'Suzanne Clément';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3295303, 'Lisa Do Couto Texeira', '/sIKpFKM5avOXsNEyNzZj2DXiH3C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lisa Do Couto Texeira');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Clara', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1091181 AND a.name = 'Lisa Do Couto Texeira';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2503512, 'Raphael Romand', '/epc839G9YV3koVEjiZHzDw22Izd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Raphael Romand');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Théo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1091181 AND a.name = 'Raphael Romand';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1618156, 'François Uzan', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'François Uzan');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1091181 AND d.name = 'François Uzan';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gqUODksvcFCGAblSG56eTzGWZih.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1091181;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sLp1vdiIQoLgLYsOb9ebDbBYB7D.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1091181;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (831815, '다람이 무비: 비키니 시티를 구하라', '2024-10-18', '', '어느 날 누군가가 비키니 시티를 통째로 바다에서 퍼내 간다. 곧이어 도시를 구하겠다고 나서는 다람쥐 과학자 다람이. 친구인 네모바지 스폰지밥과 함께 텍사스로 모험을 떠난다.', 86, 'ALL', 'RELEASED', 166.300000, 6.733000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 831815 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 831815 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 831815 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 831815 AND g.name = '가족';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 78799, 'Carolyn Lawrence', '/7Ehx4bEO8loovbmbntXl0sBNjtj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Carolyn Lawrence');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sandy / Bottomite Crowd (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 831815 AND a.name = 'Carolyn Lawrence';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 78798, '톰 케니', '/dKOxpGnRkIMaPkZSHKIns99WxQa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 케니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'SpongeBob / Gary / Sonny / Various (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 831815 AND a.name = '톰 케니';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6574, '클랜시 브라운', '/1JeBRNG7VS7r64V9lOvej9bZXW5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '클랜시 브라운');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Krabs / Clyde / Neighbor #1 / Bottomite #2 / Bottomite Crowd (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 831815 AND a.name = '클랜시 브라운';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 34398, 'Bill Fagerbakke', '/zntKKc1uT53BnIihmzbq601eWKZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bill Fagerbakke');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Patrick / Bottomite #4 / Bottomite Crowd (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 831815 AND a.name = 'Bill Fagerbakke';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 188229, 'Mr. Lawrence', '/9EOlQ6YG8zQOwTn10dQewYOyQ6C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mr. Lawrence');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fred / Larry / Plankton / Video Announcer / Plankton Lincoln / Snail Walker / Bottomite Crowd (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 831815 AND a.name = 'Mr. Lawrence';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 916958, 'Liza Johnson', '/y7as9fauoSzDo3J8xN9h4RZ6h7M.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Liza Johnson');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 831815 AND d.name = 'Liza Johnson';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/30YnfZdMNIV7noWLdvmcJS0cbnQ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 831815;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hdFIdXwS8FSN2wIsuotjW1mshI0.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 831815;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (122917, '호빗: 다섯 군대 전투', '2014-12-10', '마침내 거대한 여정이 끝난다', '빌보 배긴스와 참나무 방패 소린, 난쟁이 족이 떠난 거대한 여정의 끝에 난쟁이 족은 원래 자신들의 터전이던 에레보르에 있는 엄청난 보물을 되찾지만 이는 무시무시한 용 스마우그가 호수마을의 무기력한 주민들을 공격하게 되는 결과를 낳는다. 소린은 탐욕에 서서히 눈이 멀어 우정과 명예를 저버린 채 왕의 보물 아르켄스톤을 찾는다. 암흑의 군주 사우론은 오크 군대를 보내 외로운 산에 기습 공격을 감행한다. 마침내 다섯 군대의 전투가 시작되고 빌보는 본인과 친구들의 목숨을 걸고 싸워야만 하는데...', 144, '12', 'RELEASED', 166.069000, 7.323000, 956019788, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 122917 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 122917 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 122917 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1327, '이안 맥켈런', '/5cnnnpnJG6TiYUSS7qgJheUZgnv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이안 맥켈런');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gandalf the Grey', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122917 AND a.name = '이안 맥켈런';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7060, '마틴 프리먼', '/pLG7mmxBXXTVAgzXvQl0ap3qlJU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마틴 프리먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bilbo Baggins', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122917 AND a.name = '마틴 프리먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 30315, '리차드 아미티지', '/xmkrhHy4pqjpn60QTZvReJATM40.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리차드 아미티지');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Thorin Oakenshield', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122917 AND a.name = '리차드 아미티지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 114, '올랜도 블룸', '/lwQoA0qJTCZ6l2FH6PjmhRQjiaB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '올랜도 블룸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Legolas', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122917 AND a.name = '올랜도 블룸';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19034, '에반젤린 릴리', '/hAwppQxJoQG5Y3ZS2iPnitfbUjC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에반젤린 릴리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tauriel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122917 AND a.name = '에반젤린 릴리';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 108, '피터 잭슨', '/bNc908d59Ba8VDNr4eCcm4G1cR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피터 잭슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 122917 AND d.name = '피터 잭슨';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8SGuYvRd6mGdgL6oOGgwuK0R7Qc.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 122917;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zn13a7U9eMTJq8sHthe3bCgsVm4.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 122917;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (72808, 'La carne', '1991-05-09', '', '', 90, '', 'RELEASED', 131.768000, 5.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 72808 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 72808 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2166, 'Sergio Castellitto', '/uq5xz7kinzgdclGOcechgfPBgYC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sergio Castellitto');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paolo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 72808 AND a.name = 'Sergio Castellitto';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 119997, 'Francesca Dellera', '/nCZEBhBN8cOKsKScCuxBjXPO6k0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Francesca Dellera');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Francesca', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 72808 AND a.name = 'Francesca Dellera';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3581, 'Philippe Léotard', '/rjvSxdR594HfvlaRKURZDlPE36p.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Philippe Léotard');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nicola', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 72808 AND a.name = 'Philippe Léotard';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 70427, 'Farid Chopel', '/rvRxRJo6bBT2vO6abg5e5YUpHvo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Farid Chopel');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Aldo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 72808 AND a.name = 'Farid Chopel';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 259038, 'Petra Reinhardt', '/ek8virUovX1L0nUzj4KD866OqpG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Petra Reinhardt');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Giovanna', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 72808 AND a.name = 'Petra Reinhardt';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 34264, 'Marco Ferreri', '/afP3Hk6ys05jqh33q8nrmkELpZz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Marco Ferreri');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 72808 AND d.name = 'Marco Ferreri';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4tRnOH2gjBEs8es6d9cHtSo8XGL.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 72808;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/UJje4GZglCtC8ZtYY8T4jj1RHm.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 72808;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (974262, '디센던츠: 레드의 반항', '2024-07-11', '', '하트 여왕이 오라돈을 차지하려고 하자 그의 반항아 딸 레드는 신데렐라의 완벽주의자 딸 클로이와 힘을 합쳐 과거로 돌아가 엄마가 악당의 길로 가지 못하게 막으려 애쓴다.', 92, '12', 'RELEASED', 140.992000, 6.963000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 974262 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 974262 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 974262 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 974262 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2309874, '카일리 캔트럴', '/4NT5eQnIczID9nBFOZmFTZ4VdPJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카일리 캔트럴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Red', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 974262 AND a.name = '카일리 캔트럴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2630461, '말리아 베이커', '/jpcDv1IZTjvbkYQRnrMT64pKiAc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '말리아 베이커');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chloe', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 974262 AND a.name = '말리아 베이커';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1675772, '루비 로즈 터너', '/kwnf4SgO6qdl4zxJj5acjsYxIY9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루비 로즈 터너');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bridget', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 974262 AND a.name = '루비 로즈 터너';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3797199, 'Morgan Dudley', '/7NA7kKTuMJ1kALHtTLP2Obbqozu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Morgan Dudley');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ella', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 974262 AND a.name = 'Morgan Dudley';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1980484, '데어라 르네', '/s410paCGWl254kSydPJAa1UJrIn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데어라 르네');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Uliana', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 974262 AND a.name = '데어라 르네';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 586110, '제니퍼 팽', '/2Eg7Kq1rkMmaPpytHm9bdkyvLvq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '제니퍼 팽');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 974262 AND d.name = '제니퍼 팽';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lapab2EdLTL6srTus5ktgr64bqF.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 974262;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dn3gbDpXPSwC6saMJOHkCiFA9jn.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 974262;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (939243, '수퍼 소닉 3', '2024-12-19', '', '', 109, '', 'UPCOMING', 174.096000, 0.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 939243 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 939243 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 939243 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 939243 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 939243 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 222121, '벤 슈와츠', '/5vV52TSEIhe4ZZLWwv3i7nfv8we.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '벤 슈와츠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sonic (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 939243 AND a.name = '벤 슈와츠';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 206, '짐 캐리', '/u0AqTz6Y7GHPCHINS01P7gPvDSb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '짐 캐리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Robotnik / Gerald Robotnik', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 939243 AND a.name = '짐 캐리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6384, '키아누 리브스', '/4D0PpNI0kmP58hgrwGC3wCjxhnm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키아누 리브스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shadow (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 939243 AND a.name = '키아누 리브스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17605, '이드리스 엘바', '/be1bVF7qGX91a6c5WeRPs5pKXln.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이드리스 엘바');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Knuckles (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 939243 AND a.name = '이드리스 엘바';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1212864, '콜린 오샤우너시', '/y3Kl5tCX1XD6uyL9wefTRbEXTwj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '콜린 오샤우너시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tails (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 939243 AND a.name = '콜린 오샤우너시';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 93364, 'Jeff Fowler', '/wExdubFgeBkEUP8MojKPKoOcgdZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jeff Fowler');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 939243 AND d.name = 'Jeff Fowler';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ynKEIxoAPTyaK9YaIwsj6htROTu.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 939243;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/crSL7DkgwyLIaRRIb7xM2ejZbca.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 939243;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1294931, 'Entra En Mi Vida', '2024-07-11', '', '', 72, '', 'RELEASED', 145.359000, 7.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1294931 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1294931 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1641653, 'Paulina Goto', '/wjWl1OLAP8ngR8i8vAFRlk9hyg2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Paulina Goto');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1294931 AND a.name = 'Paulina Goto';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 229617, 'Ximena Sariñana', '/wvdusS6Q0AhRLadNpDKlJfHfiXs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ximena Sariñana');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1294931 AND a.name = 'Ximena Sariñana';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 967328, 'Hugo Catalán', '/3fRoXPXzPEPvFF0HLXbcagT1eG2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Hugo Catalán');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1294931 AND a.name = 'Hugo Catalán';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1310888, 'José Manuel Cravioto', '/ehCbX0CSq5myVim4r1cRwNGQdqL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'José Manuel Cravioto');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1294931 AND d.name = 'José Manuel Cravioto';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/p0zlgGiq4mCNzaKH3Tf112k51p0.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1294931;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dQLvepGVFY3V5NehYoG76dfh6vT.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1294931;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (949484, 'Hounds of War', '2024-08-29', '', '', 94, '', 'RELEASED', 157.832000, 6.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 949484 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 949484 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 81685, '프랭크 그릴로', '/br2nPzelch2Tb3pZHnYAbXng7cz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '프랭크 그릴로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ryder', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 949484 AND a.name = '프랭크 그릴로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 418, '로버트 패트릭', '/qRv2Es9rZoloullTbzss3I5j1Mp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 패트릭');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Colonel Hart', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 949484 AND a.name = '로버트 패트릭';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 25702, '로나 미트라', '/1YThpok3Wk3BBy0pcUTcpuZyOBB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로나 미트라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Selina', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 949484 AND a.name = '로나 미트라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1229419, 'Leeshon Alexander', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Leeshon Alexander');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bulldog', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 949484 AND a.name = 'Leeshon Alexander';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1457026, 'Urs Rechn', '/kFeVHoL8FKSOrw9spcnO2kz9fF6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Urs Rechn');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hollywood', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 949484 AND a.name = 'Urs Rechn';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 78108, 'Isaac Florentine', '/4PJrg3l105M2GMNazhu2DXZ1Wce.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Isaac Florentine');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 949484 AND d.name = 'Isaac Florentine';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lRBT73EWsiQPuqK3YS3BnBW0Zwi.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 949484;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/blqiNjJefmY10Wx6y2vgJJWljJj.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 949484;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1320786, '테리파이어 4', '', '', '', 0, '', 'UNKNOWN', 161.022000, 0.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1320786 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1320786 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1880016, '데이비드 하워드 손턴', '/9nYijs4ACzjg93zKezLiLmuRGvp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이비드 하워드 손턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Art the Clown', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1320786 AND a.name = '데이비드 하워드 손턴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1882502, '로렌 라베라', '/qJYWq2oZcvHh7lnGskxkrYXCom0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로렌 라베라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sienna Shaw', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1320786 AND a.name = '로렌 라베라';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 933176, 'Damien Leone', '/nX2kkYD32x2PC9rRU7DrYCRPjFE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Damien Leone');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1320786 AND d.name = 'Damien Leone';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2p5KjqH3Qo5JI2u8bUAVopzoekm.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1320786;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1320786;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (767, '해리 포터와 혼혈왕자', '2009-07-15', '마지막 전투를 준비하라', '어둠의 세력이 더욱 강력해져 머글 세계와 호그와트까지 위협해온다. 위험한 기운을 감지한 덤블도어 교수는 다가올 전투에 대비하기 위해 해리 포터와 함께 대장정의 길을 나선다. 볼드모트를 물리칠 수 있는 유일한 단서이자 그의 영혼을 나누어 놓은 7개의 호크룩스를 파괴하는 미션을 수행해야만 하는 것! 또한 덤블도어 교수는 호크룩스를 찾는 기억여행에 결정적 도움을 줄 슬러그혼 교수를 호그와트로 초청한다. 한편 학교에서는 계속된 수업과 함께 로맨스의 기운도 무르익는다. 해리는 자신도 모르게 지니에게 점점 끌리게 되고, 새로운 여자 친구가 생긴 론에게 헤르미온느는 묘한 질투심을 느끼는데...', 153, 'All', 'RELEASED', 141.899000, 7.700000, 933959197, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 767 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 767 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10980, '다니엘 래드클리프', '/iPg0J9UzAlPj1fLEJNllpW9IhGe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다니엘 래드클리프');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Harry Potter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 767 AND a.name = '다니엘 래드클리프';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10989, '루퍼트 그린트', '/iFlkpTaOF6fGLqxz8b0PhI0i0zN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루퍼트 그린트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ron Weasley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 767 AND a.name = '루퍼트 그린트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10990, '엠마 왓슨', '/A14lLCZYDhfYdBa0fFRpwMDiwRN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '엠마 왓슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hermione Granger', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 767 AND a.name = '엠마 왓슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 388, '짐 브로드벤트', '/s7lXYfrsJoGA4vKmyv61SPgABmR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '짐 브로드벤트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Horace Slughorn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 767 AND a.name = '짐 브로드벤트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5658, '마이클 갬본', '/3jdWkDKf4IODbG4JKTeaC7AzxZH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 갬본');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Albus Dumbledore', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 767 AND a.name = '마이클 갬본';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 11343, '데이빗 예이츠', '/hAHOxR0NK4cZDumqNIpDoEdGVAh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '데이빗 예이츠');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 767 AND d.name = '데이빗 예이츠';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yrGlb3HLtjGp39mv4MJ5UuIHcj4.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 767;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/r5xT55Era1XrpAq6XNsrPpozNjM.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 767;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (674, '해리 포터와 불의 잔', '2005-11-16', '더욱 강해진 그들이 온다', '요즘 들어 매일 꾸는 악몽 때문에 이마의 상처에 더욱 통증을 느끼는 해리는 친구 론과 헤르미온느와 함께 퀴디치 월드컵에 참가해 악몽에서 벗어날 수 있게 돼 마냥 기쁘다. 그러나 퀴디치 캠프장 근방 하늘에 불길한 기운이 나타난다. 바로 마왕 볼드모트의 상징인 어둠의 표식이 나타난 것. 볼드모트가 13년 전에 자취를 감춘 뒤, 감히 모습을 드러내지 못했던 그의 추종자 데스 이터들이 그 표식을 불러낸 것이다. 두려움으로 가득 찬 해리는 안전한 호그와트 마법학교로 돌아가고 싶어한다. 덤블도어 교장이라면 자신을 지켜줄 수 있을 것이기에. 그러나 올해는 예년과 상황이 좀 다른데...', 157, '12', 'RELEASED', 135.188000, 7.800000, 895921036, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 674 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 674 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10980, '다니엘 래드클리프', '/iPg0J9UzAlPj1fLEJNllpW9IhGe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다니엘 래드클리프');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Harry Potter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 674 AND a.name = '다니엘 래드클리프';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10989, '루퍼트 그린트', '/iFlkpTaOF6fGLqxz8b0PhI0i0zN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루퍼트 그린트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ron Weasley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 674 AND a.name = '루퍼트 그린트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10990, '엠마 왓슨', '/A14lLCZYDhfYdBa0fFRpwMDiwRN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '엠마 왓슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hermione Granger', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 674 AND a.name = '엠마 왓슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2039, '브렌던 글리슨', '/dTS2y7FLsnrskf0tPb8f9H7KAP3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브렌던 글리슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alastor "Mad-Eye" Moody', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 674 AND a.name = '브렌던 글리슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5658, '마이클 갬본', '/3jdWkDKf4IODbG4JKTeaC7AzxZH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 갬본');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Albus Dumbledore', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 674 AND a.name = '마이클 갬본';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 10723, '마이크 뉴웰', '/zeLnvLZtyJaBP1wWceRM7HWkm0E.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '마이크 뉴웰');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 674 AND d.name = '마이크 뉴웰';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/h6BhNwNXg0IEbs2PoWfCX9QEvgl.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 674;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8f9dnOtpArDrOMEylpSN9Sc6fuz.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 674;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1280655, 'VIRGO', '2021-04-14', '', '', 6, '', 'RELEASED', 191.128000, 9.500000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1280655 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1280655 AND g.name = '음악';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1939676, '드류 스타키', '/sjtkrdfvScHXOCkshtfOS8J7kPK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '드류 스타키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jonah', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1280655 AND a.name = '드류 스타키';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1974046, 'Rudy Pankow', '/8QYEfDbLwS0KOsECBDRUT6ZLuHZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rudy Pankow');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eli', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1280655 AND a.name = 'Rudy Pankow';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3496333, 'Elaine Siemek', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Elaine Siemek');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Virgo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1280655 AND a.name = 'Elaine Siemek';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 3098694, 'Alyssa Toledo', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Alyssa Toledo');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1280655 AND d.name = 'Alyssa Toledo';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/woUv6BNxjxXQZmL91C8m6Qk8JKg.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1280655;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dokxGcoM0of5YmGirhe77MH2TxC.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1280655;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (787699, '웡카', '2023-12-06', '세상에서 가장 달콤한 여정 좋은 일은 모두 꿈에서부터 시작된다!', '마법사이자 초콜릿 메이커 ‘윌리 웡카’의 꿈은 디저트의 성지, ‘달콤 백화점’에 자신만의 초콜릿 가게를 여는 것. 가진 것이라고는 낡은 모자 가득한 꿈과 단돈 12소베른 뿐이지만 특별한 마법의 초콜릿으로 사람들을 사로잡을 자신이 있다. 하지만 먹을 것도, 잠잘 곳도, 의지할 사람도 없는 상황 속에서 낡은 여인숙에 머물게 된 ‘웡카’는 ‘스크러빗 부인’과 ‘블리처’의 계략에 빠져 눈더미처럼 불어난 숙박비로 인해 순식간에 빚더미에 오른다. 게다가 밤마다 초콜릿을 훔쳐가는 작은 도둑 ‘움파 룸파’의 등장과 ‘달콤 백화점’을 독점한 초콜릿 카르텔의 강력한 견제까지. 세계 최고의 초콜릿 메이커가 되는 길은 험난하기만 한데…', 117, 'All', 'RELEASED', 158.223000, 7.117000, 632302312, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 787699 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 787699 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 787699 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1190668, '티모시 샬라메', '/BE2sdjpgsa2rNTFa66f7upkaOP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '티모시 샬라메');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Willy Wonka', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 787699 AND a.name = '티모시 샬라메';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1939373, 'Calah Lane', '/rhEcrfvtkIuzjOvt010xHiVHWXY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Calah Lane');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Noodle', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 787699 AND a.name = 'Calah Lane';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 298410, '키건마이클 키', '/xmdzYXP9j87a43FSiL138nLesuS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키건마이클 키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chief of Police', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 787699 AND a.name = '키건마이클 키';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3291, '휴 그랜트', '/hsSfxSHzkKJ6ZKq1Ofngcp7aAnT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '휴 그랜트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Oompa Loompa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 787699 AND a.name = '휴 그랜트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19868, 'Paterson Joseph', '/n8kf0aowLTcPSt72k0eC4ZShe3s.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Paterson Joseph');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Arthur Slugworth', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 787699 AND a.name = 'Paterson Joseph';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 101666, 'Paul King', '/hDixADZQOBP0E3G9ZxC4kuNHO0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Paul King');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 787699 AND d.name = 'Paul King';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lQ4cwauq2jeTkka9RvdMBTVPLMH.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 787699;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yOm993lsJyPmBodlYjgpPwBjXP9.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 787699;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (840705, '블링크 트와이스', '2024-08-21', '좋은 시간 보내고 있나요?', 'IT업계의 거물, 억만장자 ‘슬레이터 킹’의 호화로운 파티에 초대받은 ‘프리다’. 아름다운 섬에서 화려한 휴가를 보내던 ‘프리다’는 어느 순간 갑자기 함께 온 친구 ‘제스’가 사라지고 다른 사람들은 ‘제스’를 기억하지 못하는 것을 알게 된다. ‘프리다’는 자신과 섬에 초대된 사람들이 계속 무언가를 잊어버리고 있다는 것을 깨닫고, 끔찍한 진실을 밝히기 위해 사투를 벌이기 시작하는데...', 103, '19', 'NOW_PLAYING', 144.132000, 6.800000, 43555474, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 840705 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 840705 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 840705 AND g.name = '공포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1537686, '나오미 애키', '/1MhRVn6xlShHhftRdK24HuO3TNR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나오미 애키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frida', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 840705 AND a.name = '나오미 애키';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 38673, '채닝 테이텀', '/4TpgnS6l8YUXSne9Av9nda6mjxY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '채닝 테이텀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Slater', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 840705 AND a.name = '채닝 테이텀';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 61178, 'Alia Shawkat', '/kcTFBrPSQkenbPK76Iwj49c3Dku.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alia Shawkat');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jess', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 840705 AND a.name = 'Alia Shawkat';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2224, '크리스찬 슬레이터', '/6ww3uweEEXMlvtNjTlgBHxLErPF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스찬 슬레이터');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vic', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 840705 AND a.name = '크리스찬 슬레이터';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 35548, '사이먼 렉스', '/auAl58OL05S6fVXNz7neiGF8b8N.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사이먼 렉스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cody', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 840705 AND a.name = '사이먼 렉스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 37153, '조이 크래비츠', '/A8Ig9UHh8NSiUGg3xChcoF7749w.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조이 크래비츠');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 840705 AND d.name = '조이 크래비츠';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/64qJxYrFG99cKx8uF7X0SyEX00a.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 840705;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/NqqLef2ITlK8olXT4iFuUXFwSh.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 840705;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (502356, '슈퍼 마리오 브라더스', '2023-04-05', '동생을 구하기 위해! 세상을 지키기 위해! ''슈퍼 마리오''로 레벨업하기 위한 ''마리오''의 스펙터클한 스테이지가 시작된다!', '따단-딴-따단-딴 ♫ 전 세계를 열광시킬 올 타임 슈퍼 어드벤처의 등장! 뉴욕의 평범한 배관공 형제 ''마리오''와 ‘루이지’는 배수관 고장으로 위기에 빠진 도시를 구하려다 미스터리한 초록색 파이프 안으로 빨려 들어가게 된다. 파이프를 통해 새로운 세상으로 차원 이동하게 된 형제. 형 ''마리오''는 뛰어난 리더십을 지닌 ''피치''가 통치하는 버섯왕국에 도착하지만 동생 ''루이지''는 빌런 ''쿠파''가 있는 다크랜드로 떨어지며 납치를 당하고 ‘마리오’는 동생을 구하기 위해 ‘피치’와 ‘키노피오’의 도움을 받아 ''쿠파''에 맞서기로 결심한다. 그러나 슈퍼스타로 세상을 지배하려는 그의 강력한 힘 앞에 이들은 예기치 못한 위험에 빠지게 되는데...!', 93, 'All', 'RELEASED', 184.919000, 7.645000, 1362000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 502356 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 502356 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 502356 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 502356 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 502356 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 73457, '크리스 프랫', '/6DdoTgW9jdJwDmVFZRP8D0AtVFs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 프랫');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mario (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 502356 AND a.name = '크리스 프랫';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1397778, '안야 테일러조이', '/qYNofOjlRke2MlJVihmJmEdQI4v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '안야 테일러조이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Princess Peach (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 502356 AND a.name = '안야 테일러조이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 95101, 'Charlie Day', '/c0HNhjChGybnHa4eoLyqO4dDu1j.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Charlie Day');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Luigi (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 502356 AND a.name = 'Charlie Day';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 70851, '잭 블랙', '/rtCx0fiYxJVhzXXdwZE2XRTfIKE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '잭 블랙');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bowser (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 502356 AND a.name = '잭 블랙';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 298410, '키건마이클 키', '/xmdzYXP9j87a43FSiL138nLesuS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키건마이클 키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Toad (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 502356 AND a.name = '키건마이클 키';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1719706, 'Aaron Horvath', '/6AOmWzdJas3xh0xJOk1mHPstNs2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Aaron Horvath');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 502356 AND d.name = 'Aaron Horvath';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 113901, 'Michael Jelenic', '/y0tGxhXsvmxpXpFniUMyBEuAMvD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Michael Jelenic');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 502356 AND d.name = 'Michael Jelenic';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jt1GlLLvkWL2m83VX8I1qsDR187.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 502356;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9n2tJBplPbgR2ca05hS5CKXwP2c.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 502356;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (109445, '겨울왕국', '2013-11-20', '진정한 사랑만이 얼어붙은 마음을 녹일수 있어', '서로가 최고의 친구였던 자매 엘사와 안나. 하지만 언니 엘사에게는 하나뿐인 동생에게조차 말 못할 비밀이 있다. 모든 것을 얼려버리는 신비로운 힘이 바로 그 것. 엘사는 통제할 수 없는 자신의 힘이 두려워 왕국을 떠나 북쪽 산으로 도망치고, 홀로 그곳에서 얼음 궁전을 지어 지내게 된다. 한편 얼어버린 왕국의 저주를 풀기 위해 안나는 언니를 찾아 나서고, 그 과정에서 안나는 까칠한 매력의 얼음장수 크리스토프와 만나 영원히 얼어붙은 왕국을 구해내기 위해 함께 고군분투한다.', 108, 'ALL', 'RELEASED', 114.844000, 7.200000, 1274219009, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 109445 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 109445 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 109445 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 109445 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 40462, '크리스틴 벨', '/rP74dJXl7EjinGM0shQtUOlH5s2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스틴 벨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anna (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 109445 AND a.name = '크리스틴 벨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19394, '이디나 멘젤', '/eGsyJmAZNV5tUU4RYy2DIRlFVpW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이디나 멘젤');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elsa (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 109445 AND a.name = '이디나 멘젤';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 221611, '조나단 그로프', '/3kmnYKAzSc3Lp7iK5pcj97Hx9Cm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조나단 그로프');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kristoff (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 109445 AND a.name = '조나단 그로프';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 54415, '조시 게드', '/17iKlfWZBDTAucqjkhRKHr9xjIz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조시 게드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Olaf (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 109445 AND a.name = '조시 게드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1207489, 'Livvy Stubenrauch', '/vR6rjgy70mkPjDSb1JheAAdGvNZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Livvy Stubenrauch');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Young Anna (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 109445 AND a.name = 'Livvy Stubenrauch';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1120694, '제니퍼 리', '/cRxBIe0sa2JcBtczzysV4aFUaEy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '제니퍼 리');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 109445 AND d.name = '제니퍼 리';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 15774, 'Chris Buck', '/ponaYm3Xr1Pki8JVDSIzfA4NkNw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Chris Buck');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 109445 AND d.name = 'Chris Buck';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/nelAGS4rcZm2Qyuy3TSNWgU2mEL.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 109445;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/u2bZhH3nTf0So0UIC1QxAqBvC07.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 109445;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (438631, '듄', '2021-09-15', '두려움을 넘어 운명을 마주하라', '10191년, 아트레이데스 가문의 후계자인 폴은 시간과 공간을 초월해 과거와 미래를 모두 볼 수 있고, 더 나은 미래를 만들 유일한 구원자인 예지된 자의 운명을 타고났다. 그리고 어떤 계시처럼 매일 꿈에서 아라키스의 행성에 있는 한 여인을 만난다. 귀족들이 지지하는 아트레이데스 가문에 대한 황제의 질투는 폴과 그 일족들을 죽음이 기다리는 아라키스로 이끄는데...', 155, '12', 'RELEASED', 155.565000, 7.782000, 407573628, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 438631 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 438631 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1190668, '티모시 샬라메', '/BE2sdjpgsa2rNTFa66f7upkaOP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '티모시 샬라메');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paul Atreides', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 438631 AND a.name = '티모시 샬라메';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 933238, '레베카 퍼거슨', '/lJloTOheuQSirSLXNA3JHsrMNfH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레베카 퍼거슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lady Jessica Atreides', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 438631 AND a.name = '레베카 퍼거슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 25072, '오스카 아이작', '/dW5U5yrIIPmMjRThR9KT2xH6nTz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오스카 아이작');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Duke Leto Atreides', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 438631 AND a.name = '오스카 아이작';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 117642, '제이슨 모모아', '/3troAR6QbSb6nUFMDu61YCCWLKa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이슨 모모아');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Duncan Idaho', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 438631 AND a.name = '제이슨 모모아';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1640, '스텔란 스카스가드', '/x78BtYHElirO7Iw8bL4m8CnzRDc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스텔란 스카스가드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Baron Vladimir Harkonnen', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 438631 AND a.name = '스텔란 스카스가드';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 137427, '드니 빌뇌브', '/zdDx9Xs93UIrJFWYApYR28J8M6b.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '드니 빌뇌브');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 438631 AND d.name = '드니 빌뇌브';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7zV8FTYofAORGm0Umgh1mNNCym8.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 438631;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jYEW5xZkZk2WTrdbMGAPFuBqbDc.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 438631;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1219685, 'Un père idéal', '2024-04-21', '', '', 90, '', 'RELEASED', 158.113000, 6.333000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1219685 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1219685 AND g.name = 'TV 영화';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 591239, 'Laurent Gerra', '/v2Nv6rl9hnuEEAgS4Ba8P6Kd0OK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Laurent Gerra');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Michel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1219685 AND a.name = 'Laurent Gerra';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 30641, 'Eddy Mitchell', '/krcrbKymA0S2hnOuHqAQhDIUK40.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Eddy Mitchell');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jeff', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1219685 AND a.name = 'Eddy Mitchell';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2314084, 'Laure-Lucille Simon', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Laure-Lucille Simon');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Florence Pasquier', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1219685 AND a.name = 'Laure-Lucille Simon';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 28857, 'Jérôme Kircher', '/tSq33zcalu13tdMlIvKwtt0OnEW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jérôme Kircher');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Max', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1219685 AND a.name = 'Jérôme Kircher';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3779287, 'Tess Barthélémy', '/cU7GhvnL5ZkGQgoeIpoOwISY9Z0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tess Barthélémy');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Christelle', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1219685 AND a.name = 'Tess Barthélémy';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 32513, 'Hélène Fillières', '/thIjfEmxHw0bJEFBm9iefDce7zi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Hélène Fillières');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1219685 AND d.name = 'Hélène Fillières';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4xJd3uwtL1vCuZgEfEc8JXI9Uyx.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1219685;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/iafs5DG5fGq7ef0acl3xlX4BFrs.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1219685;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (572802, '아쿠아맨과 로스트 킹덤', '2023-12-20', '새로운 바다가 열린다', '아틀란티스 왕국을 이끌 왕의 자리에 오른 아쿠아맨. 그 앞에 블랙 만타가 세상을 뒤흔들 강력한 지배 아이템 블랙 트라이던트를 손에 넣게 된다. 그동안 겪지 못 했던 최악의 위협 속 아쿠아맨은 블랙 만타와 손을 잡았던 이복 동생 옴 없이는 절대적 힘이 부족한 상황. 바다를 지배할 슈퍼 히어로가 세상의 판도를 바꾼다!', 124, '12', 'RELEASED', 113.751000, 6.679000, 434381226, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 572802 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 572802 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 572802 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 117642, '제이슨 모모아', '/3troAR6QbSb6nUFMDu61YCCWLKa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이슨 모모아');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Arthur', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 572802 AND a.name = '제이슨 모모아';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17178, '패트릭 윌슨', '/tc1ezEfIY8BhCy85svOUDtpBFPt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '패트릭 윌슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Orm', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 572802 AND a.name = '패트릭 윌슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1639847, '야히아 압둘 마틴 2세', '/aBDebGZs2pAucyaK4EhHVJGm0Xu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '야히아 압둘 마틴 2세');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Black Manta', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 572802 AND a.name = '야히아 압둘 마틴 2세';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 79082, '랜들 박', '/5bDlNgwsSKAFjBdSWOwRzyMdJ0E.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '랜들 박');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Shin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 572802 AND a.name = '랜들 박';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 55085, '엠버 허드', '/vnDolRlZWiOLBg1N0hsUTz4OH4C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '엠버 허드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mera', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 572802 AND a.name = '엠버 허드';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2127, '제임스 완', '/mMYVuGyP74c7sFJHFrc5YPwj4Wd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '제임스 완');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 572802 AND d.name = '제임스 완';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/eDps1ZhI8IOlbEC7nFg6eTk4jnb.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 572802;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/cnqwv5Uz3UW5f086IWbQKr3ksJr.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 572802;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1137205, '최후의 선택', '2024-09-20', '', '젊은 종업원 낸시는 길가의 허름한 다이너에서 밤을 새우며 혼자 일하고 있다. 그곳에 혼란스러운 사건들이 휘몰아치고, 낸시는 복면을 쓴 무리에게 목숨을 위협하는 싸움에 휘말린다. 아무도 없고, 도망칠 곳도 없는 그녀는 밤을 무사히 넘기기 위해 무엇이든 해야 한다.', 81, '19', 'RELEASED', 154.398000, 6.577000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1137205 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1137205 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1137205 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1496341, 'Jessica Belkin', '/wEDiFMGe8JdtFdHwp4149pnBl5d.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jessica Belkin');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nancy Osborn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1137205 AND a.name = 'Jessica Belkin';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 23958, 'Jeremy Sisto', '/1XfuASLjBhGOhJ4os7juRJot2we.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jeremy Sisto');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Edward Osborn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1137205 AND a.name = 'Jeremy Sisto';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 928235, 'Taylor Kowalski', '/ebSheGDli3I9bTrlqYRfhjS7hLh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Taylor Kowalski');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jake Collins', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1137205 AND a.name = 'Taylor Kowalski';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3695271, 'Tara Raani', '/nzQqsHP7hoXQMNGOH2Mvr3KGdFH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tara Raani');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tabitha', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1137205 AND a.name = 'Tara Raani';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2645904, 'Joji Otani Hansen', '/v53tDDK59U0wkgRrsGQ02paiyPj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Joji Otani Hansen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bobby', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1137205 AND a.name = 'Joji Otani Hansen';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1476167, 'Alan Scott Neal', '/muMNbuV9ZY8NrT1cgqIVQo41222.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Alan Scott Neal');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1137205 AND d.name = 'Alan Scott Neal';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hgpUvybRQzRK6UagoHNQRrO8sUg.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1137205;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/A6KaZEXI9NJ1nwjmzTQDkiDTDWN.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1137205;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (976573, '엘리멘탈', '2023-06-14', '세상은 반대에 끌린다', '불, 물, 공기, 흙 4개의 원소들이 살고 있는 엘리멘트 시티. 재치 있고 불처럼 열정 넘치는 앰버는 어느 날 우연히 유쾌하고 감성적이며 물 흐르듯 사는 웨이드를 만나 특별한 우정을 쌓으며, 지금껏 믿어온 모든 것들이 흔들리는 새로운 경험을 하게 되는데...', 102, 'All', 'RELEASED', 146.429000, 7.637000, 496000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 976573 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 976573 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 976573 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 976573 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 976573 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1087262, 'Leah Lewis', '/liV9OXUeo7T19hhjFlqTELtETnW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Leah Lewis');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ember (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 976573 AND a.name = 'Leah Lewis';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1639848, '마무두 아티', '/ycUbhfZRKC8MtNK9oMwscRsl3uM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마무두 아티');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wade (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 976573 AND a.name = '마무두 아티';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1236458, '로니 델카르멘', '/lPCmkQK76DOgkmcRjg9394QPyAu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로니 델카르멘');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bernie (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 976573 AND a.name = '로니 델카르멘';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2073564, 'Shila Ommi', '/i9m2RGrANNxidj0bVKlSs0zHPNX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Shila Ommi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cinder (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 976573 AND a.name = 'Shila Ommi';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 63234, '웬디 매클렌던커비', '/d8VKC8Ms3u9XiW4e4jsy2grP02d.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '웬디 매클렌던커비');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gale (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 976573 AND a.name = '웬디 매클렌던커비';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 21198, '피터 손', '/8cQGViF2lXlcsAIvFUMWboXYXIu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피터 손');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 976573 AND d.name = '피터 손';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/w7eApyAshbepBnDyYRjSeGyRHi2.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 976573;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5luaIi1lLzLfgl8oywifeUtPN6W.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 976573;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (646385, '스크림', '2022-01-12', '아무도 믿어선 안 된다', '잔혹한 살인 사건으로 우즈보로 마을이 충격에 휩싸인 지 25년이 지난 후,  고스트 페이스를 한 새로운 살인마가 다시 십대들을 노리면서 마을의 어두운 비밀이 다시 수면 위로 떠오르는데…', 114, '18', 'RELEASED', 153.983000, 6.700000, 137743924, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 646385 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 646385 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 646385 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1373659, '멜리사 바레라', '/5oeFHUwrFz2UylWdYEXXJxfUUqL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '멜리사 바레라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sam Carpenter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 646385 AND a.name = '멜리사 바레라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 974169, '제나 오르테가', '/q1NRzyZQlYkxLY07GO9NVPkQnu8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제나 오르테가');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tara Carpenter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 646385 AND a.name = '제나 오르테가';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2174509, '메이슨 구딩', '/bmlry1xqBzNgv8Chm783ss93Cvg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '메이슨 구딩');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chad Meeks-Martin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 646385 AND a.name = '메이슨 구딩';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1508653, 'Jasmin Savoy Brown', '/qvN5Zb1WJJvKgUTnffPfzLaVIXc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jasmin Savoy Brown');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mindy Meeks-Martin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 646385 AND a.name = 'Jasmin Savoy Brown';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1030513, '잭 퀘이드', '/320qW5yEbxpmyxQ3evmClJbtKag.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '잭 퀘이드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Richie Kirsch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 646385 AND a.name = '잭 퀘이드';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1039527, 'Tyler Gillett', '/ynHIaic0nC2tDE1BKx1g5tmabbt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Tyler Gillett');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 646385 AND d.name = 'Tyler Gillett';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 66681, 'Matt Bettinelli-Olpin', '/gVb02wTpNfD2YN5oyJL2AgeFP8x.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Matt Bettinelli-Olpin');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 646385 AND d.name = 'Matt Bettinelli-Olpin';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tk5i99DjBAYTxbdBGAPIBkP6wID.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 646385;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ifUfE79O1raUwbaQRIB7XnFz5ZC.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 646385;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1134424, '만트라 워리어: 8개 달의 전설', '2023-10-11', '', '', 90, '', 'RELEASED', 130.355000, 6.600000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1134424 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1134424 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1134424 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1134424 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1134424 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1070805, 'Ranee Campen', '/p2mHicig9Obk6InadpCmdxFIMpj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ranee Campen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Princess Sita (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1134424 AND a.name = 'Ranee Campen';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2389045, 'Tachaya Pathumwan', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tachaya Pathumwan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vessuwan (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1134424 AND a.name = 'Tachaya Pathumwan';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4292274, 'Sorawit Tongteng', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sorawit Tongteng');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vayu (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1134424 AND a.name = 'Sorawit Tongteng';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4292278, 'Nalinee Cheewasakorn', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nalinee Cheewasakorn');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Budsaba (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1134424 AND a.name = 'Nalinee Cheewasakorn';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4292284, 'Pattechin Sasipatthanathada', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Pattechin Sasipatthanathada');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wela (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1134424 AND a.name = 'Pattechin Sasipatthanathada';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2014826, 'Jinanavin Veerapatra', '/yv9hj9bMq2TXsPrSlDwOu8NxaGP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jinanavin Veerapatra');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1134424 AND d.name = 'Jinanavin Veerapatra';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mynbrkIAAWw8OVVNAqC75vPwKqg.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1134424;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2wrdcWrAN53Pl7ahBWMIKMzXBFF.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1134424;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (697251, '장모의유혹', '2019-02-22', '', '', 73, '19+', 'RELEASED', 181.613000, 4.500000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 697251 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1647345, 'Lee Eun-mi', '/dMKEjZYPAbATFSJfWaHoIW5hpOJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lee Eun-mi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 697251 AND a.name = 'Lee Eun-mi';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1907998, 'Kang Min-woo', '/pIrr35CLdzsL5Gt7nGgP8lumv9a.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kang Min-woo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 697251 AND a.name = 'Kang Min-woo';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1907997, '민도윤', '/bHHn3krbHyxQIWb4JbHkPlV6Uu1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '민도윤');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 697251 AND a.name = '민도윤';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1708576, 'Ahn So-hee', '/7OWRPTEPYi7dV5a97fhXLiiHpPM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ahn So-hee');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 697251 AND a.name = 'Ahn So-hee';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2615301, 'Kim Yi-seul', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Kim Yi-seul');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 697251 AND d.name = 'Kim Yi-seul';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1fUE6TkPhNhsCXKMv16tZlUhJfV.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 697251;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lCETs5wX6QQNFn3JXm6JW7MoyuD.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 697251;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (826510, '해럴드와 보라색 크레용', '2024-07-31', '', '모험심이 강한 해롤드는 책 속에서는 무엇이든 그리기만 하면 현실로 만들 수 있어요. 해롤드는 성장하여 책 속 페이지에서 벗어나 현실 세계로 나온 후 현실 생활에 대해 배울 것이 많다는 것을 알게 됩니다.', 90, '', 'RELEASED', 153.611000, 7.000000, 24982787, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 826510 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 826510 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 826510 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 826510 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 69899, '재커리 레비', '/1W8L3kEMMPF9umT3ZGaNIiCYKfZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '재커리 레비');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Harold', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 826510 AND a.name = '재커리 레비';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1488961, '릴 렐 하워리', '/9MDi35Fy6ym7SYbO3B04vf1vBnm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '릴 렐 하워리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Moose', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 826510 AND a.name = '릴 렐 하워리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11664, '주이 디샤넬', '/30KQyjsXfrdm4Dcori7bDFTg9Le.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '주이 디샤넬');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Terry', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 826510 AND a.name = '주이 디샤넬';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4389679, 'Benjamin Bottani', '/aakV2xffibSwk9BmSpQDY4lAC08.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Benjamin Bottani');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 826510 AND a.name = 'Benjamin Bottani';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1731959, '타냐 레이놀즈', '/m5FP6lzbxYon8W6hEvj9d4h21i4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '타냐 레이놀즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Porcupine', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 826510 AND a.name = '타냐 레이놀즈';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 5714, 'Carlos Saldanha', '/oxUlCSgxKaoCRYFyS65PC2fZWrk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Carlos Saldanha');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 826510 AND d.name = 'Carlos Saldanha';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qtW6bWUEqfPLaD6KnetIlSG4adf.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 826510;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/iURqo6oIwbeegIwWXx5qrBsDcPk.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 826510;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1371540, '움졸로: 사랑에 빠진 여자들', '2024-11-08', '', '완벽한 관계를 누리는 것처럼 보였던 커플. 하지만 상대가 바람을 피우고 있다는 사실을 알게 되면서 위기가 찾아온다. 어떤 연애가 쉽기만 할까.', 0, '', 'RELEASED', 153.472000, 6.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1371540 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1371540 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1371540 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2539044, 'Shezi Sibongiseni', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Shezi Sibongiseni');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lethu', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1371540 AND a.name = 'Shezi Sibongiseni';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4997989, 'Tyson Mathonsi', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tyson Mathonsi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lucky', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1371540 AND a.name = 'Tyson Mathonsi';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3175212, 'Thobeka Shangase', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Thobeka Shangase');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Amanda', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1371540 AND a.name = 'Thobeka Shangase';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5001531, 'Gugu Gumede', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gugu Gumede');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bridget', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1371540 AND a.name = 'Gugu Gumede';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4296851, 'Ntando Menzi Mncube', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ntando Menzi Mncube');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Themba', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1371540 AND a.name = 'Ntando Menzi Mncube';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 4053082, 'Fikile Mogodi', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Fikile Mogodi');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1371540 AND d.name = 'Fikile Mogodi';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/c2MXClFpuuO82yFEzIb6LdW4Lpd.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1371540;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lrApdPptTXiypoENNYsJ7nPN6P1.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1371540;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (673, '해리 포터와 아즈카반의 죄수', '2004-05-31', '놀라움이 가득한 마법이 돌아온다', '13세가 된 해리 포터는 또 한번의 여름 방학을 이모 가족인 더즐리 일가와 우울하게 보내야 했다. 물론 마법을 쓰는 건 일체 금지. 하지만, 버논 이모부의 누이인 마지 아줌마가 더즐리 가를 방문하면서 상황은 변한다. 위압적인 마지는 해리에겐 늘 공포의 대상. 마지 아줌마 때문에 스트레스를 받던 해리는 급기야 실수로 그녀를 거대한 괴물 풍선으로 만들어 하늘 높이 띄워 보내버리고 만다. 이모와 이모부에게 벌을 받을 것도 두렵고, 일반 세상에선 마법 사용이 금지돼 있는 것을 어겼기 때문에 호그와트 마법학교와 마법부의 징계가 걱정된 해리는 밤의 어둠 속으로 도망치지만, 순식간에 근사한 보라색 3층 버스에 태워져 한 술집으로 인도되고 마는데...', 136, 'All', 'RELEASED', 153.385000, 8.000000, 789804554, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 673 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 673 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10980, '다니엘 래드클리프', '/iPg0J9UzAlPj1fLEJNllpW9IhGe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다니엘 래드클리프');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Harry Potter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 673 AND a.name = '다니엘 래드클리프';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10989, '루퍼트 그린트', '/iFlkpTaOF6fGLqxz8b0PhI0i0zN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루퍼트 그린트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ron Weasley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 673 AND a.name = '루퍼트 그린트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10990, '엠마 왓슨', '/A14lLCZYDhfYdBa0fFRpwMDiwRN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '엠마 왓슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hermione Granger', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 673 AND a.name = '엠마 왓슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1923, '로비 콜트레인', '/jOHs3xvlwRiiG2CLtso5zzmGCXg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로비 콜트레인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rubeus Hagrid', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 673 AND a.name = '로비 콜트레인';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5658, '마이클 갬본', '/3jdWkDKf4IODbG4JKTeaC7AzxZH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 갬본');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Albus Dumbledore', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 673 AND a.name = '마이클 갬본';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 11218, '알폰소 쿠아론', '/eoCHiXaQzGgx9RiwXnt3k239FLc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '알폰소 쿠아론');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 673 AND d.name = '알폰소 쿠아론';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/anwNl1xbzXoj5Ax1nVw3WoDzHlw.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 673;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/htmYEfH7TQgzsXHCnNXxmoYKQtL.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 673;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (198663, '메이즈 러너', '2014-09-10', '살아 남기 위해서는 뛰어야 한다!', '삭제된 기억, 거대한 미로로 둘러싸인 낯선 공간  모든 기억이 삭제된 채 의문의 장소로 보내진 ‘토마스’(딜런 오브라이언).  ‘토마스’는 미로에 갇힌 그곳에서 자신과 같은 상황의 사람들을 만난다.  그들은 매일 밤 살아 움직이는 미로에서 정체를 알 수 없는 죽음의 존재와 대립하며,  지옥으로부터 빠져나갈 탈출구인 지도를 완성해 나간다.  그러던 어느 날, 미로의 문이 열리고 그들은 마지막 선택의 기로에 놓이게 되는데…', 113, '12', 'RELEASED', 151.254000, 7.188000, 348319861, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 198663 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 198663 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 198663 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 198663 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 527393, '딜런 오브라이언', '/xN3GdvIlqsR838gDoblhPH0numP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '딜런 오브라이언');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Thomas', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 198663 AND a.name = '딜런 오브라이언';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 115150, '카야 스코델라리오', '/oKsGrXKGrcVoQJQ6pbjZDPOQJcM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카야 스코델라리오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Teresa Agnes', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 198663 AND a.name = '카야 스코델라리오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 78062, '어멜 아민', '/wQ5zWlzmhvp2wG6gJiqoocEYHPJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '어멜 아민');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alby', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 198663 AND a.name = '어멜 아민';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 25663, '토머스 브로디생스터', '/ovfgjgaE7aAXKYaemABX6pJFwRk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '토머스 브로디생스터');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Newt', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 198663 AND a.name = '토머스 브로디생스터';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1310760, '이기홍', '/96zkB3e07LB1hw2segekZS1PlQb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이기홍');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Minho', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 198663 AND a.name = '이기홍';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1179066, '웨스 볼', '/zVPXrhuAxYAWlwDEWCaqeUPycFx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '웨스 볼');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 198663 AND d.name = '웨스 볼';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bL0bBepUCLFcCj2ATFD40FbyDEl.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 198663;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vHJlbhsXrZ5yrO2KqCbGSIU6fRX.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 198663;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (91314, '트랜스포머: 사라진 시대', '2014-06-25', '트랜스포머의 시대는 끝났다!', '시카고에서 벌어진 오토봇과 디셉티콘의 전투로 인해 수많은 사상자가 발생하고 도시가 처참하게 파괴되자  정부는 일부 오토봇을 제외한 트랜스포머에 대해 체포령을 내린다. 시카고 사태, 5년 후 대부분의 디셉티콘이 처벌되고 오토봇 역시 모습을 감춘 상황, 엔지니어 케이드 예거는 우연히 폐기 직전 고물차로 변해있던 옵티머스 프라임을 깨우게 된다. 그리고 그의 생존이 알려지자 옵티머스 프라임을 노리고 있던 어둠의 세력 역시 모습을 드러내기 시작한다. 전세계를 새로운 위협에 몰아넣을 거대한 음모, 사상 최대 가장 강력한 적에 맞서 옵티머스 프라임과 오토봇 군단은 목숨을 건 대결에 나서는데...', 167, '12', 'RELEASED', 150.558000, 5.900000, 1104054072, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 91314 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 91314 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 91314 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 13240, '마크 월버그', '/bTEFpaWd7A6AZVWOqKKBWzKEUe8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마크 월버그');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cade Yeager', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 91314 AND a.name = '마크 월버그';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19540, 'Peter Cullen', '/9Snf4fBUkk5MrAjqtNtgZRJYJbj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Peter Cullen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Optimus Prime (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 91314 AND a.name = 'Peter Cullen';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2283, '스탠리 투치', '/q4TanMDI5Rgsvw4SfyNbPBh4URr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스탠리 투치');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joshua Joyce', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 91314 AND a.name = '스탠리 투치';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7090, 'Kelsey Grammer', '/5zik4VJim6YTSWDjC7tkp13wxUp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kelsey Grammer');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Harold Attinger', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 91314 AND a.name = 'Kelsey Grammer';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 61186, '니콜라 펠츠', '/rTaeR2ijxQGlVD3ztL7QmJTdEY4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '니콜라 펠츠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tessa Yeager', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 91314 AND a.name = '니콜라 펠츠';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 865, '마이클 베이', '/rkC7lei20x5xlFH4SivAXXBh6uR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '마이클 베이');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 91314 AND d.name = '마이클 베이';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zPbiUwVSToxgQHMAbuzint09fHf.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 91314;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wxr4Z6E83h14CogsZOzDm1vuDX3.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 91314;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1252457, '비자이, 69세', '2024-11-08', '', '입은 거칠어도 아이 같은 모험심으로 가득한 전직 수영 코치. 69세의 나이에 철인 3종 대회에 나선 그가 신기록의 영광을 향해 달린다.', 112, '', 'RELEASED', 210.412000, 7.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1252457 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1252457 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6217, 'Anupam Kher', '/f7hWJ4tvzR7uXmYoTiB41TpQ2NZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Anupam Kher');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vijay Mathew', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1252457 AND a.name = 'Anupam Kher';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 81983, 'Chunky Pandey', '/2dG7abdDNs3MVmrAa6HEBFKhch4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Chunky Pandey');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fali', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1252457 AND a.name = 'Chunky Pandey';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3136043, 'Mihir Ahuja', '/ovn1rXL2piZpww1qItFoYX4R0YI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mihir Ahuja');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Aditya', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1252457 AND a.name = 'Mihir Ahuja';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1032583, 'Guddi Maruti', '/peGAOT20fUdhel2Qf6WGWz0fLe0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Guddi Maruti');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mrs. Bakshi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1252457 AND a.name = 'Guddi Maruti';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 55070, 'Vrajesh Hirjee', '/sXqkMv81GLOh3HMRcRCJOTgJUET.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Vrajesh Hirjee');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Coach Kumar', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1252457 AND a.name = 'Vrajesh Hirjee';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1807915, 'Akshay Roy', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Akshay Roy');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1252457 AND d.name = 'Akshay Roy';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4OGfcvmrzNfvkT2S4QCQRIgNXKk.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1252457;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oU9WaOwdaxmO6HDKKVf5O3GnrO2.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1252457;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (370663, '빌로우 허', '2017-02-10', '“널 만나기 전에는 이런 적 없었어”', '누구나 한번 보면 빠져들 수밖에 없는 매력을 지녔지만 사랑을 믿지 않기에 늘 상처받는 그녀, 달라스. 패션 에디터로 성공한 커리어우먼의 삶을 살고 있지만 단조로운 일상에 지친 그녀, 재스민. 어느 날 우연히 한 파티에서 달라스를 만난 재스민은  그녀만을 바라보는 달라스의 강렬한 눈빛에 흔들리기 시작한다. 자신도 모르게 서로에게 운명처럼 이끌린 두 사람은  남들 시선은 신경 쓰지 않고 뜨겁게 사랑하지만 피할 수 없는 현실의 장벽에 가로막히고 마는데…', 92, '', 'RELEASED', 134.044000, 6.800000, 33673, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 370663 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 370663 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1543094, 'Erika Linder', '/kuHbhuXrkbpTeVQBibKSxAGEpPU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Erika Linder');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dallas', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 370663 AND a.name = 'Erika Linder';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 87579, 'Natalie Krill', '/iXcAX1tDHeWwmD8BI4htTdV3Z2p.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Natalie Krill');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jasmine', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 370663 AND a.name = 'Natalie Krill';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 224144, 'Sebastian Pigott', '/dFdv24Qa9j3WhJDxchn6s8jeepj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sebastian Pigott');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rile', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 370663 AND a.name = 'Sebastian Pigott';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 29879, 'Mayko Nguyen', '/ywp3CzNX8Nbcxfq2vWs5ueKN6m8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mayko Nguyen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joslyn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 370663 AND a.name = 'Mayko Nguyen';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 228332, 'Tommie-Amber Pirie', '/nTcwQ2pVeUtsp4ZqnIp42kL2VM3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tommie-Amber Pirie');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Quinn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 370663 AND a.name = 'Tommie-Amber Pirie';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 545330, 'April Mullen', '/kkpPBHkeKEa0CXsUEP11hOh6htk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'April Mullen');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 370663 AND d.name = 'April Mullen';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5twlT43Kt18MoUCqYgfMqppVXfa.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 370663;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xNNF4l1OVscJNchJc5xvejHzTDO.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 370663;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1086747, '더 워처스', '2024-06-06', '보이지 않는 그들이 당신을 지켜보고 있다', '거대한 숲속에서 길을 잃은 예술가 ‘미나’(다코타 패닝). 누군가의 다급한 부름에 쉘터로 들어가지만, 곧 자신이 낯선 세 명의 사람들과 이곳에 고립되었음을 깨닫는다. 그리고 매일 밤, 거울 벽 너머에서 모든 것을 지켜보는 미지의 존재가 있음을 알게 되는데… 그들은 누구인가? 무엇인가? 어디에 있는가?', 102, '', 'RELEASED', 89.814000, 6.487000, 51147812, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1086747 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1086747 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1086747 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 501, '다코타 패닝', '/hwcO08SVWkelfvgfIa5HsTMxsK8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다코타 패닝');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mina / Lucy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1086747 AND a.name = '다코타 패닝';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1335315, '조지나 캠벨', '/kgXHKjI728Nv7FLVf38S9QzHU2n.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조지나 캠벨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ciara', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1086747 AND a.name = '조지나 캠벨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 933272, '올웬 파우에레', '/jvBLYkqqEdZGGcg4YVUZhBl6or4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '올웬 파우에레');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Madeline', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1086747 AND a.name = '올웬 파우에레';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2710312, 'Oliver Finnegan', '/n7MaoeKKfmH8SyXLvKbjXWbDyQO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Oliver Finnegan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Daniel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1086747 AND a.name = 'Oliver Finnegan';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 231666, 'Alistair Brammer', '/9jYWbSSbpto6eCISIeKO9J1vTWe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alistair Brammer');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'John', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1086747 AND a.name = 'Alistair Brammer';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2957803, '이샤나 나이트 샤말란', '/un91mLZyORFhiHv4HLw3enCYm3k.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '이샤나 나이트 샤말란');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1086747 AND d.name = '이샤나 나이트 샤말란';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6uavMWNBsCeTy3s7SDQxKOFoJDg.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1086747;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oZDRuGHhe5uY8wBqFJcJZT9kdvJ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1086747;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (324786, '핵소 고지', '2016-10-07', '치열했던 핵소 고지에서 무기 없이 75명의 생명을 구한 기적의 전쟁 실화', '비폭력주의자인 도스는 전쟁으로부터 조국과 소중한 사람들을 지키기 위해 총을 들지 않아도 되는 의무병으로 육군에 자진 입대한다. 총을 들 수 없다는 이유로 필수 훈련 중 하나인 총기 훈련 마저 거부한 도스는 동료 병사들과 군 전체의 비난과 조롱을 받게 된다. 결국 군사재판까지 받게 되지만 끝까지 자신의 신념을 굽히지 않은 도스에게 군 상부는 오키나와 전투에 총기 없이 의무병으로 참전할 것을 허락하는데…', 139, '15', 'RELEASED', 148.104000, 8.196000, 175302354, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 324786 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 324786 AND g.name = '역사';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 324786 AND g.name = '전쟁';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 37625, '앤드류 가필드', '/5ydZ6TluPtxlz5G8nlWMB7SGmow.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앤드류 가필드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Desmond T. Doss', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324786 AND a.name = '앤드류 가필드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 65731, '샘 워싱턴', '/mflBcox36s9ZPbsZPVOuhf6axaJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '샘 워싱턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Captain Glover', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324786 AND a.name = '샘 워싱턴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4937, '빈스 본', '/A9fJ88dfXZGpgFTnQIK0bOtjMrj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빈스 본');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sgt Howell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324786 AND a.name = '빈스 본';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20374, '테레사 파머', '/sjSiLSCp9LS1Z0nyGpmquTBuUyr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '테레사 파머');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dorothy Schuttle', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324786 AND a.name = '테레사 파머';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 972356, 'Luke Bracey', '/ot2h7IrXpC8XSnIZDSVsj2FQ5cx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Luke Bracey');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Smitty Ryker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324786 AND a.name = 'Luke Bracey';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2461, '멜 깁슨', '/jnqHMaOslt8cef2atSmOpGRvNla.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '멜 깁슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 324786 AND d.name = '멜 깁슨';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/nlvcNogJK9R9iIj0YINApQE36FF.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 324786;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yQIBS8B9l2qXoPoPtxSXvH7CfoT.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 324786;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1139095, 'Little Bites', '2024-10-04', '', '', 106, '', 'RELEASED', 121.284000, 6.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1139095 AND g.name = '공포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2829463, 'Krsy Fox', '/6bRT5c4MoP7yP3yza5HFdV9ajra.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Krsy Fox');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mindy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1139095 AND a.name = 'Krsy Fox';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 117190, 'Jon Sklaroff', '/f2sObKMPWfp2uA6rWQg0IeA65cl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jon Sklaroff');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agyar', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1139095 AND a.name = 'Jon Sklaroff';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 27995, '바바라 크램턴', '/yXIEQiWM3hhgqmx2bJfRTp9341f.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '바바라 크램턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sonya Whitfield', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1139095 AND a.name = '바바라 크램턴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 533717, 'Chaz Bono', '/fs5SWNqzkT5WngRzgVKOzk7lko6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Chaz Bono');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paul', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1139095 AND a.name = 'Chaz Bono';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5141, 'Heather Langenkamp', '/xI20Uddk9COIfgifaA4NRsXyZMD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Heather Langenkamp');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ellenor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1139095 AND a.name = 'Heather Langenkamp';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1203529, 'Spider One', '/lVlOAVEtX6PeTggFM10Ep4miyt6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Spider One');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1139095 AND d.name = 'Spider One';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/11WUy1jqjk2ZMj5UjvfmBAIYDvr.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1139095;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tQs7iqsL1szbLZlI99eXVRxDIYB.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1139095;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (438148, '미니언즈 2', '2022-06-29', '오랜마니언!', '세계 최고의 슈퍼 악당을 꿈꾸는 미니보스 ‘그루’와 그를 따라다니는 미니언들. 어느 날 그루는 최고의 악당 조직 ‘빌런6’의 마법 스톤을 훔치는 데 성공하지만 뉴페이스 미니언 ‘오토’의 실수로 스톤을 잃어버리고 빌런6에게 납치까지 당한다. 미니보스를 구하기 위해 잃어버린 스톤을 되찾아야 하는 ‘오토’, 그리고 쿵푸를 마스터해야 하는 ‘케빈’, ‘스튜어트’, ‘밥’! 올 여름 극장가를 점령할 MCU(미니언즈 시네마틱 유니버스)가 돌아온다!', 87, 'ALL', 'RELEASED', 102.739000, 7.325000, 940203765, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 438148 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 438148 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 438148 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 438148 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4495, '스티브 카렐', '/1LQDqpcDQTtQb90o9vagbuCHueb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스티브 카렐');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gru (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 438148 AND a.name = '스티브 카렐';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 124747, 'Pierre Coffin', '/eAA9uWRqHlm1LT3nZfXb7UuPfVb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Pierre Coffin');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kevin / Stuart / Bob / Minions (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 438148 AND a.name = 'Pierre Coffin';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1903, '알란 아킨', '/lTMMpkqL0G3WeFNfbtdP5COZEiX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '알란 아킨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wild Knuckles (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 438148 AND a.name = '알란 아킨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 40036, '타라지 P. 헨슨', '/jUU2X9mDwJaAniEmJOfvImBS9qb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '타라지 P. 헨슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Belle Bottom (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 438148 AND a.name = '타라지 P. 헨슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1620, '양자경', '/1X64WNBSitgqUPcZXxMoIo7143W.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '양자경');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Master Chow (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 438148 AND a.name = '양자경';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 8023, 'Kyle Balda', '/uay7ZJLuW47ClGfQ4FGWgXZOerv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Kyle Balda');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 438148 AND d.name = 'Kyle Balda';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1heBUD8o0sgdqLWyeXkylR2POKb.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 438148;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uMSxXLfH7v30gRNBqsQaSP3yqX5.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 438148;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (872585, '오펜하이머', '2023-07-19', '나는 이제 죽음이요, 세상의 파괴자가 되었다.', '제2차 세계대전 당시 핵무기 개발을 위해 진행되었던 비밀 프로젝트 ‘맨해튼 프로젝트’를 주도한 미국의 물리학자 ‘로버트 오펜하이머’의 이야기', 181, '15', 'RELEASED', 134.489000, 8.100000, 952000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 872585 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 872585 AND g.name = '역사';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2037, '킬리언 머피', '/llkbyWKwpfowZ6C8peBjIV9jj99.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '킬리언 머피');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'J. Robert Oppenheimer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 872585 AND a.name = '킬리언 머피';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5081, '에밀리 블런트', '/zpJ7pupuNF3W0zTxm6yioGIoxbd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에밀리 블런트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kitty Oppenheimer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 872585 AND a.name = '에밀리 블런트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1892, '맷 데이먼', '/4KAxONjmVq7qcItdXo38SYtnpul.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '맷 데이먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Leslie Groves', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 872585 AND a.name = '맷 데이먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3223, '로버트 다우니 주니어', '/5qHNjhtjMD4YWH3UP0rm4tKwxCL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 다우니 주니어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lewis Strauss', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 872585 AND a.name = '로버트 다우니 주니어';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1373737, '플로렌스 퓨', '/6Sjz9teWjrMY9lF2o9FCo4XmoRh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '플로렌스 퓨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jean Tatlock', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 872585 AND a.name = '플로렌스 퓨';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 525, '크리스토퍼 놀란', '/xuAIuYSmsUzKlUMBFGVZaWsY3DZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스토퍼 놀란');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 872585 AND d.name = '크리스토퍼 놀란';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jpD6z9fgNe7OqsHoDeAWQWoULde.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 872585;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fm6KqXpk3M2HVveHwCrBSSBaO0V.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 872585;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1181068, 'Ipar Adalah Maut', '2024-06-13', '', '', 131, '', 'RELEASED', 140.594000, 6.850000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1181068 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1645578, 'Michelle Ziudith', '/tPdN1dv7lSlOrjqi4NmfxCABn0j.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Michelle Ziudith');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nisa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1181068 AND a.name = 'Michelle Ziudith';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1644983, 'Deva Mahenra', '/z2CYXN4JYagVNNXs2x2myuaAtpY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Deva Mahenra');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Aris', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1181068 AND a.name = 'Deva Mahenra';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2431308, 'Davina Karamoy', '/uJTuKsiACfkyYArHdTzrUilGp6o.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Davina Karamoy');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rani', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1181068 AND a.name = 'Davina Karamoy';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3893934, 'Alesha Fadillah', '/a9rvVRKhwqeKK6DEC9hYCBUb6v7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alesha Fadillah');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Raya', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1181068 AND a.name = 'Alesha Fadillah';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1202407, 'Dewi Irawan', '/fOlXmM66SY7Uf69HQYlfgZ3CNdw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Dewi Irawan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Asri (Nisa & Rani''s Mother)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1181068 AND a.name = 'Dewi Irawan';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 88785, 'Hanung Bramantyo', '/fImb8IlheUIgeOjxVmPijXvPhXR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Hanung Bramantyo');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1181068 AND d.name = 'Hanung Bramantyo';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lebILB4XqI60dUkJWYYsnaTm24D.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1181068;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/p0nHE2iqzYRNbuLO54Ekp9m3BkS.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1181068;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (285, '캐리비안의 해적: 세상의 끝에서', '2007-05-19', '전 세계가 세상의 끝에서 만난다', '윌 터너와 엘리자베스 스완, 바르보사 선장은 바다괴물 크라켄에 잡아먹힌 잭 스패로우를 구하는 데 도움을 얻기 위해 싱가포르의 해적 사오펭을 찾아간다. 이들은 잭 스패로우가 있어야만 해적연맹의 아홉 영주를 모아 연합함대를 구성할 수 있고, 해적 소탕에 쌍심지를 켠 동인도회사에 맞설 수 있다. 동인도회사의 커틀러 베켓 경은 유령선 플라잉 더치맨과 그 선장 데비 존스를 수하에 거느리게 된 터. 이 힘이 막강해서, 해적 연합함대는 다시 바다의 여신 칼립소에게 도움을 요청하기로 한다.', 169, '12', 'RELEASED', 115.415000, 7.258000, 961000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 285 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 285 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 285 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 85, '조니 뎁', '/6GkSSnhlLirHidf6hThCEFCfYhZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조니 뎁');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jack Sparrow', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 285 AND a.name = '조니 뎁';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 114, '올랜도 블룸', '/lwQoA0qJTCZ6l2FH6PjmhRQjiaB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '올랜도 블룸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Will Turner', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 285 AND a.name = '올랜도 블룸';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 116, '키이라 나이틀리', '/bRC1B2VwV0wK3ElciFAK6QZf2wD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키이라 나이틀리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elizabeth Swann', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 285 AND a.name = '키이라 나이틀리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 118, '제프리 러쉬', '/4zQuC1j0p7HkJlfuT8aJoyZAgQm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제프리 러쉬');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hector Barbossa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 285 AND a.name = '제프리 러쉬';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1640, '스텔란 스카스가드', '/x78BtYHElirO7Iw8bL4m8CnzRDc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스텔란 스카스가드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'William "Bootstrap Bill" Turner', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 285 AND a.name = '스텔란 스카스가드';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1704, '고어 버빈스키', '/rSQRdmLNAwdKxrtvBSSlBmWeSsj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '고어 버빈스키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 285 AND d.name = '고어 버빈스키';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bTotG6tZERQqfKr2TDjwdjW8It4.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 285;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qvzVWohbdcrnaD9qaa6IjrjXHMZ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 285;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (808, '슈렉', '2001-05-18', '2001년 여름, 가장 재미있는 상상이 세상을 움직인다!', '성 밖 늪지대에 사는 엄청나게 못생기고 무지무지 큰 괴물 슈렉. 지저분한 진흙으로 샤워를 즐기고 동화책은 화장실 휴지 삼아 쓰는 그는 혼자만의 시간을 즐긴다.  그러던 어느 날, 자신만의 고요한 안식처에 백설공주, 신데렐라, 빗자루를 타고 다니는 마녀, 피리부는 아저씨, 피터팬, 피노키오 등등.. 동화속의 주인공들이 모두 쳐들어온다. 그 중에서도 가장 귀찮은 건 쉴새없이 떠들어대는 당나귀 덩키. 알고보니 얼굴이 몸의 반을 차지하는 1m도 안되는 숏다리 파콰드영주가 동화속의 주인공들을 다 쫓아낸것. 결국 슈렉은 파콰드영주와 담판을 지으러 떠난다.  하지만 일은 이상하게 꼬여 결국 파콰드영주 대신 불뿜는 용의 성에 갇힌 피오나 공주를 구하러 떠나게 되는데..', 90, 'ALL', 'RELEASED', 147.178000, 7.744000, 488628188, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 808 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 808 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 808 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 808 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 808 AND g.name = '가족';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12073, '마이크 마이어스', '/gjfDl52Kk02MPgUYFjs9bOy33OY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이크 마이어스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shrek / Blind Mouse (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 808 AND a.name = '마이크 마이어스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 776, '에디 머피', '/hXFDS5b1Wu1SECKG2nJVIao7iSu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에디 머피');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Donkey (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 808 AND a.name = '에디 머피';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6941, '카메론 디아즈', '/d4f4cQ9EiYuvNMjT1IB2h06KoRx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카메론 디아즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Princess Fiona (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 808 AND a.name = '카메론 디아즈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12074, '존 리스고', '/8Y1sjBdnVR483S8PrnAQzlESwhx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '존 리스고');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lord Farquaad (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 808 AND a.name = '존 리스고';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1925, '뱅상 카셀', '/ivUQfhn5olOmR5hthN8C8GThBV4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '뱅상 카셀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Monsieur Hood (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 808 AND a.name = '뱅상 카셀';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 5524, '앤드류 애덤슨', '/qqIAVKAe5LHRbPyZUlptsqlo4Kb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '앤드류 애덤슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 808 AND d.name = '앤드류 애덤슨';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 12058, '빅키 젠슨', '/dDSlofPZbJxtYBO2f73XjNwcFVT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '빅키 젠슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 808 AND d.name = '빅키 젠슨';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hABnmgdAU3u6Nu61b9GUGaOseVl.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 808;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sRvXNDItGlWCqtO3j6wks52FmbD.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 808;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (592831, '메갈로폴리스', '2024-09-25', '', '', 138, '', 'RELEASED', 146.763000, 5.600000, 13683886, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 592831 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 592831 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1023139, '애덤 드라이버', '/7ILQO5Hkj8Qa4XLiigC4yxvoZ8R.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '애덤 드라이버');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cesar Catilina', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 592831 AND a.name = '애덤 드라이버';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4808, '지안카를로 에스포지토', '/rcXnr82TwDzU4ZGdBeNXfG0ZQnZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '지안카를로 에스포지토');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mayor Cicero', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 592831 AND a.name = '지안카를로 에스포지토';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1251069, '나탈리 엠마뉴엘', '/jZ0VHwoCqoUIkIKdyALwr6Xu2Wo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나탈리 엠마뉴엘');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Julia Cicero', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 592831 AND a.name = '나탈리 엠마뉴엘';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 119592, '오브리 플라자', '/dHcjm5tJWZzbHK8de5lonhYvZ9w.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오브리 플라자');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wow Platinum', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 592831 AND a.name = '오브리 플라자';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10959, '샤이아 라보프', '/ljlpaXEManszxIcshYQoqo4au03.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '샤이아 라보프');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Clodio Pulcher', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 592831 AND a.name = '샤이아 라보프';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1776, '프랜시스 포드 코폴라', '/3Pblihd6KjXliie9vj4iQJwbNPU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '프랜시스 포드 코폴라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 592831 AND d.name = '프랜시스 포드 코폴라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8Sok3HNA3r1GHnK2lCytHyBz1A.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 592831;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/nA0RDmSDqpN5tLun4sCqdPekObD.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 592831;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (360784, '히든', '2015-09-15', '', '지상에 퍼진 정체모를 바이러스 때문에 지하에 피신해서 생활하는 가족이야기', 84, '', 'RELEASED', 113.481000, 6.900000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 360784 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 360784 AND g.name = '공포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 28846, '알렉산더 스카스가드', '/6VNNddrSrIVgdzhXr4Zg89gmOzY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '알렉산더 스카스가드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ray', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 360784 AND a.name = '알렉산더 스카스가드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 127558, '안드레아 라이즈보로', '/dQzAXj6R8cTRqTwGzxUgegXbV13.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '안드레아 라이즈보로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Claire', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 360784 AND a.name = '안드레아 라이즈보로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 112742, '에밀리 앨린 린드', '/gc8wZyGHRmjFqZx4ixN3tFJHqly.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에밀리 앨린 린드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zoe', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 360784 AND a.name = '에밀리 앨린 린드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 83423, 'Heather Doerksen', '/jf5agJ6xYVQ4Ozr7zXf0Ov9AOVj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Heather Doerksen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jillian', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 360784 AND a.name = 'Heather Doerksen';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1512709, 'William Ainscough', '/60IUJFsDMo7bTTjCFhzg9ZfNKAf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'William Ainscough');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joey Neary', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 360784 AND a.name = 'William Ainscough';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1179422, 'Ross Duffer', '/kN1HdFViQkcJOQlNcvvFJIx9Uju.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Ross Duffer');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 360784 AND d.name = 'Ross Duffer';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1179419, 'Matt Duffer', '/kXO5CnSxC0znMAICGxnPeuGP73U.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Matt Duffer');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 360784 AND d.name = 'Matt Duffer';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oiNc4aTeaUMVNkxL0UWnezmKJgM.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 360784;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/iXRxlRsBr0mGr9Wx3OPbVdbUJzl.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 360784;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (769, '좋은 친구들', '1990-09-12', '마피아 영화의 분수령', '아일랜드계 이탈리아인 헨리 힐와 토미는 13살에 마피아에 입문해 지미와 함께 트럭이나 공항 화물을 훔치는 일을 한다. 결혼 후에도 마피아 생활을 계속하는 헨리는 이제 조직에서도 안정된 위치와 경제적 여유를 갖는다.  어느 날 헨리와 지미는 공항터미널 사건을 모의해 현금 6백만 달러라는 엄청한 돈을 훔친다. 이 사건을 은폐하기 위해 혈안이 된 지미는 모의에 참여했던 사람들을 죽이고, 토미는 마피아 조직에 가담했다가 살해당한다. 엎친데 덮친격으로 헨리마저 마약거래로 경찰서에 잡혀 들어가는데...', 146, '18', 'RELEASED', 146.232000, 8.458000, 46800000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 769 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 769 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 380, '로버트 드 니로', '/cT8htcckIuyI1Lqwt1CvD02ynTh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 드 니로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'James Conway', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 769 AND a.name = '로버트 드 니로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11477, '레이 리오타', '/rhaCUi04uEXDFvuPM5Drj1AprE6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레이 리오타');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Henry Hill', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 769 AND a.name = '레이 리오타';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4517, '조 페시', '/4AO0Rwdg2ky8Usmgzgj0dvhy7Zw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조 페시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tommy DeVito', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 769 AND a.name = '조 페시';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11478, '로렌 브라코', '/tAtpCzN4sTOy1RHpMpJj52zTO4S.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로렌 브라코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Karen Hill', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 769 AND a.name = '로렌 브라코';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7004, '폴 소비노', '/4gDEo0wty5ixtrpV0U17PlHoFik.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '폴 소비노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paul Cicero', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 769 AND a.name = '폴 소비노';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1032, '마틴 스콜세지', '/9U9Y5GQuWX3EZy39B8nkk4NY01S.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '마틴 스콜세지');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 769 AND d.name = '마틴 스콜세지';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zF9hSBS1t7PVFLo01GrJ3OjGi67.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 769;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7TF4p86ZafnxFuNqWdhpHXFO244.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 769;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (447277, '인어공주', '2023-05-18', '알고 싶어, 저 너머의 세상', '아틀란티카 바다의 왕 트라이튼의 사랑스러운 막내딸인 인어 에리얼은 늘 인간들이 사는 바다 너머 세상으로의 모험을 꿈꾼다. 어느 날, 우연히 바다 위로 올라갔다가 폭풍우 속 가라앉는 배에 탄 인간 에릭 왕자의 목숨을 구해준다. 갈망하던 꿈과 운명적인 사랑을 이루기 위해 용기를 낸 에리얼은 사악한 바다 마녀 울슐라와의 위험한 거래를 통해 다리를 얻게 된다. 드디어 바다를 벗어나 그토록 원하던 인간 세상으로 가게 되지만, 그 선택으로 에리얼과 아틀란티카 왕국 모두 위험에 처하게 되는데… 바닷속, 그리고 그 너머 아름다운 꿈과 사랑의 멜로디가 펼쳐진다!', 135, 'ALL', 'RELEASED', 144.851000, 6.300000, 569626289, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 447277 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 447277 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 447277 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 447277 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1735828, '할리 베일리', '/acOAv6ijsYjLb8p1IyUtdZTgwKC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '할리 베일리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ariel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447277 AND a.name = '할리 베일리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1599391, '조너 하우어-킹', '/4toLHmAhq8W5EnwgDvjwqAjOQfW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조너 하우어-킹');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Prince Eric', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447277 AND a.name = '조너 하우어-킹';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1652371, '더비드 디그스', '/v4VmQP0iFFW7SU2ouE2Qhu27Hgy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '더비드 디그스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sebastian (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447277 AND a.name = '더비드 디그스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1625558, '아콰피나', '/l5AKkg3H1QhMuXmTTmq1EyjyiRb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아콰피나');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Scuttle (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447277 AND a.name = '아콰피나';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1277188, '제이컵 트람블레이', '/h8CXDp86Y36CUENF4SXJq5ZRTsf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이컵 트람블레이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Flounder (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447277 AND a.name = '제이컵 트람블레이';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 17633, '롭 마셜', '/4cTHkbMpsHHNI23HP3RHNLFoPRz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '롭 마셜');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 447277 AND d.name = '롭 마셜';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/do9pxOrrFqgyebHwxj2IYtZXQIp.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 447277;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7VEUOEfRzzrQfWddlIyLUKvh6Nf.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 447277;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (269149, '주토피아', '2016-02-11', '정글의 도시에 오신것을 환영합니다', '어릴 적부터 경찰이 꿈이었던 토끼 주디 홉스는 주변의 만류에도 불구하고 경찰학교에 들어가 당당히 수석으로 졸업한다. 온갖 동물들이 모여 살며 교양 있고 세련된 라이프 스타일을 주도하는 대도시 주토피아에 자원한 주디는 의욕을 안고 출근하지만, 상사는 작은 토끼라는 이유로 주차관리 같은 소일거리만 시킨다. 따분하게 업무를 보던 주디는 아이스크림 불법 판매를 일삼는 사기꾼 여우 닉 와일드를 알게 되고, 그와 함께  48시간 안에 주토피아에서 벌어지고 있는 연쇄 실종사건을 추적해야만 하는데...', 108, 'ALL', 'RELEASED', 110.284000, 7.800000, 1023784195, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 269149 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 269149 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 269149 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 269149 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 23532, '제이슨 베이트먼', '/8e6mt0vGjPo6eW52gqRuXy5YnfN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이슨 베이트먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nick Wilde (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 269149 AND a.name = '제이슨 베이트먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 417, '지니퍼 굿윈', '/xOCA2WN5MRfXmJmlzEbFEhIbfIQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '지니퍼 굿윈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Judy Hopps (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 269149 AND a.name = '지니퍼 굿윈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17605, '이드리스 엘바', '/be1bVF7qGX91a6c5WeRPs5pKXln.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이드리스 엘바');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chief Bogo (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 269149 AND a.name = '이드리스 엘바';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 213001, '제니 슬레이트', '/iNpXig5Djkh5moYG4TCekIATs5B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제니 슬레이트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Assistant Mayor Dawn Bellwether (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 269149 AND a.name = '제니 슬레이트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 41565, 'Nate Torrence', '/yT9o149xPygdY0NsF9sNgiQwuru.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nate Torrence');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Officer Benjamin Clawhauser (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 269149 AND a.name = 'Nate Torrence';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 76595, '바이런 하워드', '/ePJXkxrD44nM0VB7Xx9Q4ityzfT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '바이런 하워드');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 269149 AND d.name = '바이런 하워드';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 165787, 'Rich Moore', '/oIAmkZf9LuJuMqR8zSchoD3FJT8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Rich Moore');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 269149 AND d.name = 'Rich Moore';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fZcab1yiKXsjx3S8D4KRHZsnMGC.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 269149;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/p2fRZzxla6NoRbIH2KOZq0gHb5S.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 269149;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (597, '타이타닉', '1997-11-18', '차가운 바닷물 속에 잠든 러브 스토리', '"내 인생의 가장 큰 행운은 당신을 만난 거야" 우연한 기회로 티켓을 구해 타이타닉호에 올라탄 자유로운 영혼을 가진 화가 ‘잭’(레오나르도 디카프리오)은 막강한 재력의 약혼자와 함께 1등실에 승선한 ‘로즈’(케이트 윈슬렛)에게 한눈에 반한다. 진실한 사랑을 꿈꾸던 ‘로즈’ 또한 생애 처음 황홀한 감정에 휩싸이고, 둘은 운명 같은 사랑에 빠지는데… 가장 차가운 곳에서 피어난 뜨거운 사랑! 영원히 가라앉지 않는 세기의 사랑이 펼쳐진다!', 194, '15', 'RELEASED', 136.878000, 7.906000, 2264162353, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 597 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 597 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6193, '레오나르도 디카프리오', '/wo2hJpn04vbtmh0B9utCFdsQhxM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레오나르도 디카프리오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jack Dawson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 597 AND a.name = '레오나르도 디카프리오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 204, '케이트 윈슬렛', '/e3tdop3WhseRnn8KwMVLAV25Ybv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케이트 윈슬렛');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rose DeWitt Bukater', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 597 AND a.name = '케이트 윈슬렛';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1954, '빌리 제인', '/wr4fuwLzQvW1G0MS7cmQ3ObFjvL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빌리 제인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cal Hockley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 597 AND a.name = '빌리 제인';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8534, '캐시 베이츠', '/qZRTzTjV4OC1Ii9a0n8QBS9zMOd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '캐시 베이츠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Molly Brown', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 597 AND a.name = '캐시 베이츠';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3713, '프랜시스 피셔', '/3iNDgd54IIj8g8hGqhhUjM6TeWd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '프랜시스 피셔');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ruth DeWitt Bukater', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 597 AND a.name = '프랜시스 피셔';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2710, '제임스 카메론', '/9NAZnTjBQ9WcXAQEzZpKy4vdQto.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '제임스 카메론');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 597 AND d.name = '제임스 카메론';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/132KjhVrWUqKFVfMAKKNkherytA.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 597;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4eylxg940ocgdkHjab2Tm8jv2hb.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 597;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1358752, 'Skinford 2: The Curse', '2024-05-20', '', '', 0, '', 'RELEASED', 139.222000, 2.000000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1358752 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1358752 AND g.name = '액션';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1772511, 'Nik Kacevski', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Nik Kacevski');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1358752 AND d.name = 'Nik Kacevski';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/auWtuSMLyiViVefPsj9JZA84n9I.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1358752;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1358752;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (150689, '신데렐라', '2015-03-06', '착한 마음과 용기를 가지렴, 꿈꾸던 일이 이루어질 거야', '어린 시절 어머니를 여읜 엘라는 새엄마와 그녀의 두 딸과 함께 살게 된다. 무역상인 아버지마저 타지에서 돌아가시자 새엄마와 의붓 언니들은 엘라를 재투성이라는 뜻의 신데렐라라고 부르며 온갖 구박을 일삼는다. 항상 착한 마음씨와 용기를 가지라는 엄마의 유언을 지켜나가던 엘라는 숲 속에서 왕궁의 견습생이라는 키트를 만난다. 왕궁에서 무도회가 열리자 엘라는 키트를 만날 생각에 부풀지만, 새엄마는 엘라의 드레스를 찢어버린다. 상심에 빠져 울고 있던 엘라는 거지 여인으로 분장한 요정 대모를 만나는데...', 113, 'ALL', 'RELEASED', 123.438000, 6.800000, 543514353, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 150689 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 150689 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 150689 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 150689 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1016168, '릴리 제임스', '/o40Uh2rfFWSqNN6heOWHkuxvjAd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '릴리 제임스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cinderella', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 150689 AND a.name = '릴리 제임스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 112, '케이트 블란쳇', '/vUuEHiAR0eD3XEJhg2DWIjymUAA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케이트 블란쳇');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Stepmother, Lady Tremaine', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 150689 AND a.name = '케이트 블란쳇';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 512991, '리차드 매든', '/9QQFfVZ6PLe3WVmOL56wGNOnbGL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리차드 매든');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Prince', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 150689 AND a.name = '리차드 매든';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1640, '스텔란 스카스가드', '/x78BtYHElirO7Iw8bL4m8CnzRDc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스텔란 스카스가드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Grand Duke', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 150689 AND a.name = '스텔란 스카스가드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 302165, '홀리데이 그레인저', '/3hJtIZo3QzXz1Soy2f0D8BoPcxf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '홀리데이 그레인저');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anastasia Tremaine', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 150689 AND a.name = '홀리데이 그레인저';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 11181, '케네스 브래너', '/AbCqqFxNi5w3nDUFdQt0DGMFh5H.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '케네스 브래너');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 150689 AND d.name = '케네스 브래너';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3yNm2SdzdcXYXv8D7cS9RV5H6DG.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 150689;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/q7vmCCmyiHnuKGMzHZlr0fD44b9.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 150689;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (348, '에이리언', '1979-05-25', '우주에서는 아무도 당신의 비명소리를 들을 수 없다', '2122년, 2천만톤의 광물과 7명의 승무원을 태우고 지구로 귀환중인 화물선 노스트로모호의 메인 컴퓨터 마더는 어떤 위성에서 나오는 알 수 없는 신호를 포착하게 된다. 마더에 의해 동면중 깨어난 승무원들은 이 신호를 조사하기 위해 혹성 LA-426에 착륙한다. 이들 중엔 2등 항해사인 엘렌 리플리도 있다. 혹성에서 정체 불명의 우주선을 발견한 그들은 탐사에 나서지만, 우주선은 이미 오래전에 파괴되어 썩고 있었으며 승무원들은 모두 미이라로 변해 있다. 사고 원인을 찾기 위해 좀 더 안으로 들어간 조사반은 여기저기 계란 모양의 물체가 있는 산란실을 발견하는데...', 117, '15', 'RELEASED', 142.471000, 8.158000, 104931801, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 348 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 348 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4139, 'Tom Skerritt', '/xP2BNCa5NixphQOpFCl44B0HWgW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tom Skerritt');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dallas', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 348 AND a.name = 'Tom Skerritt';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10205, '시고니 위버', '/wTSnfktNBLd6kwQxgvkqYw6vEon.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시고니 위버');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ripley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 348 AND a.name = '시고니 위버';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5047, 'Veronica Cartwright', '/wIqQnSU4HJLYS2JE4S6jjyb2jMP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Veronica Cartwright');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lambert', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 348 AND a.name = 'Veronica Cartwright';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5048, '해리 딘 스탠턴', '/197UiLVdxPOv8196sqmUpJzOQB5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '해리 딘 스탠턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brett', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 348 AND a.name = '해리 딘 스탠턴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5049, '존 허트', '/8NriFCt6BxzW1Ex2TxGJfvQibrz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '존 허트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kane', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 348 AND a.name = '존 허트';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 578, '리들리 스콧', '/zABJmN9opmqD4orWl3KSdCaSo7Q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '리들리 스콧');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 348 AND d.name = '리들리 스콧';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/k3m1RdlYUlCx51PxxNMlmbm7QSk.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 348;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hdHIjZxq3SWFqpAz4NFhdbud0iz.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 348;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (57158, '호빗: 스마우그의 폐허', '2013-12-11', '전쟁은 지금부터다', '사나운 용 스마우그가 빼앗아간 동쪽의 외로운 산 에레보르 왕국을 되찾기 위해 뜻하지 않은 여정을 떠나게 된 호빗 빌보 배긴스와 간달프, 그리고 난쟁이족 왕족의 후예 소린이 이끄는 13명의 난쟁이족. 원정대는 외로운 산으로 가는 길에 어둠의 숲에서 모습을 자유자재로 바꾸는 베오른과 거대한 거미떼를 만나고, 난쟁이들에게 적대적인 엘프족에게 잡혔다가 도망쳐 호수마을을 지나는 등 다양한 모험을 하게 된다. 그리고 마침내 지금껏 만났던 그 어떤 존재보다도 위험하고 모두의 용기와 우정, 지혜의 한계를 시험에 들게 한 용 스마우그와 맞닥뜨리게 되는데...', 161, '12', 'RELEASED', 142.202000, 7.600000, 958400000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 57158 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 57158 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 57158 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1327, '이안 맥켈런', '/5cnnnpnJG6TiYUSS7qgJheUZgnv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이안 맥켈런');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gandalf the Grey', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 57158 AND a.name = '이안 맥켈런';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7060, '마틴 프리먼', '/pLG7mmxBXXTVAgzXvQl0ap3qlJU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마틴 프리먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bilbo Baggins', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 57158 AND a.name = '마틴 프리먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 30315, '리차드 아미티지', '/xmkrhHy4pqjpn60QTZvReJATM40.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리차드 아미티지');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Thorin Oakenshield', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 57158 AND a.name = '리차드 아미티지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 71580, '베네딕트 컴버배치', '/fBEucxECxGLKVHBznO0qHtCGiMO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '베네딕트 컴버배치');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Smaug / Sauron', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 57158 AND a.name = '베네딕트 컴버배치';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 114, '올랜도 블룸', '/lwQoA0qJTCZ6l2FH6PjmhRQjiaB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '올랜도 블룸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Legolas', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 57158 AND a.name = '올랜도 블룸';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 108, '피터 잭슨', '/bNc908d59Ba8VDNr4eCcm4G1cR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피터 잭슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 57158 AND d.name = '피터 잭슨';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tjqqREluyB6TPVauAv3UaeU7Xme.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 57158;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/npCPnwDyWfQltGfIZKN6WqeUXGI.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 57158;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (177572, '빅 히어로', '2014-10-24', '치명적인 몸매! 꼭 안아주고 싶은 힐링로봇 ‘베이맥스’ 가장 사랑스러운 슈퍼히어로가 온다!', '천재 공학도 ‘테디’가 개발한 힐링로봇 ‘베이맥스’! ‘테디’의 동생이자 로봇 전문가인 ‘히로’는 도시가 파괴될 위기에 처하자 ‘베이맥스’를 슈퍼히어로로 업그레이드 하는데... 과연 이들은 도시의 위험을 막아낼 수 있을까?', 102, 'ALL', 'RELEASED', 142.201000, 7.733000, 657827828, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 177572 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 177572 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 177572 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 177572 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 177572 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 66580, '스콧 애드싯', '/vbbuugUWrZhxA7ASWYiGqdZ6Dtf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스콧 애드싯');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Baymax (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 177572 AND a.name = '스콧 애드싯';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 515510, 'Ryan Potter', '/3Hdip1zNYrea3V7uzJQYxTps5Ne.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ryan Potter');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hiro Hamada (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 177572 AND a.name = 'Ryan Potter';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 82093, '다니엘 헤니', '/elAolohpUG5nS99EZxHZjd44DsS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다니엘 헤니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tadashi Hamada (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 177572 AND a.name = '다니엘 헤니';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 51990, 'T.J. 밀러', '/rRrVvBxOkyYM5XdLXimShHR1Itn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'T.J. 밀러');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fred (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 177572 AND a.name = 'T.J. 밀러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 78324, '제이미 정', '/5KS919slWvKwK2fcE3jpkEodlxs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이미 정');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'GoGo Tomago (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 177572 AND a.name = '제이미 정';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 70238, 'Chris Williams', '/eE2NDdeKN1DC3XuV6L4xuEbVaS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Chris Williams');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 177572 AND d.name = 'Chris Williams';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 227439, 'Don Hall', '/wT8rqrI65ROqwuJUGEv1A0rLoE0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Don Hall');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 177572 AND d.name = 'Don Hall';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gLabmTVZpNOGa8LEiMvTi9hJPDe.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 177572;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4s2d3xdyqotiVNHTlTlJjrr3q0H.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 177572;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1032823, '트랩', '2024-07-31', '팝스타의 콘서트, 경찰의 거대한 덫… 탈출해야만 한다!', '10대 딸과 함께 인기 팝스타의 콘서트를 찾은 쿠퍼. 신나게 콘서트를 즐기던 그는 순간 이상한 낌새를 느끼고, 그곳이 최악의 연쇄살인마를 잡기 위한 거대한 덫임을 알게 된다. 그런데 문제는 쿠퍼 자신이 바로 연쇄살인마라는 것! 이제 쿠퍼는 수많은 관객과 경찰을 따돌리고 어린 딸과 함께 무사히 이 덫에서 탈출해야만 하는데…', 105, '15', 'RELEASED', 106.254000, 6.462000, 82406909, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1032823 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1032823 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2299, '조쉬 하트넷', '/8nTEioiir92fGHcASarPxkjF6kG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조쉬 하트넷');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cooper', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1032823 AND a.name = '조쉬 하트넷';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3014800, '아리엘 도노휴', '/rjucxWiHri2gkFyw5zf9ngVWd4l.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아리엘 도노휴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Riley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1032823 AND a.name = '아리엘 도노휴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4340759, '살레카', '/aFknrMfeoEb7DRg9MnPx3zd9C7V.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '살레카');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lady Raven', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1032823 AND a.name = '살레카';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17486, '앨리슨 필', '/ebcCkhqFtHvHx5dkBfVmlAknDxC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앨리슨 필');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rachel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1032823 AND a.name = '앨리슨 필';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 36819, '헤일리 밀스', '/4kbO4AS4RhQihF1xFzCqnhNLYpr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헤일리 밀스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Josephine Grant', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1032823 AND a.name = '헤일리 밀스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 11614, 'M. 나이트 샤말란', '/tOhFWjauKvJgjCVLJFnhbBCZuxZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'M. 나이트 샤말란');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1032823 AND d.name = 'M. 나이트 샤말란';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2LC4gLNbHpZTq28EWOwCMiVnGcq.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1032823;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dCgrFY6uTqhEpyhe8MzP1oExyLt.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1032823;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (609681, '더 마블스', '2023-11-08', '역대급 파장을 일으킬 마블의 팀업!', '강력한 힘으로 은하계를 수호하는 최강 히어로 캡틴 마블 캐럴 댄버스. 캡틴 마블의 오랜 친구의 딸이자, 빛의 파장을 조작하는 히어로 모니카 램보. 최애 히어로 캡틴 마블의 열렬한 팬인 미즈 마블 카말라 칸. 캡틴 마블에 대한 복수를 꿈꾸는 냉혹한 크리족 리더 다르-벤의 영향으로 세 명의 히어로는 능력을 사용할 때마다 서로의 위치가 뒤바뀌게 된다. 뜻하지 않게 우주와 지구를 넘나들게 되는 예측 불가하고 통제 불가한 상황 속, 다르-벤은 지구를 포함해 캡틴 마블이 고향이라고 부르는 수많은 행성을 모두 파멸시키려 하고, 이를 저지하기 위해 모인 팀 마블스는 하나로 힘을 모으는데…', 105, '12', 'RELEASED', 132.355000, 6.077000, 207089999, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 609681 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 609681 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 609681 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 60073, '브리 라슨', '/xSGvMwNNJcEQvVcjiIUTyxyMfkZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브리 라슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Carol Danvers / Captain Marvel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 609681 AND a.name = '브리 라슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 970219, '테요나 패리스', '/k3U24YNgdaINZEQ4PftebnN5cpU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '테요나 패리스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Monica Rambeau', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 609681 AND a.name = '테요나 패리스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2798462, '이만 벨라니', '/ojt4pq4x9zINjgBfMEKGGtCoOaC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이만 벨라니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kamala Khan / Ms. Marvel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 609681 AND a.name = '이만 벨라니';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2231, '사무엘 L. 잭슨', '/AiAYAqwpM5xmiFrAIeQvUXDCVvo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사무엘 L. 잭슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nick Fury', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 609681 AND a.name = '사무엘 L. 잭슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 118034, '재위 애슈턴', '/fsDeJvBb1TlE9cmMPuizvxSAyHh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '재위 애슈턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dar-Benn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 609681 AND a.name = '재위 애슈턴';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1795072, '니아 다코스타', '/zRyaLNXLT2gKgPvLreyg3GeEIdD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '니아 다코스타');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 609681 AND d.name = '니아 다코스타';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qApkjVJzZ2nkFUcFhcYkTBaRnNj.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 609681;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/criPrxkTggCra1jch49jsiSeXo1.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 609681;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1122504, '자궁 내 엑소시즘', '2023-05-23', '', '', 88, '', 'RELEASED', 128.952000, 6.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1122504 AND g.name = '공포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2739366, 'Allegra Sweeney', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Allegra Sweeney');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ally O''Neill', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1122504 AND a.name = 'Allegra Sweeney';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1579201, 'Calvin Morie McCarthy', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Calvin Morie McCarthy');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Father Bresson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1122504 AND a.name = 'Calvin Morie McCarthy';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3692781, 'Neil Green', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Neil Green');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Charles Johnson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1122504 AND a.name = 'Neil Green';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2100892, 'Sam Bangs', '/ygHG52luvo91pIEMQkVAtOraM7s.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sam Bangs');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Herma', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1122504 AND a.name = 'Sam Bangs';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 3633195, 'Erik Skybak', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Erik Skybak');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1122504 AND d.name = 'Erik Skybak';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/eX5TsKpEk5qDgWJk0UBbROgqjlh.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1122504;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zdAKD1AJh0xk4GunXHZpjhcmHON.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1122504;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (370172, '007 노 타임 투 다이', '2021-09-29', '가장 강력한 운명의 적과 마주하다', 'MI6를 떠난 이후 매들린(레아 세두)과 이탈리아의 오랜 도시 마테라에서 평화로운 일상을 즐기던 제임스 본드(대니엘 크레이그).  어느 날 CIA 요원 펠릭스(제프리 라이트)가 찾아와 선별적 DNA 공격이 가능한 새로운 형태의 생화학 무기 유출을 알린다. 위험에 처한 전 세계를 구하기 위해 복귀하게 된 제임스 본드는 임무를 수행하는 과정에서 새로운 MI6 요원 노미(라샤나 린치)를 만나고, 모든 사건의 배후에 운명으로 얽혀 있는 최악의 적 사핀(라미 말렉)이 존재한다는 것을 알아낸다. 위험천만한 위기 속, 감춰져 있던 비밀이 밝혀지면서 작전은 점점 더 예측할 수 없는 상황으로 치닫게 되는데...', 163, '12', 'RELEASED', 96.710000, 7.400000, 774153024, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 370172 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 370172 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 370172 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8784, '다니엘 크레이그', '/iFerDZUmC5Fu26i4qI8xnUVEHc7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다니엘 크레이그');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'James Bond', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 370172 AND a.name = '다니엘 크레이그';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 121529, '레아 세이두', '/7JAUieStGsHZAy6ed2WuFy4CJjm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레아 세이두');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Madeleine', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 370172 AND a.name = '레아 세이두';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17838, '라미 말렉', '/ewr46CGOdsx5NzAJdIzEBz2yIQh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '라미 말렉');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lyutsifer Safin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 370172 AND a.name = '라미 말렉';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1360281, '라샤나 린치', '/ypNxRag9uJ5nzPAN2um3amQK340.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '라샤나 린치');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nomi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 370172 AND a.name = '라샤나 린치';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5469, '레이프 파인스', '/tJr9GcmGNHhLVVEH3i7QYbj6hBi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레이프 파인스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'M', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 370172 AND a.name = '레이프 파인스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 87257, '캐리 조지 후쿠나가', '/qhrtYCUM2NEaqVP3oB7vqkOTpx0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '캐리 조지 후쿠나가');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 370172 AND d.name = '캐리 조지 후쿠나가';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/68ZwnPALUeweaFdT1z75oXJ4Xie.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 370172;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bz7pwNGCbV576COsDcYN9MbEACC.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 370172;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1255017, 'Caras vemos', '2024-08-22', '', '', 0, '', 'RELEASED', 135.846000, 6.900000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1255017 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1309844, 'Mariana Treviño', '/d1N3CLQzrARgFLTLTJdKNgtlapB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mariana Treviño');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Laura', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1255017 AND a.name = 'Mariana Treviño';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 52745, 'Bruno Bichir', '/af6MbUchuOv9bPh080cF7Awqxi7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bruno Bichir');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Luis', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1255017 AND a.name = 'Bruno Bichir';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1977842, 'Luis de la Rosa', '/ktKctbYiWsEMsXN9yNf9i8Tl21B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Luis de la Rosa');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dante', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1255017 AND a.name = 'Luis de la Rosa';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 86489, 'Blanca Guerra', '/gKW1LRZMHoRorLhFBAAhwvzxtFF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Blanca Guerra');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Viviana', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1255017 AND a.name = 'Blanca Guerra';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1692825, 'Paola Hernández', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Paola Hernández');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zoe', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1255017 AND a.name = 'Paola Hernández';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 545086, 'Beto Gómez', '/hXhdFP6FvQK79IOLukna94LJA36.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Beto Gómez');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1255017 AND d.name = 'Beto Gómez';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xohRCoJS9kNKal3MhFBNO3060YR.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1255017;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3DptKbui4zE8qXWv07rh5BIujX3.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1255017;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1169361, '텐 데이즈 오브 큐리어스 맨', '2024-11-06', '', '이스탄불에서 젊은 여성이 실종된다. 삶의 의미를 잃고 방황하던 한 작가가 흥미로운 소재를 찾기 위해 이 사건의 취재에 나서지만, 뜻밖의 위험에 휘말리게 된다', 110, '19', 'RELEASED', 112.600000, 5.500000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1169361 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1169361 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1169361 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 98834, 'Nejat İşler', '/xFhmBekB2odhRY335lJ6rWiIdyw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nejat İşler');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sadık', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1169361 AND a.name = 'Nejat İşler';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1481836, 'İlayda Akdoğan', '/qhIKaKW4O9LhRqNL3KX3cvDmCWa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'İlayda Akdoğan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hatice/Pınar', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1169361 AND a.name = 'İlayda Akdoğan';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 236892, 'Şenay Gürler', '/5FqFZfj1O24wUruv48jfAJRP1ND.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Şenay Gürler');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Meral', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1169361 AND a.name = 'Şenay Gürler';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2568605, 'Ece İrtem', '/5gQywTqsFBzbibiVQ4k8og6lAKD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ece İrtem');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1169361 AND a.name = 'Ece İrtem';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2135958, 'Hazal Subaşı', '/bZlg1J5htdR9vxhJ6X2KRzsi0jM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Hazal Subaşı');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gülhan Köseoğlu', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1169361 AND a.name = 'Hazal Subaşı';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1673448, 'Uluç Bayraktar', '/jFhKvOtJJk2IWg0QL6PqmhvcXZE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Uluç Bayraktar');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1169361 AND d.name = 'Uluç Bayraktar';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uSoAAhTJTbUWwo2LBcT07M2QOop.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1169361;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/iF9b95STc8hUbcoBon8QQBP5K6o.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1169361;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (166428, '드래곤 길들이기 3', '2019-01-03', '영원히 기억될 그들의 마지막 모험이 시작된다', '영원한 친구 히컵과 투슬리스의 활약으로 사람과 드래곤이 공존하며 평화롭게 살아가는 버크섬. 새로운 드래곤 ‘라이트 퓨어리’를 쫓아간 투슬리스를 찾다가 히컵은 누구도 찾지 못했던 드래곤의 파라다이스 ‘히든월드’를 우연히 발견하게 된다. 하지만 평화도 잠시, 역대 최악의 드래곤 헌터 그리멜의 등장으로 드래곤들의 안전과 버크섬의 평화까지 위협받기 시작하는데…', 104, '전체관람가', 'RELEASED', 106.828000, 7.751000, 524580592, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 166428 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 166428 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 166428 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 449, '제이 바루첼', '/1GYJeQzPcY9Pfmc3FFsBwClkCv7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이 바루첼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hiccup (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 166428 AND a.name = '제이 바루첼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 59174, '아메리카 페레라', '/7F84Lh2lKpvkM3EiOvqqvlOmw93.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아메리카 페레라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Astrid (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 166428 AND a.name = '아메리카 페레라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1164, 'F. 머레이 에이브러햄', '/nRbIHvVpz5jfQbKlnBAJN10qaLo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'F. 머레이 에이브러햄');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Grimmel (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 166428 AND a.name = 'F. 머레이 에이브러햄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 112, '케이트 블란쳇', '/vUuEHiAR0eD3XEJhg2DWIjymUAA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케이트 블란쳇');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Valka (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 166428 AND a.name = '케이트 블란쳇';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17276, '제라드 버틀러', '/rTO5opVC3Gs6hPYAxWSP9eEjogi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제라드 버틀러');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Stoick the Vast (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 166428 AND a.name = '제라드 버틀러';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 69797, '딘 데블로이스', '/miMZ0l4rY81NiyMviWz1BeTGtuE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '딘 데블로이스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 166428 AND d.name = '딘 데블로이스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/51HTWy1h5a2cbXC9gKYGOt2YQBV.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 166428;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/h3KN24PrOheHVYs9ypuOIdFBEpX.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 166428;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (138843, '컨저링', '2013-07-18', '믿을 수 없겠지만… 이것은 실화다!', '1971년 로드 아일랜드, 해리스빌. 페론 가족은 꿈에 그리던 새 집으로 이사를 간다. 물론 1863년에 그 집에서 일어난 끔찍한 살인 사건을 전혀 몰랐다. 또한 그 이후에 일어난 많은 무서운 사건에 대해서도 알지 못했다. 이 가족은 그 집에서 겪은 일이 너무 무서워서 한 마디라도 외부에 언급하는 것을 거절했었다. 지금까지는…', 112, '15', 'RELEASED', 140.141000, 7.540000, 320415166, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 138843 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 138843 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17178, '패트릭 윌슨', '/tc1ezEfIY8BhCy85svOUDtpBFPt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '패트릭 윌슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ed Warren', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 138843 AND a.name = '패트릭 윌슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 21657, '베라 파미가', '/k4hf7VitJ38amqwYURZIvxNw9lJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '베라 파미가');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lorraine Warren', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 138843 AND a.name = '베라 파미가';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3127, 'Lili Taylor', '/if8rbaj1TXlzg0Oq4g0bpU3b5rh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lili Taylor');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Carolyn Perron', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 138843 AND a.name = 'Lili Taylor';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17402, '론 리빙스턴', '/pr5CjWnkaf5WKTIYh8wtNufjmyb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '론 리빙스턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Roger Perron', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 138843 AND a.name = '론 리빙스턴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 851784, '맥켄지 포이', '/6n8yZKJ3YHkm4Ds3zNjJpankHUk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '맥켄지 포이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cindy Perron', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 138843 AND a.name = '맥켄지 포이';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2127, '제임스 완', '/mMYVuGyP74c7sFJHFrc5YPwj4Wd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '제임스 완');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 138843 AND d.name = '제임스 완';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pWpTToZ32bG09PaZ1rvYG5mpOyV.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 138843;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aQCCpAIdWAp6wyFgjMry4okwrZo.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 138843;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (299534, '어벤져스: 엔드게임', '2019-04-24', '운명을 바꿀 최후의 전쟁이 펼쳐진다', '어벤져스의 패배 이후 지구는 초토화됐고 남은 절반의 사람들은 정신적 고통을 호소하며 하루하루를 근근이 버텨나간다. 와칸다에서 싸우다 생존한 히어로들과 우주의 타이탄 행성에서 싸우다 생존한 히어로들이 뿔뿔이 흩어졌는데, 아이언맨과 네뷸라는 우주를 떠돌고 있고 지구에 남아 있는 어벤져스 멤버들은 닉 퓨리가 마지막에 신호를 보내다 만 송신기만 들여다보며 혹시 모를 우주의 응답을 기다리는 중이다. 애초 히어로의 삶을 잠시 내려놓고 가족과 시간을 보내던 호크아이 역시 헤아릴 수 없는 마음의 상처를 입은 채 사라지고 마는데...', 181, '12', 'RELEASED', 140.127000, 8.248000, 2799439100, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 299534 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 299534 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 299534 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3223, '로버트 다우니 주니어', '/5qHNjhtjMD4YWH3UP0rm4tKwxCL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 다우니 주니어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tony Stark / Iron Man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299534 AND a.name = '로버트 다우니 주니어';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16828, '크리스 에반스', '/3bOGNsHlrswhyW79uvIHH1V43JI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 에반스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Steve Rogers / Captain America', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299534 AND a.name = '크리스 에반스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 103, '마크 러팔로', '/5GilHMOt5PAQh6rlUKZzGmaKEI7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마크 러팔로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruce Banner / Hulk', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299534 AND a.name = '마크 러팔로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 74568, '크리스 헴스워스', '/piQGdoIQOF3C1EI5cbYZLAW1gfj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 헴스워스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Thor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299534 AND a.name = '크리스 헴스워스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1245, '스칼렛 요한슨', '/6NsMbJXRlDZuDzatN2akFdGuTvx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스칼렛 요한슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Natasha Romanoff / Black Widow', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299534 AND a.name = '스칼렛 요한슨';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 19272, '조 루소', '/o0OXjFzL10jCy89iAs7UzzSbyoK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조 루소');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 299534 AND d.name = '조 루소';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 19271, '안소니 루소', '/xbINBnWn28YygYWUJ1aSAw0xPRv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '안소니 루소');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 299534 AND d.name = '안소니 루소';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/z7ilT5rNN9kDo8JZmgyhM6ej2xv.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 299534;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7RyHsO4yDXtBv1zUU3mTpHeQ0d5.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 299534;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1726, '아이언맨', '2008-04-30', '하이테슈퍼 히어로의 탄생, 이제 업그레이드는 끝났다!', '천재적인 두뇌와 재능으로 세계 최강의 무기업체를 이끄는 CEO이자, 타고난 매력으로 셀러브리티 못지않은 화려한 삶을 살아가던 억만장자 토니 스타크. 아프가니스탄에서 자신이 개발한 신무기 발표를 성공리에 마치고 돌아가던 그는 게릴라군의 갑작스런 공격에 의해 가슴에 치명적인 부상을 입고 게릴라군에게 납치된다. 가까스로 목숨을 건진 그에게 게릴라군은 자신들을 위한 강력한 무기를 개발하라며 그를 위협한다. 그러나 그는 게릴라군을 위한 무기 대신, 탈출을 위한 무기가 장착된 철갑수트를 몰래 만드는 데 성공하고, 그의 첫 수트인 ‘Mark1’를 입고 탈출에 성공한다. 미국으로 돌아온 토니 스타크는 자신이 만든 무기가 많은 사람들의 생명을 위협하고, 세상을 엄청난 위험에 몰아넣고 있다는 사실을 깨닫고 무기사업에서 손 뗄 것을 선언한다. 그리고, Mark1을 토대로 최강의 하이테크 수트를 개발하는 데 자신의 천재적인 재능과 노력을 쏟아 붓기 시작한다. 탈출하는 당시 부서져버린 Mark1을 바탕으로 보다 업그레이드 된 수트 Mark2를 만들어낸 토니 스타크. 거기에 만족하지 않고, 숱한 시행착오와 실패 끝에 자신의 모든 능력과 현실에서 가능한 최강의 최첨단 과학 기술이 집적된 하이테크 수트 Mark3를 마침내 완성, 최강의 슈퍼히어로 ‘아이언맨’으로 거듭난다. 토니 스타크가 탈출하는 과정을 통해 Mark1의 가공할 위력을 확인한 게릴라 군은 토니 스타크가 미처 회수하지 못한 Mark1의 잔해와 설계도를 찾아낸다. Mark1을 재조립하여 그들의 목적을 이루기 위한 거대하고 강력한 철갑수트를 제작하려는 음모를 꾸미는 게릴라군. 토니 스타크가 갖고 있던 에너지원을 훔쳐 ‘아이언맨’을 능가하는 거대하고 강력한 ‘아이언 몽거’를 완성한 그들은 세계 평화를 위협하고, 토니 스타크는 그들의 음모과 배후세력이 누구인지를 알게 되는데...!', 125, '12', 'RELEASED', 140.098000, 7.647000, 585174222, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1726 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1726 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1726 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3223, '로버트 다우니 주니어', '/5qHNjhtjMD4YWH3UP0rm4tKwxCL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 다우니 주니어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tony Stark', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1726 AND a.name = '로버트 다우니 주니어';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 18288, '테런스 하워드', '/wXWt2NSY23v7DHe2yZQ1C8TikBp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '테런스 하워드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rhodey', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1726 AND a.name = '테런스 하워드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1229, '제프 브리지스', '/xms1RAY6q7Lzp7wNeRCB0kzhucn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제프 브리지스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Obadiah Stane', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1726 AND a.name = '제프 브리지스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12052, '기네스 팰트로', '/m2xcWJvhRdfbHxDj13gTAQ5Is0d.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '기네스 팰트로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pepper Potts', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1726 AND a.name = '기네스 팰트로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 57451, '레슬리 비브', '/g3a1O9lOTZvrwQupUtg4Fc3CdTd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레슬리 비브');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Christine Everhart', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1726 AND a.name = '레슬리 비브';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 15277, '존 패브로', '/tnx7iMVydPQXGOoLsxXl84PXtbA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '존 패브로');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1726 AND d.name = '존 패브로';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ziReGUV3xURsWmcmsn2GOunPc0L.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1726;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/cyecB7godJ6kNHGONFjUyVN9OX5.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1726;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1209290, '저스티스 리그: 크라이시스 온 인피닛 어스 파트 3', '2024-07-15', '', '', 99, '', 'RELEASED', 140.014000, 7.500000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1209290 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1209290 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1209290 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 49624, 'Jensen Ackles', '/3DwbC5V1nLK36bpcUZUrYuNrPG1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jensen Ackles');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Batman / Bruce Wayne (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1209290 AND a.name = 'Jensen Ackles';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 228721, 'Darren Criss', '/kqdhJuaHjgeVcnmA9DwWEIMdtBb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Darren Criss');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Superman / Earth-2 Superman (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1209290 AND a.name = 'Darren Criss';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 74541, '코리 스톨', '/etqmosIyf1xePKpi3i6rHJCm9GE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '코리 스톨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lex Luthor (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1209290 AND a.name = '코리 스톨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1803286, '기디언 애들론', '/l8BSlg87Mn75n28P2aXzot6G0pi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '기디언 애들론');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Batgirl (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1209290 AND a.name = '기디언 애들론';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1620226, 'Ike Amadi', '/xsv09XrYPk5bdY3cAUwKqJnraxC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ike Amadi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Martian Manhunter / J''onn J''onzz (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1209290 AND a.name = 'Ike Amadi';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2927725, 'Jeff Wamester', '/uDLvW3b21oINAA5BJiWMf85cDCP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jeff Wamester');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1209290 AND d.name = 'Jeff Wamester';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/a3q8NkM8uTh9E23VsbUOdDSbBeN.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1209290;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dsGwCEO8tda4FlgHKvL95f0oQbH.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1209290;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (216015, '그레이의 50가지 그림자', '2015-02-11', '“그레이씨가 이제 만나시겠답니다.”', '순수한 사회 초년생인 여대생 ‘아나스타샤’는 어느 날, 아픈 친구를 대신해 모든 것을 다 가진 매력적인 CEO ‘크리스찬 그레이’의 인터뷰를 맡게 된다. 단숨에 사람을 매료시키는 ‘크리스찬 그레이’의 마력에 ‘아나스타샤’는 순식간에 빠져들고, 그 역시 순수한 아나스타샤를 점점 더 알고 싶어지게 된다.  내 취향은 아주 분명해.  한편, 원하는 것을 모두 들어줄 만큼 완벽한 ‘그레이’의 숨겨진 비밀을 알게 된 ‘아나스타샤’는 거부할 수 없는 본능에 눈을 뜨게 되는데…', 125, '19', 'RELEASED', 138.937000, 5.885000, 569651467, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 216015 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 216015 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 216015 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 118545, '다코타 존슨', '/qFek0KqpaPV5mVyHHNfAapDE9Tj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다코타 존슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anastasia Steele', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 216015 AND a.name = '다코타 존슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1254583, '제이미 도넌', '/dPCjxgq4YsqkcZ3fsE84Ifq0Wxv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이미 도넌');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Christian Grey', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 216015 AND a.name = '제이미 도넌';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 49971, '제니퍼 엘', '/kMddVKineLFpxsUoGrb3E6edkOv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제니퍼 엘');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Carla', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 216015 AND a.name = '제니퍼 엘';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 222130, 'Eloise Mumford', '/dqHySgOBXgYwE8hBBQuvqXZAM6J.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Eloise Mumford');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kate', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 216015 AND a.name = 'Eloise Mumford';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 59251, 'Victor Rasuk', '/1vh2Yzp9bhmaxLfpNCrO7DVoURd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Victor Rasuk');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'José', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 216015 AND a.name = 'Victor Rasuk';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1137903, '샘 테일러존슨', '/4iWEBM7B4nANVZcRaID9XHo4tPl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '샘 테일러존슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 216015 AND d.name = '샘 테일러존슨';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/iQaLakvYBzpmdHUB2h6h2aVY5nE.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 216015;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mgY8An5qVCgLh97KOWeJVJarskL.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 216015;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1359867, 'The Christmas Charade', '2024-10-26', '', '', 84, '', 'RELEASED', 122.891000, 7.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1359867 AND g.name = 'TV 영화';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1359867 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1359867 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1359867 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 80018, 'Rachel Skarsten', '/kamw9EzukwFD3xfsQx16BapCBZ8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rachel Skarsten');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Whitney', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1359867 AND a.name = 'Rachel Skarsten';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 43265, 'Corey Sevier', '/wKt1pHZ5Q6kgkmZsNz53lNPzLR3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Corey Sevier');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Special Agent Josh', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1359867 AND a.name = 'Corey Sevier';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 34915, 'Kristin Booth', '/366SBcUxgrh8374uNetOYlP9fo0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kristin Booth');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Larissa Rush', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1359867 AND a.name = 'Kristin Booth';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1226195, 'Rob Stewart', '/kzCmiU4CgIOHQNCsjWPa3s3qEir.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rob Stewart');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jim', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1359867 AND a.name = 'Rob Stewart';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 83530, 'Jefferson Brown', '/8iVOZvnjT7JFAG2glNQA9I5sFVw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jefferson Brown');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maxwell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1359867 AND a.name = 'Jefferson Brown';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 43265, 'Corey Sevier', '/wKt1pHZ5Q6kgkmZsNz53lNPzLR3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Corey Sevier');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1359867 AND d.name = 'Corey Sevier';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1jgFIqG7haKpxXnckzTw9pzlG4v.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1359867;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/i0xXEW49jmEKksCsS18r8H6qfGy.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1359867;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (635910, '라스트 보야지 오브 더 데메테르', '2023-08-09', '', '브램 스토커의 소설인 <드라큘라> 중 한 에피소드를 영화화하는 작품으로 드라큘라의 관을 싣고 가던 영국 배의 선원들이 차례로 사라지는 공포스러운 상황에 관한 이야기', 119, '', 'RELEASED', 139.026000, 6.800000, 21600000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 635910 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 635910 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 635910 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1154054, '코리 호킨스', '/habqxQgt2ouTrrrjpbTfL6YVH7C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '코리 호킨스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Clemens', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 635910 AND a.name = '코리 호킨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1323109, 'Aisling Franciosi', '/qtXgCx5vMlAMIjMbYydDjjzY08T.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Aisling Franciosi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anna', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 635910 AND a.name = 'Aisling Franciosi';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 83854, '데이비드 다스트말치안', '/eLafwcpL64CqzwjjSgKpO7Rv4ae.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이비드 다스트말치안');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wojchek', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 635910 AND a.name = '데이비드 다스트말치안';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 111090, 'Javier Botet', '/nuVbt1oreUUPPR0MhKKL7y6i9Dt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Javier Botet');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dracula / Nosferatu', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 635910 AND a.name = 'Javier Botet';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 15498, '리엄 커닝엄', '/ljmFT9zYqh4k2bmEcNU6rxoE7fW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리엄 커닝엄');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Captain Eliot', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 635910 AND a.name = '리엄 커닝엄';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 135113, 'André Øvredal', '/c57bevrSyeEzgKfUUrfTax27IVn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'André Øvredal');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 635910 AND d.name = 'André Øvredal';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3EHd9cxCvc2LExA8XV8zYXYTl7v.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 635910;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dKC5qWi6S8SKkSzrP6LxTk0cb98.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 635910;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (4247, '무서운 영화', '2000-07-07', '가장 무서운 것은...? 너무 웃긴다는 것!', '{"나는 네가 지난 할로윈 데이에 소리치는 걸보고 육감적으로 뭔가 특별한 일이 일어날 것이라는 것을 알았다!!"}  팝콘을 튀기던 드류에게 음산한 목소리의 남자에게서 이상한 전화가 걸려온다. "공포영화를 좋아하냐?"는 괴기한 질문을 던지고, 갑자기 등장해 그녀를 해치려 든다. 달아나는 드류는 속옷바람으로 슈퍼모델인양 멋진 포즈로 취하기도 하지만 결국 집으로 오던 그녀의 아버지의 차에 치어 죽고 만다. 드류가 죽었다는 소식을 전해들은 친구 신디는 드류의 죽음에 어떤 의문이 숨어있을까를 고민하다 문득 지난 할로윈 데이에 있었던 일을 떠올리는데..  흥겨운 할로윈 데이 파티를 마치고 집으로 돌아가던 고등학교 친구들 신디, 바비와 버피, 브렌다, 그렉, 레이 등은 차안에서 정신없이 즐기다 타고 있던 차에 한 사내를 치고 만다. 쓰러진 사내는 죽지 않고 일어나지만, 어이없게도 그 사내는 날아온 콜라병을 맞고 그자리에서 즉사하고 만다. 그 끔직한 사건과 드류의 죽음에 뭔가 연관이 있다고 느낀 신디는 친구들과 자신에게도 곧 위협이 닥칠 것이라고 예감하는데...', 88, '19', 'RELEASED', 138.021000, 6.400000, 278019771, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 4247 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1772, '안나 페리스', '/y3YKNr4qPPJZ9w4lR2a3yySKotd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '안나 페리스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cindy Campbell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 4247 AND a.name = '안나 페리스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17866, 'Jon Abrahams', '/lB4qv4fTjP02m7w19TFXc29yLUd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jon Abrahams');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bobby Prinze', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 4247 AND a.name = 'Jon Abrahams';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 9562, '말런 웨이언스', '/r0Ol5exKLKYXEbVqLTHxX64GvIr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '말런 웨이언스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shorty Meeks', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 4247 AND a.name = '말런 웨이언스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 35690, '숀 웨이언스', '/Cat25uXhB680QLmvg9Tu16W563.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '숀 웨이언스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ray Wilkins', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 4247 AND a.name = '숀 웨이언스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 35705, '레지나 홀', '/jiFZ4xNrvUUZLBHnJu71CvdN4kj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레지나 홀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brenda Meeks', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 4247 AND a.name = '레지나 홀';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 35689, 'Keenen Ivory Wayans', '/e9XRdXolDV8RjGPHPXH6IISDTSP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Keenen Ivory Wayans');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 4247 AND d.name = 'Keenen Ivory Wayans';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7WgS8qO4KYZxjUQMs0JSFxqcYgn.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 4247;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/m5dA4JZsj78EBTa2D6imWOAebwB.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 4247;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1062807, '극장판 스파이 패밀리 코드: 화이트', '2023-12-22', '스파이 × 암살자 × 초능력자, 평범한 가족 여행이 시작된다!', '세계 각국이 물밑에서 치열하게 정보전을 펼치고 있는 시대. 서로의 정체를 숨긴 채 결성된 위장 가족의 아버지 ''로이드(스파이)''와 어머니 ''요르(암살자)’, 딸 ''아냐(초능력자)''는 각자의 목표를 위해 비밀스러운 임무를 수행한다. 오퍼레이션 올빼미 작전을 위해 첫 가족 여행을 떠나던 중, ‘아냐’는 열차 안에서 수상한 캐리어를 발견하고 그 안의 초콜릿을 실수로 그만 삼켜버리고 마는데… 엄청난 비밀이 숨겨진 초콜릿과 여행지에서 생기는 해프닝의 연속!! 세계의 명운은, 다시 이 위장 가족에게 맡겨졌다!', 110, '12', 'RELEASED', 138.252000, 7.000000, 59256423, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1062807 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1062807 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1062807 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1062807 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1248374, '에구치 타쿠야', '/hPPhUp0mM65Lc87Q8WXUEmGQAXx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에구치 타쿠야');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Loid Forger (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1062807 AND a.name = '에구치 타쿠야';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1588597, '타네자키 아츠미', '/6tM8GU7QvrdUCvR4kxqVUZivtvO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '타네자키 아츠미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anya Forger (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1062807 AND a.name = '타네자키 아츠미';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 221773, '하야미 사오리', '/c3We0sp2oTaONcOX5UHA461vFla.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하야미 사오리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yor Forger (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1062807 AND a.name = '하야미 사오리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1264226, '마쓰다 겐이치로', '/YCEXgyl763zg62qhsjhWHRzGkL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마쓰다 겐이치로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Narrator / Bond Forger (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1062807 AND a.name = '마쓰다 겐이치로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 587655, '나카무라 토모야', '/rBDbzWAYVRNpWIbheY82zPgPdAa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나카무라 토모야');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dmitri (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1062807 AND a.name = '나카무라 토모야';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2666700, '片桐崇', '/wMDjIuDxdJ9HpeEvSYzW5Q6rbDj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '片桐崇');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1062807 AND d.name = '片桐崇';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rlMJfgo8xXHkqgICy9kh4CWyQTu.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1062807;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zVDJ4cRgSpHlILSm7kGiklHQ6O7.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1062807;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (166426, '캐리비안의 해적: 죽은 자는 말이 없다', '2017-05-23', '죽음마저 집어삼킨 복수가 시작된다', '윌 터너는 죽은 자들을 저승으로 인도하는 플라잉 더치맨호의 선장이다. 뭍에는 일년에 한번밖에 올라오지 못하고, 평생 바다 속에서 지낼 운명에 처해 있다. 윌 터너의 아들, 헨리 터너는 아버지의 저주를 풀기위해 바다 전설을 섭렵했다. 그가 찾은 해결책은 포세이돈의 삼지창을 찾는 것이다. 헨리는 자신을 도와줄 캡틴 잭 스패로우를 찾아 전세계 바다를 떠돈다. 잭 스패로우를 찾는 이는 또 있다. 악마의 삼각지대에 발이 묶인 채 좀비가 되어버린 캡틴 살라자르 일당이 그들인데...', 129, '12', 'RELEASED', 83.792000, 6.652000, 795900000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 166426 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 166426 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 166426 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 85, '조니 뎁', '/6GkSSnhlLirHidf6hThCEFCfYhZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조니 뎁');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jack Sparrow', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 166426 AND a.name = '조니 뎁';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3810, '하비에르 바르뎀', '/iQnY4JYe7mFoaO2IH1pFNIDL0MH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하비에르 바르뎀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Armando Salazar', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 166426 AND a.name = '하비에르 바르뎀';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 118, '제프리 러쉬', '/4zQuC1j0p7HkJlfuT8aJoyZAgQm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제프리 러쉬');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hector Barbossa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 166426 AND a.name = '제프리 러쉬';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1017347, 'Brenton Thwaites', '/4jrtVjdIGJpmgevEPRuIIU9HWcO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Brenton Thwaites');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Henry Turner', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 166426 AND a.name = 'Brenton Thwaites';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 115150, '카야 스코델라리오', '/oKsGrXKGrcVoQJQ6pbjZDPOQJcM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카야 스코델라리오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Carina Smyth', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 166426 AND a.name = '카야 스코델라리오';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 20307, '요아킴 뢴닝', '/6Ngvvc3WIPgg7L0vvMUYs4uHYjR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '요아킴 뢴닝');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 166426 AND d.name = '요아킴 뢴닝';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 20308, 'Espen Sandberg', '/meoiaU4mxGVHFHLIedATpqROEnz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Espen Sandberg');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 166426 AND d.name = 'Espen Sandberg';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/arcIFL50IPQT7JDG2SD6tzcOlRL.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 166426;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7C921eWK06n12c1miRXnYoEu5Yv.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 166426;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (359410, '로드 하우스', '2024-03-08', '', '전직 UFC 파이터 돌턴은 플로리다키스 제도의 로드 하우스에서 경비원으로 일하게 되지만, 이곳이 보이는 것 같은 낙원이 결코 아니라는 걸 알게 된다.', 121, '18', 'RELEASED', 126.038000, 6.980000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 359410 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 359410 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 131, '제이크 질런홀', '/rJdYHYNhlcOBwbPvDZVvt1xw7bi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이크 질런홀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dalton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 359410 AND a.name = '제이크 질런홀';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 141034, '빌리 매그너슨', '/bA38HDFxJtwSV4OgSo3yJ1u9H2J.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빌리 매그너슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ben Brandt', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 359410 AND a.name = '빌리 매그너슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1784612, '다니엘라 멜시오르', '/oyULuaCY8FFNEumFNZwjUoUytcR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다니엘라 멜시오르');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ellie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 359410 AND a.name = '다니엘라 멜시오르';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1394648, 'Jessica Williams', '/n7fP2YluY2jmQPGbPWu3It1BNd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jessica Williams');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frankie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 359410 AND a.name = 'Jessica Williams';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1199115, '코너 맥그리거', '/nE7BW6k6F6NZ4EPRAKacHFsxc1U.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '코너 맥그리거');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Knox', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 359410 AND a.name = '코너 맥그리거';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 11694, '더그 라이만', '/kIT7NE6MDaiIrjPEbObXk4COFVa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '더그 라이만');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 359410 AND d.name = '더그 라이만';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8D2eWclxjKJff0bDSNFVRySnPuT.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 359410;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oe7mWkvYhK4PLRNAVSvonzyUXNy.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 359410;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (24428, '어벤져스', '2012-04-25', '최강의 슈퍼히어로들이 모였다.', '에너지원 큐브를 이용한 적의 등장으로 인류가 위험에 처하자 국제평화유지기구인 쉴드의 국장 닉 퓨리는 어벤져스 작전을 위해 전 세계에 흩어져 있던 슈퍼히어로들을 찾아나선다. 아이언맨부터 토르, 헐크, 캡틴 아메리카는 물론, 쉴드의 요원인 블랙 위도우, 호크 아이까지, 최고의 슈퍼히어로들이 어벤져스의 멤버로 모이게 되지만, 각기 개성이 강한 이들의 만남은 예상치 못한 방향으로 흘러가는데...', 142, '12', 'RELEASED', 127.941000, 7.700000, 1518815515, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 24428 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 24428 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 24428 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3223, '로버트 다우니 주니어', '/5qHNjhtjMD4YWH3UP0rm4tKwxCL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 다우니 주니어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tony Stark / Iron Man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 24428 AND a.name = '로버트 다우니 주니어';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16828, '크리스 에반스', '/3bOGNsHlrswhyW79uvIHH1V43JI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 에반스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Steve Rogers / Captain America', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 24428 AND a.name = '크리스 에반스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 103, '마크 러팔로', '/5GilHMOt5PAQh6rlUKZzGmaKEI7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마크 러팔로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruce Banner / The Hulk', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 24428 AND a.name = '마크 러팔로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 74568, '크리스 헴스워스', '/piQGdoIQOF3C1EI5cbYZLAW1gfj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 헴스워스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Thor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 24428 AND a.name = '크리스 헴스워스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1245, '스칼렛 요한슨', '/6NsMbJXRlDZuDzatN2akFdGuTvx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스칼렛 요한슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Natasha Romanoff / Black Widow', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 24428 AND a.name = '스칼렛 요한슨';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 12891, '조스 웨던', '/mVvpZnKYKSCtkOQixQnOonV5kv3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조스 웨던');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 24428 AND d.name = '조스 웨던';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/krgjV3rJtBcEpQehODKXNCt6uFL.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 24428;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9BBTo63ANSmhC4e6r62OJFuK2GL.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 24428;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1147416, '미라클 월드 런던: 시간의 끝에서', '2024-11-14', '', '끔찍한 운명을 맞이할 미래를 구하고자, 마리네뜨는 크로노버그가 되어 버닉스와 함께 시간을 여행하는 의문의 적을 물리치려 한다. 이 새로운 슈퍼 악당은 누구이며, 왜 이들은 마리네뜨의 은밀한 슈퍼히어로 정체성을 폭로하는 데 집착하는 걸까? 새로운 상대를 물리치고 레이디버그와 시간이 끝나는 걸 막는 것만이 마리네뜨의 유일한 희망이다!', 49, '', 'UNKNOWN', 137.556000, 5.800000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1147416 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1147416 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1147416 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1147416 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1762588, 'Annouck Hautbois', '/5D66aDzc8QrkNtdeFb0nsFku6Zh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Annouck Hautbois');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marinette / Ladybug / Bug Noire / Chronobug (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1147416 AND a.name = 'Annouck Hautbois';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1558832, 'Benjamin Bollen', '/qAvG7VqmZp6s2XE3KZooEfYDfW9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Benjamin Bollen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Adrien Agreste / Cat Noir / Félix Graham (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1147416 AND a.name = 'Benjamin Bollen';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1373143, 'Marie Nonnenmacher', '/b0F4vbkVIWEk849tWKL04WcLJ6S.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marie Nonnenmacher');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tikki (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1147416 AND a.name = 'Marie Nonnenmacher';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1762589, 'Thierry Kazazian', '/7sqA1L6pwKmmBccMdmzNJwlXBWk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Thierry Kazazian');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Plagg (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1147416 AND a.name = 'Thierry Kazazian';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1373246, 'Adeline Chetail', '/eC9zx47fnwVu1WaLZqCae101Cyk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Adeline Chetail');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alix Kubdel / Bunnyx (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1147416 AND a.name = 'Adeline Chetail';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1565301, 'Thomas Astruc', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Thomas Astruc');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1147416 AND d.name = 'Thomas Astruc';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vKLi7Q2Rw4Q4ppZGWWhMEwcyDdA.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1147416;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8P53bvnJvn2g22bYoRP56VmBkgt.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1147416;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (746036, '스턴트맨', '2024-04-24', '사람도 구하고, 영화도 구하고, X도 구하려다 X됐다…!', '잠수 이별을 택하고 후회뿐인 날을 보내던 스턴트맨 ‘콜트’(라이언 고슬링) 영화감독이 된 전 여친 ‘조디’(에밀리 블런트)의 촬영장에 복귀하며 아련한 재회를 기대했지만… 갑자기 주연배우가 사라지고 콜트는 우선 그부터 찾아야만 한다! <데드풀 2> 감독이 말아주는 코미디, 액션, 로맨스 장르 풀코스 액션도 터지고, 사랑도 터지고, 웃음도 터진다!', 126, '15', 'RELEASED', 137.533000, 7.143000, 181035480, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 746036 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 746036 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 746036 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 30614, '라이언 고슬링', '/lyUyVARQKhGxaxy0FbPJCQRpiaW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '라이언 고슬링');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Colt Seavers', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 746036 AND a.name = '라이언 고슬링';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5081, '에밀리 블런트', '/zpJ7pupuNF3W0zTxm6yioGIoxbd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에밀리 블런트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jody Moreno', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 746036 AND a.name = '에밀리 블런트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 27428, '에런 테일러존슨', '/pFtHhih2XEaFaD3qOFyQW6q83br.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에런 테일러존슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tom Ryder', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 746036 AND a.name = '에런 테일러존슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1278487, '해나 워딩엄', '/eHAICyhvjiRZCgzKyJCk9hWnnjr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '해나 워딩엄');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gail Meyer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 746036 AND a.name = '해나 워딩엄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20374, '테레사 파머', '/sjSiLSCp9LS1Z0nyGpmquTBuUyr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '테레사 파머');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Iggy Starr', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 746036 AND a.name = '테레사 파머';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 40684, '데이비드 리치', '/7FOLULXFvWrovvfsSyljXtK0tr8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '데이비드 리치');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 746036 AND d.name = '데이비드 리치';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aUZ176q7ldMaPLYVnmaFWK4CApE.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 746036;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/H5HjE7Xb9N09rbWn1zBfxgI8uz.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 746036;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (298618, '플래시', '2023-06-13', '세계가 충돌한다', '시공간이 붕괴된 세계, 차원이 다른 히어로가 온다! 빛보다 빠른 스피드, 물체 투과, 전기 방출, 자체 회복, 천재적인 두뇌까지 갓벽한 능력을 자랑하지만 존재감은 제로, 저스티스 리그에서 궂은일을 도맡아 하는 히어로 ‘플래시’. 어느 날 자신에게 빛보다 빠른 속도로 달리면 시공간 이동 능력이 있음을 알게 된 그는 ‘브루스 웨인’의 만류를 무시한 채 끔찍한 상처로 얼룩진 과거를 바꾸기 위해 시간을 역행한다. 의도치 않은 장소에 불시착한 ‘플래시’는 멀티버스 세상 속 또 다른 자신과 맞닥뜨리고 메타 휴먼이 흔적도 없이 사라지고 모든 것이 뒤엉킨 세상과 마주하게 된다. ‘플래시’는 자신이 알던 모습과 전혀 달라진 나이 들고 은퇴한 ‘배트맨’과 크립톤 행성에서 온 ‘슈퍼걸’의 도움으로 외계의 침공으로부터 시간과 차원이 붕괴된 지구를 구하려 나서는데…', 144, '12', 'RELEASED', 101.345000, 6.699000, 271333313, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 298618 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 298618 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 298618 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 132157, '에즈라 밀러', '/6wmTpbYpmhthaxzM5ss3377F9IV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에즈라 밀러');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Barry Allen / The Flash', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 298618 AND a.name = '에즈라 밀러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2542319, '사샤 카예', '/2t04zXVMvxIoU3nmXchA1xQ0OW9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사샤 카예');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kara Zor-El / Supergirl', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 298618 AND a.name = '사샤 카예';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2232, '마이클 키튼', '/82rxrGxOqQW2NjKsIiNbDYHFfmb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 키튼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruce Wayne / Batman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 298618 AND a.name = '마이클 키튼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 335, '마이클 섀넌', '/6mMczfjM8CiS1WuBOgo5Xom1TcR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 섀넌');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'General Zod', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 298618 AND a.name = '마이클 섀넌';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17402, '론 리빙스턴', '/pr5CjWnkaf5WKTIYh8wtNufjmyb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '론 리빙스턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Henry Allen', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 298618 AND a.name = '론 리빙스턴';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1113116, 'Andy Muschietti', '/mzOMGWzqFFLqIqa2WkDv5I1IxHE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Andy Muschietti');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 298618 AND d.name = 'Andy Muschietti';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wgjojKrLVoeWhx0C22YjdAkizgH.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 298618;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yF1eOkaYvwiORauRCPWznV9xVvi.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 298618;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (459151, '보스 베이비 2', '2021-07-01', '가족 같은 회사로 모십니다', '베이비 주식회사의 레전드 보스 베이비에서 인생 만렙 CEO가 된 `테드`. 베이비인 줄 알았던 조카 `티나`가 알고 보니 베이비 주식회사 소속이라니! 뉴 보스 베이비 `티나`의 지시로 `테드`는 형과 함께 다시 베이비로 돌아가야만 하는데…', 107, 'ALL', 'RELEASED', 82.182000, 7.371000, 146745280, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 459151 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 459151 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 459151 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 459151 AND g.name = '가족';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7447, '알렉 볼드윈', '/hzKy7x574eeUS3wt1R3yvWBRpeR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '알렉 볼드윈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Theodore Templeton (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 459151 AND a.name = '알렉 볼드윈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11006, '제임스 마스던', '/lf7OnfKZnMgNh9b98764tqSocGK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제임스 마스던');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tim Templeton (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 459151 AND a.name = '제임스 마스던';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12110, 'Amy Sedaris', '/7FX1yxq1SBFxxzgDPEdhrtgS1kk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Amy Sedaris');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tina Templeton (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 459151 AND a.name = 'Amy Sedaris';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1767250, '아리아나 그린블랫', '/3Y3Xk8jwE1Ju0zIn31zBMuD7Fkn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아리아나 그린블랫');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tabitha Templeton (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 459151 AND a.name = '아리아나 그린블랫';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4785, '제프 골드블룸', '/o3PahuK7OmCI0RAQUq38CUBWYZ9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제프 골드블룸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Armstrong (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 459151 AND a.name = '제프 골드블룸';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 18864, 'Tom McGrath', '/83lSBvaRShYObPvhE89UDUkUfWo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Tom McGrath');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 459151 AND d.name = 'Tom McGrath';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zGaeo3fNXCcnttUQMgZr1FW0t4V.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 459151;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yBov7O4eXDcBLDpZrOHZzFr8rIl.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 459151;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (281957, '레버넌트: 죽음에서 돌아온 자', '2015-12-25', '피의 대가, 반드시 치를 것이다', '서부 개척시대 이전인 19세기 아메리카 대륙, 전설적인 모피 사냥꾼인 휴 글래스 는 아들 호크를 데리고 동료들과 함께 사냥하던 중 회색곰에게 습격 당해 사지가 찢긴다. 하지만 돈에 눈이 먼 비정한 동료 존 피츠 제럴드 는 아직 살아 있는 휴를 죽이려 하고, 아들 호크가 이에 저항하자 호크마저 죽인 채 숨이 붙어 있는 휴를 땅에 묻고 떠난다. 눈 앞에서 하나뿐인 아들의 죽음을 목격한 휴는 처절한 복수를 위해 부상 입은 몸으로 배신자 존 피츠제럴드의 뒤를 쫓아 300km가 넘는 광활하고 거친 야생에서 인간의 한계에 도전하는데...', 156, '15', 'RELEASED', 82.175000, 7.500000, 532950503, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 281957 AND g.name = '서부';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 281957 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 281957 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6193, '레오나르도 디카프리오', '/wo2hJpn04vbtmh0B9utCFdsQhxM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레오나르도 디카프리오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hugh Glass', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 281957 AND a.name = '레오나르도 디카프리오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2524, '톰 하디', '/d81K0RH8UX7tZj49tZaQhZ9ewH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 하디');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'John Fitzgerald', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 281957 AND a.name = '톰 하디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 93210, '도널 글리슨', '/uDbwncuKlqL0fAuucXSvgakJDrc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '도널 글리슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Captain Andrew Henry', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 281957 AND a.name = '도널 글리슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 93491, '윌 폴터', '/l3noqPasPknZMZWilfaNidTvy3V.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '윌 폴터');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jim Bridger', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 281957 AND a.name = '윌 폴터';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1560185, '포레스트 굿럭', '/zvodN57WG7PG5CX3ZKzvwTVVeWc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '포레스트 굿럭');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hawk', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 281957 AND a.name = '포레스트 굿럭';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 223, '알레한드로 곤살레스 이냐리투', '/qWrltG9e0ssM3Y9pF86EAgteKHu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '알레한드로 곤살레스 이냐리투');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 281957 AND d.name = '알레한드로 곤살레스 이냐리투';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/p1SlVBoMxrQZrlyDPjYvG0OICwl.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 281957;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sGOw65ZmfgGfistCjuNsazjs6j9.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 281957;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (460458, '레지던트 이블: 라쿤시티', '2021-11-24', '모든 이야기는 이곳에서 시작되었다', '거대 제약회사 ''엄브렐라''가 철수한 후 폐허가 된 ''라쿤시티''. 어릴 적 끔찍한 사건을 겪고 고향을 떠났던 클레어가 돌아온 그날 밤, 라쿤시티는 좀비 바이러스에 감염되어 순식간에 지옥으로 돌변한다. 남은 시간은 7시간, 죽음의 도시를 탈출하라!', 107, '18', 'RELEASED', 136.902000, 6.000000, 41914915, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 460458 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 460458 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 460458 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 115150, '카야 스코델라리오', '/oKsGrXKGrcVoQJQ6pbjZDPOQJcM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카야 스코델라리오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Claire Redfield', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 460458 AND a.name = '카야 스코델라리오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1408809, '해나 존카먼', '/6VGl2VQi03jC5Zvqmtz9okg6Ux5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '해나 존카먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jill Valentine', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 460458 AND a.name = '해나 존카먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1223726, '로비 아멜', '/5MPx1TEdgPs9UEXV65nd80JikSH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로비 아멜');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chris Redfield', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 460458 AND a.name = '로비 아멜';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1017294, 'Tom Hopper', '/vPvzhPiZyamYd8gr2SPFF56OStA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tom Hopper');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Albert Wesker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 460458 AND a.name = 'Tom Hopper';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 212934, 'Avan Jogia', '/7BX0Lg39bHlgtvWZpszTr1YjTAW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Avan Jogia');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Leon Kennedy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 460458 AND a.name = 'Avan Jogia';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 100734, 'Johannes Roberts', '/8hHny6atmFXcuNl2m1AP3fIOayz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Johannes Roberts');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 460458 AND d.name = 'Johannes Roberts';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3d1ij4MEw3h2AZv62C49ysDfuG1.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 460458;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/o76ZDm8PS9791XiuieNB93UZcRV.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 460458;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (76341, '매드맥스: 분노의 도로', '2015-05-13', '희망없는 세상, 미친놈만 살아 남는다', '핵전쟁으로 멸망한 22세기. 얼마 남지 않은 물과 기름을 차지한 독재자 임모탄 조가 살아남은 인류를 지배한다. 한편 아내와 딸을 잃고 살아남기 위해 사막을 떠돌던 맥스는 임모탄의 부하들에게 납치되어 노예로 끌려가고, 폭정에 반발한 외팔의 사령관 퓨리오사는 인류 생존의 열쇠를 쥔 임모탄의 여인들을 탈취해 분노의 도로로 폭주한다. 이에 임모탄의 전사인 워보이들과 신인류 눅스는 피주머니 신세로 전락한 맥스를 이끌고 퓨리오사의 뒤를 쫓는데...', 120, '15', 'RELEASED', 136.701000, 7.600000, 378858340, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 76341 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 76341 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 76341 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2524, '톰 하디', '/d81K0RH8UX7tZj49tZaQhZ9ewH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 하디');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Max Rockatansky', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 76341 AND a.name = '톰 하디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6885, '샤를리즈 테론', '/ie1KbeYFG5E0GVr1QP7tDNuXvga.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '샤를리즈 테론');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Imperator Furiosa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 76341 AND a.name = '샤를리즈 테론';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3292, '니콜라스 홀트', '/laeAYQVBV9U3DkJ1B4Cn1XhpT8P.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '니콜라스 홀트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nux', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 76341 AND a.name = '니콜라스 홀트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 26060, '휴 키스 -번', '/rkDIHG6gZnFwOJjDwnhFV81YmqL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '휴 키스 -번');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Immortan Joe', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 76341 AND a.name = '휴 키스 -번';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1056053, '조쉬 헬먼', '/1thwLjrgvFv7ifjyVtTKQh23OCh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조쉬 헬먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Slit', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 76341 AND a.name = '조쉬 헬먼';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 20629, '조지 밀러', '/35NQ8HjFXQlGYDz9UkhT08lKl5C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조지 밀러');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 76341 AND d.name = '조지 밀러';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/cadVm6gKYYukmPysHGCwrawUHHa.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 76341;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gqrnQA6Xppdl8vIb2eJc58VC1tW.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 76341;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (13194, '하이랜더: 복수의 전사', '2007-06-05', '', '', 86, '', 'RELEASED', 110.007000, 7.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 13194 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 13194 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 13194 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 13194 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 63797, 'Alistair Abell', '/3IAmQJ8s2WqZDQscbVoyWFV7LaL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alistair Abell');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Colin MacLeod (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 13194 AND a.name = 'Alistair Abell';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1216343, 'Debi Mae West', '/vSdRK4UZwnLuPQuEaKDYRlnGtW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Debi Mae West');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dahlia (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 13194 AND a.name = 'Debi Mae West';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19508, 'Nolan North', '/gb499KZIoBTZnKCGKE4zwzlcfSe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nolan North');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marcus Octavius (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 13194 AND a.name = 'Nolan North';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 74363, 'Scott McNeil', '/cA4Gwc9o1ZKU02GVx7YFKCEKgwB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Scott McNeil');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Amergan / Gregor / Lad Director (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 13194 AND a.name = 'Scott McNeil';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 174466, 'Ogie Banks', '/upoI7qDPU4j7Q2WaddinquaTzrM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ogie Banks');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joe (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 13194 AND a.name = 'Ogie Banks';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 56339, '川尻善昭', '/nre4oIwHX9k2sIcfRh5zSP62MWl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '川尻善昭');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 13194 AND d.name = '川尻善昭';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3bUZpJfVu8XUnBvtwAQwVGqsebN.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 13194;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/K7hP2K921lnIr7MPoviMY0LfNP.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 13194;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (260346, '테이큰 3', '2014-12-16', '그 모든 것이 끝난다', '전 부인 레니(팜케 얀센)가 방문한다는 연락을 받고 집으로 돌아온 브라이언 밀스(리암 니슨)를 기다리는 건 살해당한 아내의 싸늘한 시체. 사태를 파악할 겨를도 없이 경찰이 집에 들이닥치고 브라이언은 살인범으로 체포되기 직전 가까스로 탈출한다. 쫓아야 할 대상도, 쫓기는 이유도 알 수 없는 상황에 경찰, FBI, CIA까지 총동원 되어 모두가 그를 쫓는다. 이제 그에게 무엇보다 중요한 것은 마지막 남은 딸 킴(매기 그레이스)을 지켜내는 것. 브라이언은 부인을 죽인 범인을 찾고 딸을 지키기 위해 목숨을 건 추격을 시작하는데...', 109, '15세 이상 관람가', 'RELEASED', 136.211000, 6.260000, 325800000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 260346 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 260346 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3896, '리암 니슨', '/sRLev3wJioBgun3ZoeAUFpkLy0D.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리암 니슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bryan Mills', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 260346 AND a.name = '리암 니슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2178, '포레스트 휘태커', '/1GbfuDitXDBmNmXEKk2rGEXiEXE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '포레스트 휘태커');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Inspector Frank Dotzler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 260346 AND a.name = '포레스트 휘태커';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11825, '매기 그레이스', '/aYhA0WtNAo1swn9gx5PR2crw2pf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '매기 그레이스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kim Mills', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 260346 AND a.name = '매기 그레이스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 15336, 'Dougray Scott', '/1fBd7n7s1Furk4kXN4YIcOD6mZb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Dougray Scott');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Stuart St. John', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 260346 AND a.name = 'Dougray Scott';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10696, '팜케 얀센', '/nt4fpE3cerdDWyZFiRkYRDcOYh4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '팜케 얀센');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lenore St. John', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 260346 AND a.name = '팜케 얀센';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 75035, 'Olivier Megaton', '/rqZxRsAvHj63fEZepYo0ICt0poi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Olivier Megaton');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 260346 AND d.name = 'Olivier Megaton';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bwV9BA7EyejT347YI38FmTwl599.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 260346;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vFm4pF0BgaWPj0i2zEiZO6TqEQ0.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 260346;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (901060, 'Seven Cemeteries', '2024-10-11', '', '', 84, '', 'RELEASED', 135.706000, 5.214000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 901060 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 901060 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 901060 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 901060 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11160, '대니 트레호', '/7JrUkRGBscZ1Hy5JinaaXjjzSCF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '대니 트레호');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bravo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 901060 AND a.name = '대니 트레호';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20190, 'Efren Ramirez', '/vo4IDt4NeNCHBXLz58Wjlx5994a.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Efren Ramirez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miguel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 901060 AND a.name = 'Efren Ramirez';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 85759, 'Maria Canals-Barrera', '/bqlwEfG1oczOW0f8tsJ31lbIfPo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Maria Canals-Barrera');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruja', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 901060 AND a.name = 'Maria Canals-Barrera';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 37027, 'Lew Temple', '/s8FXAUqIclO4ndI9BsLavrxqQup.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lew Temple');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tommy Lasorda', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 901060 AND a.name = 'Lew Temple';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8666, 'Sal Lopez', '/8m7m6qGjYz8TD3NhP8hGfbhgL8f.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sal Lopez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Abuelo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 901060 AND a.name = 'Sal Lopez';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 62797, 'John Gulager', '/3m6GVjYjjVthiwHmPJGXg7Q1cWV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'John Gulager');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 901060 AND d.name = 'John Gulager';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jHdmMiS35fN0zLJBXNg3VHLJk9y.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 901060;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tDOVQe5RFwd9l8Es7A0EOqzo011.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 901060;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1262983, '매즈', '2024-10-25', '', '한 프랑스 클럽 청년이 파티에서 깨어난 후, 최신 마약이든 로맨틱한 정복이든 무언가를 얻으려고 합니다. 집으로 돌아가는 길에 그는 탈옥한 환자를 만나게 되고, 그의 인생이 바뀌게 됩니다.', 86, '', 'RELEASED', 135.589000, 7.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1262983 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1262983 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2740498, 'Lucille Guillaume', '/yh24zaBJKpmMkDphtHEvSDPgbVo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lucille Guillaume');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Julia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1262983 AND a.name = 'Lucille Guillaume';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4608050, 'Laurie Pavy', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Laurie Pavy');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Anaïs', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1262983 AND a.name = 'Laurie Pavy';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3811652, 'Milton Riche', '/2C3Frd1UmRDzkv4YHJUzjAHKOKh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Milton Riche');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Romain', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1262983 AND a.name = 'Milton Riche';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4341735, 'Yovel Lewkowski', '/d1pRevSrvKvHkkWEEmhf0oKhhwZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Yovel Lewkowski');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Noa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1262983 AND a.name = 'Yovel Lewkowski';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5001289, 'Sasha Rudakova', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sasha Rudakova');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Woman on the Road', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1262983 AND a.name = 'Sasha Rudakova';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 56735, 'David Moreau', '/9LXJXsmpC042WrIIFbeUK8lTGZe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'David Moreau');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1262983 AND d.name = 'David Moreau';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ecCDMAJp39sBcIHK70gfAJE78rX.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1262983;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8lL13GCrlOii2KvMaSom2rC16Zr.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1262983;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (156022, '더 이퀄라이저', '2014-09-24', '“법이 지켜주지 않는다면, 내가 한다!”', '새벽 2시만 되면 어김없이 잠에서 깨는 로버트 맥콜. 불면증으로 잠 못 드는 이 시간이면 그는 늘 책 한 권을 들고 카페로 향한다. 가족도 친구도 없는 그는 아내가 남기고 간 ‘죽기 전에 읽어야 할 소설 100권’을 모두 읽는 것이 유일한 삶의 목표다. 그런 그에게 어느 날, 어린 콜걸 테리가 말을 건넨다. 무료하게 전화를 기다리다 벨이 울리면 대기하고 있던 리무진에 오르는 테리와 매일 같은 공간에서 같은 시간을 공유하던 로버트는 묘한 동질감을 느끼며 가까워진다. 그러던 어느 날, 테리가 포주인 러시아 마피아에게 무자비하게 폭행을 당한 채로 발견되자 세상을 향한 분노가 폭발하고만 로버트는 마침내, 강자에겐 약하고 약자에겐 한없이 강한 이 세상을 향해 스스로 심판자가 되기로 결심하는데...', 132, '18', 'RELEASED', 131.716000, 7.279000, 192330738, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 156022 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 156022 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 156022 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5292, '덴젤 워싱턴', '/jj2Gcobpopokal0YstuCQW0ldJ4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '덴젤 워싱턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Robert McCall', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 156022 AND a.name = '덴젤 워싱턴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20982, '마튼 초카스', '/y065G0CPTpvweDUksPWhFzsNhqH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마튼 초카스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Teddy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 156022 AND a.name = '마튼 초카스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 56734, '클로이 모레츠', '/2Tlg632tAkfZNlnoF8CV8F9Pf63.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '클로이 모레츠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Teri', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 156022 AND a.name = '클로이 모레츠';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 35029, '데이비드 하버', '/chPekukMF5SNnW6b22NbYPqAStr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이비드 하버');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Masters', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 156022 AND a.name = '데이비드 하버';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 58754, '헤일리 베넷', '/8HRgGypSwHeI27ffmcAELNoxIOw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헤일리 베넷');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mandy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 156022 AND a.name = '헤일리 베넷';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 20907, '앤트완 퓨콰', '/rPqqpDp0quYlmBiiMndzq2VdFgJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '앤트완 퓨콰');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 156022 AND d.name = '앤트완 퓨콰';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hqes9NQtVIULs8VKu0WqY6RdXGU.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 156022;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wHytVsfAZsVDAcABd6iQGmE2j29.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 156022;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (278, '쇼생크 탈출', '1994-09-23', '두려움은 너를 죄수로 가두고 희망은 너를 자유롭게 하리라', '촉망받는 은행 간부 앤디 듀프레인은 아내와 그녀의 정부를 살해했다는 누명을 쓴다. 주변의 증언과 살해 현장의 그럴듯한 증거들로 그는 종신형을 선고받고 악질범들만 수용한다는 지옥같은 교도소 쇼생크로 향한다. 인간 말종 쓰레기들만 모인 그곳에서 그는 이루 말할 수 없는 억압과 짐승보다 못한 취급을 당한다. 그러던 어느 날, 간수의 세금을 면제받게 해 준 덕분에 그는 일약 교도소의 비공식 회계사로 일하게 된다. 그 와중에 교도소 소장은 죄수들을 이리저리 부리면서 검은 돈을 긁어 모으고 앤디는 이 돈을 세탁하여 불려주면서 그의 돈을 관리하는데...', 142, '15', 'RELEASED', 212.057000, 8.707000, 28341469, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 278 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 278 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 504, '팀 로빈스', '/djLVFETFTvPyVUdrd7aLVykobof.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '팀 로빈스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Andy Dufresne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 278 AND a.name = '팀 로빈스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 192, '모건 프리먼', '/905k0RFzH0Kd6gx8oSxRdnr6FL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '모건 프리먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ellis Boyd ''Red'' Redding', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 278 AND a.name = '모건 프리먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4029, 'Bob Gunton', '/ulbVvuBToBN3aCGcV028hwO0MOP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bob Gunton');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Warden Norton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 278 AND a.name = 'Bob Gunton';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6573, 'William Sadler', '/rWeb2kjYCA7V9MC9kRwRpm57YoY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'William Sadler');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Heywood', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 278 AND a.name = 'William Sadler';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6574, '클랜시 브라운', '/1JeBRNG7VS7r64V9lOvej9bZXW5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '클랜시 브라운');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Captain Byron T. Hadley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 278 AND a.name = '클랜시 브라운';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 4027, '프랭크 다라본트', '/7LqmE3p1XTwCdNCOmBxovq210Qk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '프랭크 다라본트');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 278 AND d.name = '프랭크 다라본트';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oAt6OtpwYCdJI76AVtVKW1eorYx.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 278;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zfbjgQE1uSd9wiPTX4VzsLi0rGG.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 278;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (238, '대부', '1972-03-14', '영화사상 최고의 걸작', '시실리에서 이민온 뒤, 정치권까지 영향력을 미치는 거물로 자리잡은 돈 꼴레오네는 갖가지 고민을 호소하는 사람들의 문제를 해결해주며 대부라 불리운다. 한편 솔로소라는 인물은 꼴레오네가와 라이벌인 탓타리아 패밀리와 손잡고 새로운 마약 사업을 제안한다. 돈 꼴레오네가 마약 사업에 참여하지 않기로 하자, 돈 꼴레오네를 저격해 그는 중상을 입고 사경을 헤매게 된다. 그 뒤, 돈 꼴레오네의 아들 소니는 조직력을 총 동원해 다른 패밀리들과 피를 부르는 전쟁을 시작하는데... 가족의 사업과 상관없이 대학에 진학한 뒤 인텔리로 지내왔던 막내 아들 마이클은 아버지가 총격을 당한 뒤, 아버지를 구하기 위해 위험천만한 협상 자리에 나선다.', 175, '19', 'RELEASED', 228.602000, 8.700000, 245066411, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 238 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 238 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3084, '말론 브란도', '/fuTEPMsBtV1zE98ujPONbKiYDc2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '말론 브란도');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Don Vito Corleone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 238 AND a.name = '말론 브란도';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1158, '알 파치노', '/2dGBb1fOcNdZjtQToVPFxXjm4ke.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '알 파치노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Michael Corleone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 238 AND a.name = '알 파치노';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3085, '제임스 칸', '/oRTyqWg0LReELvjms8WwkeTsDFS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제임스 칸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sonny Corleone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 238 AND a.name = '제임스 칸';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3087, '로버트 듀발', '/ybMmK25h4IVtfE7qrnlVp47RQlh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 듀발');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tom Hagen', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 238 AND a.name = '로버트 듀발';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3086, 'Richard S. Castellano', '/1vr75BdHWret81vuSJ3ugiCBkxw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Richard S. Castellano');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Clemenza', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 238 AND a.name = 'Richard S. Castellano';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1776, '프랜시스 포드 코폴라', '/3Pblihd6KjXliie9vj4iQJwbNPU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '프랜시스 포드 코폴라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 238 AND d.name = '프랜시스 포드 코폴라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/I1fkNd5CeJGv56mhrTDoOeMc2r.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 238;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tmU7GeKVybMWFButWEGl2M4GeiP.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 238;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (240, '대부 2', '1974-12-20', '대부가 암시하고 예고한 모든 것', '아버지의 장례식 도중에 맏아들 파올로가 총에 맞아 죽고, 비토(로버트 드니로)는 겨우 도망쳐 미국으로 건너온다. 대부로 성장한 후 비토는 다시 치치오를 찾아 복수를 한다. 새롭게 등장한 젊은 대부 마이클(알 파치노)은 본거지를 라스베가스로 옮기고 가족의 사업을 가능한 합법적인 것으로 바꾸려고 애쓴다. 그런 과중 중에 자신을 제거하려는 음모를 알게되고 그는 냉혹하고 신속하게 반대파들을 제거, 조직을 더욱 확대해 나간다. 이를 위해 마이클은 배신한 형마저 죽이고, 일 때문에 아내와 헤어지는 등 인간적으로는 계속 외로워져 가는데...', 202, '19', 'RELEASED', 128.164000, 8.600000, 102600000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 240 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 240 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1158, '알 파치노', '/2dGBb1fOcNdZjtQToVPFxXjm4ke.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '알 파치노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Don Michael Corleone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 240 AND a.name = '알 파치노';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3087, '로버트 듀발', '/ybMmK25h4IVtfE7qrnlVp47RQlh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 듀발');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tom Hagen', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 240 AND a.name = '로버트 듀발';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3092, '다이앤 키튼', '/tuLGQLb2IVWtar4MU3Hg5z9damM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다이앤 키튼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kay Corleone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 240 AND a.name = '다이앤 키튼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 380, '로버트 드 니로', '/cT8htcckIuyI1Lqwt1CvD02ynTh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 드 니로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vito Corleone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 240 AND a.name = '로버트 드 니로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3096, '존 카제일', '/ff2MXG4OpO5wJCu75l3iE5Xxjm7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '존 카제일');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frederico ''Fredo'' Corleone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 240 AND a.name = '존 카제일';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1776, '프랜시스 포드 코폴라', '/3Pblihd6KjXliie9vj4iQJwbNPU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '프랜시스 포드 코폴라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 240 AND d.name = '프랜시스 포드 코폴라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bhqvqYuAgrTGwyNAmMR0ZVmjXel.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 240;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kGzFbGhp99zva6oZODW5atUtnqi.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 240;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (424, '쉰들러 리스트', '1993-12-15', '한 생명을 구한 자는 세계를 구한 것이다', '2차 세계대전 당시 독일군이 점령한 폴란드. 시류에 맞춰 자신의 성공을 추구하는 기회주의자 쉰들러는 유태인이 경영하는 그릇 공장을 인수한다. 그는 공장을 인수하기 위해 나찌 당원이 되고 독일군에게 뇌물을 바치는 등 갖은 방법을 동원한다. 그러나 냉혹한 기회주의자였던 쉰들러는 유태인 회계사인 스턴과 친분을 맺으면서 냉혹한 유태인 학살에 대한 양심의 소리를 듣기 시작한다. 마침내 그는 강제 수용소로 끌려가 죽음을 맞게될 유태인들을 구해내기로 결심하고, 독일군 장교에게 빼내는 사람 숫자대로 뇌물을 주는 방법으로 유태인들을 구해내려는 계획을 세우는데...', 195, '15', 'RELEASED', 77.218000, 8.565000, 321365567, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 424 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 424 AND g.name = '역사';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 424 AND g.name = '전쟁';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3896, '리암 니슨', '/sRLev3wJioBgun3ZoeAUFpkLy0D.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리암 니슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Oskar Schindler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 424 AND a.name = '리암 니슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2282, '벤 킹슬리', '/vQtBqpF2HDdzbfXHDzR4u37i1Ac.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '벤 킹슬리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Itzhak Stern', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 424 AND a.name = '벤 킹슬리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5469, '레이프 파인스', '/tJr9GcmGNHhLVVEH3i7QYbj6hBi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레이프 파인스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Amon Goeth', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 424 AND a.name = '레이프 파인스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6692, 'Caroline Goodall', '/4cagGtMqACvkuw6Llq8Li8UJ1AR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Caroline Goodall');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Emilie Schindler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 424 AND a.name = 'Caroline Goodall';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6693, 'Jonathan Sagall', '/waxNDsgfw7CXXO3LH8EdKi8z7VV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jonathan Sagall');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Poldek Pfefferberg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 424 AND a.name = 'Jonathan Sagall';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 488, '스티븐 스필버그', '/tZxcg19YQ3e8fJ0pOs7hjlnmmr6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '스티븐 스필버그');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 424 AND d.name = '스티븐 스필버그';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oyyUcGwLX7LTFS1pQbLrQpyzIyt.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 424;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zb6fM1CX41D9rF9hdgclu0peUmy.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 424;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (389, '12명의 성난 사람들', '1957-04-10', '', '뉴욕시의 법정에 아버지를 칼로 찌른 한 소년의 살인혐의를 두고, 12인의 배심원들은 만장일치 합의를 통해 소년의 유무죄 여부를 가려줄 것을 요구받는다. 판사는 유죄일 경우 이 소년은 사형이 불가피하다는 것을 이들에게 미리 일러둔다.  배심원 방에 모인 이들은 투표를 통해 유무죄 여부를 가리기로 한다. 사람들이 전부 소년이 유죄로 판단하는 가운데, 오직 한 배심원만이 소년이 무죄라고 주장하는데...', 97, '', 'RELEASED', 99.891000, 8.546000, 4360000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 389 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1936, '마틴 발삼', '/2j4LJJfTPQtvnjp8LfSGOvWFATO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마틴 발삼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Juror 1', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 389 AND a.name = '마틴 발삼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5247, 'John Fiedler', '/6vfLLGeGuO6Ko0VRnyhgE2v6RUu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'John Fiedler');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Juror 2', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 389 AND a.name = 'John Fiedler';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5248, '리J.콥', '/dMpk9Xd3BqGOGHyOA1wQCcF8v1I.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리J.콥');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Juror 3', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 389 AND a.name = '리J.콥';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5249, 'E.G. Marshall', '/psimeVoRk64DV7UNm4cLQylRFy2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'E.G. Marshall');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Juror 4', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 389 AND a.name = 'E.G. Marshall';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5250, 'Jack Klugman', '/oJxveOxlunD8C9OczqKeryU0k6D.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jack Klugman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Juror 5', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 389 AND a.name = 'Jack Klugman';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 39996, '시드니 루멧', '/hjj3V2DkPJ46zo5uz9bsZQzAk6R.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '시드니 루멧');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 389 AND d.name = '시드니 루멧';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xzh6Rq9cKnE1M309PzC5S5QWF9S.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 389;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qqHQsStV6exghCM7zbObuYBiYxw.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 389;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (129, '센과 치히로의 행방불명', '2001-07-20', '금지된 세계의 문이 열렸다', '평범한 열 살 짜리 소녀 치히로 식구는 이사 가던 중 길을 잘못 들어 낡은 터널을 지나가게 된다. 터널 저편엔 폐허가 된 놀이공원이 있었고 그곳엔 이상한 기운이 흘렀다. 인기척 하나 없는 이 마을의 낯선 분위기에 불길한 기운을 느낀 치히로는 부모님에게 돌아가자고 조르지만 부모님은 호기심에 들떠 마을 곳곳을 돌아다니기 시작한다. 어느 음식점에 도착한 치히로의 부모님은 그 곳에 차려진 음식들을 보고 즐거워하며 허겁지겁 먹어대다가 돼지로 변해버린다. 겁에 질려 당황하는 치히로에게 낯선 소년 하쿠가 나타나 빨리 이곳을 나가라고 소리치는데...', 124, 'All', 'RELEASED', 113.501000, 8.500000, 274925095, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 129 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 129 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 129 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19587, '히이라기 루미', '/zITaVtFyc4xSM3mxSoPRWHbqgJI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '히이라기 루미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chihiro Ogino / Sen (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 129 AND a.name = '히이라기 루미';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19588, '이리노 미유', '/8qEEhHUObNvGQr4e6eqLu5z4qTz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이리노 미유');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Haku (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 129 AND a.name = '이리노 미유';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19589, '나츠키 마리', '/aRs3dGqA2bCuGSZ7lJGhQKe8rhp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나츠키 마리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yubaba / Zeniba (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 129 AND a.name = '나츠키 마리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19590, '나이토 타카시', '/zfs63NZKNG3Uy6WqqXSQWYMQXKZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나이토 타카시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Akio Ogino (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 129 AND a.name = '나이토 타카시';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19591, '사와구치 야스코', '/rWspusb13VeJowmctnniXYYTcqq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사와구치 야스코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yuko Ogino (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 129 AND a.name = '사와구치 야스코';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 608, '미야자키 하야오', '/mG3cfxtA5jqDc7fpKgyzZMKoXDh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '미야자키 하야오');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 129 AND d.name = '미야자키 하야오';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aZuBfbR0PnCb2up7lqHDsgJlLjs.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 129;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6oaL4DP75yABrd5EbC4H2zq5ghc.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 129;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (19404, '용감한 자가 신부를 데려가리', '1995-10-20', '', '영국에서 유학중인 라즈(샤룩 칸)와 인도 처녀 심란(까졸).  심란은 부모님이 정해주신 약혼자가 있는데 약혼을 앞두고 친구들과 유럽 여행을 떠나게 된다.  여행 중 우연히 만남 샤룩과 까졸. 두 남녀의 연속된 우연과 좌충우돌 사랑 만들기.  그렇게 사랑하게 된 그들이지만 까졸은 약혼자가 있는 몸. 인도로 돌아가게 된다.  샤룩 또한 그녀를 못 잊어 인도로 뒤 따라 들어가지만 엄격한 까졸의 부모를 설득하기가 힘이 든다. 도망가자는 까졸의 제안을 거부하고 샤룩은 끝내 그녀의 부모님의 허락을 얻어 내기 위해 고군분투한다.', 190, '', 'RELEASED', 53.346000, 8.500000, 100000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 19404 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 19404 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 19404 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 55061, '카졸', '/akoZskln7QqmH0vgDppprc67ZbM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카졸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Simran Singh', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 19404 AND a.name = '카졸';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 35742, '샤 룩 칸', '/tCEppfUu0g2Luu0rS5VKMoL4eSw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '샤 룩 칸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Raj Malhotra', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 19404 AND a.name = '샤 룩 칸';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 691, 'Amrish Puri', '/uhMGFS7tuG71LDv2wk9LfZZ4EG6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Amrish Puri');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chaudhry Baldev Singh', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 19404 AND a.name = 'Amrish Puri';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 146971, 'Farida Jalal', '/qLlAHvTwQw6A91G2CLptlcUMYQZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Farida Jalal');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lajwanti ''Lajjo'' Singh', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 19404 AND a.name = 'Farida Jalal';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6217, 'Anupam Kher', '/f7hWJ4tvzR7uXmYoTiB41TpQ2NZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Anupam Kher');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dharamvir Malhotra', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 19404 AND a.name = 'Anupam Kher';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 35771, 'Aditya Chopra', '/eXYKfA6bg12pn9LPrWeRfxYQwcb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Aditya Chopra');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 19404 AND d.name = 'Aditya Chopra';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2CAL2433ZeIihfX1Hb2139CX0pW.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 19404;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/90ez6ArvpO8bvpyIngBuwXOqJm5.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 19404;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (155, '다크 나이트', '2008-07-16', '이 도시에 정의는 죽었다', '범죄와 부정부패를 제거하여 고담시를 지키려는 배트맨. 그는 짐 고든 형사와 패기 넘치는 고담시 지방 검사 하비 덴트와 함께 도시를 범죄 조직으로부터 영원히 구원하고자 한다. 세 명의 의기투합으로 위기에 처한 악당들이 모인 자리에 보라색 양복을 입고 얼굴에 짙게 화장을 한 괴이한 존재가 나타나 배트맨을 죽이자는 사상 초유의 제안을 한다. 그는 바로 어떠한 룰도, 목적도 없는 사상 최악의 악당 미치광이 살인광대 조커. 배트맨을 죽이고 고담시를 끝장내버리기 위한 조커의 광기 어린 행각에 도시는 혼란에 빠지는데...', 152, '15', 'RELEASED', 191.301000, 8.500000, 1004558444, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 155 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 155 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 155 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 155 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3894, '크리스찬 베일', '/7Pxez9J8fuPd2Mn9kex13YALrCQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스찬 베일');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruce Wayne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 155 AND a.name = '크리스찬 베일';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1810, '히스 레저', '/p2z2bURSg7nuMsN9P2s61e2RvNz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '히스 레저');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 155 AND a.name = '히스 레저';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6383, '에런 엑하트', '/6rI3cYhdxOaOFSRB4C29MalpwDC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에런 엑하트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Harvey Dent', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 155 AND a.name = '에런 엑하트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3895, '마이클 케인', '/bVZRMlpjTAO2pJK6v90buFgVbSW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 케인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alfred', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 155 AND a.name = '마이클 케인';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1579, '메기 질렌할', '/vsfkWdYWmA9CpzMHTJzrFxlDnEZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '메기 질렌할');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rachel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 155 AND a.name = '메기 질렌할';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 525, '크리스토퍼 놀란', '/xuAIuYSmsUzKlUMBFGVZaWsY3DZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스토퍼 놀란');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 155 AND d.name = '크리스토퍼 놀란';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/f6dNinWX8rBM79JXKcShkfSh2oA.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 155;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oOv2oUXcAaNXakRqUPxYq5lJURz.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 155;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (497, '그린 마일', '1999-12-10', '', '미국 루이지애나의 콜드 마운틴 교도소. 폴은 사형수 감방의 간수장으로 일하고 있다. 그의 일은 사형수들을 감독하고, 그린 마일이라 불리는 초록색 복도를 거쳐 그들을 사형 집행장까지 안내하는 것. 폴은 그들이 죽음을 맞이하는 순간까지 평화롭게 지낼 수 있도록 최선을 다한다. 어느 날 존 커피라는 사형수가 이송되어 온다. 그는 쌍둥이 여자아이를 살해한 흉악범. 하지만 순진한 눈망울에 겁을 잔뜩 집어먹은 그의 모습에 폴은 당혹감을 느낀다. 게다가 그는 초자연적 능력으로 폴의 지병을 깨끗하게 치료해주기까지 한다. 존을 전기 의자로 데려가야 할 날이 다가오면서 폴은 그가 무죄라는 확신을 갖게 되는데...', 189, '18', 'RELEASED', 69.856000, 8.500000, 286801374, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 497 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 497 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 497 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 31, '톰 행크스', '/eKF1sGJRrZJbfBG1KirPt1cfNd3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 행크스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paul Edgecomb', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 497 AND a.name = '톰 행크스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 52, '데이비드 모스', '/A6zGbkFjM3uajIakgsSeNTmSKqY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이비드 모스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brutus ''Brutal'' Howell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 497 AND a.name = '데이비드 모스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5149, 'Bonnie Hunt', '/tT9C6uLztgN8OxJULq6F9iEzqlA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bonnie Hunt');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jan Edgecomb', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 497 AND a.name = 'Bonnie Hunt';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 61981, '마이클 클라크 덩컨', '/3RX8OBqt3gbvFwKYZqiom4O3Ta6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 클라크 덩컨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'John Coffey', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 497 AND a.name = '마이클 클라크 덩컨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2505, '제임스 크롬웰', '/vpNQQbM5PtxsYmVm4oh79SGFyUK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제임스 크롬웰');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Warden Hal Moores', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 497 AND a.name = '제임스 크롬웰';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 4027, '프랭크 다라본트', '/7LqmE3p1XTwCdNCOmBxovq210Qk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '프랭크 다라본트');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 497 AND d.name = '프랭크 다라본트';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yuSpRhrTIJa5JN8oESrfD2bndp1.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 497;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vxJ08SvwomfKbpboCWynC3uqUg4.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 497;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (496243, '기생충', '2019-05-30', '행복은 나눌수록 커지잖아요', '전원 백수로 살 길 막막하지만 사이는 좋은 기택 가족. 장남 기우에게 명문대생 친구가 연결시켜 준 고액 과외 자리는 모처럼 싹튼 고정수입의 희망이다. 온 가족의 도움과 기대 속에 박 사장 집으로 향하는 기우. 글로벌 IT기업의 CEO인 박 사장의 저택에 도착하자 젊고 아름다운 사모님 연교와 가정부 문광이 기우를 맞이한다. 큰 문제 없이 박 사장의 딸 다혜의 과외를 시작한 기우. 그러나 이렇게 시작된 두 가족의 만남 뒤로, 걷잡을 수 없는 사건이 기다리고  있는데.....', 131, '15', 'RELEASED', 113.278000, 8.500000, 257591776, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 496243 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 496243 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 496243 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20738, '송강호', '/7dw9wIpFZ5nJZ3zqrue8t7hUUgQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '송강호');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kim Ki-taek', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 496243 AND a.name = '송강호';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 115290, '이선균', '/mwF2HgyEF2UzxSvNRJEtbWlKbAj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이선균');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Park Dong-ik', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 496243 AND a.name = '이선균';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 556435, '조여정', '/5MgWM8pkUiYkj9MEaEpO0Ir1FD9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조여정');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yeon-kyo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 496243 AND a.name = '조여정';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1255881, '최우식', '/gVICVa6IypG6BMLsPhscrYICptn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '최우식');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ki-woo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 496243 AND a.name = '최우식';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1442583, '박소담', '/fGVOikpvivopeATDy6ZzLdKYXDu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '박소담');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ki-jung', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 496243 AND a.name = '박소담';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 21684, '봉준호', '/tKLJBqbdH6HFj2QxLA5o8Zk7IVs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '봉준호');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 496243 AND d.name = '봉준호';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/eRM0PykovgtK4lin1D4BUql8TBa.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 496243;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hiKmpZMGZsrkA3cdce8a7Dpos1j.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 496243;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1184918, '와일드 로봇', '2024-09-12', '너를 통해 더 넓은 세상을 만나다', '우연한 사고로 거대한 야생에 불시착한 로봇 로즈는 주변 동물들의 행동을 배우며 낯선 환경 속에 적응해 가던 중, 사고로 세상에 홀로 남겨진 아기 기러기 브라이트빌의 보호자가 된다. 로즈는 입력되어 있지 않은 새로운 역할과 관계에 낯선 감정을 마주하고 겨울이 오기 전에 남쪽으로 떠나야 하는 브라이트빌을 위해 동물들의 도움을 받아 이주를 위한 생존 기술을 가르쳐준다. 그러나 선천적으로 몸집이 작은 브라이트빌은 짧은 비행도 힘겨워 하는데...', 102, 'ALL', 'RELEASED', 2050.517000, 8.487000, 292583746, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1184918 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1184918 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1184918 AND g.name = '가족';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1267329, '루피타 뇽오', '/y40Wu1T742kynOqtwXASc5Qgm49.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루피타 뇽오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Roz / Rummage (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1184918 AND a.name = '루피타 뇽오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1253360, '페드로 파스칼', '/9VYK7oxcqhjd5LAH6ZFJ3XzOlID.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '페드로 파스칼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fink (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1184918 AND a.name = '페드로 파스칼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1538851, '킷 코너', '/gCIdbnV9D3lzTaOB0YtuKDz6Nt0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '킷 코너');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brightbill (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1184918 AND a.name = '킷 코너';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2440, '빌 나이', '/ixFI2YCGNGJfwlpI8iyhvVZRg8C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빌 나이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Longneck (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1184918 AND a.name = '빌 나이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1381186, '스테파니 수', '/8gb3lfIHKQAGOQyeC4ynQPsCiHr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스테파니 수');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vontra (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1184918 AND a.name = '스테파니 수';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 66193, '크리스 샌더스', '/6CtrIOCxggJ5eIAWeFQqd4Hs9FP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스 샌더스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1184918 AND d.name = '크리스 샌더스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8dkuf9IuVh0VZjDTk7kAY67lU0U.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1184918;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/v9acaWVVFdZT5yAU7J2QjwfhXyD.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1184918;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (680, '펄프 픽션', '1994-09-10', '쿠엔틴 타란티노만의 블랙 코미디', '펌프킨와 허니 버니가 레스토랑에서 강도 행각을 벌이기 시작한다. 빈센트와 그 동료 쥴스는 두목의 금가방을 찾기 위해 다른 건달이 사는 아파트를 찾아간다. 마르셀러스는 부치에게 돈을 주며 상대 선수에게 져 주라고 하지만 부치는 상대 선수를 때려 눕히고 도망치다, 어릴 때 아버지에게 물려받은 시계를 찾기 위해 아파트로 향한다. 아무런 상관 없이 보이는 이 사건들이 서로 얽히고 섥히면서 예상치 못한 인과관계가 만들어지는데...', 154, '18', 'RELEASED', 101.419000, 8.488000, 213928762, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 680 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 680 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8891, '존 트래볼타', '/eVWcevrvGLLqt9gkDMruqgLJPsp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '존 트래볼타');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vincent Vega', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 680 AND a.name = '존 트래볼타';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2231, '사무엘 L. 잭슨', '/AiAYAqwpM5xmiFrAIeQvUXDCVvo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사무엘 L. 잭슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jules Winnfield', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 680 AND a.name = '사무엘 L. 잭슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 139, '우마 서먼', '/lg04iEqT6TC40H1jz10Z99OFMXx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '우마 서먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mia Wallace', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 680 AND a.name = '우마 서먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 62, '브루스 윌리스', '/w3aXr1e7gQCn8MSp1vW4sXHn99P.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브루스 윌리스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Butch Coolidge', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 680 AND a.name = '브루스 윌리스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10182, '빙 레임스', '/4gpLVNKPZlVucc4fT2fSZ7DksTK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빙 레임스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marsellus Wallace', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 680 AND a.name = '빙 레임스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 138, '쿠엔틴 타란티노', '/1gjcpAa99FAOWGnrUvHEXXsRs7o.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '쿠엔틴 타란티노');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 680 AND d.name = '쿠엔틴 타란티노';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6lXRHGoEbnnBUKsuqpL9JxD4DzT.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 680;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/suaEOtk1N1sgg2MTM7oZd2cfVp3.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 680;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (372058, '너의 이름은.', '2016-08-26', '아직 만난 적 없는 너를, 찾고 있어', '시골에 사는 소녀 미츠하(가미시라이시 모네)는 어느 날 잠에서 깬 후 자신의 몸이 남자로 바뀐 걸 알게 된다. 같은 시간, 도쿄에 사는 소년 타키(가미키 류노스케) 역시 이 기이한 상황을 겪고 있다. 낯선 가족, 낯선 친구들, 낯선 풍경들... 서로에게 이어진 끈을 알게 된 둘은 둘만의 규칙을 정하고 점차 상황을 받아들이기 시작한다. 서로에게 남긴 메모를 확인하며  점점 친구가 되어가는 타키와 미츠하. 언제부턴가 더 이상 몸이 바뀌지 않자  자신들이 특별하게 이어져있었음을 깨달은  타키는 미츠하를 만나러 가는데...', 106, '', 'RELEASED', 105.137000, 8.485000, 358000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 372058 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 372058 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 372058 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 225730, '카미키 류노스케', '/ut7ewXjdgUmgkhJ1EtbOo9tbc7s.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카미키 류노스케');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Taki Tachibana (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 372058 AND a.name = '카미키 류노스케';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1369100, '카미시라이시 모네', '/cPydoy2sSqFDsbXeBPmzQGPmq0R.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카미시라이시 모네');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mitsuha Miyamizu (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 372058 AND a.name = '카미시라이시 모네';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1668610, '나리타 료', '/2EFimbwi4lf9B19cgu2bJaNJiVq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나리타 료');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Katsuhiko Teshigawara (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 372058 AND a.name = '나리타 료';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 936275, '유우키 아오이', '/4kHNZSUIux52UU2BD3H6b5c5ymZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '유우키 아오이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sayaka Natori (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 372058 AND a.name = '유우키 아오이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1210634, '시마자키 노부나가', '/iJFlSanoNgJMP31qBGCT9HzxFbi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시마자키 노부나가');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tsukasa Fujii (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 372058 AND a.name = '시마자키 노부나가';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 74091, '신카이 마코토', '/mSCk6PmAR99bCsKJYlMx94vq5qe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '신카이 마코토');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 372058 AND d.name = '신카이 마코토';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2DJCufz3Oa703PbLjNX1pM6MCG2.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 372058;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dIWwZW7dJJtqC6CgWzYkNVKIUm8.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 372058;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (122, '반지의 제왕: 왕의 귀환', '2003-12-17', '곤도르의 진정한 왕이 돌아왔다', '사우론이 인간들의 마지막 요새인 곤도르를 향해 야욕을 드러내고 있는 한편, 아라곤은 쇠락해가고 있는 곤도르의 재건을 위해 왕위 계승을 신중하게 결정지어야만 하는 상황. 이제 중간대륙의 미래는 그의 어깨에 달려있는 것. 사우론이 이끄는 어둠의 군대와의 마지막 전투를 위해 간달프는 곤도르에 흩어져 있던 병사들을 모으고, 로한의 왕 세오덴에게 도움을 받기도 하지만 사우론의 군대에 비하면 열세를 면치 못한다. 그러나 그들은 중간대륙을 사우론의 야욕으로부터 지키려는 사명감과, 마지막 반지 운반자에게 임무를 끝낼 기회를 주기 위해 어둠의 군대를 향해 돌진하게 되는데...', 199, '12', 'RELEASED', 177.661000, 8.500000, 1118888979, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 122 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 122 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 122 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 109, '일라이저 우드', '/7UKRbJBNG7mxBl2QQc5XsAh6F8B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '일라이저 우드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frodo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122 AND a.name = '일라이저 우드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1327, '이안 맥켈런', '/5cnnnpnJG6TiYUSS7qgJheUZgnv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이안 맥켈런');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gandalf', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122 AND a.name = '이안 맥켈런';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 110, '비고 모텐슨', '/vH5gVSpHAMhDaFWfh0Q7BG61O1y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '비고 모텐슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Aragorn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122 AND a.name = '비고 모텐슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1328, '숀 애스틴', '/ywH1VvdwqlcnuwUVr0pV0HUZJQA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '숀 애스틴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sam', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122 AND a.name = '숀 애스틴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1333, '앤디 서키스', '/eNGqhebQ4cDssjVeNFrKtUvweV5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앤디 서키스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gollum / Smeagol', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 122 AND a.name = '앤디 서키스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 108, '피터 잭슨', '/bNc908d59Ba8VDNr4eCcm4G1cR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피터 잭슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 122 AND d.name = '피터 잭슨';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/n8BPIRqvj1SdTRND828ANXhmSng.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 122;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5JrZAtyk3LwiiAWLW0kwz41XZJC.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 122;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (13, '포레스트 검프', '1994-06-23', '인생은 초콜릿 상자와 같은 거야. 네가 무엇을 고를지 아무도 모른단다', '불편한 다리, 남들보다 조금 떨어지는 지능을 가진 포레스트 검프는 헌신적인 어머니의 보살핌과 첫사랑 제니와의 만남으로 편견과 괴롭힘 속에서도 따뜻한 마음을 지니고 성장한다. 또래들의 괴롭힘을 피해 도망치던 포레스트는 누구보다 빠르게 달릴 수 있는 자신의 재능을 깨닫는다. 그의 재능을 알아 본 대학에서 그를 미식축구 선수로 발탁하고, 졸업 후에도 뛰어난 신체능력으로 군에 들어가 무공훈장을 수여받는 등 탄탄한 인생 가도에 오르게 된 포레스트. 하지만 어머니가 병에 걸려 죽음을 맞이하고, 첫사랑 제니 역시 그의 곁을 떠나가며 다시 한 번 인생의 전환점을 맞이하게 되는데...', 142, '12', 'RELEASED', 103.893000, 8.500000, 677387716, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 13 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 13 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 13 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 31, '톰 행크스', '/eKF1sGJRrZJbfBG1KirPt1cfNd3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 행크스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Forrest Gump', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 13 AND a.name = '톰 행크스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 32, '로빈 라이트', '/d3rIv0y2p0jMsQ7ViR7O1606NZa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로빈 라이트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jenny Curran', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 13 AND a.name = '로빈 라이트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 33, '게리 시나이즈', '/olRjiV8ZhBixQiTvrGwXhpVXxsV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '게리 시나이즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lieutenant Dan Taylor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 13 AND a.name = '게리 시나이즈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 35, '샐리 필드', '/iMeq1j9Xwvaf6PbTJ0FQz69fpuA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '샐리 필드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mrs. Gump', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 13 AND a.name = '샐리 필드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 34, 'Mykelti Williamson', '/e5f7XCZAUEQ55rVhdphqzdMMI8b.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mykelti Williamson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bubba Blue', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 13 AND a.name = 'Mykelti Williamson';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 24, '로버트 저메키스', '/lPYDQ5LYNJ12rJZENtyASmVZ1Ql.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '로버트 저메키스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 13 AND d.name = '로버트 저메키스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xdJxoq0dtkchOkUz5UVKuxn7a2V.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 13;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ghgfzbEV7kbpbi1O8eIILKVXEA8.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 13;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (346, '7인의 사무라이', '1954-04-26', '위대한 7인', '일본의 전국시대. 주민들은 황폐한 땅에서 어렵게 수확한 식량으로 한해 한해를 넘기는 빈촌에 살고 있다. 이 빈촌엔 보리 수확이 끝날 무렵이면 어김없이 산적들이 찾아와 모든 식량을 모조리 약탈해 간다. 싸워도 애원해도 소용이 없었다. 가만히 있을 수만은 없던 촌장의 결단으로 사무라이들을 모집하는데, 이들은 풍부한 전쟁 경험을 가진 시마다 칸베에를 포함한 7명이었다. 시마다의 지휘하에 마을은 방위태세를 갖추고 전투훈련도 시작한다. 이윽고 산적들의 공격이 시작되어 치열한 사투가 벌어진다.', 207, '15', 'RELEASED', 48.958000, 8.500000, 2626918, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 346 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 346 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7450, '미후네 토시로', '/3A9PqrtiXHLp8B2JL7m3YvVXrmL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미후네 토시로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kikuchiyo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 346 AND a.name = '미후네 토시로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7453, '시무라 타카시', '/ydyAm2vyBbEPZRICIMqqjDm0NM9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시무라 타카시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kambei Shimada', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 346 AND a.name = '시무라 타카시';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20828, '이나바 요시오', '/5qIAqM5PegWTNq67qNofz78fb6U.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이나바 요시오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gorobei Katayama', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 346 AND a.name = '이나바 요시오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20829, '미야구치 세이지', '/97XiJh1TSdu4hmJUp4Am5afgBZx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미야구치 세이지');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kyuzo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 346 AND a.name = '미야구치 세이지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7454, '치아키 미노루', '/4uqny8n2OmGixVVdzqUBA5zJ9aW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '치아키 미노루');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Heihachi Hayashida', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 346 AND a.name = '치아키 미노루';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 5026, '구로사와 아키라', '/eGexa6MZ22T1MZxce1qR3RcAYaS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '구로사와 아키라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 346 AND d.name = '구로사와 아키라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6Y8Q5t79ybiDA7XubUTneqZhjA3.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 346;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sJNNMCc6B7KZIY3LH3JMYJJNH5j.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 346;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (429, '석양의 무법자', '1966-12-22', '', '미국의 남북전쟁이 한창인 때, 블론디는 멕시코인 총잡이 투코와 함께 동업 중이다. 블론디는 현상범 투코를 잡아 현상금을 받고, 투코가 교수형을 당하는 순간 구해주는 역할. 한편 세텐자라 불리우는 범죄자는 엄청나 돈이 묻힌 비밀장소를 추적 중이다. 그런데, 투코와 실랑이를 벌이던 블론디는 돈이 묻힌 장소를 죽어가는 사람에게 듣게 되고, 결국 둘은 돈을 찾아 나서는데...', 161, '15', 'RELEASED', 108.135000, 8.463000, 38900000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 429 AND g.name = '서부';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 190, '클린트 이스트우드', '/dU35NnjZ4aGw5abIJe3WXVf3Eey.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '클린트 이스트우드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Blondie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 429 AND a.name = '클린트 이스트우드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3265, '일라이 월릭', '/s452wxFLaOwAIs6juD0rrvxaFxL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '일라이 월릭');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tuco Ramirez', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 429 AND a.name = '일라이 월릭';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4078, '리 밴클리프', '/yQc5wjNCdRZzPp5E2wRPRYsEq9a.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리 밴클리프');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sentenza / Angel Eyes', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 429 AND a.name = '리 밴클리프';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5813, 'Aldo Giuffrè', '/aT6eECl1R3YGYL4KatyIQrq0zG8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Aldo Giuffrè');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alcoholic Union Captain', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 429 AND a.name = 'Aldo Giuffrè';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5814, 'Luigi Pistilli', '/bH5vmD2CMBHzJyBe0P0bL6iTUNL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Luigi Pistilli');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Father Pablo Ramirez', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 429 AND a.name = 'Luigi Pistilli';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 4385, '세르조 레오네', '/2576qoW8l9Z1nKGM10ar60aIwUu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '세르조 레오네');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 429 AND d.name = '세르조 레오네';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/s7qPuoj4liolAtmx9vcL6AyaZzR.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 429;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/Adrip2Jqzw56KeuV2nAxucKMNXA.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 429;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (769, '좋은 친구들', '1990-09-12', '마피아 영화의 분수령', '아일랜드계 이탈리아인 헨리 힐와 토미는 13살에 마피아에 입문해 지미와 함께 트럭이나 공항 화물을 훔치는 일을 한다. 결혼 후에도 마피아 생활을 계속하는 헨리는 이제 조직에서도 안정된 위치와 경제적 여유를 갖는다.  어느 날 헨리와 지미는 공항터미널 사건을 모의해 현금 6백만 달러라는 엄청한 돈을 훔친다. 이 사건을 은폐하기 위해 혈안이 된 지미는 모의에 참여했던 사람들을 죽이고, 토미는 마피아 조직에 가담했다가 살해당한다. 엎친데 덮친격으로 헨리마저 마약거래로 경찰서에 잡혀 들어가는데...', 146, '18', 'RELEASED', 146.232000, 8.458000, 46800000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 769 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 769 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 380, '로버트 드 니로', '/cT8htcckIuyI1Lqwt1CvD02ynTh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 드 니로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'James Conway', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 769 AND a.name = '로버트 드 니로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11477, '레이 리오타', '/rhaCUi04uEXDFvuPM5Drj1AprE6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레이 리오타');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Henry Hill', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 769 AND a.name = '레이 리오타';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4517, '조 페시', '/4AO0Rwdg2ky8Usmgzgj0dvhy7Zw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조 페시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tommy DeVito', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 769 AND a.name = '조 페시';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11478, '로렌 브라코', '/tAtpCzN4sTOy1RHpMpJj52zTO4S.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로렌 브라코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Karen Hill', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 769 AND a.name = '로렌 브라코';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7004, '폴 소비노', '/4gDEo0wty5ixtrpV0U17PlHoFik.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '폴 소비노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paul Cicero', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 769 AND a.name = '폴 소비노';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1032, '마틴 스콜세지', '/9U9Y5GQuWX3EZy39B8nkk4NY01S.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '마틴 스콜세지');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 769 AND d.name = '마틴 스콜세지';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zF9hSBS1t7PVFLo01GrJ3OjGi67.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 769;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7TF4p86ZafnxFuNqWdhpHXFO244.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 769;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (12477, '반딧불이의 묘', '1988-04-16', '14살 오빠, 4살 여동생... 오누이는 함께라서 행복했습니다.', '2차 세계대전, 일본의 한 마을에 폭격기로 인한 대공습이 일어난다. 마을이 화염으로 휩싸이자, 14살인 세이타는 부모님과 따로 만나기로 약속한 채 4살짜리 여동생 세츠코를 업고 피신한다. 결국 집과 어머니를 잃고 먼 친척아주머니의 집으로 향하는 세이타와 세츠코. 힘들고 어려운 환경에서도 오빠 세이타는 천진하고 착한 여동생 세츠코를 보면서 희망과 용기를 잃지 않는다. 하지만 시간이 지날수록 친척아주머니의 남매에 대한 냉대는 더욱 심해지고, 세이타는 어머니가 남겨주었던 마지막 여비를 챙겨 세츠코와 함께 산 속에 있는 방공호로 거처를 옮긴다. 두 남매는 산 속 동굴에서 반딧불이를 잡아 불을 밝히고, 물고기와 개구리를 잡아먹으며 살아가는데...', 89, '12', 'RELEASED', 0.052000, 8.456000, 516962, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 12477 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 12477 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 12477 AND g.name = '전쟁';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 72413, '辰巳努', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '辰巳努');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Seita (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12477 AND a.name = '辰巳努';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 72414, '白石綾乃', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '白石綾乃');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Setsuko (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12477 AND a.name = '白石綾乃';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 72415, '志乃原良子', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '志乃原良子');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mother (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12477 AND a.name = '志乃原良子';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 72416, '山口朱美', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '山口朱美');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Auntie (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12477 AND a.name = '山口朱美';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3773484, 'Masayo Sakai', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Masayo Sakai');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Woman who takes care of Setsuko (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12477 AND a.name = 'Masayo Sakai';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 628, '다카하타 이사오', '/xTkZOWe1VU4xNba1lO0T9trFLHm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '다카하타 이사오');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 12477 AND d.name = '다카하타 이사오';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uN0x0G4uuRjFJIFN57iYihBV2Qh.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 12477;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gwj4R8Uy1GwejKqfofREKI9Jh7L.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 12477;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (11216, '시네마 천국', '1988-11-17', '영화가 세상의 전부인 소년 토토와 낡은 마을 극장의 영사기사 알프레도의 애틋한 우정', '어린 시절 영화가 세상의 전부였던 소년 토토는 학교 수업을 마치면 마을 광장에 있는 낡은 시네마 천국이라는 극장으로 달려가 영사 기사 알프레도와 친구로 지내며 어깨너머로 영사기술을 배운다. 어느 날 관객들을 위해 광장에서 야외 상영을 해주던 알프레도가 그만 화재 사고로 실명하게 되고, 토토가 그의 뒤를 이어 시네마 천국의 영상기사로 일하게 된다. 실명한 후에도 토토의 친구이자 아버지로 든든한 정신적 지주가 되어준 알프레도는 청년이 된 토토가 사랑하는 여자 엘레나의 부모님의 반대로 좌절하자 넓은 세상으로 나가서 더 많은 것을 배우라며 권유하는데...', 124, 'ALL', 'RELEASED', 41.343000, 8.500000, 11990401, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11216 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11216 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 24366, '필립 느와레', '/mWPa6A0JK3tfVRQDIzCQGEao19B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '필립 느와레');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alfredo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11216 AND a.name = '필립 느와레';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20030, '자끄 페렝', '/IbMtXB1Sy6JaLsSKrJiplZqKTO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '자끄 페렝');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Salvatore ''Totò'' Di Vita (adult)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11216 AND a.name = '자끄 페렝';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 27643, '마르코 레오나르디', '/5VVhO9rPvRgKsZME2gZKtG9WgWD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마르코 레오나르디');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Salvatore ''Totò'' Di Vita (teen)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11216 AND a.name = '마르코 레오나르디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 68635, '살바토레 카스치오', '/7t59ZGfLUv30DBgoUcqXXhK0t6Y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '살바토레 카스치오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Salvatore ''Totò'' Di Vita (child)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11216 AND a.name = '살바토레 카스치오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 120152, '아그네즈 나노', '/gUbvX3dm8rIq58phY8jSl3oPgUe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아그네즈 나노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elena Mendola (teen) / Elena''s daughter (in Director''s cut)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11216 AND a.name = '아그네즈 나노';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 65314, '주세페 토르나토레', '/pjVrtNGsCSNs5IeRVr34PMn1hVR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '주세페 토르나토레');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 11216 AND d.name = '주세페 토르나토레';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/r782z4H7GzkyNaf3hAtBB4pVkOj.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 11216;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7lyq8hK0MhPHpUXdnqbFvZYSfkk.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 11216;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (637, '인생은 아름다워', '1997-12-20', '깐느가 그랑프리를 헌사한 이탈리아 영화천재의 걸작', '로마에 갓 상경한 시골 총각 귀도는 운명처럼 만난 여인 도라에게 첫눈에 반한다. 넘치는 재치와 유머로 약혼자가 있던 그녀를 사로잡은 귀도는 가정을 꾸리며 분신과도 같은 아들 조수아를 얻는다. 조수아의 다섯 살 생일, 갑작스레 들이닥친 군인들은 귀도와 조수아를 수용소 행 기차에 실어버리고, 소식을 들은 도라 역시 기차에 따라 오른다. 귀도는 아들을 달래기 위해 무자비한 수용소 생활을 단체게임이라 속이고 1,000점을 따는 우승자에게는 진짜 탱크가 주어진다고 말한다. 하루하루가 지나 어느덧 전쟁이 끝났다는 말을 들은 귀도는 조수아를 창고에 숨겨둔 채 아내를 찾아 나서는데...', 116, 'All', 'RELEASED', 74.602000, 8.448000, 230098753, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 637 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 637 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4818, '로베르토 베니니', '/noelOhwX1oaNSvU9NLKhPrHTFI3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로베르토 베니니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Guido', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637 AND a.name = '로베르토 베니니';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 9235, 'Nicoletta Braschi', '/9IeE3Iz9HXZVTrvhjSCKlR4FLxB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nicoletta Braschi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dora', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637 AND a.name = 'Nicoletta Braschi';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 9236, 'Giorgio Cantarini', '/ezOFvAPMQ535M0EhIkoUKW8JIwo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Giorgio Cantarini');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Giosué', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637 AND a.name = 'Giorgio Cantarini';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 9237, 'Giustino Durano', '/o302wA8DHLHDLhTXOF5wEi3C99G.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Giustino Durano');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zio', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637 AND a.name = 'Giustino Durano';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 9239, 'Sergio Bini Bustric', '/crnlLn1SxP2LqbsXNr8CQrvaiNc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sergio Bini Bustric');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ferruccio', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637 AND a.name = 'Sergio Bini Bustric';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 4818, '로베르토 베니니', '/noelOhwX1oaNSvU9NLKhPrHTFI3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '로베르토 베니니');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 637 AND d.name = '로베르토 베니니';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yjOqQsQHdsEZfAosZERqHiwjaty.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 637;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gavyCu1UaTaTNPsVaGXT6pe5u24.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 637;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (157336, '인터스텔라', '2014-11-05', '우린 답을 찾을 것이다, 늘 그랬듯이', '세계 각국의 정부와 경제가 완전히 붕괴된 미래가 다가온다. 지난 20세기에 범한 잘못이 전 세계적인 식량 부족을 불러왔고, NASA도 해체되었다. 나사 소속 우주비행사였던 쿠퍼는 지구에 몰아친 식량난으로 옥수수나 키우며 살고 있다. 거센 황사가 몰아친 어느 날 알 수 없는 힘에 이끌려 딸과 함께 도착한 곳은 인류가 이주할 행성을 찾는 나사의 비밀본부. 이 때 시공간에 불가사의한 틈이 열리고, 이 곳을 탐험해 인류를 구해야 하는 임무를 위해 쿠퍼는 만류하는 딸을 뒤로한 채 우주선에 탑승하는데...', 169, '12', 'RELEASED', 247.217000, 8.441000, 701729206, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 157336 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 157336 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 157336 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10297, '매튜 매커너히', '/rUxLWWCDUF8RnDaocSqrVDJ2MS1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '매튜 매커너히');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cooper', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 157336 AND a.name = '매튜 매커너히';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1813, '앤 해서웨이', '/kRYxBuUtN3vNz5pLfqCf32ZYlw2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앤 해서웨이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brand', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 157336 AND a.name = '앤 해서웨이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3895, '마이클 케인', '/bVZRMlpjTAO2pJK6v90buFgVbSW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 케인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Professor Brand', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 157336 AND a.name = '마이클 케인';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 83002, '제시카 차스테인', '/xRvRzxiiHhgUErl0yf9w8WariRE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제시카 차스테인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Murph', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 157336 AND a.name = '제시카 차스테인';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1893, '케이시 애플렉', '/vD5MtCjHPHpmU9XNn74EPGMHT7o.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케이시 애플렉');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tom', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 157336 AND a.name = '케이시 애플렉';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 525, '크리스토퍼 놀란', '/xuAIuYSmsUzKlUMBFGVZaWsY3DZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스토퍼 놀란');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 157336 AND d.name = '크리스토퍼 놀란';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/evoEi8SBSvIIEveM3V6nCJ6vKj8.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 157336;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xJHokMbljvjADYdit5fK5VQsXEG.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 157336;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (550, '파이트 클럽', '1999-10-15', '믿어왔던 상식과 규칙에 통렬한 카운터를 날리는 스타일리시 액션 무비!', '자동차 회사의 리콜 심사관으로 일하는 주인공(에드워드 노튼)은 일상의 무료함과 공허함 속에서 늘 새로운 탈출을 꿈꾼다. 그는 비행기에서 자신을 비누 제조업자라고 소개하는 타일러 더든(브래드 피트)을 만난다. 집에 돌아온 주인공은 아파트가 누군가에 의해 폭파되었음을 발견하고, 타일러에게 도움을 청해 함께 생활하게 된다. 어느 날 밤 타일러는 주인공에게 자신을 때려달라고 부탁한다. 사람은 싸워봐야 진정한 자신을 알 수 있다는 것이다. 결국 이들은 매주 토요일 밤 술집 지하에서 맨주먹으로 격투를 벌이는 파이트 클럽을 결성하기에 이르는데...', 139, '19', 'RELEASED', 126.907000, 8.400000, 100853753, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 550 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 819, '에드워드 노튼', '/8nytsqL59SFJTVYVrN72k6qkGgJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에드워드 노튼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Narrator', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 550 AND a.name = '에드워드 노튼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 287, '브래드 피트', '/9OfnD7lxgIj3BNQpJFnwxnwl6w5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브래드 피트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tyler Durden', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 550 AND a.name = '브래드 피트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1283, '헬레나 본햄 카터', '/hJMbNSPJ2PCahsP3rNEU39C8GWU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헬레나 본햄 카터');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marla Singer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 550 AND a.name = '헬레나 본햄 카터';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7470, 'Meat Loaf', '/7gKLR1u46OB8WJ6m06LemNBCMx6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Meat Loaf');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Robert Paulson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 550 AND a.name = 'Meat Loaf';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7499, '자레드 레토', '/aNUvy7cpa78NRjCvHi5vYuNJRtj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '자레드 레토');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Angel Face', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 550 AND a.name = '자레드 레토';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 7467, '데이비드 핀처', '/tpEczFclQZeKAiCeKZZ0adRvtfz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '데이비드 핀처');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 550 AND d.name = '데이비드 핀처';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/eKZ07Ted7VHxQjbuZrRBFOamcKJ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 550;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hZkgoQYus5vegHoetLkCJzb17zJ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 550;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (667257, '불가능한 것들', '2021-06-17', '', '폭력적인 남편의 사망 후, 마틸데는 여전히 트라우마와 외로움 그리고 유령같이 그녀의 주변을 맴도는 남편의 흔적에 시달린다. 이웃집 소년 미겔과 가까워진 마틸데는 미겔의 마약 판매에 가담하면서, 이전까지 경험하지 못했던 새로운 삶에 눈을 뜨기 시작한다. 나이 차에도 불구하고 두 사람이 나누는 평범하지 않은 우정은 서로의 상처를 보듬고 치유해 준다. 삶의 막다른 골목에서, 불가능해 보였던 희망을 향해 나아가는 마틸데와 미겔의 용기 어린 선택이 감동으로 다가온다.', 88, '', 'RELEASED', 23.922000, 8.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 667257 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 667257 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1508206, 'Nora Velázquez', '/lh3fpLrabTkEuJ6rDGaighy1N1C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nora Velázquez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Matilde', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 667257 AND a.name = 'Nora Velázquez';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1379379, 'Benny Emmanuel', '/rSqiumttAOg08Auypm5Z7FpdvMS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Benny Emmanuel');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miguel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 667257 AND a.name = 'Benny Emmanuel';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 224508, 'Luisa Huertas', '/6GuQjQESw4RBadSElqaunwKhOKE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Luisa Huertas');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eugenia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 667257 AND a.name = 'Luisa Huertas';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 941366, 'Salvador Garcini', '/Rc6tcF11oAcglEpl4AOxK9e9lU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Salvador Garcini');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Porfirio', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 667257 AND a.name = 'Salvador Garcini';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1549908, 'Andrés Delgado', '/gq7nwfzsF9R81qGCc2tlzgO2FI7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Andrés Delgado');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lalo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 667257 AND a.name = 'Andrés Delgado';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1205254, '에르네스토 콘트레라스', '/57RDgBYP5qkQ5LHUdFJdABpq5yw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '에르네스토 콘트레라스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 667257 AND d.name = '에르네스토 콘트레라스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/eaf7GQj0ieOwm08rrvjJQNbN0kN.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 667257;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bxSBOAD8AuMHYMdW3jso9npAkgt.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 667257;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (539, '싸이코', '1960-06-22', '그들은 알게 될 거야, 난 파리 한 마리도 해치지 못하는 사람이란 걸', '마리온 크레인은 그녀의 애인 샘과 결혼하길 원하지만 샘은 빚을 갚을 때까지 기다리라고 말한다. 그래서 그녀는 자신이 다니고 있는 회사 사장이 은행에 입금하라고 맡긴 돈을 들고 도망친다. 도주 첫날 밤 묵게 된 도로변의 낡은 모텔 주인인 노만 베이츠는 그녀에게 친절하게 대해주며 자신은 모텔 바로 뒤쪽 저택에서 몸이 불편한 어머니와 함께 살고 있다고 말한다. 잠자리에 들기 전 마리온이 샤워를 하는 도중, 난데없이 검은 형상이 욕실에 나타나고 마리온은 실종된다. 마리온을 찾기 위해 그녀의 언니 릴라와 샘, 그리고 보험회사 측에서 고용한 탐정 등 세 사람이 추적에 나서는데...', 109, '18', 'RELEASED', 62.229000, 8.431000, 32000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 539 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 539 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 539 AND g.name = '미스터리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7301, '안소니 퍼킨스', '/sqZeCzoFYd482whmnBFQU9vHc2s.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '안소니 퍼킨스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Norman Bates', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 539 AND a.name = '안소니 퍼킨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7302, '자넷 리', '/2dv9IqJEx31RSoH7xAHlJZXF5uB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '자넷 리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marion Crane', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 539 AND a.name = '자넷 리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7303, '베라 마일스', '/9PDTsJnBfrAlvVPOBBFS3ehN8lD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '베라 마일스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lila Crane', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 539 AND a.name = '베라 마일스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7304, 'John Gavin', '/n8vlG1PRtNzv6vlwjTNK7UnoKr0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'John Gavin');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sam Loomis', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 539 AND a.name = 'John Gavin';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1936, '마틴 발삼', '/2j4LJJfTPQtvnjp8LfSGOvWFATO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마틴 발삼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Private Det. Milton Arbogast', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 539 AND a.name = '마틴 발삼';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2636, '알프레드 히치콕', '/108fiNM6poRieMg7RIqLJRxdAwG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '알프레드 히치콕');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 539 AND d.name = '알프레드 히치콕';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vC3P8hH4r3I3fHiRFa1kj6yzeaN.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 539;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uif5fUshJrXyyDzfpzp1DLw3N0S.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 539;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (598, '시티 오브 갓', '2002-08-30', '신이 버린 도시, 끝까지 남는 자만이 군림할 수 있다', '빈민가가 막 형성되기 시작한 1960년대, 마을을 지나가는 배달 트럭을 털면서 가족을 부양하는 텐더 삼총사가 주름잡던 그 시기에는 엄연한 룰이 존재했다. 돈은 훔치되 살인은 삼가는 것이다. 이들은 엉뚱한 용의자를 사살하고도 지갑을 챙기는 악질 경찰에 비하면 약자에 불과했다. 텐더 트리오 시대에 종지부를 찍은 제빼게노는 큰 돈을 만지기 위해서는 마약을 다뤄야 함을 알게 된다. 단짝친구 베네는 악랄하기만 할 뿐 주변을 다독일 줄 모르던 제빼게노를 보좌하며 또 다른 룰을 만들어내지만, 위태로운 평화의 유효기간은 그리 길지 않다.', 129, '18', 'RELEASED', 53.035000, 8.400000, 30641770, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 598 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 598 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8595, 'Alexandre Rodrigues', '/sN0o245HMVYTnEWPBYt3qdiQupq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alexandre Rodrigues');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Buscapé - Rocket', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 598 AND a.name = 'Alexandre Rodrigues';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8596, 'Leandro Firmino', '/aEzWJgEzId04EP8C2UFQaF28WTW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Leandro Firmino');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zé Pequeno - Li''l Zé', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 598 AND a.name = 'Leandro Firmino';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8597, 'Phellipe Haagensen', '/3dxy4unadLTAb6aUQUyX2r3AkE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Phellipe Haagensen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bené - Benny', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 598 AND a.name = 'Phellipe Haagensen';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8598, 'Douglas Silva', '/8GAtzTf0qjTf9HgePUFwsFbQVbn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Douglas Silva');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dadinho - Li''l Dice', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 598 AND a.name = 'Douglas Silva';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8599, 'Jonathan Haagensen', '/cha3GxI1MfbCjc973iUNKUvopQF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jonathan Haagensen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cabeleira - Shaggy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 598 AND a.name = 'Jonathan Haagensen';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 8557, '페르난도 메이렐레스', '/at0fRZl4fJwqaytXOfvgs1lOM9E.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '페르난도 메이렐레스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 598 AND d.name = '페르난도 메이렐레스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/iKXrQB16sxeXoc6GlnYjeeZKsOW.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 598;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uvitbjFU4JqvMwIkMWHp69bmUzG.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 598;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (311, '원스 어폰 어 타임 인 아메리카', '1984-05-23', '인간은 결국 인간이다', '1921년, 좀도둑질을 일삼던 누들스는 친구들과 함께 밀수품 운반 일을 하며 돈을 벌어들인다. 누들스 무리에 위협을 느낀 벅시는 누들스의 친구를 죽이고, 분노한 누들스는 벅시를 살해한 후 감옥에 들어가게 된다. 1932년, 출소한 누들스는 어린 시절 첫사랑 데보라와 밀주 사업으로 크게 성공한 맥스를 다시 만나지만, 금주법 철폐로 밀주 사업도 위기를 맞는다. 맥스는 누들스에게 연방준비은행을 털 것을 제안하지만 누들스는 거절한다. 1968년, 베일리 재단 파티에 초대 받은 누들스는 재단 창립 기념 사진 속에서 데보라를 발견하고 그녀를 찾아가는데...', 229, '18', 'RELEASED', 56.780000, 8.417000, 5500000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 311 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 311 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 380, '로버트 드 니로', '/cT8htcckIuyI1Lqwt1CvD02ynTh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 드 니로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'David ''Noodles'' Aaronson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 311 AND a.name = '로버트 드 니로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4512, '제임스 우즈', '/tLH7mpH4KqkWL5VgjueTbewGsfK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제임스 우즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maximilian ''Max'' Bercovicz', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 311 AND a.name = '제임스 우즈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4513, '엘리자베스 맥거번', '/llMb5BfJhWnDqBjmoKDogZaoyer.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '엘리자베스 맥거번');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Deborah Gelly', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 311 AND a.name = '엘리자베스 맥거번';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4515, 'Treat Williams', '/bQ3zECF7TRpF8cwCmxqn4Qv2zHD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Treat Williams');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'James Conway O''Donnell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 311 AND a.name = 'Treat Williams';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4514, '튜스데이 웰드', '/wAHhvoII75VeT5OGpHoTGf1hJ7w.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '튜스데이 웰드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Carol', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 311 AND a.name = '튜스데이 웰드';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 4385, '세르조 레오네', '/2576qoW8l9Z1nKGM10ar60aIwUu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '세르조 레오네');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 311 AND d.name = '세르조 레오네';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xbuc6sjIIopkA1Ep24rR6yCw0DK.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 311;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uPYa165sraN2c8gZBM9C47g3JoU.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 311;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (510, '뻐꾸기 둥지 위로 날아간 새', '1975-11-19', '감시와 처벌, 그리고 휴머니즘', '많은 죄를 짓고 수감중이던 맥머피는 교도소에서 정신 병원으로 후송되는데, 감옥보다는 자유로울 것으로 생각했지만 전혀 그렇지 않다는 것을 깨닫는다. 정신 병원의 여러 환자들과 생활하면서 맥머피는 그들이 겉으로는 전혀 문제가 없어 보이지만 보이지 않는 병원내의 압력에 의해 짓눌려 사는 죽은 인간들임을 간파한다. 그리고 그러한 압력의 주범이 간호사 레취드임을 알게 된다. 맥머피는 환자들을 끌고 병원을 빠져나가 낚시를 다녀오거나 파티를 여는 등 의도적인 반항을 시도하다 결국 탈출을 결심하게 되는데...', 133, '19', 'RELEASED', 56.181000, 8.400000, 108981275, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 510 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 514, '잭 니콜슨', '/6h12pZsgj3WWjMtykUgfLkLEBWz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '잭 니콜슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Randle Patrick McMurphy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 510 AND a.name = '잭 니콜슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1370, 'Brad Dourif', '/v339kxCH5IZq6rMjKRtJbRnXdgZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Brad Dourif');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Billy Bibbit', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 510 AND a.name = 'Brad Dourif';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7071, '루이즈 플레쳐', '/hN15em5LqXqDe1QgDa6lXK9fx3z.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루이즈 플레쳐');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nurse Mildred Ratched', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 510 AND a.name = '루이즈 플레쳐';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 518, '대니 드비토', '/6kO4IN7ndoIGw2JhyhAQN3SFmdx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '대니 드비토');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Martini', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 510 AND a.name = '대니 드비토';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7072, 'William Redfield', '/6w7BRi6bTRZq263Bxkfogy4ekLB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'William Redfield');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dale Harding', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 510 AND a.name = 'William Redfield';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 3974, '밀로스 포먼', '/ypWY2o3oikT2LTAQcCPAcUi4zqG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '밀로스 포먼');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 510 AND d.name = '밀로스 포먼';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/g6TD3q0aunRN5VveKauoH8FdxQw.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 510;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qUq3QTr2KLvGIcN0GaaaYx9bbyH.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 510;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (120, '반지의 제왕: 반지 원정대', '2001-12-18', '마지막 반지를 차지하는 자, 모든 힘을 지배하게 될 것이다', '호빗이라 불리우는 난장이 종족 중의 한 명인 프로도는 자신의 삼촌에게서 우연히 절대 반지를 물려받게 되고, 마법사 간달프를 통해서 절대반지가 사우론의 손에 들어가면 악의 세력이 세상을 지배하게 된다는 것을 알게 된다. 하지만 절대반지를 영원히 파괴할 수 있는 유일한 방법은 반지가 만들어진 불의 산의 용암에 그것을 던져 넣는 길 뿐이다. 마침내 프로도와 그의 친구들, 엘프족인 레골라스, 난장이족 김리, 두명의 인간 전사 아라곤과 보로미르, 그리고 마법사 간달프로 구성된 반지 원정대가 길고도 험난한 여정을 떠나게 되는데...', 227, '12', 'RELEASED', 169.691000, 8.416000, 871368364, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 120 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 120 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 120 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 109, '일라이저 우드', '/7UKRbJBNG7mxBl2QQc5XsAh6F8B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '일라이저 우드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frodo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 120 AND a.name = '일라이저 우드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1327, '이안 맥켈런', '/5cnnnpnJG6TiYUSS7qgJheUZgnv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이안 맥켈런');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gandalf', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 120 AND a.name = '이안 맥켈런';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 110, '비고 모텐슨', '/vH5gVSpHAMhDaFWfh0Q7BG61O1y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '비고 모텐슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Aragorn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 120 AND a.name = '비고 모텐슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1328, '숀 애스틴', '/ywH1VvdwqlcnuwUVr0pV0HUZJQA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '숀 애스틴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sam', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 120 AND a.name = '숀 애스틴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 65, '이안 홈', '/cOJDgvgj4nMec6Inzj1H5nugTO5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이안 홈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bilbo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 120 AND a.name = '이안 홈';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 108, '피터 잭슨', '/bNc908d59Ba8VDNr4eCcm4G1cR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피터 잭슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 120 AND d.name = '피터 잭슨';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/r18JdjImbWDRwkbVDIzWoLQqkCo.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 120;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/x2RS3uTcsJJ9IfjNPcgDmukoEcQ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 120;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (696374, '가브리엘의 지옥', '2020-05-29', '', '', 122, '', 'RELEASED', 19.873000, 8.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 696374 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 696374 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1312450, 'Melanie Zanetti', '/lbUQ7ilvBtWMU23reKsHg3jRmsf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Melanie Zanetti');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Julianne Mitchell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 696374 AND a.name = 'Melanie Zanetti';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 544002, 'Giulio Berruti', '/cCOWVvjQ1TblPvM7TgMBqMczkOX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Giulio Berruti');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gabriel Emerson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 696374 AND a.name = 'Giulio Berruti';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 73659, 'Kurt McKinney', '/ebkMXPJXAGsPpfzysNmht6NVtR6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kurt McKinney');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tom Mitchell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 696374 AND a.name = 'Kurt McKinney';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1188681, 'Agnes Albright', '/39laAb3lRSVQv4NtXzIwuowuFry.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Agnes Albright');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 696374 AND a.name = 'Agnes Albright';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2595115, 'Margaux Brooke', '/leLl5l6KnjMdg5O48FhDfB7GquI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Margaux Brooke');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 696374 AND a.name = 'Margaux Brooke';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 935563, 'Tosca Musk', '/1tWccsh9uR9mK3Q0e4PZKe0e6eB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Tosca Musk');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 696374 AND d.name = 'Tosca Musk';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oyG9TL7FcRP4EZ9Vid6uKzwdndz.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 696374;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/w2uGvCpMtvRqZg6waC1hvLyZoJa.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 696374;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (40096, '어 독스 윌', '2000-09-15', '', '', 104, '', 'RELEASED', 9.010000, 8.400000, 4903192, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 40096 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 40096 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 40096 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8600, 'Matheus Nachtergaele', '/zgTT5AP7NYa2hN0jUqHIHkNyp2v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Matheus Nachtergaele');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'João Grilo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 40096 AND a.name = 'Matheus Nachtergaele';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 87341, 'Selton Mello', '/2kMNDxslDMiWORhrwlzenq0hbMj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Selton Mello');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chicó', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 40096 AND a.name = 'Selton Mello';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 123757, 'Rogério Cardoso', '/ertp7Yo3BhAA9FXaXJo4LDK9Out.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rogério Cardoso');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Padre João', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 40096 AND a.name = 'Rogério Cardoso';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 123758, 'Denise Fraga', '/oLn1Av1qF0vbip8WKnTb4EQkaZ5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Denise Fraga');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dora', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 40096 AND a.name = 'Denise Fraga';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 102551, 'Diogo Vilela', '/hsAky8EzEgWMlbCr9YgJJ69B5lt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Diogo Vilela');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eurico', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 40096 AND a.name = 'Diogo Vilela';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 102560, 'Guel Arraes', '/frBx9AAVbssDIaVh1wzfqnNEJ8b.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Guel Arraes');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 40096 AND d.name = 'Guel Arraes';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/imcOp1kJsCsAFCoOtY5OnPrFbAf.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 40096;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/alQqTpmEkxSLgajfEYTsTH6nAKB.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 40096;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (704264, 'Primal: Tales of Savagery', '2019-11-21', '', '', 85, '', 'RELEASED', 25.001000, 8.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 704264 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 704264 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 704264 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 704264 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1281304, 'Aaron LaPlante', '/9o42oeMwvAfoJq2E5H83hdvTrxj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Aaron LaPlante');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Spear / Big Gorilla / Monkey #3 (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 704264 AND a.name = 'Aaron LaPlante';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1836598, 'Jon Olson', '/crkYY5wcjoDn04BFlkF5WiR3d1A.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jon Olson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Krog / Shaman (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 704264 AND a.name = 'Jon Olson';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1218986, 'Bryan Andrews', '/28gfwWcp0961McmxFld5nKdNXV3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bryan Andrews');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 704264 AND a.name = 'Bryan Andrews';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 60300, 'Darrick Bachman', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Darrick Bachman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 704264 AND a.name = 'Darrick Bachman';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 185438, 'Genndy Tartakovsky', '/neLR8ws82ezlbhOyUvhtLXwQZWL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Genndy Tartakovsky');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 704264 AND d.name = 'Genndy Tartakovsky';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9NBBkdxH0TjQEBSN2AzeE1sgsF9.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 704264;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uBZQOYZLIU9dBmd62fdzBAoropu.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 704264;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (4935, '하울의 움직이는 성', '2004-09-09', '소녀가 마법에 걸린 순간 마법사의 성문이 열렸다', '19세기 말 마법과 과학이 공존하고 있는 세계 앵거리. 소피는 돌아가신 아버지의 모자상점에서 쉴틈없이 일하는 18살 소녀이다. 어느 날 오랫만에 마을로 나간 소피는 우연히 하울을 만나게 된다. 하울은 왕실 마법사로서 핸섬하지만 조금 겁이 많은 청년이다. 황무지 마녀는 두 사람의 사이를 오해, 주문을 걸어 소피를 90살의 늙은 할머니로 만들어 버린다. 가족을 걱정한 소피는 집을 나오게 되고 황무지를 헤매다가 하울이 사는 성에서 가정부로 낯선 생활을 시작한다. 4개의 다리로 걷는 기괴한 움직이는 성 안에서 하울과 소피의 기묘한 사랑과 모험이 시작되는데...', 119, 'All', 'RELEASED', 86.137000, 8.402000, 236049757, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 4935 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 4935 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 4935 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 533325, '바이쇼 치에코', '/b8ANR4WfdUZtoU4ktlnMFzbq759.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '바이쇼 치에코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sophie (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 4935 AND a.name = '바이쇼 치에코';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12670, '기무라 타쿠야', '/sswCg8kvFsgSaVJwcIKKe4K7jOe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '기무라 타쿠야');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Howl (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 4935 AND a.name = '기무라 타쿠야';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20338, '미와 아키히로', '/pCfBeLJigKnUWOAy7hsdBR7K0UV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미와 아키히로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Witch of the Waste (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 4935 AND a.name = '미와 아키히로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19592, '가슈인 타츠야', '/fLqIdkShknsJmZy4EfBWuWyHN4C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '가슈인 타츠야');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Calcifer (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 4935 AND a.name = '가슈인 타츠야';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 225730, '카미키 류노스케', '/ut7ewXjdgUmgkhJ1EtbOo9tbc7s.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카미키 류노스케');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Markl (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 4935 AND a.name = '카미키 류노스케';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 608, '미야자키 하야오', '/mG3cfxtA5jqDc7fpKgyzZMKoXDh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '미야자키 하야오');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 4935 AND d.name = '미야자키 하야오';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3sVFlmzBCZpwlsosKHxyK4d9oDw.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 4935;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xqaN2WYQclQlqvKvsOcNgOx2vRn.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 4935;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (121, '반지의 제왕: 두 개의 탑', '2002-12-18', '새로운 힘이 떠오른다', '9명의 반지원정대는 사우론의 세력에 맞서 반지를 지켜냈지만 반지 원정대는 뿔뿔이 흩어지게 된다. 메리와 피핀을 구하기 위해 우르크하이 군대를 추격하던 아라곤과 레골라스, 김리는 유령 숲에서 백색의 마법사로 부활한 마법사 간달프를 만나게 되고 사우론이 암흑세계의 두 개의 탑을 통합하여 점점 그 세력을 넓혀가고 있다는 사실을 듣게 된다. 이에 아라곤과 원정대는 중간계의 선한 무리의 통합을 이뤄 사우론의 세력을 견제해야 하는 큰 임무를 맡게 된다. 하지만 원수지간인 곤도르와 로한으로 나뉜 인간 종족의 통합은 쉽지 않고 게다가 로한의 왕마저 사루만에게 동화되는데...', 177, '12', 'RELEASED', 134.008000, 8.400000, 926287400, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 121 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 121 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 121 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 109, '일라이저 우드', '/7UKRbJBNG7mxBl2QQc5XsAh6F8B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '일라이저 우드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frodo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 121 AND a.name = '일라이저 우드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1327, '이안 맥켈런', '/5cnnnpnJG6TiYUSS7qgJheUZgnv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이안 맥켈런');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gandalf', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 121 AND a.name = '이안 맥켈런';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 110, '비고 모텐슨', '/vH5gVSpHAMhDaFWfh0Q7BG61O1y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '비고 모텐슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Aragorn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 121 AND a.name = '비고 모텐슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1328, '숀 애스틴', '/ywH1VvdwqlcnuwUVr0pV0HUZJQA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '숀 애스틴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sam', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 121 AND a.name = '숀 애스틴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1333, '앤디 서키스', '/eNGqhebQ4cDssjVeNFrKtUvweV5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앤디 서키스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gollum', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 121 AND a.name = '앤디 서키스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 108, '피터 잭슨', '/bNc908d59Ba8VDNr4eCcm4G1cR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피터 잭슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 121 AND d.name = '피터 잭슨';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zxZdTi3fA7aDxEOivmzZAY2bmTu.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 121;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mshaKLtPUxcDBhzau6qiObEblhL.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 121;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (324857, '스파이더맨: 뉴 유니버스', '2018-12-06', '새로운 스파이더맨 평행세계의 시작', '평범한 10대 마일스 모랄레스는 우연히 방사능 거미에 물려 스파이더맨 능력을 가지게 된다. 혼란스러워하던 마일스는 악당과 싸우고 있는 피터 파커를 마주치게 되고 피터 파커는 마일스가 자신과 같은 능력을 가지고 있음을 직감한다. 여러 개의 평행세계가 존재한다는 것을 알게 된 마일스와 피터 파커는 이후 스파이더우먼 스파이더 그웬, 스파이더맨 누아르, 스파이더햄 등 평행세계 속 공존하는 모든 스파이더맨들을 만나게 되는데... 하나의 유니버스에서 만나 팀을 결성한 스파이더맨들은 과연 세계를 구할 수 있을까?', 117, '12', 'RELEASED', 121.770000, 8.400000, 384298736, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 324857 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 324857 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 324857 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 324857 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 587506, '셔믹 무어', '/ovUKfVOwJ7CadEHaG3NDsfA5xRq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '셔믹 무어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miles Morales (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324857 AND a.name = '셔믹 무어';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 543505, '제이크 존슨', '/3UNfW2qZgRkW81neNVfQvaRC92K.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이크 존슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Peter B. Parker (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324857 AND a.name = '제이크 존슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 130640, '헤일리 스타인펠드', '/dxSDWkiVaC6JYjrV3XRAZI7HOSS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헤일리 스타인펠드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gwen Stacy (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324857 AND a.name = '헤일리 스타인펠드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 932967, '마허샬라 알리', '/j0c8X3ieYolm9UgOMDV4Ty5kf5M.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마허샬라 알리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Uncle Aaron (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324857 AND a.name = '마허샬라 알리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 226366, '브라이언 타이리 헨리', '/2MsJh0bpyzwvOUnXOltHp3j85Pb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브라이언 타이리 헨리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jefferson Davis (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324857 AND a.name = '브라이언 타이리 헨리';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 936670, '밥 퍼시케티', '/cNd5VyMI3sNgiHOwLIB7WDiH128.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '밥 퍼시케티');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 324857 AND d.name = '밥 퍼시케티';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 151007, '피터 램지', '/eAL9QdCEYyxiMP9cl9lQddg8zEa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피터 램지');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 324857 AND d.name = '피터 램지';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 59918, '로드니 로스먼', '/75yKuJr1wL8qesEDYL2IHK67BEx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '로드니 로스먼');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 324857 AND d.name = '로드니 로스먼';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/d9V6Q9vpVpmaca7vwSUbCajtDb3.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 324857;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qGQf2OHIkoh89K8XeKQzhxczf96.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 324857;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (14537, '하라키리', '1962-09-15', '', '사소한 잘못으로 상부로부터 할복 명령을 하달받은 사무라이가 그것에 저항하는 이야기. 인습과 전통에 대해 순응하는 일본 사회에 저항하는 메세지를 담은 작품.', 135, '', 'RELEASED', 21.206000, 8.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 14537 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 14537 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 14537 AND g.name = '역사';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 70131, '나카다이 타츠야', '/4LygOe0vFQplLIft5IUWI5OewPX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나카다이 타츠야');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hanshiro Tsugumo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 14537 AND a.name = '나카다이 타츠야';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 76977, '이시하마 아키라', '/sQC3XSIR0LeYPz11VJt8nJoeRKY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이시하마 아키라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Motome Chijiiwa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 14537 AND a.name = '이시하마 아키라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 76976, '이와시타 시마', '/rW0pj69GsEQoQjeYt5WdX7bPxYP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이와시타 시마');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miho Tsugumo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 14537 AND a.name = '이와시타 시마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10071, '丹波哲郎', '/ihugQ2afio03fcKSGXdkcQKTVmt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '丹波哲郎');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hikokuro Omodaka', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 14537 AND a.name = '丹波哲郎';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 125721, '三島雅夫', '/bfPdwV4TCWJ7jjf16MFNsOndHWB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '三島雅夫');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tango Inaba', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 14537 AND a.name = '三島雅夫';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 76978, '고바야시 마사키', '/5epZ39mf1Ii7xOjqYx2YYq39y5X.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '고바야시 마사키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 14537 AND d.name = '고바야시 마사키';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/juRMHEWUbk2kM9RdxjjcVjj7T1a.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 14537;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/nC3IjYhUgZWgfKfFX0ygMigFwgc.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 14537;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (255709, '소원', '2013-10-02', '가장 아픈 곳에서 피어난 가장 따뜻한 이야기', '어느 비 오는 아침, 학교를 가던 9살 소녀 소원은 술에 취한 아저씨에게 끌려가 믿고 싶지 않은 사고를 당한다. 이 일로 몸과 마음에 지울 수 없는 상처를 받은 소원이네 가족. 하지만 절망 끝에서 희망을 찾아 나서는데...', 123, '12', 'RELEASED', 18.740000, 8.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 255709 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 85008, '설경구', '/9SqQcvVUPUziK37i5jIeUoqSOMB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '설경구');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dong-hoon', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 255709 AND a.name = '설경구';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1299243, '엄지원', '/tpWZnjZUREwMSzCbKbGPI6DVUdw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '엄지원');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mi-hee', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 255709 AND a.name = '엄지원';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1299244, '이레', '/i1A5E4v5xRFammipC3H4jeOwczv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이레');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'So-won', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 255709 AND a.name = '이레';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 123820, '김상호', '/jGo5mG7OEj9LAGh55UPEwL4cEQl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김상호');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gwang-sik', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 255709 AND a.name = '김상호';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 93252, '김해숙', '/dt5bmKeG7qbvDwHrxFZFxiGc9fZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김해숙');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Psychiatrist Jung-sook', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 255709 AND a.name = '김해숙';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 126809, '이준익', '/smZU1xzsTBThtM7Rp6vjaJUpchm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '이준익');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 255709 AND d.name = '이준익';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/PZlNvDwKwHeHUsXnd6SEDXWZNn.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 255709;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4Nx40jwpoTHPjCWNGoaZ6kaoGxa.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 255709;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1891, '스타워즈 에피소드 5: 제국의 역습', '1980-05-20', '모험은 계속된다', '제국군은 데스스타를 잃은 뒤에도 여전히 강력한 화력으로 반란군을 수세로 몰아넣었고, 반란군은 게릴라전을 위해 얼음으로 뒤덮인 행성 호스에 은신한다. 하지만 결국 제국군에 의해 호스의 반란군 기지마저 탄로나게 되고, 일행은 필사적으로 호스를 탈출해 다시 정처없는 피난길에 오른다. 반란군의 피난길에 함께 오르던 루크는 포스의 영이 된 오비완으로부터 제다이 마스터 요다를 찾아가라는 메시지를 받고 요다가 있는 정글 행성 대고바로 향한다. 루크는 요다를 만나 제다이가 되기 위한 훈련을 시작하고 솔로 일행은 제국군을 따돌리기 위해 옛 친구 랜도를 찾아가는데...', 124, '12', 'RELEASED', 33.364000, 8.392000, 538400000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1891 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1891 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1891 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2, '마크 해밀', '/2ZulC2Ccq1yv3pemusks6Zlfy2s.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마크 해밀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Luke Skywalker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1891 AND a.name = '마크 해밀';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3, '해리슨 포드', '/n4dwIg6NbQzeMaS1yEKKlfNJH7a.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '해리슨 포드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Han Solo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1891 AND a.name = '해리슨 포드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4, '캐리 피셔', '/2vmMjXMFW9ebX9VNKPW7WD6HLOR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '캐리 피셔');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Princess Leia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1891 AND a.name = '캐리 피셔';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3799, '빌리 디 윌리엄스', '/q1pi6gpoKyRlIJuUlDXsqFqgIZA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빌리 디 윌리엄스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lando Calrissian', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1891 AND a.name = '빌리 디 윌리엄스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6, '안소니 다니엘스', '/c876ZM5ObwYgXksrRWNNrL9KeZg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '안소니 다니엘스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'C-3PO', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1891 AND a.name = '안소니 다니엘스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 10930, '어빈 케쉬너', '/imtFUtcASoh2e1Emtt62UuFkIWA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '어빈 케쉬너');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1891 AND d.name = '어빈 케쉬너';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/icaO5w8uLVm4JxMew71JJrQE2YX.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1891;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aJCtkxLLzkk1pECehVjKHA2lBgw.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1891;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (724089, '가브리엘의 지옥 파트 2', '2020-07-31', '', '', 105, '', 'RELEASED', 7.695000, 8.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 724089 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 724089 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1312450, 'Melanie Zanetti', '/lbUQ7ilvBtWMU23reKsHg3jRmsf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Melanie Zanetti');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Julia Mitchell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 724089 AND a.name = 'Melanie Zanetti';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 544002, 'Giulio Berruti', '/cCOWVvjQ1TblPvM7TgMBqMczkOX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Giulio Berruti');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gabriel Emerson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 724089 AND a.name = 'Giulio Berruti';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2345991, 'James Andrew Fraser', '/bMHD0ezBKKNRLr8fLkWgIWpkqNs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'James Andrew Fraser');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paul Norris', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 724089 AND a.name = 'James Andrew Fraser';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2595115, 'Margaux Brooke', '/leLl5l6KnjMdg5O48FhDfB7GquI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Margaux Brooke');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Christa Peterson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 724089 AND a.name = 'Margaux Brooke';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1188681, 'Agnes Albright', '/39laAb3lRSVQv4NtXzIwuowuFry.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Agnes Albright');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paulina', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 724089 AND a.name = 'Agnes Albright';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 935563, 'Tosca Musk', '/1tWccsh9uR9mK3Q0e4PZKe0e6eB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Tosca Musk');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 724089 AND d.name = 'Tosca Musk';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/x5o8cLZfEXMoZczTYWLrUo1P7UJ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 724089;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jtAI6OJIWLWiRItNSZoWjrsUtmi.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 724089;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (372754, '동급생', '2016-02-20', '', '밴드 활동을 하며 여자에게도 인기가 많은 쿠사카베 히카루.  고교 입시에서 만점을 받은 인재 사죠 리히토. 도무지 접점이 없어 보이는 두 남학생은 합창 대회 연습을 계기로 친해진다. 음을 느끼고 목소리에 귀를 기울이고 화음을 만들어가며 둘의 마음은 공명하기 시작하는데… 느긋하게 고조되다 뜻밖의 순간에 터져버리는 사랑의 감정. 순수하고 솔직한 쿠사카베 히카루와 그를 밀어내면서도 조금씩 마음을 열어가는 사죠 리히토.  청춘의 풋풋함 속에서 고민하고, 망설이며 앞으로 나아가고자 하는 그들이 깨달은 마음이란…', 61, '', 'RELEASED', 19.345000, 8.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 372754 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 372754 AND g.name = '애니메이션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 126698, '노지마 켄지', '/nRSPVjDkdpnrQabnK5mENH118zN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '노지마 켄지');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rihito Sajo (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 372754 AND a.name = '노지마 켄지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 93801, '카미야 히로시', '/u2r0u8tOa0cyh7nawcEOPpcEZr1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카미야 히로시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hikaru Kusakabe (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 372754 AND a.name = '카미야 히로시';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 9720, '石川英郎', '/gEjEDNGt3CHsyzFQdNqewZVbh0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '石川英郎');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Manabu Hara (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 372754 AND a.name = '石川英郎';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2258797, 'Yurino', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Yurino');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mikipon (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 372754 AND a.name = 'Yurino';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1549377, '나카무라 쇼코', '/lIPoHRbL7JKBwwf9FeR36utOUfO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '나카무라 쇼코');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 372754 AND d.name = '나카무라 쇼코';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jNJ9shLhjRavjrCGRnoTmYB18d2.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 372754;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3RMLbSEXOn1CzLoNT7xFeLfdxhq.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 372754;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (378064, '목소리의 형태', '2016-09-17', '나는 네가 정말 싫었다. 너를 다시 만나기 전까진…', '따분한 게 질색인 아이, 이시다 쇼야.  간디가 어떤 사람인지, 인류의 진화과정이라든지, 알게뭐람.  어느 날 쇼야의 따분함을 앗아갈 전학생이 나타났다. 니시미야 쇼코. 그 아이는 귀가 들리지 않는다고 한다.  쇼야의 짓궂은 장난에도 늘, 생글생글 웃고만 있다. 짜증난다.  그의 괴롭힘에 쇼코는 결국 전학을 갔고, 이시다 쇼야는 외톨이가 되었다.  6년 후, 더 이상 이렇게 살아봐야 의미가 없음을 느낀 쇼야는 마지막으로 쇼코를 찾아간다.  처음으로 전해진 두 사람의 목소리. 두 사람의 만남이 교실을, 학교를,  그리고 쇼야의 인생, 쇼코의 인생을 바꾸기 시작한다.', 130, '', 'RELEASED', 36.981000, 8.400000, 30504476, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 378064 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 378064 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19588, '이리노 미유', '/8qEEhHUObNvGQr4e6eqLu5z4qTz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이리노 미유');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shouya Ishida (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 378064 AND a.name = '이리노 미유';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 221773, '하야미 사오리', '/c3We0sp2oTaONcOX5UHA461vFla.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하야미 사오리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shouko Nishimiya (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 378064 AND a.name = '하야미 사오리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 936275, '유우키 아오이', '/4kHNZSUIux52UU2BD3H6b5c5ymZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '유우키 아오이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yuzuru Nishimiya (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 378064 AND a.name = '유우키 아오이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1065297, '오노 켄쇼', '/wUYJ3HIeygHfh4rAqupE4RPoG3W.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오노 켄쇼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tomohiro Nagatsuka (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 378064 AND a.name = '오노 켄쇼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1258549, '카네코 유키', '/pqbqe4CxC6t94ptUW2tJfK5j2J2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카네코 유키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Naoka Ueno (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 378064 AND a.name = '카네코 유키';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1072778, '야마다 나오코', '/esksK3sGJN1gWwj8HhMJN6s27UG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '야마다 나오코');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 378064 AND d.name = '야마다 나오코';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aUF10sSW5OVfpK6Ma3vJYd3Tp3A.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 378064;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5lAMQMWpXMsirvtLLvW7cJgEPkU.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 378064;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (761053, '가브리엘의 지옥 파트 3', '2020-11-19', '', '', 105, '', 'RELEASED', 44.821000, 8.400000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 761053 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 761053 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1312450, 'Melanie Zanetti', '/lbUQ7ilvBtWMU23reKsHg3jRmsf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Melanie Zanetti');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Julia Mitchell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 761053 AND a.name = 'Melanie Zanetti';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 544002, 'Giulio Berruti', '/cCOWVvjQ1TblPvM7TgMBqMczkOX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Giulio Berruti');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gabriel Emerson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 761053 AND a.name = 'Giulio Berruti';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1844204, 'Rhett Wellington Ramirez', '/3WWleE8I95hzi3VxH6TunlfyT7j.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rhett Wellington Ramirez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Simon Talbot', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 761053 AND a.name = 'Rhett Wellington Ramirez';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2345991, 'James Andrew Fraser', '/bMHD0ezBKKNRLr8fLkWgIWpkqNs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'James Andrew Fraser');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paul Norris', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 761053 AND a.name = 'James Andrew Fraser';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2595115, 'Margaux Brooke', '/leLl5l6KnjMdg5O48FhDfB7GquI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Margaux Brooke');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Christa Peterson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 761053 AND a.name = 'Margaux Brooke';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 935563, 'Tosca Musk', '/1tWccsh9uR9mK3Q0e4PZKe0e6eB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Tosca Musk');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 761053 AND d.name = 'Tosca Musk';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fYtHxTxlhzD4QWfEbrC1rypysSD.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 761053;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fQq1FWp1rC89xDrRMuyFJdFUdMd.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 761053;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (244786, '위플래쉬', '2014-10-10', '천재를 갈망하는 광기가 폭발한다', '최고의 드러머가 되기 위해서라면 무엇이든 할 각오가 되어있는 음악대학 신입생 앤드류는 아무도 없는 지하실에서 혼자 드럼을 연습하던 중 우연한 기회로 누구든지 성공으로 이끄는 최고의 실력자이지만, 또한 동시에 최악의 폭군인 플렛처 교수에게 발탁되어 그의 밴드에 들어가게 된다. 설레는 마음으로 참가한 첫 연습에서, 그는 플렛처 교수의 진짜 얼굴을 마주치게 된다. 폭언과 학대 속에 좌절과 성취를 동시에 안겨주는 플렛처의 지독한 교육방식은 천재가 되길 갈망하는 앤드류의 집착을 끌어내며 그를 점점 광기로 몰아넣는데...', 106, '15', 'RELEASED', 84.043000, 8.400000, 50307484, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 244786 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 244786 AND g.name = '음악';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 996701, '마일스 텔러', '/cg3LW0xX6RKr8dmescxq1bepcb5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마일스 텔러');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Andrew', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 244786 AND a.name = '마일스 텔러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 18999, 'J.K. 시몬스', '/ScmKoJ9eiSUOthAt1PDNLi8Fkw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'J.K. 시몬스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fletcher', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 244786 AND a.name = 'J.K. 시몬스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 781, 'Paul Reiser', '/xncLbAjPXooyETKriMUUlZJkGn9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Paul Reiser');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jim', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 244786 AND a.name = 'Paul Reiser';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 129104, '멜리사 베노이스트', '/1F0fCPNhb5W0WyFe8Tszfbx1DEp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '멜리사 베노이스트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nicole', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 244786 AND a.name = '멜리사 베노이스트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 970216, 'Austin Stowell', '/At09XQpVXnChgedNsxu4ceR5W9i.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Austin Stowell');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ryan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 244786 AND a.name = 'Austin Stowell';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 136495, '데이미언 셔젤', '/14kRZ3XxNMyBv717YQSXr3wCucy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '데이미언 셔젤');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 244786 AND d.name = '데이미언 셔젤';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sNoZ3DAjOtCtpGvaEubMELDNtaS.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 244786;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5h8VtV4oh2qkO8Iqz7gypIYJPAr.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 244786;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (423, '피아니스트', '2002-09-17', '영혼을 움직이는 감동의 선율', '1939년 폴란드 바르샤바, 유명한 유대계 피아니스트 블라디슬로프 스필만은 한 인기 라디오 프로그램에서 쇼팽의 야상곡을 연주하다 폭격을 당한다. 이후 유태인인 스필만과 가족들은 게토에서 생활하지만, 결국 수용소로 향하는 기차에 몸을 싣게 된다. 가족들을 죽음으로 내보내고 간신히 목숨을 구한 스필만은 허기와 추위, 고독과 공포 속에서 마지막까지 생존해 나간다. 자신을 도와주던 몇몇의 사람마저 떠나고, 자신만의 은신처에서 끈질기게 생존을 유지하는 스필만. 어둠과 추위로 가득한 폐건물 속에서 은신생활 중 스필만은 우연찮게 순찰을 돌던 독일 장교에게 발각되는데...', 150, '12', 'RELEASED', 53.319000, 8.400000, 120098945, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 423 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 423 AND g.name = '전쟁';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3490, '에이드리언 브로디', '/qBc7ahQrpVpcllaZ5hkivsOEb3C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에이드리언 브로디');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Władysław ''Władek'' Szpilman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 423 AND a.name = '에이드리언 브로디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3491, '토마스 크레치만', '/p1XYiekXjaUxHMztBALrez1Ud4J.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '토마스 크레치만');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Captain Wilm Hosenfeld', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 423 AND a.name = '토마스 크레치만';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6637, 'Frank Finlay', '/fO7CYAaGydu9d3s5numYRi1BRvL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Frank Finlay');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Father', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 423 AND a.name = 'Frank Finlay';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6638, 'Maureen Lipman', '/kx26NOAw9GnsHjJIJ4l40YHblJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Maureen Lipman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mother', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 423 AND a.name = 'Maureen Lipman';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6639, 'Emilia Fox', '/lZpNRsHAOW8m0f7bRfgUDmRRjo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Emilia Fox');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dorota', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 423 AND a.name = 'Emilia Fox';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 3556, '로만 폴란스키', '/yHwHSXdZatkoLgIjPeW14GKlrZs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '로만 폴란스키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 423 AND d.name = '로만 폴란스키';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/t7L2YDpu635qKT3ehqZxry4yvTX.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 423;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hchJ0PTREmXveasCBsT4SdPY3JF.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 423;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (807, '세븐', '1995-09-22', '계획적인 시나리오, 벗어날 수 없는 트릭', '은퇴를 7일 앞둔 관록의 형사 윌리엄 소머셋(모건 프리먼)과 새로 전근 온 신참내기 형사 밀스(브래드 피트)가 팀이 된 바로 다음날, 강압에 의해 위가 찢어질 때까지 먹다가 죽은 초고도 비만 남자와 역시 강압에 의해 식칼로 자기 살을 베어내 죽은 악덕 변호사의 사건과 마주한다. 식탐, 탐욕, 그리고 나태, 분노, 교만, 욕정, 시기. 소머셋은 현장에 남은 흔적들로 단테의 신곡과 쵸서의 캔터베리 서사시를 근거로 한 기나긴 연쇄 살인이 시작되었음을 직감하고 성서의 7가지 죄악을 따라 발생하는 사건들을 추적하기 시작하는데...', 127, '18', 'RELEASED', 89.592000, 8.375000, 327311859, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 807 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 807 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 807 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 192, '모건 프리먼', '/905k0RFzH0Kd6gx8oSxRdnr6FL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '모건 프리먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Somerset', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 807 AND a.name = '모건 프리먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 287, '브래드 피트', '/9OfnD7lxgIj3BNQpJFnwxnwl6w5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브래드 피트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mills', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 807 AND a.name = '브래드 피트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12052, '기네스 팰트로', '/m2xcWJvhRdfbHxDj13gTAQ5Is0d.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '기네스 팰트로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tracy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 807 AND a.name = '기네스 팰트로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12055, '존 카시니', '/kn2Rtn0I8ivCR7ydZTY74XUBh1K.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '존 카시니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Officer Davis', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 807 AND a.name = '존 카시니';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 30487, '피터 크롬비', '/pMvhE1wwQo3eTSp4vwq8Hb22CwN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '피터 크롬비');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. O''Neill', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 807 AND a.name = '피터 크롬비';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 7467, '데이비드 핀처', '/tpEczFclQZeKAiCeKZZ0adRvtfz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '데이비드 핀처');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 807 AND d.name = '데이비드 핀처';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/izzk8dbmrLowcoGbFaebqJvzyXg.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 807;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/p1PLSI5Nw2krGxD7X4ulul1tDAk.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 807;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1058694, '래디컬', '2023-10-19', '', '', 126, '', 'RELEASED', 28.523000, 8.400000, 21761164, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1058694 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 239574, '에우헤니오 데르베스', '/6o1w3mYF947N6TTakQXcs3NNy4w.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에우헤니오 데르베스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sergio', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1058694 AND a.name = '에우헤니오 데르베스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1875322, 'Daniel Haddad', '/tCZAs7jDAjOl5545eL93C1mcIsa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Daniel Haddad');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chucho', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1058694 AND a.name = 'Daniel Haddad';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3895926, 'Jennifer Trejo', '/kjKptBXj7z3VJlzUJA9dJZmpFrO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jennifer Trejo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paloma', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1058694 AND a.name = 'Jennifer Trejo';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3895927, 'Mia Fernanda Solis', '/rGzl5vQM2CG4SfFl2MJK7BAlJ7u.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mia Fernanda Solis');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lupe', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1058694 AND a.name = 'Mia Fernanda Solis';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3895928, 'Danilo Guardiola Escobar', '/rlceus4FE90OWZ71rOFo2P0zQOF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Danilo Guardiola Escobar');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nico', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1058694 AND a.name = 'Danilo Guardiola Escobar';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 931327, 'Christopher Zalla', '/90jkloUBJroXXUPGhykAOdgXzBg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Christopher Zalla');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1058694 AND d.name = 'Christopher Zalla';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gyUfBeZ0XpHPouwGt53oq7Oaqr0.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1058694;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gutU32BiBxJvJdzLv5RWC9hQhNh.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1058694;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (27205, '인셉션', '2010-07-15', '생각을 훔치는 거대한 전쟁', '타인의 꿈에 들어가 생각을 훔치는 특수 보안요원 코브. 그를 이용해 라이벌 기업의 정보를 빼내고자 하는 사이토는 코브에게 생각을 훔치는 것이 아닌, 생각을 심는 ‘인셉션’ 작전을 제안한다. 성공 조건으로 국제적인 수배자가 되어있는 코브의 신분을 바꿔주겠다는 거부할 수 없는 제안을 하고, 사랑하는 아이들에게 돌아가기 위해 그 제안을 받아들인다. 최강의 팀을 구성, 표적인 피셔에게 접근해서 ‘인셉션’ 작전을 실행하지만 예기치 못한 사건들과 마주하게 되는데… 꿈 VS 현실! 시간, 규칙, 타이밍 모든 것이 완벽해야만 하는, 단 한 번도 성공한 적 없는 ‘인셉션’ 작전이 시작된다!', 148, '12', 'RELEASED', 112.090000, 8.369000, 825532764, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 27205 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 27205 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 27205 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6193, '레오나르도 디카프리오', '/wo2hJpn04vbtmh0B9utCFdsQhxM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레오나르도 디카프리오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dom Cobb', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 27205 AND a.name = '레오나르도 디카프리오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 24045, '조셉 고든레빗', '/msb9UCBqBjGC95r7jns9K0C820h.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조셉 고든레빗');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Arthur', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 27205 AND a.name = '조셉 고든레빗';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3899, '와타나베 켄', '/w2t30L5Cmr34myAaUobLoSgsLfS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '와타나베 켄');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Saito', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 27205 AND a.name = '와타나베 켄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2524, '톰 하디', '/d81K0RH8UX7tZj49tZaQhZ9ewH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 하디');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eames', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 27205 AND a.name = '톰 하디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 27578, '엘리엇 페이지', '/eCeFgzS8dYHnMfWQT0oQitCrsSz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '엘리엇 페이지');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ariadne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 27205 AND a.name = '엘리엇 페이지';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 525, '크리스토퍼 놀란', '/xuAIuYSmsUzKlUMBFGVZaWsY3DZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스토퍼 놀란');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 27205 AND d.name = '크리스토퍼 놀란';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oYuLEt3zVCKq57qu2F8dT7NIa6f.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 27205;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8ZTVqvKDQ8emSGUEMjsS4yHAwrp.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 27205;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (620249, '나소흑전기: 첫만남편', '2019-08-27', '요정과 인간이 공존하는 환상적인 세계가 열린다!', '요정과 인간이 공존하는 환상적인 세계가 열린다! 숲속의 집을 잃고 홀로 떠돌던 검은 고양이 요정 ‘소흑’은 도시 뒷골목에서 미스터리한 능력의 요정 ‘풍식’을 만나 위기를 모면한다. ‘풍식’의 무리와 버려진 섬에서 행복한 시간을 보내는 ‘소흑’. 그러던 중 최강 능력의 집행자 ‘무한’이 ‘풍식’을 쫓아 섬에 오자 ‘풍식’ 일행은 달아나고, ‘소흑’만 남게 된다. 홀로 남은 ‘소흑’을 요정들의 회관으로 데려가려는 ‘무한’과 ‘무한’을 무서운 인간이라 여겨 도망치려는 ‘소흑’. 둘은 여정 속에서 점점 마음을 열게 되고, ‘무한’은 ‘소흑’에게 특별한 능력이 있음을 알게 된다. 한편, 요정들이 공격받는 의문의 사건이 곳곳에서 일어나고, 엄청난 능력을 지닌 존재들이 ‘소흑’과 ‘무한’의 앞을 막아서는데... 함께하면 두려울 것 없는 우리들의 이야기는 지금부터!', 102, 'All', 'RELEASED', 15.003000, 8.400000, 48045728, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 620249 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 620249 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 620249 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1907244, 'Shan Xin', '/fm3Hpzr4Fb8g43Oo8TvDfv7O3O1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Shan Xin');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Luo Xiaohei / Nezha (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 620249 AND a.name = 'Shan Xin';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2156556, '劉朙月', '/kqh1vBsQ35b617dvd9jtvQ2ii7l.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '劉朙月');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wuxian (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 620249 AND a.name = '劉朙月';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2207399, '郝祥海', '/mDGtY44WlZbk8pMmuzPToIommx4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '郝祥海');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fengxi (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 620249 AND a.name = '郝祥海';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2196313, '叮当', '/vXMuscwMmOjVgv5tZMILhjguLWd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '叮当');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Luozhu (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 620249 AND a.name = '叮当';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2339317, 'Yuntu Cao', '/9qSDFftuxOJh2vKw255g0RsAV3h.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Yuntu Cao');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Xuhuai (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 620249 AND a.name = 'Yuntu Cao';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2377386, 'MTJJ', '/efpX3wZCpQ24uzUpKrWHxQXhc2m.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'MTJJ');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 620249 AND d.name = 'MTJJ';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4VhlO8O5COmkz3XBwrbfnunTnzK.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 620249;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aVFx1VtlOxR3v0ADEatalXOvwbu.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 620249;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1160164, '테일러 스위프트: 디 에라스 투어', '2023-10-13', '', '이 문화적 현상이 대형 스크린에서 계속됩니다! 역사에 남을 숨 막히는 장면을 영화처럼 감상하며 일생일대의 콘서트 영화 체험에 푹 빠져보세요', 168, 'All', 'RELEASED', 46.713000, 8.400000, 261656269, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1160164 AND g.name = '음악';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 212208, '테일러 스위프트', '/w4ylYgLcA8uyShgX3XBipnbRniZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '테일러 스위프트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Self', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1160164 AND a.name = '테일러 스위프트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3159951, 'Mike Meadows', '/gjo2N7FkUKVQBaX8b2edsWSSWoI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mike Meadows');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Self - Co-Band Leader, Guitar, Keyboards', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1160164 AND a.name = 'Mike Meadows';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3159948, 'Max Bernstein', '/k09iQQgXDJeDdNp2T3kNRWvca8Z.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Max Bernstein');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Self - Co-Band Leader, Guitar, Keyboards', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1160164 AND a.name = 'Max Bernstein';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3157265, 'Paul Sidoti', '/an7p5Qs3ArA4MMII5IrV6PKtdgP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Paul Sidoti');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Self - Guitar', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1160164 AND a.name = 'Paul Sidoti';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1448505, 'Amos Heller', '/eovE2w7vdl2NoNhc4JIhKgQwKD1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Amos Heller');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Self - Bass, Keyboard Bass', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1160164 AND a.name = 'Amos Heller';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1556959, 'Sam Wrench', '/odEmgv7BYazCIMgwuMHRZ3ZIwpy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Sam Wrench');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1160164 AND d.name = 'Sam Wrench';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pm6cudRCaKofVRDQBTgl5kzejK1.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1160164;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uRKhh7JYMD6QWNt0NjmMfh7uLdm.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1160164;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (569094, '스파이더맨: 어크로스 더 유니버스', '2023-05-31', '한 명을 구할 것인가, 모두를 구할 것인가', '여러 성장통을 겪으며 새로운 스파이더맨이 된 마일스 모랄레스. 그 앞에 다른 평행세계의 스파이더우먼 그웬이 다시 나타난다. 모든 차원의 멀티버스 속 스파이더맨들을 만나게 되지만, 질서에 대한 신념이 부딪히며 예상치 못한 균열이 생기는데… 상상 그 이상을 넘어서는 멀티버스의 세계가 열린다!', 140, 'All', 'RELEASED', 218.674000, 8.400000, 690897910, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 569094 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 569094 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 569094 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 569094 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 587506, '셔믹 무어', '/ovUKfVOwJ7CadEHaG3NDsfA5xRq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '셔믹 무어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miles Morales (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 569094 AND a.name = '셔믹 무어';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 130640, '헤일리 스타인펠드', '/dxSDWkiVaC6JYjrV3XRAZI7HOSS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헤일리 스타인펠드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gwen Stacy (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 569094 AND a.name = '헤일리 스타인펠드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 226366, '브라이언 타이리 헨리', '/2MsJh0bpyzwvOUnXOltHp3j85Pb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브라이언 타이리 헨리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jeff Morales (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 569094 AND a.name = '브라이언 타이리 헨리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 141610, '로런 벨레스', '/98BvmTJCZHx0jPv0oNcv04Jkmfb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로런 벨레스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rio Morales (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 569094 AND a.name = '로런 벨레스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 543505, '제이크 존슨', '/3UNfW2qZgRkW81neNVfQvaRC92K.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이크 존슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Peter B. Parker (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 569094 AND a.name = '제이크 존슨';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2451598, '켐프 파워스', '/oE4TcENMQw25t4UTAjrnl0m4JyH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '켐프 파워스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 569094 AND d.name = '켐프 파워스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1046497, '저스틴 톰슨', '/mRMi8Q2fmlfbDYkE7A63gzFtGsZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '저스틴 톰슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 569094 AND d.name = '저스틴 톰슨';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 89596, '조아킴 도스 샌토스', '/w45GPb3cW6TqPw4FxB5Hc6zzAwx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조아킴 도스 샌토스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 569094 AND d.name = '조아킴 도스 샌토스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lMWTlGr9jVUC18T515hPRKym5QQ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 569094;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kVd3a9YeLGkoeR50jGEXM6EqseS.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 569094;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (567, '이창', '1954-08-01', '', '사진 작가인 제프리스는 촬영 도중 다리가 부러져 휠체어에서 꼼짝할 수 없는 처지이다. 무료함을 견디지 못하는 그는 자신의 그리니치 빌리지에 있는 독신자 아파트에서 뜰 건너편에 사는 사람들의 행동을 관찰하는 것으로 시간을 보낸다. 어느날 건너편 아파트에 사는 한 사람이 아내를 살해한 것으로 의심받을 만한 짓을 한 것을 본 그는 이를 모델인 애인 리사와 친구인 형사 도일에게 말하지만 아무도 그의 말을 믿지 않는다. 그러나 결국 그의 의심이 전혀 근거없는 것은 아니라는 것을 알게 된 리사와 간호부 스텔라는 그의 지시에 따라 범행의 증거를 찾아 부부의 집을 조사하기 시작하는데...', 115, '19', 'RELEASED', 48.680000, 8.400000, 37042336, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 567 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 567 AND g.name = '미스터리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 854, '제임스 스튜어트', '/yId5fdDqShOkr0YjCoJbUOZipcX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제임스 스튜어트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'L.B. ''Jeff'' Jefferies', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 567 AND a.name = '제임스 스튜어트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4070, '그레이스 켈리', '/aMist7cww3a8FxJDg1eXoUNJCDM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '그레이스 켈리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lisa Fremont', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 567 AND a.name = '그레이스 켈리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7683, 'Wendell Corey', '/tD2USnh2ItYSviS3L9dHKeztNGQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Wendell Corey');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Det. Lt. Thomas J. Doyle', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 567 AND a.name = 'Wendell Corey';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7684, 'Thelma Ritter', '/q48Cf2evvi73qJULqhIotGrszaA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Thelma Ritter');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Stella', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 567 AND a.name = 'Thelma Ritter';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7685, 'Raymond Burr', '/gsmckogOXPIk6lce2qnNMAFF901.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Raymond Burr');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lars Thorwald', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 567 AND a.name = 'Raymond Burr';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2636, '알프레드 히치콕', '/108fiNM6poRieMg7RIqLJRxdAwG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '알프레드 히치콕');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 567 AND d.name = '알프레드 히치콕';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jU5Fe7n9rsEBa0uaV5dqGjJGwmX.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 567;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8aEe01VfGtYG2dFy9V5MqyyNPlh.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 567;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (568332, '테일러 스위프트의 레퓨테이션 스타디움 투어', '2018-12-31', '팝의 여왕이 선사하는 매혹적인 음악과 화려한 볼거리의 모든 것', '세계가 열광한 테일러 스위프트의 ''레퓨테이션’ 스타디움 투어. 텍사스 댈러스에서 그 대미를 장식한다. 무슨 말이 더 필요하랴? 팝의 여왕, 테일러 스위프트. 그녀가 새로운 전설을 만든다. 장대한 투어의 정점이 될 화려한 무대. 그 위에서 눈부시게 빛나는 그녀를 맞이하라!', 125, '', 'RELEASED', 17.441000, 8.350000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 568332 AND g.name = '음악';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 212208, '테일러 스위프트', '/w4ylYgLcA8uyShgX3XBipnbRniZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '테일러 스위프트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Self', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 568332 AND a.name = '테일러 스위프트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1529997, '찰리 XCX', '/fbO6t6n5PJJmqw8xzZruriyRfrY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '찰리 XCX');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Self', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 568332 AND a.name = '찰리 XCX';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1911673, '카밀라 카베요', '/wZXOudOjynsARZJwGhwGyupWMf2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카밀라 카베요');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Self', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 568332 AND a.name = '카밀라 카베요';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3159931, 'David Cook', '/lSE8EfIiwFFcVaFMUlT2SkN17EL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'David Cook');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Self', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 568332 AND a.name = 'David Cook';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1448505, 'Amos Heller', '/eovE2w7vdl2NoNhc4JIhKgQwKD1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Amos Heller');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Self', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 568332 AND a.name = 'Amos Heller';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 572551, 'Paul Dugdale', '/bWM0X1OMVml3FhDph4EGcs3QtHC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Paul Dugdale');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 568332 AND d.name = 'Paul Dugdale';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/u6oXUTtOuJRPdUgUuPAVVJPSKCo.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 568332;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ySaK6hpbCc2OE13ac7ovhgWwR5u.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 568332;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (274, '양들의 침묵', '1991-02-14', '이제 양들의 울음은 멈추었는가', 'FBI 요원 스탈링은 몸집이 비대한 여자들의 살을 도려내는 변태 살인마를 추적하라는 상부의 명령을 받는다. 스탈링은 사건 해결의 단서를 얻기 위해 인육을 먹은 죄로 감옥에 수감된 정신과 의사 렉터 박사를 찾아간다. 지능범인 렉터와 침착하게 대처하는 스탈링은 긴장감 속에서 협상을 한다. 이러한 와중에 상원 의원의 딸 캐더린이 납치된다. 결국 범인의 정체를 알려준다던 렉터는 다른 감옥으로 이송되고 스탈링은 수사에서 제외된다. 범인에 대한 단서를 알아낸 범죄 심리 전문가인 렉터는 이송 중에 도주하고, 스탈링은 렉터와 나눈 마지막 대화를 기억하고 수사를 계속하는데...', 118, '18', 'RELEASED', 17.375000, 8.347000, 272742922, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 274 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 274 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 274 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1038, '조디 포스터', '/5emVgsLFlU6SmeBIFsF2Y7aqwtG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조디 포스터');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Clarice Starling', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 274 AND a.name = '조디 포스터';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4173, '안소니 홉킨스', '/9ukJS2QWTJ22HcwR1ktMmoJ6RSL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '안소니 홉킨스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Hannibal Lecter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 274 AND a.name = '안소니 홉킨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 349, '스콧 글렌', '/8DHORod2l6ZFS9KR0gNAAM3WZfI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스콧 글렌');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jack Crawford', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 274 AND a.name = '스콧 글렌';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 15854, '테드 러바인', '/qRFq8y842T1uq51iQCwsEmQI3UT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '테드 러바인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jame Gumb', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 274 AND a.name = '테드 러바인';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16293, '앤서니 힐드', '/e0E6Z1Y0debr4mAHgj0HO7MYyXG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앤서니 힐드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Frederick Chilton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 274 AND a.name = '앤서니 힐드';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 16294, '조나단 드미', '/w9Lw3xTEFQUYELkl9AH5i3p5OhJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조나단 드미');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 274 AND d.name = '조나단 드미';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2hBAfjDlRbamiX7TuzLes2EcnCM.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 274;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aYcnDyLMnpKce1FOYUpZrXtgUye.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 274;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (73, '아메리칸 히스토리 X', '1998-07-01', '화만 내며 살기에는 인생이 너무 짧다', '3년 전 강도 사건으로 소방수였던 아버지를 잃은 데렉은 백인 우월주의자들의 모임인 DOC에 관심을 갖게 되면서 유색인종에게 그 분노와 증오를 터트린다. 그는 혐오스러운 유색인종들을 이 땅에서 몰아내야 한다고 주장하면서 강렬한 카리스마로 동료들 사이에서 영웅이 된다. 가족들은 그런 그의 모습을 걱정하여 만류하지만, 단 한 사람, 동생 대니만은 그를 전적으로 믿고 따른다. 어느 날, 데렉에게 적대감을 품은 흑인들이 아버지의 낡은 밴을 훔치러 왔을 때 그는 서슴없이 그들에게 총을 겨눈다. 그리고는 총을 맞고 신음하는 그를 참혹하게 죽이고 마는데...', 119, '18', 'RELEASED', 30.620000, 8.344000, 23900000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 73 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 819, '에드워드 노튼', '/8nytsqL59SFJTVYVrN72k6qkGgJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에드워드 노튼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Derek', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 73 AND a.name = '에드워드 노튼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 820, '에드워드 펄롱', '/e221dMIBgb6Lk092GIkHB9ohQF1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에드워드 펄롱');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Danny', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 73 AND a.name = '에드워드 펄롱';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 821, 'Beverly D''Angelo', '/zbt4AyVWfgCPt5bvsfPS4anD2r4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Beverly D''Angelo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Doris', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 73 AND a.name = 'Beverly D''Angelo';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 823, 'Jennifer Lien', '/5wafpjORY55TY5OC6d9Cyb36O2r.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jennifer Lien');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Davina', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 73 AND a.name = 'Jennifer Lien';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 824, 'Ethan Suplee', '/jF4WZWrjyiV284nOy4RyigWzHwf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ethan Suplee');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Seth', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 73 AND a.name = 'Ethan Suplee';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 814, 'Tony Kaye', '/6LoSxSGfeCvdLkYFeM3op00OBeq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Tony Kaye');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 73 AND d.name = 'Tony Kaye';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/nm4XkYBt79ZjUQj6Rqxxzl1Wt3c.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 73;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mBdZ5rOB8RxluHwBfS64ZzaVanB.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 73;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (12493, '천국과 지옥', '1963-03-01', '', '신발 제조 회사의 중역인 곤도는 회사의 주도권을 잡기 위해 자신의 전 재산을 회사에 투자한 상태다. 어느 날 그는 자신의 아들이 납치됐으며 범인이 엄청난 몸값을 요구하고 있다는 통보를 받고 회사냐 아들이냐 하는 선택의 기로에 서게 된다. 하지만 정작 납치된 것은 그의 아들이 아니라 그의 운전사의 아들이란 사실이 밝혀지면서 곤도는 또 다른 고민에 빠지게 되는데...', 142, '', 'RELEASED', 24.853000, 8.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 12493 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 12493 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 12493 AND g.name = '미스터리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7450, '미후네 토시로', '/3A9PqrtiXHLp8B2JL7m3YvVXrmL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미후네 토시로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kingo Gondo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12493 AND a.name = '미후네 토시로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 70131, '나카다이 타츠야', '/4LygOe0vFQplLIft5IUWI5OewPX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나카다이 타츠야');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chief Detective Tokura', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12493 AND a.name = '나카다이 타츠야';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 34374, '카가와 쿄코', '/q47wPwySJvhj6HQoYb7ON1TjbcV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카가와 쿄코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Reiko Gondo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12493 AND a.name = '카가와 쿄코';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 13251, '미하시 타츠야', '/s33XOrwOEEVoWeScWMK2Afs7Njl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미하시 타츠야');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kawanishi, Gondo''s secretary', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12493 AND a.name = '미하시 타츠야';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20830, '키무라 이사오', '/afLPuf3x7UYXryAbqAGqmRcVNNW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키무라 이사오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Detective Arai', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 12493 AND a.name = '키무라 이사오';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 5026, '구로사와 아키라', '/eGexa6MZ22T1MZxce1qR3RcAYaS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '구로사와 아키라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 12493 AND d.name = '구로사와 아키라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/d2o2Bc9ViaGN5llJc7mobxPIwH5.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 12493;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gSCT6oP2Sbm71naW28Lh7afcMgY.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 12493;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (128, '모노노케 히메', '1997-07-12', '대자연의 수호신 원령공주가 온다', '북쪽의 끝, 에미시족의 마을에 어느 날 갑자기 재앙신이 나타나 마을을 위협한다. 이에 강한 힘을 소유한 에미시족의 후계자인 아시타카는 결투 끝에 포악해진 재앙신을 쓰러트리지만 싸움 도중 오른팔에 저주의 상처를 받고 죽어야 할 운명에 처하게 된다. 결국 재앙신의 탄생 원인을 밝혀 자신의 저주를 없애기 위해 서쪽으로 길을 떠난 아시카타는 여행 중에 지코라는 미스테리한 수도승을 만나 재앙 신이 생겨나게 된 이유가 서쪽 끝에 있는 시시신의 숲과 관련이 깊다는 이야기를 듣게 되고 한시 바삐 서쪽으로 향한다.', 135, 'ALL', 'RELEASED', 57.703000, 8.300000, 169000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 128 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 128 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 128 AND g.name = '애니메이션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 622, '松田洋治', '/42WeHwCymsgJh3mLAyknCdRcef8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '松田洋治');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ashitaka (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 128 AND a.name = '松田洋治';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20330, '石田ゆり子', '/cADoBCi603Chz2IaxcwWT2mNwCf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '石田ゆり子');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'San (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 128 AND a.name = '石田ゆり子';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20331, '다나카 유코', '/fMonAnp3OQ16FmGy5SGhEJRcuVI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '다나카 유코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eboshi Gozen (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 128 AND a.name = '다나카 유코';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20332, '코바야시 카오루', '/pJSt6nRgcIsli0hw2aOCzc2l622.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '코바야시 카오루');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jikobo (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 128 AND a.name = '코바야시 카오루';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20333, '西村雅彥', '/2fXvxAI4KySYgp9KZMzkK4q2TkY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '西村雅彥');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kouroku (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 128 AND a.name = '西村雅彥';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 608, '미야자키 하야오', '/mG3cfxtA5jqDc7fpKgyzZMKoXDh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '미야자키 하야오');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 128 AND d.name = '미야자키 하야오';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gEVSN7rzQsypG4YfYObsPmMtYpP.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 128;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gl0jzn4BupSbL2qMVeqrjKkF9Js.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 128;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (820067, '극장판 5등분의 신부', '2022-05-20', '학교 축제 첫날 15시에 교실에 와줘', '「낙제 직전」「공부가 싫은」미소녀 다섯 쌍둥이를  아르바이트 가정 교사로서 「졸업」까지 이끈 후타로.  배우에 전념하기 위해 휴학하기로 한 이치카의 공부를 봐주면서  「학교 축제」 준비에 힘쓰는 후타로와,  후회 없는 「학교 축제」를 만들기 위해 평소 이상으로 노력하는 요츠바.  어지러운 날들이 지나고 정신을 차려보니 「학교 축제」 전날.  후타로는 포기하지 않고 힘쓰는 이츠키의 모습에 힘입어,  니노의 각오와 미쿠의 결의, 그리고 이치카·요츠바·이츠키에 대한 마음의 답을 찾는다.  저마다의 생각을 안고 있는 와중,  드디어 시작된 고교 생활 최후의(마지막) 이벤트인 「학교 축제」 첫날.  『학교 축제 첫날 15시에 교실에 와줘』  교실에 모인 다섯 쌍둥이는, 후타로에게 어떠한 마음을 고백 받게 될까?', 136, '', 'RELEASED', 30.253000, 8.300000, 17288993, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 820067 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 820067 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 820067 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 233590, '마츠오카 요시츠구', '/ugDwdWEXnmv43jcbnfAi4XwiQ8C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마츠오카 요시츠구');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fuutarou Uesugi (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 820067 AND a.name = '마츠오카 요시츠구';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 119143, '하나자와 카나', '/5bK9ttcRydQBWmyZp7gXDmJYOPF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하나자와 카나');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ichika Nakano (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 820067 AND a.name = '하나자와 카나';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1072776, '타케타츠 아야나', '/8vGKUIJrpbdURA7XSyGnkbi1Qqg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '타케타츠 아야나');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nino Nakano (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 820067 AND a.name = '타케타츠 아야나';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1530921, '이토 미쿠', '/kP7JBvveQO9ucYpmOvUNcW5RLAp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이토 미쿠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miku Nakano (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 820067 AND a.name = '이토 미쿠';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 992869, '사쿠라 아야네', '/yPbTmntASE9psPIMhNGU5oo6vIH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사쿠라 아야네');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yotsuba Nakano (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 820067 AND a.name = '사쿠라 아야네';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1495399, '진보 마사토', '/azZeT4v6OREIiW3zvNzlKaVGwjT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '진보 마사토');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 820067 AND d.name = '진보 마사토';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/shtqSAsB8snS3iww99iksu2QaoZ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 820067;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jBIMZ0AlUYuFNsKbd4L6FojWMoy.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 820067;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (105, '빽 투 더 퓨쳐', '1985-07-03', '과거로!', '마티 맥플라이(마이클 J. 폭스)는 평범한 고등학생이다. 그런데 평소 친하게 지내던 괴상한 발명가 에메트 브라운 박사(크리스토퍼 로이드)가 스포츠카 드로리안을 개조해 타임머신을 만들고, 뜻밖의 사고로 브라운 박사가 테러범들에게 총을 맞고 위험해진 상황에서 마티는 30년 전으로 가게 된다. 극장 간판에는 2류 배우인 로널드 레이건이 보이고 청년인 아버지와 어머니를 보게 된다. 젊은 아버진 멍청하고, 어머니는 미래의 아들인 마티를 좋아해 야단이다. 마티가 미래로 가는 것을 도와 줄 사람은 30년 전인 젊은 브라운 박사뿐인데...', 120, '12', 'RELEASED', 81.511000, 8.300000, 381109762, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 105 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 105 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 105 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 521, '마이클 J. 폭스', '/2JB4FMgQmnhbBlQ4SxWFN9EIVDi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 J. 폭스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marty McFly', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 105 AND a.name = '마이클 J. 폭스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1062, '크리스토퍼 로이드', '/nxVjpyb3UrfbPZnEyDNlQVlFAs5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스토퍼 로이드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Emmett Brown', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 105 AND a.name = '크리스토퍼 로이드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1064, '크리스핀 글로버', '/e6lbvXOnVEGDLn9OpaLQpwMSWe3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스핀 글로버');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'George McFly', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 105 AND a.name = '크리스핀 글로버';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1063, '리 톰슨', '/85E9NTEfkRdUdK4kTrrnk5of25w.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리 톰슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lorraine Baines', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 105 AND a.name = '리 톰슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1066, '클로디아 웰즈', '/2VOsPvoV2vmEUd1O2KjW3kcN8JD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '클로디아 웰즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jennifer Parker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 105 AND a.name = '클로디아 웰즈';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 24, '로버트 저메키스', '/lPYDQ5LYNJ12rJZENtyASmVZ1Ql.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '로버트 저메키스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 105 AND d.name = '로버트 저메키스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7gGicAJdHRzaUd6qLjH5bSW4Cgi.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 105;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5bzPWQ2dFUl2aZKkp7ILJVVkRed.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 105;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (15804, '고령가 소년 살인 사건', '1991-07-27', '소년, 소녀를 만나다', '14살 소년 샤오쓰는 국어 성적이 나쁘다는 이유로 중학교 주간부에서 야간부로 반을 옮기게 되고 ‘소공원’파와 어울려 다닌다. 그러던 중 샤오쓰는 양호실에서 밍이라는 이름의 소녀를 만나게 된다. 소녀는 ‘소공원’파의 보스 허니의 여자로 허니는 샤오밍을 차지하기 위해 경쟁조직인 ‘217’파의 보스를 죽이고 은둔 중이다. 보스의 부재로 통제력을 상실한 ‘소공원’파는 보스 자리를 두고 혼란에 빠지고 돌연 허니가 돌아오게 되면서 ‘소공원’파 내부와 ‘217’파간의 대립이 격해진다. 그리고 밍을 사랑하게 된 샤오쓰도 이들의 싸움에 휘말리게 되는데...', 237, '15', 'RELEASED', 21.367000, 8.321000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 15804 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 15804 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 15804 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1622, '장첸', '/7GHGozSsjERpQwvVwIhd1i6Yl7Y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '장첸');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Xiao Si''r', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 15804 AND a.name = '장첸';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 150162, 'Lisa Yang', '/gt34a707NZaDfzF8pYWqBwZagth.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lisa Yang');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ming', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 15804 AND a.name = 'Lisa Yang';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1088685, 'Chang Kuo-Chu', '/6hGLo2VE970oi3LMPr9QcmiaDSG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Chang Kuo-Chu');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Father', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 15804 AND a.name = 'Chang Kuo-Chu';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 103598, 'Elaine Jin', '/eXhTJ8vMsflpvoU4lOWeFTahbVY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Elaine Jin');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mother', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 15804 AND a.name = 'Elaine Jin';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1293234, 'Chuan Wang', '/yJq73sOtT5NGXGXhqscXcGSfmpA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Chuan Wang');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eldest Sister', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 15804 AND a.name = 'Chuan Wang';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 143035, '에드워드 양', '/mvQ0oSfPgyohdTpr3hETXQy7ilz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '에드워드 양');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 15804 AND d.name = '에드워드 양';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bCDbodBnA9A8k5bhwBc8Lh3j0mB.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 15804;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2LMgkmtnmhjUHvFXNDruHzrUFKK.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 15804;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1139087, '원스 어폰 어 스튜디오', '2023-09-24', '디즈니 100년, 그 모든 순간이 여기에', '월트 디즈니 컴퍼니의 모태인 월트 디즈니 애니메이션 스튜디오가 창립 100주년을 기념해 제작한 단편 애니메이션이다. 월트 디즈니 애니메이션 스튜디오 창립 100주년을 기념하고자 디즈니 애니메이션의 캐릭터들이 모두 모여 단체 사진을 찍는 에피소드를 다루고 있으며,  500명이 넘는 캐릭터들이 등장한다.', 9, 'All', 'RELEASED', 67.269000, 8.315000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1139087 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1139087 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1139087 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1139087 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1217648, '크리스 디어먼토펄러스', '/rD9KI3FYwy3rFJhdTg2K5mhr7W3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 디어먼토펄러스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mickey Mouse (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1139087 AND a.name = '크리스 디어먼토펄러스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1382187, 'Kaitlyn Robrock', '/1joOQrgyU9ap9W1cvimh01XmKcO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kaitlyn Robrock');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Minnie Mouse (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1139087 AND a.name = 'Kaitlyn Robrock';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 34478, 'Tony Anselmo', '/7SQqLwI3ysrFD6KEMGzvfgIVZJc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tony Anselmo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Donald Duck (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1139087 AND a.name = 'Tony Anselmo';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 84213, 'Bill Farmer', '/lhezx68R12s5Bsv7d77BrQb7tWA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bill Farmer');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Goofy / Pluto (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1139087 AND a.name = 'Bill Farmer';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12077, '짐 커밍스', '/c0sQPRCM5Ri3F4gVyxPr4AcPmIq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '짐 커밍스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Baloo / Winnie-the-Pooh (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1139087 AND a.name = '짐 커밍스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1994928, 'Trent Correy', '/kzaOz9jtkFg9YcyvGO5CUOdf1fF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Trent Correy');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1139087 AND d.name = 'Trent Correy';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1381895, 'Dan Abraham', '/xGUGaHy5HcshpJKclGGUvTqeVlW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Dan Abraham');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1139087 AND d.name = 'Dan Abraham';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qLOcYTVg5YXY7FwrGXUeYa2itaH.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1139087;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8KJMOKyl9rpgb9ELEwhfBMIaTHw.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1139087;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (10494, '퍼펙트 블루', '1998-02-28', '나는 피해자이자, 목격자이며 범인이다. 나는 누구인가?', '아이돌 소녀 그룹인 Charm의 리더인 미마는 본격적인 연기를 시작하기 위해 아이돌의 그늘을 벗어나려고 하지만,첫 출연작부터 난관에 부딪힌다. 누드 등을 통한 과격적인 홍보로 그녀를 더욱 알리려는 소속사 대표와 미마를 지켜주려고 노력하는 그녀의 담당 매니저의 갈등. 그리고 아직까지도 아이돌로서의 그녀를 그리워하는 팬들. 그 모든 것의 중심에 선 미마는 비록 대사는 한마디에 불과한 단역이지만 그래도 주어진 역할에 충실히 하기 위해 노력한다. 드라마에서 광기어린 살인을 저지르고 다니는 소녀 역할을 맡은 미마는 현실과 허구의 경계선에서 자신을 쫓아다니던 스토커를 해친다. 그러나 그 일 역시 사실인지 허구인지는 불분명하다. 이제 미마의 눈에는 또 다른 미마가 보이기 시작한다. 아이돌 시절 그대로의 모습으로 미마의 눈 앞에 나타난 또 다른 미마는 그녀에게 과거 인기 스타로의 회귀를 강요한다. 니가 나고, 내가 너야. 라고 말하는 또 다른 자아 앞에서 미마는 혼란에 빠진다. 그러던 중, 미마의 주변을 둘러싼 사람들이 하나 둘 살해당하고 범인을 알 수 없는 상황에서 극도의 불안감을 느끼는 미마는 누군가 끊임없이 자신을 지켜보고 있다는 것을 느끼는데...', 82, '', 'RELEASED', 44.889000, 8.300000, 112536, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 10494 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 10494 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 65437, '岩男潤子', '/bKyMLT1MgDTnXafsq2ur32VMwY5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '岩男潤子');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mima Kirigoe (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10494 AND a.name = '岩男潤子';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 65424, '마츠모토 리카', '/ykm6ZpLcX5wblCNp7rOAoZpCh3L.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마츠모토 리카');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rumi (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10494 AND a.name = '마츠모토 리카';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 553949, '新山志保', '/eUmzsJ0wqHYuzEBTviYy2MlXWw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '新山志保');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rei (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10494 AND a.name = '新山志保';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1685, '大倉正章', '/lQmV0Nzww7i3cmbr2ToqGJ5q6qr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '大倉正章');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mamoru Uchida (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10494 AND a.name = '大倉正章';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 65438, '辻親八', '/af5ILJbixauO84bsuLOr8XSU9yd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '辻親八');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tadokoro (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10494 AND a.name = '辻親八';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 40333, '콘 사토시', '/b7Oqg1bjS0e2iEzEjYWnsyVVagt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '콘 사토시');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 10494 AND d.name = '콘 사토시';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ir0vFTgjYcfI8hoakzNn6PPN8W7.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 10494;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/A1Larywbw79kZQqkvCEiPHJqdLN.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 10494;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (599, '선셋 대로', '1950-08-10', '', '캘리포니아주 로스앤젤레스의 선셋 대로에 위치한 대저택에서 살인사건이 발생한다. 유명 여배우의 풀장에서 한 시나리오 작가가 총에 맞은 채 죽어서 발견된 것이다. 경찰이 출동한 가운데 세상 사람들은 이 사건에 눈과 귀를 기울인다. 사건이 일어나기 정확히 6개월 전. 주로 B급 영화의 시나리오를 썼던 조셉 길리스는 벌이가 좋지 않아 차까지 압류당할 위기에 처한다. 해결사들의 추격을 받던 조셉은 선셋 대로에 위치한 대저택에 숨어들었다가 그 곳의 주인이자 과거 무성영화 시절 스타인 노마 데스몬드을 만나게 된다. 노마는 조셉에게 자신이 쓴 시나리오를 보여주며 유혹하는데...', 110, '', 'RELEASED', 27.534000, 8.300000, 5000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 599 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8252, '윌리엄 홀든', '/qEuJZiPXKFm1LdtbnHKGj2hQm8a.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '윌리엄 홀든');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joe Gillis', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 599 AND a.name = '윌리엄 홀든';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8629, '글로리아 스완슨', '/akmlp75ESHjtGOVtOCfJYxkX4eo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '글로리아 스완슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Norma Desmond', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 599 AND a.name = '글로리아 스완슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8630, 'Erich von Stroheim', '/lUoSEdmX6Cl7lLUnV4ewLkVDnhY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Erich von Stroheim');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Max von Mayerling', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 599 AND a.name = 'Erich von Stroheim';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8631, 'Nancy Olson', '/419ZEkm8PQSp9RS7NXb4yJPDRm4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nancy Olson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Betty Schaefer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 599 AND a.name = 'Nancy Olson';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8632, 'Fred Clark', '/yBjSwb6xma9ukYpbSe75C0eqNTx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Fred Clark');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sheldrake', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 599 AND a.name = 'Fred Clark';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 3146, '빌리 와일더', '/tfVte6h2dlLn59Q0Mi6AvWAyRLP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '빌리 와일더');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 599 AND d.name = '빌리 와일더';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sC4Dpmn87oz9AuxZ15Lmip0Ftgr.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 599;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7itwVx4ucSluBZZ1vQfnZGx7LjA.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 599;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (207, '죽은 시인의 사회', '1989-06-02', '“오 캡틴, 나의 캡틴”', '1859년에 창립된 미국의 명문 사립학교인 웰튼 고등학교의 새 학기를 맞아 신입생들도 들어오고, 이 학교 출신인 새로운 영어 교사 존 키팅(로빈 윌리엄스)도 부임한다. 키팅 선생은 학생들에게 관습에 맞서고 자신의 삶을 남다르게 가꾸라며 새로운 학습 방법으로 학생들을 지도하며 학생들에게 신선한 충격을 준다. 닐(로버트 숀 레오나드)은 키팅 선생을 캡틴이라 부르며 따르게 되고, 몇몇 학생들과 함께 죽은 시인의 사회라는 시낭독 클럽을 조직한다. 닐과 그의 친구들은 엄격한 학교 규율을 어기고 서클에 참여하면서 키팅 선생을 통해 참된 인생이 무엇인지를 조금씩 느끼게 되는데...', 128, '12', 'RELEASED', 61.408000, 8.300000, 235900000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 207 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2157, '로빈 윌리엄스', '/iYdeP6K0qz44Wg2Nw9LPJGMBkQ5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로빈 윌리엄스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'John Keating', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 207 AND a.name = '로빈 윌리엄스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2692, 'Robert Sean Leonard', '/hLtG4weEX8PT9zHAi0DyNNYPS3K.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Robert Sean Leonard');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Neil Perry', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 207 AND a.name = 'Robert Sean Leonard';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 569, '에단 호크', '/hCA0AICMt782F5sXdG7vdEysyLJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에단 호크');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Todd Anderson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 207 AND a.name = '에단 호크';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2694, '조쉬 찰스', '/xmFdIoFKVRNUmXaslBlErA3UHfF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조쉬 찰스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Knox Overstreet', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 207 AND a.name = '조쉬 찰스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2693, 'Gale Hansen', '/gVZ9TFvseA3I0fLLJiXKInzBygp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gale Hansen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Charlie Dalton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 207 AND a.name = 'Gale Hansen';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2690, '피터 위어', '/4GxIZX5gtbMpW4ZgHwvGmLSIHOE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피터 위어');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 207 AND d.name = '피터 위어';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/41AJ4X5TRWpECsiMIKS8so4MSsD.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 207;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8Lt9ljQ5IruNXtci03Hm7VcDZKe.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 207;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (644479, 'Dedicada A Mi Ex', '2019-11-01', '', '', 94, '', 'RELEASED', 22.060000, 8.308000, 1315376, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 644479 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 644479 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1640507, 'Raúl Santana', '/t2JoMFV1XIIzcDL4iSplPSxOo1m.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Raúl Santana');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ariel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 644479 AND a.name = 'Raúl Santana';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1640510, 'Nataly Valencia', '/nXa2JH5shLuF18mh954xRPdHI3y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nataly Valencia');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Felicia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 644479 AND a.name = 'Nataly Valencia';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 147333, 'Carlos Alcántara', '/kOA49MEbLUCvkob99Ju13H1eYFS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Carlos Alcántara');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Néstor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 644479 AND a.name = 'Carlos Alcántara';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1737888, 'Biassini Segura', '/6X539lTqRd52rA0uhUoLJbiQgNb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Biassini Segura');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ortega', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 644479 AND a.name = 'Biassini Segura';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1309844, 'Mariana Treviño', '/d1N3CLQzrARgFLTLTJdKNgtlapB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mariana Treviño');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Victoria', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 644479 AND a.name = 'Mariana Treviño';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1640511, 'Jorge Ulloa', '/aTRa0w2KlUCFsIhyg1UUSLpJcdg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jorge Ulloa');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 644479 AND d.name = 'Jorge Ulloa';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xc4bTXVwYNXi10jG9dwcaYt5IpU.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 644479;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1fOsyhVz5qyX2rl1qqX6KImVhTx.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 644479;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (92321, '반딧불이의 숲으로', '2011-09-17', '', '미도리카와 유키의 동명만화를 원작으로 한 작품으로 숲에서 길을 잃은 주인공이 요술로 사람의 눈에 보이는 힘이 있는 요괴와 만난 이야기를 그리고 있다.', 45, '', 'RELEASED', 0.021000, 8.309000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 92321 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 92321 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 92321 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1315197, '沢田泉', '/A59nyfer38Q2J84Fy1lUbqgIFN1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '沢田泉');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hotaru''s Mother (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 92321 AND a.name = '沢田泉';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1248372, '타야 하야토', '/nwar5Rk5HZwl1YxggzGp207h4Y6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '타야 하야토');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ryouta (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 92321 AND a.name = '타야 하야토';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 992869, '사쿠라 아야네', '/yPbTmntASE9psPIMhNGU5oo6vIH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사쿠라 아야네');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hotaru Takegawa (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 92321 AND a.name = '사쿠라 아야네';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1254052, '우치야마 고키', '/sllSm3iZZWVLTBrDZQRtWrZUfEj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '우치야마 고키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gin (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 92321 AND a.name = '우치야마 고키';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 65438, '辻親八', '/af5ILJbixauO84bsuLOr8XSU9yd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '辻親八');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hotaru''s Grandfather (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 92321 AND a.name = '辻親八';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 992866, '大森貴弘', '/ajJaks8HkgfdNWHPRSayCqZOeH9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '大森貴弘');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 92321 AND d.name = '大森貴弘';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ijAOOOrcLViYPkXIauhRhCj2ySf.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 92321;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qknxyRgP6UTmwJ4B9tDAmzHMq7u.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 92321;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (101, '레옹', '1994-09-14', '소녀와 킬러의 만남', '한 손엔 우유 2팩이 든 가방, 다른 한 손엔 화분을 들고 뿌리 없이 떠도는 킬러 레옹은 어느 날 옆 집 소녀 마틸다의 일가족이 몰살 당하는 것을 목격한다. 그 사이 심부름을 갔다 돌아 온 마틸다는 가족들이 처참히 몰살 당하자 레옹에게 도움을 청한다. 가족의 원수를 갚기 위해 킬러가 되기로 결심한 12세 소녀 마틸다는 레옹에게 글을 알려주는 대신 복수하는 법을 배우고, 그 사이 레옹에 대한 사랑을 키워나간다. 드디어 그녀는 가족을 죽인 사람이 부패한 마약 경찰 스탠스임을 알게 되고, 홀로 그의 사무실로 향하게 되는데...', 111, '18', 'RELEASED', 77.015000, 8.306000, 45284974, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 101 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 101 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 101 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1003, '장 르노', '/dEQGpWhgRAN1xU8O1jyOVuQTHwo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '장 르노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Léon Montana', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 101 AND a.name = '장 르노';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 524, '나탈리 포트만', '/edPU5HxncLWa1YkgRPNkSd68ONG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나탈리 포트만');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mathilda Lando', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 101 AND a.name = '나탈리 포트만';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 64, '게리 올드만', '/2v9FVVBUrrkW2m3QOcYkuhq9A6o.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '게리 올드만');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Norman Stansfield', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 101 AND a.name = '게리 올드만';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1004, '데니 에일로', '/e7Q6hgWilShqGZ572ByWF9eshMm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데니 에일로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tony', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 101 AND a.name = '데니 에일로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1005, '피터 에펠', '/AvOZjWVwklfJHNHD2AwLmYRhSXw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '피터 에펠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Malky', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 101 AND a.name = '피터 에펠';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 59, '뤽 베송', '/bLVPnHMVFZ7wrF6ovMVF5U1UX89.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '뤽 베송');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 101 AND d.name = '뤽 베송';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/cVNasmF1Egd3v3mpq747Hizxx4x.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 101;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jynfI114q3kOAbIiVjVfFFmttU2.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 101;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (914, '위대한 독재자', '1940-10-15', '평화를 사랑하는 평범한 유태인 이발사 vs 세계 정복을 꿈꾸는 악명 높은 독재자 힌켈', '세계대전에서 패배한 토매니아국에 힌켈이라는 독재자가 나타나 악명을 떨친다. 한편, 힌켈과 닮은꼴 외모의 이발사 찰리는 국가의 유태인 탄압정책으로 인해 곤경에 처하지만 병사로 참전했던 전쟁에서 우연히 구해줬던 슐츠 장교의 도움을 받아 위기를 모면한다. 독재자 힌켈의 악행은 갈수록 도를 더해가고, 찰리는 유태인 수용소에 끌려가게 되지만 기지를 부려 탈옥에 성공한다. 하지만 이발사와 똑같은 얼굴을 한 힌켈이 탈옥범으로 오해 받아 감옥에 잡혀 들어가게 되는데…', 125, 'ALL', 'RELEASED', 32.993000, 8.305000, 11000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 914 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 914 AND g.name = '전쟁';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 13848, '찰리 채플린', '/qQZ2qDAyX9aw8KCkj9VZAQLKysK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '찰리 채플린');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Adenoid Hynkel, Dictator of Tomania / A Jewish Barber', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 914 AND a.name = '찰리 채플린';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 14027, 'Paulette Goddard', '/780Hc9Mjk99b8Ucap4f6GMa6Qob.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Paulette Goddard');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hannah', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 914 AND a.name = 'Paulette Goddard';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 14028, 'Jack Oakie', '/9oWdEicbTjfpfiCtvvYuxi0UseU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jack Oakie');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Benzino Napaloni, Dictator of Bacteria', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 914 AND a.name = 'Jack Oakie';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 14029, 'Reginald Gardiner', '/yufdzor5RheT4FYx1Ywm4mo2TlG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Reginald Gardiner');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Commander Schultz', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 914 AND a.name = 'Reginald Gardiner';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10924, 'Henry Daniell', '/5g4V2fKBAI5TGjqfItfsnPjqZN9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Henry Daniell');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Garbitsch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 914 AND a.name = 'Henry Daniell';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 13848, '찰리 채플린', '/qQZ2qDAyX9aw8KCkj9VZAQLKysK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '찰리 채플린');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 914 AND d.name = '찰리 채플린';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uw26mSTaA10hg2yuQfNaFLSeY3h.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 914;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/c8Pi8F1FzpNebtgXcSjC9nWCdSW.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 914;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (18491, '엔드 오브 에반게리온', '1997-07-19', '신세기 에반게리온’ TV 시리즈의 완결판', '‘카오루’의 죽음 이후 공황 상태에 빠진 ‘신지’. 한편, 네르프 총사령관 ‘겐도’는 ‘서드 임팩트’ 즉, ‘인류보완계획’을 놓고 ‘제레’와 갈등을 벌인다. 이에 ‘제레’는 양산형 에바를 투입해 네르프 본부와 에바 파일럿들을 향해 총공격을 감행하고 맹공에 혼수 상태였던 ‘아스카’까지 완전히 폭주한다. ‘신지’는 ‘미사토’의 도움으로 겨우 초호기에 오르지만, 인류의 운명을 결정해야 하는 상황에 한계에 부딪히게 되는데…', 87, '18', 'RELEASED', 66.062000, 8.300000, 20563523, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 18491 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 18491 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 18491 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 18491 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 77927, '오가타 메구미', '/eNdfMUyZgG5P4TNIZpbTAu8gBs9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오가타 메구미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shinji Ikari (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 18491 AND a.name = '오가타 메구미';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 40325, '하야시바라 메구미', '/jyWpocz6aNRQFgEv0mRD5VA9ff5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하야시바라 메구미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rei Ayanami / Yui Ikari (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 18491 AND a.name = '하야시바라 메구미';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 77931, '미츠이시 코토노', '/mvKgkuAVVMmjkFWlwVQu8KCa80O.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미츠이시 코토노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Misato Katsuragi (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 18491 AND a.name = '미츠이시 코토노';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 83768, '미야무라 유코', '/lVxXWzREWxixZ51EK4gmz9LqCV9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미야무라 유코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Asuka Langley Soryu (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 18491 AND a.name = '미야무라 유코';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 77934, '타치키 후미히코', '/9nHFGrvdT5c4klZOiFQElybNy7h.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '타치키 후미히코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gendo Ikari (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 18491 AND a.name = '타치키 후미히코';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 77923, '츠루마키 카즈야', '/vhf9zmNK3HcDkB0fH3RULJoCU9b.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '츠루마키 카즈야');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 18491 AND d.name = '츠루마키 카즈야';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 77921, '안노 히데아키', '/AfV9h1RW6uALpx751APdUoX8ONc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '안노 히데아키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 18491 AND d.name = '안노 히데아키';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rS97sHvlsUAp8F6tkC78YjRU8wl.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 18491;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xLMJCCSatxENpHO9rLW9yD8A12C.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 18491;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (3782, '이키루', '1952-10-09', '죽음 앞에서 다시 생각하게 되는 삶의 의미', '공무원인 와타나베 칸지는 어느 날 자신이 간암에 걸렸으며 남은 시간이 많이 않다는 사실을 알게 된다. 지금까지 그는 대단히 규칙적인 삶을 살아왔고 한번도 원칙에서 벗어난 적이 없었다. 그에게는 두 명의 자식이 있지만 그들은 이미 그에게서 한참 멀어져 있다. 남겨진 시간은 길어야 1년. 무엇을 할 것인가? 지금까지의 삶에 회의를 느낀 그는 자신의 삶이 가치 있었다는 증거가 될만한 무언가를 하기로 결심하고 버려진 땅을 공원으로 만들 계획을 세운다.', 143, '', 'RELEASED', 19.298000, 8.300000, 55240, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 3782 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7453, '시무라 타카시', '/ydyAm2vyBbEPZRICIMqqjDm0NM9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시무라 타카시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kanji Watanabe', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3782 AND a.name = '시무라 타카시';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 34375, '田中春男', '/eziah9QZcIs3SVPgTS3iuyUpiW3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '田中春男');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sakai', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3782 AND a.name = '田中春男';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 34376, '金子信雄', '/iKcZ0rtO5sCfOSEBvyAdCk68EzY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '金子信雄');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mitsuo, son of Kanji', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3782 AND a.name = '金子信雄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 34377, '左卜全', '/qYUGXKAwhLuVrJGiAmnBWAxToQb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '左卜全');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ohara', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3782 AND a.name = '左卜全';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 34378, '小田切みき', '/9pfgepQ89gE9wZyHLnMM3tMRV1Y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '小田切みき');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Toyo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3782 AND a.name = '小田切みき';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 5026, '구로사와 아키라', '/eGexa6MZ22T1MZxce1qR3RcAYaS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '구로사와 아키라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 3782 AND d.name = '구로사와 아키라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uMaLKmpxepW4Uq8lcCpels656u0.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 3782;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/stiGp1XzkLSYdUUEWTyQOZRkr49.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 3782;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (3082, '모던 타임즈', '1936-02-05', '찰리와 소녀의 행복을 찾아가는 아름다운 여정', '산업의 기계화와 대공황이 맞물려 힘든 시절, 공장의 컨베이어 벨트 위에서 하루 종일 나사못 조이는 일을 하는 찰리. 찰리는 반복되는 작업에 착란 현상을 일으키고, 눈에 보이는 모든 것을 조여버리는 강박 관념에 빠지고 만다. 그는 급기야 정신 병원에 가게 되고, 거리를 방황하다 시위 군중에 휩쓸려 감옥살이까지 하게 된다. 몇 년 후 감옥에서 풀려난 찰리는 부모를 잃고 고아가 된 한소녀를 만난다. 그녀의 도움으로 카페에서 일하게 되고 서로를 의지하며 새로운 희망을 가진다. 둘은 행복하고 단란한 가정을 꿈꾸며 일자리를 찾아 헤매지만 매번 다시 거리로 내몰리고 마는데...', 87, 'All', 'RELEASED', 45.389000, 8.292000, 1800000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 3082 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 3082 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 3082 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 13848, '찰리 채플린', '/qQZ2qDAyX9aw8KCkj9VZAQLKysK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '찰리 채플린');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Tramp (A Factory Worker)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3082 AND a.name = '찰리 채플린';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 14027, 'Paulette Goddard', '/780Hc9Mjk99b8Ucap4f6GMa6Qob.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Paulette Goddard');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'A Gamin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3082 AND a.name = 'Paulette Goddard';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 14438, 'Henry Bergman', '/x41Z1XOGnBg6xnFhxunVQBmcJ36.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Henry Bergman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cafe Proprietor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3082 AND a.name = 'Henry Bergman';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 30194, 'Tiny Sandford', '/dsfbvZOIb1rdBx8eUGa2QTYyqGE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tiny Sandford');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Big Bill', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3082 AND a.name = 'Tiny Sandford';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 30195, 'Chester Conklin', '/qaEgtSQU4eTX2fMng7Grc7G2xzq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Chester Conklin');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mechanic', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 3082 AND a.name = 'Chester Conklin';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 13848, '찰리 채플린', '/qQZ2qDAyX9aw8KCkj9VZAQLKysK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '찰리 채플린');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 3082 AND d.name = '찰리 채플린';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/51tKLNNKi8fKZq9DTcGpFAJ7IPc.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 3082;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kSlO1pHpwQfPQdgVPr7dJiJNtJ8.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 3082;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (335, '옛날 옛적 서부에서', '1968-12-21', '스파게티 웨스턴 장르를 총정리한 걸작', '프랭크가 보낸 세명의 총잡이가 기차역에서 누군가를 기다린다. 드디어 그들이 기다리던 한 남자가 하모니카를 불며 기차역에 도착하고, 그들 세 총잡이는 모두 이름 없는 그 남자의 총에 쓰러진다. 한편, 프랭크와 그 부하들은 아일랜드 출신인 맥베인 일가를 잔인하게 살해하는데, 뉴올리언즈에서 이제 막 도착한 맥베인의 새 아내 질로서는 황망할 수밖에 없다. 두 사람은 한달 전 이미 결혼을 한 상태였다.  다시 뉴올리언즈로 돌아가려던 질은 마음을 고쳐먹고 맥베인과 아이들의 시체만 있는 그 집에서 혼자 생활을 시작한다.', 166, '15', 'RELEASED', 53.418000, 8.287000, 5380118, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 335 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 335 AND g.name = '서부';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4959, '클라우디아 카르디날레', '/gbTVdZGrOwteJ7qYSzyn8XpUk0H.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '클라우디아 카르디날레');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jill', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 335 AND a.name = '클라우디아 카르디날레';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4958, '헨리 폰다', '/6wXWsqSXF3wCsGcwVqiszy6RX9X.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헨리 폰다');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frank', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 335 AND a.name = '헨리 폰다';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4765, 'Jason Robards', '/sUmHudqlipfviXwKNqSv5T9PQt6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jason Robards');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '''Cheyenne''', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 335 AND a.name = 'Jason Robards';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4960, '찰스 브론슨', '/w0C2Xa6PCQX83Iu2TxPjOCv8ufm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '찰스 브론슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '''Harmonica''', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 335 AND a.name = '찰스 브론슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4961, '가브리엘레 페르제티', '/pcMZHk3qfgBB26Ih9yBeMDCUUt3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '가브리엘레 페르제티');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Morton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 335 AND a.name = '가브리엘레 페르제티';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 4385, '세르조 레오네', '/2576qoW8l9Z1nKGM10ar60aIwUu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '세르조 레오네');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 335 AND d.name = '세르조 레오네';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mmGzMJonNDvhPiI9a5JM9mLhDUH.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 335;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/P3dkkDkRCd1CU7MT1cs0mGmH1s.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 335;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1084736, '몬테크리스토 백작', '2024-06-28', '', '에드먼드 단테스는  음모에 빠져 결혼식 날 자신이 저지르지도 않은 범죄로 체포된다. 샤토 디프에서 14년 동안의 수감 생활을 끝으로 탈옥에 성공하고  꿈에 그리던 부자가 된다. 단테스는 몬테크리스토 백작으로 신분을 위장하고 세 남자에게 복수를 실행에 옮긴다.', 178, '', 'RELEASED', 941.742000, 8.266000, 73924182, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '역사';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1084736 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 145121, '피에르 니네이', '/aMsGsnRPet7pZ2ppAxaRdBz4yGU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '피에르 니네이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Edmond Dantès / le Comte de Monte-Cristo / Lord Halifax', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1084736 AND a.name = '피에르 니네이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 910944, 'Bastien Bouillon', '/NNaftwlsU8rvBY4e4LX25ZTKgB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bastien Bouillon');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fernand de Morcerf', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1084736 AND a.name = 'Bastien Bouillon';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 123989, '아나이스 드무스티에', '/kObYOu3UYkNcQGg1gnl4xitwhNc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아나이스 드무스티에');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mercédès Herrera', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1084736 AND a.name = '아나이스 드무스티에';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1021689, '아나마리아 바르톨로메이', '/oU56hySuXi4Q51gX6nPcplWybQo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아나마리아 바르톨로메이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Haydée', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1084736 AND a.name = '아나마리아 바르톨로메이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 93532, 'Laurent Lafitte', '/lpF5sb1aEMEmxxfZT3u8PWGEipC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Laurent Lafitte');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gérard de Villefort', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1084736 AND a.name = 'Laurent Lafitte';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 58255, 'Alexandre de La Patellière', '/er7ZbU5inozZfFmvpwswjujxBos.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Alexandre de La Patellière');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1084736 AND d.name = 'Alexandre de La Patellière';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 57558, 'Matthieu Delaporte', '/ofOMIBoC3FyRgfPRWhQxzJMCeLy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Matthieu Delaporte');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1084736 AND d.name = 'Matthieu Delaporte';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4MlHj9EWOFIDoa4uXwcQhnf66w5.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1084736;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/llIXQAndg5kB6SWlp6ouUdO7Zxd.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1084736;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (901, '시티 라이트', '1931-02-06', '찰리 채플린의 하얀 거짓말', '일자리가 없어 도시를 배회하는 떠돌이는 어느날 아침 산책길에서 꽃 파는 눈먼 소녀(를 만난다. 떠돌이는 마지막 동전을 털어서 꽃을 사주고, 육중한 차문 닫히는 소리에 소녀는 그를 부자로 오인한다. 소녀에게 애정을 느낀 떠돌이는 부자 행세를 하며 가깝게 지내고, 그녀의 눈을 수술할 비용을 마련해 주기로 약속한다. 어느 날 술에 취해 물에 빠진 백만장자를 구해준 떠돌이는 그와 친구가 되는데, 백만장자는 술에 취했을 때만 그를 알아보고 술이 깨면 그를 도둑으로 오인한다. 백만장자가 술에 취했을 때 소녀의 수술비를 얻어낸 떠돌이는 그가 술이 깨기 전에 달아나 소녀에게 돈을 전해주고 사라지는데...', 87, 'ALL', 'RELEASED', 16.108000, 8.300000, 4250000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 901 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 901 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 901 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 13848, '찰리 채플린', '/qQZ2qDAyX9aw8KCkj9VZAQLKysK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '찰리 채플린');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'A Tramp', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 901 AND a.name = '찰리 채플린';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 13852, 'Virginia Cherrill', '/dUesDEOkQGsCK0FXQSjRW6QayMw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Virginia Cherrill');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'A Blind Girl', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 901 AND a.name = 'Virginia Cherrill';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2913936, 'Florence Lee', '/e07DhorE4qs6dz3MwZcPTHIXNgt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Florence Lee');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Her Grandmother', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 901 AND a.name = 'Florence Lee';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 13854, 'Harry Myers', '/v2Y70uGlW7FQV8khBqRUOUEdy4n.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Harry Myers');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'An Eccentric Millionaire', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 901 AND a.name = 'Harry Myers';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 13855, 'Al Ernest Garcia', '/pz1VDUCBCvNiZ8qAHg9N4ejXmSX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Al Ernest Garcia');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'His Butler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 901 AND a.name = 'Al Ernest Garcia';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 13848, '찰리 채플린', '/qQZ2qDAyX9aw8KCkj9VZAQLKysK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '찰리 채플린');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 901 AND d.name = '찰리 채플린';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7oI6KKZDxEuxhIm5m9VpOF2Yi9N.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 901;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/n0Cju2Eu3VyrUFl32thblHFWznA.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 901;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (77338, '언터처블: 1%의 우정', '2011-11-02', '', '상위 1% 귀족남과 하위 1% 무일푼이 만났다.  2주간의 내기로 시작된 상상초월 특별한 동거 스토리  하루 24시간 내내 돌봐주는 손길이 없으면 아무 것도 할 수 없는 전신불구의 상위 1% 백만장자 필립(프랑수아 클루제). 어느 날 우연히, 가진 것이라곤 건강한 신체가 전부인 하위 1% 무일푼 백수 드리스(오마 사이)를 만나게 된 그는 거침없이 자유로운 성격의 드리스에게 호기심을 느껴 특별한 내기를 제안한다. 바로 2주 동안 필립의 손발이 되어 한시도 떨어지지 않고 자신을 간호하며 버틸 수 있는지 시험해보겠다는 것. 참을성이라곤 눈꼽 만큼도 찾아 볼 수 없던 드리스는 오기가 발동해 엉겁결에 내기를 수락한다. 이렇게, 전혀 어울릴 것 같지 않던 극과 극, 두 남자의 예측불허 기막힌 동거가 시작 되는데…', 112, '12', 'RELEASED', 74.808000, 8.300000, 426590315, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 77338 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 77338 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 33161, '프랑수아 클루제', '/4ioxRGRJdSjItLxAQ2pp7byWkd3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '프랑수아 클루제');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Philippe', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 77338 AND a.name = '프랑수아 클루제';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 78423, '오마르 시', '/laNZay6AfEzvEvY1NUH9UFiSD0a.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오마르 시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Driss', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 77338 AND a.name = '오마르 시';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1939095, 'Dominique Henry', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Dominique Henry');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pilote Parapente', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 77338 AND a.name = 'Dominique Henry';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19370, 'Anne Le Ny', '/cTFJ87eHjaU8EHsQt2TMcsedeut.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Anne Le Ny');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yvonne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 77338 AND a.name = 'Anne Le Ny';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2411, 'Clotilde Mollet', '/2eR1tpq9zEger1JdANUpehzaSa3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Clotilde Mollet');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marcelle', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 77338 AND a.name = 'Clotilde Mollet';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 84425, 'Éric Toledano', '/9axN13gdsRpQLKqmvibsc9jqK2q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Éric Toledano');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 77338 AND d.name = 'Éric Toledano';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 84426, 'Olivier Nakache', '/cLfpk5eIT8h7NnZcz6Iti3DPkRu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Olivier Nakache');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 77338 AND d.name = 'Olivier Nakache';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4oOf3pmDD5rMNQGgsf7zMbFKtKC.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 77338;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bGksau9GGu0uJ8DJQ8DYc9JW5LM.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 77338;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (28, '지옥의 묵시록', '1979-08-15', '전쟁의 폭염, 피 끓는 광기', '미국 특수부대의 윌라드 대위는 고향에 돌아갔다가 아내가 내민 이혼장에 도장을 찍고 다시 정글로 돌아온다. 혼돈과 막연한 갈망에 시달리던 윌라드에게 떨어진 임무는 캄보디아에 자신의 왕국을 건설한 커츠 대령을 암살하라는 것. 커츠 대령은 한때 가장 뛰어난 군인으로 인정받았으나 미국의 통제를 벗어나 캄보디아에서 독자적인 왕국을 거느리고 있다. 윌라드 대위는 4명의 병사들과 함께 커츠 대령을 찾아 나선다. 폭염과 광기로 가득한 전투를 겪으면서 두려움과 공포로 이성을 잃어가던 그들은 마침내 커츠 대령의 왕국에 도착한다. 그리고 그곳에서 윌라드 대위는 상상을 초월하는 진실을 마주하게 되는데...', 147, '', 'RELEASED', 96.595000, 8.300000, 150000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 28 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 28 AND g.name = '전쟁';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8349, '마틴 쉰', '/m2Y3Q0uyuW6htrn2W9UWCWMkpZu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마틴 쉰');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Captain Benjamin Willard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 28 AND a.name = '마틴 쉰';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8351, 'Frederic Forrest', '/gxHgIe9swYgCcxSSCewQTF4J4VO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Frederic Forrest');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jay ''Chef'' Hicks', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 28 AND a.name = 'Frederic Forrest';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8354, 'Albert Hall', '/jvcOpEO0vSNy3KaDkhIldI1CoaU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Albert Hall');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chief Phillips', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 28 AND a.name = 'Albert Hall';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2975, '로렌스 피시번', '/aBRISux1AGCqkFNTKHYfLcJunWA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로렌스 피시번');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tyrone ''Clean'' Miller', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 28 AND a.name = '로렌스 피시번';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8350, 'Sam Bottoms', '/82ACmkTCHtKAuw42Jwx4JbjuVw0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sam Bottoms');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lance B. Johnson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 28 AND a.name = 'Sam Bottoms';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1776, '프랜시스 포드 코폴라', '/3Pblihd6KjXliie9vj4iQJwbNPU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '프랜시스 포드 코폴라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 28 AND d.name = '프랜시스 포드 코폴라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/giP5yeJBrsqglkM05pbiTyRsoBa.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 28;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9Qs9oyn4iE8QtQjGZ0Hp2WyYNXT.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 28;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1585, '멋진 인생', '1946-12-20', '친구가 있는 한 실패한 인생은 아니다', '조지 베일리는 베드폴드 마을 사람들을 위해 평생을 봉사하며 살아온 인물. 그는 항상 여행을 원했지만 마을 전체를 인수하려는 구두쇠 포터의 계략을 막기 위해서 그 기회를 버릴 수 밖에 없었다. 그를 저지하기 위해 그와 그의 아버지가 만든 대출회사는 애를 쓰지만, 크리스마스 이브에 빌리 삼촌이 사업비 8000달러를 은행에 예금하려던 중 돈을 잃어버린다. 포터는 돈의 위치를 알아내고 이를 숨긴다. 조지는 책임을 떠안고 감옥에 구속되고, 회사는 파산한다. 마침내 포터는 도시를 인수한 것이다. 사랑하는 아내, 자식 그리고 마을 사람들을 생각하며 조지는 자살을 생각하지만, 그의 앞에 수호천사 클라란스가 나타나는데...', 130, '', 'RELEASED', 83.950000, 8.300000, 9644124, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1585 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1585 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1585 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 854, '제임스 스튜어트', '/yId5fdDqShOkr0YjCoJbUOZipcX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제임스 스튜어트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'George Bailey', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1585 AND a.name = '제임스 스튜어트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17752, '도나 리드', '/aCRMYYMs3zxLvmUgxBytuCgTElQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '도나 리드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mary Hatch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1585 AND a.name = '도나 리드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17753, 'Lionel Barrymore', '/j7UjmpRAZ7imblut0WHqjS13mmg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lionel Barrymore');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Potter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1585 AND a.name = 'Lionel Barrymore';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3383, 'Thomas Mitchell', '/uOhcftGVj7tPrCKBYHYtYPlQKUP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Thomas Mitchell');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Uncle Billy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1585 AND a.name = 'Thomas Mitchell';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7666, 'Henry Travers', '/7qsZdxnngfOqXVaJOodfzeH6OGx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Henry Travers');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Clarence', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1585 AND a.name = 'Henry Travers';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2662, '프랭크 카프라', '/ekvnffPsTGHyukMHpxprNxRt3g5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '프랭크 카프라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1585 AND d.name = '프랭크 카프라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/quszlUONTUqKlfm8PnsMJKgSiL9.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1585;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/3q35nBLCIdEbxYfsr7D5ocYQXKz.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1585;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (995133, '''소년과 두더지와 여우와 말'' - The Boy, the Mole, the Fox and the Horse', '2022-12-25', '', '논모어와 배드 로봇 프로덕션을 만나 아름다운 애니메이션으로 재탄생한 찰리 맥커시의 베스트셀러. 친절과 용기, 희망의 의미를 찾아가는 네 친구들의 낯설지만 깊은 유대를 만나보세요.', 35, 'All', 'RELEASED', 38.227000, 8.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 995133 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 995133 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 995133 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 995133 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3024068, 'Jude Coward Nicoll', '/eifbyTAxneBQhrZ594gwTizrYBE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jude Coward Nicoll');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Boy (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 995133 AND a.name = 'Jude Coward Nicoll';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2441, '톰 홀랜더', '/fs5EyDuxcE1s3hFijTSnVhpwYPO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 홀랜더');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Mole (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 995133 AND a.name = '톰 홀랜더';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17605, '이드리스 엘바', '/be1bVF7qGX91a6c5WeRPs5pKXln.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이드리스 엘바');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Fox (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 995133 AND a.name = '이드리스 엘바';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5168, '가브리엘 번', '/vZ5amSGl8iSSK7C7WLKCN4EewnM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '가브리엘 번');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Horse (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 995133 AND a.name = '가브리엘 번';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 3735212, 'Peter Baynton', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Peter Baynton');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 995133 AND d.name = 'Peter Baynton';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 3735213, 'Charlie Mackesy', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Charlie Mackesy');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 995133 AND d.name = 'Charlie Mackesy';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rtrXpardqbtPtkWDtCQOX7218LM.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 995133;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jGKQks1bd3rmltqaXbEbS9DnsPv.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 995133;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (533514, '극장판 바이올렛 에버가든', '2020-09-18', '', '친애하는 길베르트 소령님, 오늘도 또 당신을 떠올리고 말았습니다.  무엇을 보든 무엇을 하든 당신이 떠오릅니다.  시간이 지나도 당신과 보냈던 기억은 선명하게 되살아납니다. 당신은 날 곁에 두었고 아무것도 모르는 제게 살아가는 방법을 가르쳐 주셨고 처음으로 사랑이라는 감정을 알려주셨습니다.  그래서 이렇게 또 편지를 쓰게 됩니다.  -언젠가 이 편지가 당신에게 닿기를 바라며-', 140, 'ALL', 'RELEASED', 21.550000, 8.300000, 20339624, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 533514 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 533514 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 533514 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 533514 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1224288, '이시카와 유이', '/zptGIN1iklKJL1xrfHKOpxR2qJ9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이시카와 유이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Violet Evergarden (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 533514 AND a.name = '이시카와 유이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 110665, '나미카와 다이스케', '/iw0X8oDutxaBAri3Ifga8nhdUJK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나미카와 다이스케');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gilbert Bougainvillea (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 533514 AND a.name = '나미카와 다이스케';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 84508, '코야스 타케히토', '/8uBkNDKPNmp9JWgMUI02NVyfhi1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '코야스 타케히토');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Claudia Hodgins (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 533514 AND a.name = '코야스 타케히토';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 225655, '기우치 히데노부', '/SpxriXj1RnC7av28Ee47YL3bS2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '기우치 히데노부');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dietfried Bougainvillea (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 533514 AND a.name = '기우치 히데노부';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1248340, '토마츠 하루카', '/geVvuA2zMGE5xzfc20aDelJSelu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '토마츠 하루카');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Iris Cannary (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 533514 AND a.name = '토마츠 하루카';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1484773, '이시다테 타이치', '/nBPuRvo9oWFWqzZiS8U4P9j0qtg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '이시다테 타이치');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 533514 AND d.name = '이시다테 타이치';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mBUy2lCwk6fpByQ7GBFKRApKEHb.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 533514;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aLqtWLA6NQHBwQHvHDq5z4EKUm0.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 533514;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (975, '영광의 길', '1957-10-25', '', '총사령관 브롤라드는 프랑스군의 용맹함을 보여주고 싶은 열망에 독일군이 점령하고 있는 ''개미고지''를 탈환하라고 명령한다. 승진을 바라고 있던 사단장 미로는 그것이 자살행위라는 것을 알면서도 자신의 명예를 위해 부하들을 희생시키기로 한다.  결국 군대의 명령 계통에 충실한 닥스 대령이 부대원들을 이끌고 작전을 수행하지만 무모한 작전은 사병들의 끔찍한 희생을 부른다. 동료들의 끔찍한 죽음을 목격한 군인들은 참호를 떠나 공격하기를 거부하기에 이른다. 이에 화가 난 미로 장군은 포병대에게 자신의 부하들이 있는 참호를 향해 대포를 발사하라고 명령한다.  그렇게 작전은 실패로 끝나고, 공격 계획이 잘못된 것이었다는 사실을 인정할 수 없는 미로장군은 작전의 실패가 부하들의 비겁함 때문이라고 스스로를 합리화하고 사단에서 병사 한명씩을 무단으로 색출해, 실패한 임무에 대한 희생양으로 이들을 군법회의에 회부해 기자들이 지켜보는 가운데 처형하려 한다.  닥스 대령은 미로장군의 처사에 분노를 느끼며 병사들을 위해 필사적인 변호를 펼치는데...', 88, '', 'RELEASED', 41.063000, 8.271000, 1200000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 975 AND g.name = '전쟁';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 975 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 975 AND g.name = '역사';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2090, '커크 더글라스', '/yvunzQgnILw6uNBFMyld5nhkBCX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '커크 더글라스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Col. Dax', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 975 AND a.name = '커크 더글라스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 14562, 'Ralph Meeker', '/3gxXZRouc813WFmA6zVUl3ciq0P.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ralph Meeker');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cpl. Philippe Paris', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 975 AND a.name = 'Ralph Meeker';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 14563, 'Adolphe Menjou', '/88FfjxT3cFDIbCIK0UmwyjEF6tU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Adolphe Menjou');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gen. George Broulard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 975 AND a.name = 'Adolphe Menjou';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 14564, 'George Macready', '/gGtegV82TMbcd5psHx6w7by5FgO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'George Macready');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gen. Paul Mireau', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 975 AND a.name = 'George Macready';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 14565, 'Wayne Morris', '/2HFQHQrPdlr8eRca5x9BAfeQnjc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Wayne Morris');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lt. Roget/Singing man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 975 AND a.name = 'Wayne Morris';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 240, '스탠리 큐브릭', '/yFT0VyIelI9aegZrsAwOG5iVP4v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '스탠리 큐브릭');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 975 AND d.name = '스탠리 큐브릭';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/382xZKXOfuILUQ4HsqCGPLk8fgA.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 975;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/354kfjVb96mtFALMhBE6jzHGiA2.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 975;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (652837, '조제, 호랑이 그리고 물고기들', '2020-12-25', '“이름이 뭐야?”  “조제”', '지체장애인인 조제는 그림 그리기를 좋아하며, 미처 경험해 보지 못한 세상에 대한 호기심과 두려움을 동시에 가지고 살아간다. 해양생물학을 전공하며 유학을 준비 중인 츠네오는 바다를 사랑하는 대학생으로 조제와 비슷한 또래이다. 조제를 온실 속 화초처럼 키워온 할머니는 츠네오를 아르바이트생으로 고용하여 조제를 일정 시간 돌보게 한다. 조제는 할머니의 눈을 피해, 혹은 할머니의 묵인하에, 츠네오와 함께 바깥나들이를 시작하고 조금씩 세상을 향해 마음을 열어간다.', 99, '', 'RELEASED', 29.892000, 8.265000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 652837 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 652837 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 652837 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1255318, '나카가와 타이시', '/7Vo2ywkfbQufXkIGrsOQDhC0Da8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나카가와 타이시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tsuneo Suzukawa (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 652837 AND a.name = '나카가와 타이시';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1671407, '키요하라 카야', '/a0tDsusfKXPSbVGO9zBSSAoCcAP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키요하라 카야');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kumiko ''Josee'' Yamamura (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 652837 AND a.name = '키요하라 카야';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1772522, '미야모토 유메', '/1bpMweFhnzx40CbVP8aU05H8iaJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미야모토 유메');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mai Ninomiya (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 652837 AND a.name = '미야모토 유메';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1254260, '오키츠 카즈유키', '/vgyaK5dAxhvzAi6LJM3ZyaJd4mJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오키츠 카즈유키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hayato Matsuura (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 652837 AND a.name = '오키츠 카즈유키';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1691384, 'Lynn', '/kFyuszD3uS5rX4GGf1U5OM5exur.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lynn');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kana Kishimoto (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 652837 AND a.name = 'Lynn';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1582093, '타무라 코타로', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '타무라 코타로');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 652837 AND d.name = '타무라 코타로';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/v60S8rPRCQRYSeCtmLiuRpQqIfC.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 652837;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/i1GT0e6Crg6UezT3ibXnMS3pBAd.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 652837;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (637920, '7번방의 기적', '2019-10-10', '', '교도소 7번 방. 지능이 예닐곱 살 수준인 남자가 이곳에 들어왔다. 아동 살해 누명을 쓰고 사형을 기다리지만 그에겐 아끼는 딸이 있다. 감방 동료들이 준비한 특별 선물로 딸과 재회한 남자. 하지만 계속 함께하려면 무죄를 밝혀야 한다.', 132, '', 'RELEASED', 64.128000, 8.264000, 28000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 637920 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1163030, 'Aras Bulut İynemli', '/2NCpNhJm30eR0S73VPzUjLaPApD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Aras Bulut İynemli');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Memo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637920 AND a.name = 'Aras Bulut İynemli';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1985311, 'Nisa Sofiya Aksongur', '/rGdkhirqwprZAJDlPTZiQgFY5rk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nisa Sofiya Aksongur');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ova', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637920 AND a.name = 'Nisa Sofiya Aksongur';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 556113, 'İlker Aksum', '/dY4ggg91mwr2OglePtYowUtzEVh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'İlker Aksum');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Askorozlu', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637920 AND a.name = 'İlker Aksum';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 935344, 'Mesut Akusta', '/6YIczTLrwCiohfQB6cSBcWxX57H.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mesut Akusta');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yusuf', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637920 AND a.name = 'Mesut Akusta';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1948853, 'Yıldıray Şahinler', '/4RVOox9vz1q9y0n6Cevw7klkH5t.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Yıldıray Şahinler');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hafız', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 637920 AND a.name = 'Yıldıray Şahinler';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 230767, 'Mehmet Ada Öztekin', '/SkHanCAwbjb8U9YLJnYIvw5wG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Mehmet Ada Öztekin');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 637920 AND d.name = 'Mehmet Ada Öztekin';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sOfUbzu6OUL5cscGODPdpHn9C1g.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 637920;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/inEy3A5OPgeYW4rjRiGycfEeQzA.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 637920;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (632632, '극장판 기븐', '2020-08-22', '좀더 노래하고 싶어, 너의 곁에서', '고등학생 우에노야마 리츠카는 사토 마후유의 노랫소리에 충격을 받아 나카야마 하루키, 카지 아키히코와 함께 활동하는 밴드에 보컬로 마후유를 영입한다. 마후유 영입 후 첫 공연을 성공시키면서 밴드 ''기븐''의 활동을 시작하려는 와중에 마후유를 향한 마음을 자각한 리츠카는 그와 사귀기 시작한다. 한편, 하루키는 오랫동안 품고 있던 아키히코에 대한 호감이 커져만 가고 아키히코는 동거인인 바이올리니스트 우게츠와 관계를 계속 유지하려 하는데... 하루키와 아키히코, 우게츠의 사랑이 스크린에서 삐걱대며 움직인다!', 60, '', 'RELEASED', 13.620000, 8.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 632632 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 632632 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 632632 AND g.name = '음악';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 632632 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1248374, '에구치 타쿠야', '/hPPhUp0mM65Lc87Q8WXUEmGQAXx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에구치 타쿠야');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Akihiko Kaji (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 632632 AND a.name = '에구치 타쿠야';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2019916, '나카자와 마사토모', '/3pezOVWCMKWdqAzwSo0eKNtso95.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나카자와 마사토모');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Haruki Nakayama (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 632632 AND a.name = '나카자와 마사토모';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2157589, '矢野奨吾', '/kKN7qwnPCheARPuLZLYTUUj9A7Q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '矢野奨吾');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mafuyu Satou (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 632632 AND a.name = '矢野奨吾';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1492992, '우치다 유우마', '/k5yOai4JnkjpTVzSwIFzXxQ2LBP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '우치다 유우마');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ritsuka Uenoyama (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 632632 AND a.name = '우치다 유우마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1247778, '浅沼晋太郎', '/5D2YC0c4zg9TXyOi0PpIXRugvzb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '浅沼晋太郎');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ugetsu Murata (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 632632 AND a.name = '浅沼晋太郎';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2564771, 'Hikaru Yamaguchi', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Hikaru Yamaguchi');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 632632 AND d.name = 'Hikaru Yamaguchi';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tVP1DjnljT1it6cAnn353cdVXDe.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 632632;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/u1wHUA0R48FH4WV3sGqjwx3aNZm.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 632632;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (10376, '피아니스트의 전설', '1998-10-28', '“피아노를 봐. 건반은 시작과 끝이 있지. 그건 무섭지가 않아. 무서운 건 세상이야“', '1900년, 유럽과 미국을 오가는 버지니아 호에서 태어나 평생을 바다 위에서 살아온 천재 피아니스트 ‘나인틴 헌드레드’. 유일한 친구인 트럼펫 연주자 ‘맥스’와 첫사랑이자 마지막 사랑 ‘퍼든’, 그의 소문을 듣고 찾아온 재즈 피아니스트를 만나며 조금씩 바다 밖 세상을 배워가던 그의 인생에 새로운 변화가 찾아오는데...', 170, '15', 'RELEASED', 22.021000, 8.263000, 21057208, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 10376 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 10376 AND g.name = '음악';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3129, '팀 로스', '/qSizF2i9gz6c6DbAC5RoIq8sVqX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '팀 로스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Danny Boodmann T.D. Lemon Nineteen Hundred ''1900''', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10376 AND a.name = '팀 로스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3201, '프루이트 테일러 빈스', '/jqC1v8tF92QcmkQycnaLSuJiQfl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '프루이트 테일러 빈스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Max Tooney', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10376 AND a.name = '프루이트 테일러 빈스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 59373, '멜라니 티에리', '/dtzfVWfyWgnlgwpzgA4uXDrBcTI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '멜라니 티에리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Girl', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10376 AND a.name = '멜라니 티에리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5502, '빌 넌', '/trxNvS6g5yvwbXzx2LK6JqutE5z.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빌 넌');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Danny Boodmann', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10376 AND a.name = '빌 넌';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 80503, '가브리엘 라비아', '/xjLiYd6fHszM8w5NiGBcSKd1mk9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '가브리엘 라비아');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Farmer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10376 AND a.name = '가브리엘 라비아';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 65314, '주세페 토르나토레', '/pjVrtNGsCSNs5IeRVr34PMn1hVR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '주세페 토르나토레');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 10376 AND d.name = '주세페 토르나토레';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/78wbKjbdIG11hVIv55g6rwgLG3l.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 10376;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6rmb35g7XoMCMQtnbH0rUecFZlV.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 10376;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (29259, '구멍', '1960-03-18', '', '라 상테 형무소에서도 특히 경계가 삼엄한 감방 안에는 ‘신부’라는 별명을 가진 보슬랭, 세 차례 탈옥 경력이 있는 롤랑, 눈초리가 날카로운 마뉴, 그리고 여자를 좋아하는 조가 있다. 지하에 구멍을 파고 탈옥한다는 계획을 모의하던 네 사람은 형무소 풋내기 가스파를 계획에 가담시킨다.', 132, '', 'RELEASED', 24.779000, 8.300000, 33187, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 29259 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 29259 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 29259 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 24495, 'Michel Constantin', '/A9rrvk2DkpCcE2LJ18NhCEv6Wfa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Michel Constantin');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Geo Cassine', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 29259 AND a.name = 'Michel Constantin';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 103397, 'Jean Keraudy', '/bb4FBj9koEbGCfFYzykw9TLIQ8N.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jean Keraudy');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Roland Darban', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 29259 AND a.name = 'Jean Keraudy';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 25333, 'Philippe Leroy', '/d4hTg6vJpsUuzDz8iByBXs6B3Mv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Philippe Leroy');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Manu Borelli', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 29259 AND a.name = 'Philippe Leroy';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 103398, 'Raymond Meunier', '/vwtlx1ot45fduxnyRInhiMxnnvK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Raymond Meunier');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vossellin / Monseigneur', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 29259 AND a.name = 'Raymond Meunier';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 46936, 'Marc Michel', '/b7QbG4DDom3uPv6FMaVgV9HlAAc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marc Michel');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Claude Gaspard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 29259 AND a.name = 'Marc Michel';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 103393, 'Jacques Becker', '/wamZsli0mJPyWeZ6bwSgdzsvHyi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Jacques Becker');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 29259 AND d.name = 'Jacques Becker';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/e0jiNoXdEi2ilGRvhqcaoNCSglg.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 29259;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/f72GEQF2lKsdmEULSI9bWCbQylH.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 29259;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (42269, '우리는 그토록 사랑했네', '1974-12-21', '', '2차 대전 당시 연합군으로 참전했다가 친구가 된 세 남자와 한 여자의 사랑과 우정을 그린 작품.', 124, '', 'RELEASED', 15.177000, 8.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 42269 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 42269 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 37583, 'Nino Manfredi', '/iFJ9i6GGJ4romvuF922mZNROPKW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nino Manfredi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Antonio', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 42269 AND a.name = 'Nino Manfredi';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12259, 'Vittorio Gassman', '/eIcPpL8OlAMlIr9ZMvFTY7ni7LX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Vittorio Gassman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gianni Perego', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 42269 AND a.name = 'Vittorio Gassman';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 34027, '스테파니아 산드렐리', '/91OvQqmb1QGxOft0Pzjs11XVQs9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스테파니아 산드렐리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Luciana Zanon', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 42269 AND a.name = '스테파니아 산드렐리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 24606, 'Stefano Satta Flores', '/9PifLAPYRIcEbeqj5WPb7bk3w9k.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Stefano Satta Flores');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nicola Palumbo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 42269 AND a.name = 'Stefano Satta Flores';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 94420, 'Giovanna Ralli', '/6dvHHF5JoFhQg6vD6rG8vyME4zK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Giovanna Ralli');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elide', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 42269 AND a.name = 'Giovanna Ralli';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 31894, '에토레 스콜라', '/f4Y5YwFwgvTSGHuYqiAKuvCapI8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '에토레 스콜라');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 42269 AND d.name = '에토레 스콜라';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/skGhz4SJrVzegKy4Xo7kVh8mpus.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 42269;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2Kkqmy3EpXqBDqv1vvsNXX3pwww.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 42269;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (630566, '클라우즈', '2020-10-09', '', '실화를 배경으로 만들어진 영감을 주는 이야기. 청년 음악가 잭 소비엑은 자신의 몸에 암세포가 퍼져, 이제 남은 시간이 몇 달밖에 없다는 것을 알게 된다. 이제 얼마 남지 않는 시간 동안 그는 자신의 꿈꾸어오던 대로 음악앨범을 만들기로 한다. 그러나 이 음악이 전 세상에 감동을 주는 엄청난 곡이 될 거라는 것을 그때는 알지 못했다. 결국 음악은 잭의 삶에 새로운 의미를 주었고, 그는 세상과 가장 아름답게 이별 인사를 할 수 있게 된다. 전 세계 사람들이 함께할 노래를 남긴 것이다.', 121, '12', 'RELEASED', 19.004000, 8.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 630566 AND g.name = '음악';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 630566 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 630566 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1887455, 'Fin Argus', '/3aDbVpQga0Bhcx7GGh3jKVaeJN6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Fin Argus');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zach Sobiech', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 630566 AND a.name = 'Fin Argus';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1152083, '사브리나 카펜터', '/o0anvGEg34MzoNh6hbJHthB3paF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사브리나 카펜터');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sammy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 630566 AND a.name = '사브리나 카펜터';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1597855, 'Madison Iseman', '/5JVhacnNhqLcWpGPH1fqL7Ovq7g.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Madison Iseman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Amy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 630566 AND a.name = 'Madison Iseman';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 9206, '니브 캠벨', '/eMKwFwUXMFji1omPePrtHGm24R8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '니브 캠벨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Laura Sobiech', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 630566 AND a.name = '니브 캠벨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16857, '톰 에버렛 스콧', '/nVDihOvsSm7kmeyHLtAcEzrrSYC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 에버렛 스콧');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rob Sobiech', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 630566 AND a.name = '톰 에버렛 스콧';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 88675, 'Justin Baldoni', '/2sc6iUWljADnqtjsaKU3s6f0DGW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Justin Baldoni');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 630566 AND d.name = 'Justin Baldoni';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2XyVG0QUnPrukgV5Frpn40kkIky.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 630566;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/nbAbAk80aWCpOS5kOPYJ1L9kE1R.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 630566;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (8587, '라이온 킹', '1994-06-24', '아름다우며 장엄한 디즈니 최고의 명작.', '아프리카의 평화로운 왕국 프라이드랜드. 이곳을 다스리는 사자 무파사의 아들 심바가 태어난다. 왕의 동생 스카는 자신이 왕위를 차지하기 위해 하이에나들과 결탁하여 무파사를 죽이고 심바에게 죄를 뒤집어 씌워 멀리 내쫓는다. 간신히 목숨을 건진 심바는 유쾌한 미어캣 티몬과 멧돼지 품바와 함께 생활하며 어른이 된다. 어느 날 심바는 옛 친구 날라를 만나 프라이드랜드가 파괴되고 있다는 소식을 듣게 된다. 하지만 자신이 저지른 실수 때문에 고향으로 돌아가기를 거부하는 심바. 결국 아버지의 가르침과 자신의 운명을 깨달은 심바는 스카와 하이에나들을 물리치고 평화를 되찾기 위해 왕국으로 돌아가는데...', 89, 'ALL', 'RELEASED', 104.827000, 8.258000, 763455561, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 8587 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 8587 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 8587 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4756, '매튜 브로더릭', '/q3Qe6LODvoKF3AKElVAmxBFpTGd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '매튜 브로더릭');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Simba (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 8587 AND a.name = '매튜 브로더릭';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20005, 'Moira Kelly', '/3yQRnGSfbPWQDInZHTzzXsrAhUR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Moira Kelly');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nala (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 8587 AND a.name = 'Moira Kelly';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 78729, '네이선 레인', '/nEYS0KO1qVO3y0RAt8V8pFxnPb7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '네이선 레인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Timon (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 8587 AND a.name = '네이선 레인';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 69415, 'Ernie Sabella', '/dBit6gkZfxXqdxO0Ic8CsnLpxyQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ernie Sabella');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pumbaa (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 8587 AND a.name = 'Ernie Sabella';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 15152, '제임스 얼 존스', '/oqMPIsXrl9SZkRfIKN08eFROmH6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제임스 얼 존스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mufasa (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 8587 AND a.name = '제임스 얼 존스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 15812, 'Roger Allers', '/sdFyM5FNcJuMv7knrz6swaIHXIJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Roger Allers');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 8587 AND d.name = 'Roger Allers';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 18898, 'Rob Minkoff', '/fn5QA0bqJn6tk4Wt1QonjojFPjd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Rob Minkoff');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 8587 AND d.name = 'Rob Minkoff';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9Y048zYw66TWvpUtsiNK0uReiVX.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 8587;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wXfAvsPZqBDJ8U78F2IAzsUxtNh.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 8587;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (670, '올드보이', '2003-11-21', '15년의 감금, 5일의 추적', '오대수는 어느 날 술이 거나하게 취해 집에 돌아가는 길에 누군가에게 납치, 사설 감금방에 갇히게 된다. 중국집 군만두만을 먹으며 8평이라는 제한된 공간에서 그가 할 수 있는 일이라곤 텔레비전 보는 게 전부. 1년이 지났을 무렵, 뉴스를 통해 나오는 아내의 살해소식. 게다가 아내의 살인범으로 자신이 지목되고 있음을 알게 된 오대수는 복수와 탈출을 위해 감금방 한쪽 구석을 쇠젓가락으로 파기 시작한다. 감금 15년을 맞이하는 해, 마침내 사람 몸 하나 빠져나갈 만큼의 탈출구가 생겼을 때, 어이없게도 15년 전 납치됐던 바로 그 장소로 풀려나 있는 자신을 발견하게 된다.', 120, '18', 'RELEASED', 48.198000, 8.257000, 17500000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 670 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 670 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 670 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 670 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 64880, '최민식', '/sd7gIA6nEkq6zumkDCfxSE0YSSV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '최민식');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Oh Dae-su', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 670 AND a.name = '최민식';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10112, '유지태', '/gGGV2gc0orgssYJ0Q9MSomdYo2I.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '유지태');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lee Woo-jin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 670 AND a.name = '유지태';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1299317, '강혜정', '/46RDs0JLTEmI9Fp6hzU50LmJqId.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '강혜정');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mi-do', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 670 AND a.name = '강혜정';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 77182, '김병옥', '/oGVs2OmYTyXR0KT9xvzVWCAKx8t.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김병옥');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Han', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 670 AND a.name = '김병옥';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 77180, '지대한', '/9aoOX8p2oxUAwOaT8jT6GWfjs01.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '지대한');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'No Joo-hwan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 670 AND a.name = '지대한';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 10099, '박찬욱', '/jsSFCVB7MhuVbSLwTgESiXEiNjt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '박찬욱');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 670 AND d.name = '박찬욱';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xpa9ybm6tYGna5LseqSXvKpSSJn.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 670;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sdwjQEM869JFwMytTmvr6ggvaUl.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 670;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (447362, '우리의 마지막 1년', '2020-11-27', '', '17살 달린은 아버지의 계획에 따라서 하버드 가기 위해서 계획대로 삶을 살게 된다. 우연히 친구들과 함꼐 간 콘서트에서 만난 이자벨에게서 강한 끌림을 느끼고, 그녀에게 데이트 신청을 하게 되는데...', 107, '', 'RELEASED', 45.548000, 8.300000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 447362 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 447362 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 120724, '제이든 스미스', '/meraACSN0LYwLeZlaXN9YW6JCZT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이든 스미스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Daryn', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447362 AND a.name = '제이든 스미스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1289968, '카라 델레바인', '/lEIFRIR8EohwOVe7PQu4zvIl850.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카라 델레바인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Isabelle', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447362 AND a.name = '카라 델레바인';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 9777, '쿠바 구딩 주니어', '/j4gPj92SP3Rj5xxSUe1CIkFCXhB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '쿠바 구딩 주니어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Xavier', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447362 AND a.name = '쿠바 구딩 주니어';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1260036, 'Chris D''Elia', '/hfstFQUoIeOidHTHX9UHIGRTrmc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Chris D''Elia');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Phil', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447362 AND a.name = 'Chris D''Elia';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1795840, 'JT Neal', '/619XoheJeeajNAUQd9hwnPSoUCB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'JT Neal');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sammy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 447362 AND a.name = 'JT Neal';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 586154, 'Mitja Okorn', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Mitja Okorn');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 447362 AND d.name = 'Mitja Okorn';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rJvw9aHDwaYVjnIZkKUbdsNJ7dB.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 447362;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/88J6waYVTta8Qz3iX3qUeWNA5d5.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 447362;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (25237, '컴 앤 씨', '1985-10-17', '', '소년 플로리아는 나치 독일의 침공을 받고 있는 벨라루스에 살고 있다. 그런데 첫 장면에서 그는 모래밭의 흙을 파고 있는 중이다. 제대로 매장되지 못한 죽은 병사들의 시체들이 나오지만, 어떻게든 쓸 만한 총을 찾아낸다. 플로리아는 독일군과의 전투에 참여하길 원하지만 어른들은 그를 무시한다. 더 경험 많은 군인에게 그의 총은 인계되고, 그는 군인들의 행진을 지켜볼 뿐이다. 이윽고 플로리아는 글로샤라는 독특한 매력의 소녀와 함께 뒤에 처져 있음을 깨닫는다. 이들은 숲으로 가지만 거기서 나치 독일의 엄청난 폭격을 당하고, 그 바람에 플로리아의 청력에 문제가 생긴다. 정신이 혼미해진 플로리아는 마을로 돌아가는데, 거기서 엄청난 대량 학살의 흔적과 널부러진 시신들을 보고 경악한다. 문득 어머니의 생사가 궁금해져 필사적으로 찾아다니던 그는 비극적인 장면을 목격하게 되는데..', 142, '', 'RELEASED', 22.818000, 8.255000, 20929648, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 25237 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 25237 AND g.name = '전쟁';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 93407, 'Алексей Кравченко', '/o7UD6o30iJ29dTHPCbtOScv9s5E.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Алексей Кравченко');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Flyora Gayshun', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 25237 AND a.name = 'Алексей Кравченко';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 93408, 'Olga Mironova', '/wSeCtQNuWVVUlHMAAkxVRSCYh7s.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Olga Mironova');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Glasha', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 25237 AND a.name = 'Olga Mironova';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 93409, 'Liubomiras Laucevičius', '/fcbpgPotpuZhiV6Aa08bQYYEiyc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Liubomiras Laucevičius');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kosach', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 25237 AND a.name = 'Liubomiras Laucevičius';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 139096, 'Vladas Bagdonas', '/bWUXFrgjaSgXx3UcQqEciWE3jHv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Vladas Bagdonas');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rubezh', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 25237 AND a.name = 'Vladas Bagdonas';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1148739, 'Jüri Lumiste', '/eXfApAOnEH9mxHWruHsDx2od5Jm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jüri Lumiste');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'German Officer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 25237 AND a.name = 'Jüri Lumiste';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 93406, 'Elem Klimov', '/vzed7lMJ3ADWm2DnF9C0bSIbiaO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Elem Klimov');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 25237 AND d.name = 'Elem Klimov';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/baK79h2An0J8mzTue13KThAeYC5.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 25237;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6C1U0cKK5zGjyUSwNc5GLSVCr7Y.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 25237;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (527641, '파이브 피트', '2019-03-14', '접근 금지! 허그 금지! 키스 금지! 이 로맨스 성공할 수 있을까?', '같은 병을 가진 사람끼리 6피트 이상 접근해서도, 접촉도 해선 안되는 CF(낭포성 섬유증)를 가진 ‘스텔라’와 ‘윌’. 첫눈에 반한 두 사람은 서로를 위해 안전거리를 유지하려고 하지만 그럴수록 더욱 빠져든다. 손을 잡을 수도 키스를 할 수도 없는 그들은 병 때문에 지켜야 했던 6피트에서 1피트 더 가까워지는 걸 선택하고 처음으로 용기를 내 병원 밖 데이트를 결심한다. 그러나 갑자기 숨을 쉬지 못하는 ‘스텔라’. ‘윌’은 그녀를 살리기 위해 안전거리를 어기게 되는데…', 116, '15', 'RELEASED', 72.509000, 8.252000, 92600000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 527641 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 527641 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1286328, '헤일리 루 리처드슨', '/3jWAFINe8W4KoHInnwxrPAsVc4Q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헤일리 루 리처드슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Stella Grant', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 527641 AND a.name = '헤일리 루 리처드슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 56730, '콜 스프라우스', '/mQAXL0rUGwX316d1FBBQmloZzHu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '콜 스프라우스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Will Newman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 527641 AND a.name = '콜 스프라우스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 57412, '모이세스 아리아스', '/fc7krDmEA4VkIY4KOJjpMXGdsfg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '모이세스 아리아스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Poe Ramírez', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 527641 AND a.name = '모이세스 아리아스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1538035, 'Kimberly Hebert Gregory', '/qHhb8bU2oWscATbSwsxPz1NVwGZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kimberly Hebert Gregory');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nurse Barb', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 527641 AND a.name = 'Kimberly Hebert Gregory';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 231610, 'Parminder Nagra', '/6c8NU6wlvfoaOshohQCBX52ycud.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Parminder Nagra');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Noor Hamid', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 527641 AND a.name = 'Parminder Nagra';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 88675, 'Justin Baldoni', '/2sc6iUWljADnqtjsaKU3s6f0DGW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Justin Baldoni');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 527641 AND d.name = 'Justin Baldoni';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8bXlrAzTJKwedmUDKBhiaU7OkqW.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 527641;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/27ZkYMWynuK2qiDP6awc3MsCaOs.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 527641;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (299534, '어벤져스: 엔드게임', '2019-04-24', '운명을 바꿀 최후의 전쟁이 펼쳐진다', '어벤져스의 패배 이후 지구는 초토화됐고 남은 절반의 사람들은 정신적 고통을 호소하며 하루하루를 근근이 버텨나간다. 와칸다에서 싸우다 생존한 히어로들과 우주의 타이탄 행성에서 싸우다 생존한 히어로들이 뿔뿔이 흩어졌는데, 아이언맨과 네뷸라는 우주를 떠돌고 있고 지구에 남아 있는 어벤져스 멤버들은 닉 퓨리가 마지막에 신호를 보내다 만 송신기만 들여다보며 혹시 모를 우주의 응답을 기다리는 중이다. 애초 히어로의 삶을 잠시 내려놓고 가족과 시간을 보내던 호크아이 역시 헤아릴 수 없는 마음의 상처를 입은 채 사라지고 마는데...', 181, '12', 'RELEASED', 140.127000, 8.248000, 2799439100, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 299534 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 299534 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 299534 AND g.name = '액션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3223, '로버트 다우니 주니어', '/5qHNjhtjMD4YWH3UP0rm4tKwxCL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 다우니 주니어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tony Stark / Iron Man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299534 AND a.name = '로버트 다우니 주니어';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16828, '크리스 에반스', '/3bOGNsHlrswhyW79uvIHH1V43JI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 에반스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Steve Rogers / Captain America', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299534 AND a.name = '크리스 에반스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 103, '마크 러팔로', '/5GilHMOt5PAQh6rlUKZzGmaKEI7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마크 러팔로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruce Banner / Hulk', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299534 AND a.name = '마크 러팔로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 74568, '크리스 헴스워스', '/piQGdoIQOF3C1EI5cbYZLAW1gfj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 헴스워스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Thor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299534 AND a.name = '크리스 헴스워스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1245, '스칼렛 요한슨', '/6NsMbJXRlDZuDzatN2akFdGuTvx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스칼렛 요한슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Natasha Romanoff / Black Widow', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299534 AND a.name = '스칼렛 요한슨';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 19272, '조 루소', '/o0OXjFzL10jCy89iAs7UzzSbyoK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조 루소');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 299534 AND d.name = '조 루소';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 19271, '안소니 루소', '/xbINBnWn28YygYWUJ1aSAw0xPRv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '안소니 루소');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 299534 AND d.name = '안소니 루소';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/z7ilT5rNN9kDo8JZmgyhM6ej2xv.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 299534;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7RyHsO4yDXtBv1zUU3mTpHeQ0d5.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 299534;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (283566, '신 에반게리온 극장판 :||', '2021-03-08', '안녕, 모든 에반게리온', '‘에반게리온’ 신극장판 시리즈의 제4부이자 완결편  미사토가 이끄는 반네르프 조직 ‘빌레’는 코어화로 붉게 물든 파리 구시가에 있다.  기함 AAA 분더에서 선발대가 강하하여, 남겨져 있던 봉인주에 안착한다.  복원 작전의 작업 가능 시간은 고작 720초.  결사의 작전 수행 중 ‘네르프’의 EVA가 대량으로 무리를 이루고 접근하여,  마리의 개(改) 8호기가 요격을 개시한다.  한편 신지, 아스카, 아야나미 레이 (가칭) 세 사람은 일본의 대지를 떠돌고 있다…….', 155, '15', 'RELEASED', 30.058000, 8.200000, 93882453, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 283566 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 283566 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 283566 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 283566 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 77927, '오가타 메구미', '/eNdfMUyZgG5P4TNIZpbTAu8gBs9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오가타 메구미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shinji Ikari (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 283566 AND a.name = '오가타 메구미';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 83768, '미야무라 유코', '/lVxXWzREWxixZ51EK4gmz9LqCV9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미야무라 유코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Asuka Shikinami Langley (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 283566 AND a.name = '미야무라 유코';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 9711, '사카모토 마아야', '/hPz2oEQui8a4q9aXdBugQf93ONq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사카모토 마아야');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mari Illustrious Makinami (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 283566 AND a.name = '사카모토 마아야';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 40325, '하야시바라 메구미', '/jyWpocz6aNRQFgEv0mRD5VA9ff5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하야시바라 메구미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rei Ayanami / Yui Ikari (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 283566 AND a.name = '하야시바라 메구미';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 77931, '미츠이시 코토노', '/mvKgkuAVVMmjkFWlwVQu8KCa80O.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미츠이시 코토노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Misato Katsuragi (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 283566 AND a.name = '미츠이시 코토노';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1999367, '나카야마 카츠이치', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '나카야마 카츠이치');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 283566 AND d.name = '나카야마 카츠이치';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 77923, '츠루마키 카즈야', '/vhf9zmNK3HcDkB0fH3RULJoCU9b.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '츠루마키 카즈야');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 283566 AND d.name = '츠루마키 카즈야';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 56341, '마에다 마히로', '/dwqETG4XzUO0zGMYluXfLVIrdDu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '마에다 마히로');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 283566 AND d.name = '마에다 마히로';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 77921, '안노 히데아키', '/AfV9h1RW6uALpx751APdUoX8ONc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '안노 히데아키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 283566 AND d.name = '안노 히데아키';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vpfX1mGVobWlrUGqEzbA2RNPdZF.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 283566;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1EAxNqdkVnp48a7NUuNBHGflowM.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 283566;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (299536, '어벤져스: 인피니티 워', '2018-04-25', '영화의 역사를 뒤바꿀 마블의 클라이맥스!', '타노스는 6개의 인피니티 스톤을 획득해 신으로 군림하려 한다. 그것은 곧 인류의 절반을 학살해 우주의 균형을 맞추겠다는 뜻. 타노스는 닥터 스트레인지가 소유한 타임 스톤, 비전의 이마에 박혀 있는 마인드 스톤을 차지하기 위해 지구를 침략한다. 아이언맨과 스파이더맨은 가디언즈 오브 갤럭시의 멤버들과 타노스를 상대한다. 지구에선 캡틴 아메리카, 완다, 블랙 위도우, 블랙 팬서 등이 비전을 지키기 위해 뭉친다.', 149, '12', 'RELEASED', 217.298000, 8.200000, 2052415039, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 299536 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 299536 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 299536 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3223, '로버트 다우니 주니어', '/5qHNjhtjMD4YWH3UP0rm4tKwxCL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 다우니 주니어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tony Stark / Iron Man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299536 AND a.name = '로버트 다우니 주니어';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16828, '크리스 에반스', '/3bOGNsHlrswhyW79uvIHH1V43JI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 에반스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Steve Rogers / Captain America', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299536 AND a.name = '크리스 에반스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 74568, '크리스 헴스워스', '/piQGdoIQOF3C1EI5cbYZLAW1gfj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스 헴스워스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Thor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299536 AND a.name = '크리스 헴스워스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16851, '조쉬 브롤린', '/sX2etBbIkxRaCsATyw5ZpOVMPTD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조쉬 브롤린');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Thanos', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299536 AND a.name = '조쉬 브롤린';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 103, '마크 러팔로', '/5GilHMOt5PAQh6rlUKZzGmaKEI7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마크 러팔로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruce Banner / Hulk', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 299536 AND a.name = '마크 러팔로';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 19271, '안소니 루소', '/xbINBnWn28YygYWUJ1aSAw0xPRv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '안소니 루소');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 299536 AND d.name = '안소니 루소';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 19272, '조 루소', '/o0OXjFzL10jCy89iAs7UzzSbyoK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조 루소');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 299536 AND d.name = '조 루소';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kmP6viwzcEkZeoi1LaVcQemcvZh.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 299536;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mDfJG3LC3Dqb67AZ52x3Z0jU0uB.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 299536;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (508965, '클라우스', '2019-11-08', '', '공기도 인심도 꽁꽁 얼어붙은 마을. 활기 넘치는 젊은 우체부와 세상을 등지고 장난감을 만드는 목수. 작은 장난감 선물로 냉기가 사라질 수 있을까. 전혀 어울리지 않는 둘의 우정이 차디찬 세상에 온기를 불어넣는다. 《슈퍼배드》 작가의 산타 탄생 이야기.', 96, 'ALL', 'RELEASED', 34.792000, 8.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 508965 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 508965 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 508965 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 508965 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 508965 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17881, '제이슨 슈워츠먼', '/gCjMdmW1DiPAClHVl4zHEIffIsE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이슨 슈워츠먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jesper (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 508965 AND a.name = '제이슨 슈워츠먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 18999, 'J.K. 시몬스', '/ScmKoJ9eiSUOthAt1PDNLi8Fkw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'J.K. 시몬스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Klaus (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 508965 AND a.name = 'J.K. 시몬스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 80591, '라시다 존스', '/jjp33eRM6oavyesW0UM6XBCxQSa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '라시다 존스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alva (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 508965 AND a.name = '라시다 존스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3234, '조앤 쿠삭', '/59UIeHZFYrKyP20lXqijtfTXglO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조앤 쿠삭');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mrs. Krum (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 508965 AND a.name = '조앤 쿠삭';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 77075, 'Norm Macdonald', '/pGOpdt9Xy9YO2nUEWgp8G89KC5r.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Norm Macdonald');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mogens (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 508965 AND a.name = 'Norm Macdonald';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 124749, 'Sergio Pablos', '/gef101kaaTev5OxLSYnrC3ev9F1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Sergio Pablos');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 508965 AND d.name = 'Sergio Pablos';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1mtsyXMbMdaC5Oc1Jqy8pD0xZLA.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 508965;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mlxKite1x1PgmIhJgAxNS9eHmH8.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 508965;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (490132, '그린 북', '2018-11-16', '삶을 변화시키는 인생가이드', '1962년 미국, 입담과 주먹만 믿고 살아가던 토니 발레롱가는 교양과 우아함 그 자체인 천재 피아니스트 돈 셜리의 운전기사 면접을 보게 된다. 백악관에도 초청되는 등 미국 전역에서 콘서트 요청을 받으며 명성을 떨치고 있는 돈 셜리는 위험하기로 소문난 미국 남부 투어 공연을 떠나기로 결심하고, 투어 기간 동안 자신의 보디가드 겸 운전기사로 토니를 고용한다. 거친 인생을 살아온 토니와 교양과 기품을 지키며 살아온 돈. 생각, 행동, 말투, 취향까지 달라도 너무 다른 두 사람은 그들을 위한 여행안내서 그린북에 의존해 특별한 남부 투어를 시작하는데...', 130, '12', 'RELEASED', 63.605000, 8.240000, 319700000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 490132 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 490132 AND g.name = '역사';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 110, '비고 모텐슨', '/vH5gVSpHAMhDaFWfh0Q7BG61O1y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '비고 모텐슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tony Lip', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 490132 AND a.name = '비고 모텐슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 932967, '마허샬라 알리', '/j0c8X3ieYolm9UgOMDV4Ty5kf5M.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마허샬라 알리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Don Shirley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 490132 AND a.name = '마허샬라 알리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1817, '린다 카델리니', '/bcycvynDprC1rrhBNrnBjn5uOUd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '린다 카델리니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dolores', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 490132 AND a.name = '린다 카델리니';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 299743, 'Sebastian Maniscalco', '/8TvA9HEwURJmY9MkkUruB4Sl0lR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sebastian Maniscalco');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Johnny Venere', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 490132 AND a.name = 'Sebastian Maniscalco';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1613744, 'Dimiter D. Marinov', '/lZwHZ27xqsPsuswcxyx6uWSh5VP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Dimiter D. Marinov');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Oleg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 490132 AND a.name = 'Dimiter D. Marinov';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 7396, '피터 패럴리', '/3PDYOFfk5NLmNcEz6SFZmdmqVZr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피터 패럴리');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 490132 AND d.name = '피터 패럴리';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dyqQ12gZGwl5Y0R9UsLBDkZWOUA.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 490132;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2Xe9lISpwXKhvKiHttbFfVRERQX.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 490132;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (265177, '마미', '2014-09-19', '“엄마 우리 여전히 사랑하지?”  “우리가 제일 잘하는 게 사랑이잖아.”', '불 같은 성격이지만 유쾌하고 당당한 엄마 디안은 거칠지만 사랑스러운 사고뭉치 아들 스티브가 보호 시설에서 사고를 쳐 쫓겨나자 홈스쿨링을 시작한다. 엄마가 행복하다면 무엇이든 할 수 있는 아들 스티브와 함께 행복한 생활을 꿈꾸는 디안. 하지만 홀로 생계를 책임지며 불안정한 성격의 스티브를 돌보기란 쉽지 않다. 이때 이들 앞에 이웃집 여인 카일라가 나타난다. 카일라의 등장으로 세 사람은 유일하게 서로에게 의지하며 지금까지 느껴보지 못한 작은 행복을 찾아가게 된다. 그러던 어느 날, 디안 앞으로 한 장의 편지가 날아오는데...', 138, '15', 'RELEASED', 17.730000, 8.200000, 3494070, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 265177 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 86612, 'Anne Dorval', '/qepLsxlg2p5qai1y2bwI2zUM5iz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Anne Dorval');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Diane ''Die'' Després', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 265177 AND a.name = 'Anne Dorval';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 142689, 'Suzanne Clément', '/kNANyCoqGqiYd5meAGfCDvzkzIF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Suzanne Clément');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kyla', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 265177 AND a.name = 'Suzanne Clément';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 575662, 'Antoine Olivier Pilon', '/3E5nVYXYVe70Zdd7TRUfekpncIu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Antoine Olivier Pilon');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Steve O''Connor Després', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 265177 AND a.name = 'Antoine Olivier Pilon';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 142995, 'Patrick Huard', '/neN84KoE3s48CTkrNReYQ3z1HED.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Patrick Huard');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paul', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 265177 AND a.name = 'Patrick Huard';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 123185, 'Alexandre Goyette', '/oB99Qcalcmvbp5EtFz6xc4xqey2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alexandre Goyette');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Patrick', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 265177 AND a.name = 'Alexandre Goyette';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 143593, '자비에 돌란', '/sKvDmg9HQ6zauWo5XpsBVR8xBf4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '자비에 돌란');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 265177 AND d.name = '자비에 돌란';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8AcQTHscYw8iUQ73GYlWKDPBxt7.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 265177;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dIHezuC3AmylT8mkXQiWSjz2wJR.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 265177;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (572154, '청춘 돼지는 꿈꾸는 소녀의 꿈을 꾸지 않는다', '2019-06-15', '', '하늘과 바다가 반짝이는 마을 "후지사와"에 사는 고등학생 아즈사가와 사쿠타는 같은 학교 선배이자 연인인 사쿠라지마 마이와 설레는 일상을 보내고 있다. 하지만 어느 날 첫사랑인 마키노하라 쇼코가 등장하면서 그 일상은 완전히 뒤바뀌어 버린다. 알 수 없는 이유로 ''중학생''과 ''어른'', 두 명이 존재하는 쇼코와 부득이한 동거를 하면서 사쿠타와 마이의 관계가 삐걱거리기 시작한다. 그러던 중 ''중학생 쇼코''가 위중한 병을 앓고 있다는 것을 알고 사쿠타의 가슴 흉터는 다시 벌어지는데...', 89, '12', 'RELEASED', 32.169000, 8.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 572154 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 572154 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 572154 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 572154 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1324666, '이시카와 카이토', '/fzjIkotjUHHs3wgftM9tqdsG8ph.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이시카와 카이토');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sakuta Azusagawa (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 572154 AND a.name = '이시카와 카이토';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1254672, '세토 아사미', '/oDmxr5gprWrj6osczaWUJURq1i8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '세토 아사미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mai Sakurajima (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 572154 AND a.name = '세토 아사미';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1288294, '쿠보 유리카', '/ujXrmpArnC1ARxfe71181WVXp3F.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '쿠보 유리카');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kaede Azusagawa (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 572154 AND a.name = '쿠보 유리카';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1168909, '토야마 나오', '/fwPIbMjmdRWbjdf0F39fNxrR5xo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '토야마 나오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tomoe Koga (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 572154 AND a.name = '토야마 나오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1588597, '타네자키 아츠미', '/6tM8GU7QvrdUCvR4kxqVUZivtvO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '타네자키 아츠미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rio Futaba (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 572154 AND a.name = '타네자키 아츠미';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1145368, '마스이 소이치', '/eRCRldZdRnflFnzRJbSs6QNEmwm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '마스이 소이치');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 572154 AND d.name = '마스이 소이치';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hqNkm15rQI6049Pg3XPSE8PMW98.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 572154;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tyxqfALuq02khuKNCwmeMxrqt8T.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 572154;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (110420, '늑대아이', '2012-07-21', '내가 사랑하게 된 사람은 늑대인간이었습니다', '평범한 여대생 하나는 강의실에서 우연히 만나게 된 그에게 반하게 되고, 곧 사랑에 빠지게 된다. 하지만 그는 평범한 사람이 아닌 늑대인간이었다. 늑대인간과의 동화 같은 사랑 후에 남은 것은 두 아이뿐. 눈 내리는 날에 태어난 누이 유키, 비 내리는 날 태어난 동생 아메. 두 아이에게는 커다란 비밀이 있는데, 바로 흥분하면 귀가 쫑긋, 꼬리가 쏘옥 나오는 늑대아이라는 것. 남들과 조금 다른 육아, 남들과 살짝 다른 고민을 하며 신비로운 운명을 살아가는 남매와 특별한 두 아이를 키우는 엄마의 이야기가 시작된다.', 117, 'All', 'RELEASED', 23.894000, 8.200000, 55060661, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 110420 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 110420 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 110420 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 110420 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1054260, '쿠로키 하루', '/rTxASkiwbxohT0UVHORLmECo53Y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '쿠로키 하루');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yuki (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 110420 AND a.name = '쿠로키 하루';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 559411, '西井幸人', '/papPYfWpj7lrpS6eGSQYH1bM4Hy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '西井幸人');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ame (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 110420 AND a.name = '西井幸人';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 104522, '미야자키 아오이', '/8J2i8Da2FmqMsDqSlndEpzkPQYd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미야자키 아오이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hana (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 110420 AND a.name = '미야자키 아오이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 45999, '오오사와 타카오', '/uyPERBAMY14zntHF4iEH1sVjkOX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오오사와 타카오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wolf Man (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 110420 AND a.name = '오오사와 타카오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 225662, '大野百花', '/8Ts2UoALyqs0c5rRFzBkSNlrBmf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '大野百花');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yuki as a Child (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 110420 AND a.name = '大野百花';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 81718, '호소다 마모루', '/5QIWSzXHioDMHk2UMOqz2wbaWMr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '호소다 마모루');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 110420 AND d.name = '호소다 마모루';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2mF1IKMeB9JGstJqismy5AoamrV.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 110420;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/eNWjMbuhGxJdzaIY9ZZ2KvWx2sQ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 110420;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (504253, '너의 췌장을 먹고 싶어', '2018-09-01', '이름조차 부르지 못했던 너와 나. 2018년 가을, 다시 우리의 이야기', '어느 날, 우연히 주운 한 권의 「공병문고」를 통해 ‘나’는 학급 최고의 인기인 ‘사쿠라’의 비밀과 마주하게 된다. 비밀을 숨긴 채 살아가는 ‘사쿠라’와 그 비밀을 아는 유일한 클래스메이트 ‘나’', 109, '', 'RELEASED', 30.104000, 8.200000, 33748006, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 504253 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 504253 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 504253 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1318732, '高杉真宙', '/8SHi5gVZEukRAwzhryZmE7RPPnk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '高杉真宙');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Haruki Shiga (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 504253 AND a.name = '高杉真宙';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1691384, 'Lynn', '/kFyuszD3uS5rX4GGf1U5OM5exur.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lynn');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sakura Yamauchi (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 504253 AND a.name = 'Lynn';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1287794, '후지이 유키요', '/tLG4K1iix3QNHFexf98mrZ25jT6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '후지이 유키요');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kyoko Takimoto (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 504253 AND a.name = '후지이 유키요';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1492992, '우치다 유우마', '/k5yOai4JnkjpTVzSwIFzXxQ2LBP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '우치다 유우마');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Takahiro (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 504253 AND a.name = '우치다 유우마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 115301, '후쿠시마 준', '/gHv2Nw6LAC6OdNuC8tzmW36CHpM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '후쿠시마 준');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Issei Miyata (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 504253 AND a.name = '후쿠시마 준';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1938744, '牛嶋新一郎', '/vNrNNafv5hM1EW3CMqY32F1peV6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '牛嶋新一郎');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 504253 AND d.name = '牛嶋新一郎';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/g1ucSvfDnV3HEVt8x7YeZ0fAIs2.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 504253;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/YLyORLsYIjC0d1TFBSpJKk7piP.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 504253;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (441130, '''울프워커스'' - Wolfwalkers', '2020-10-26', '두근두근, 야생으로의 모험', '미신과 마법의 시대, 어린 사냥 견습생 로빈 굿펠로우는 최후의 늑대 무리를 제거하기 위해 아버지와 함께 아일랜드로 간다. 도시 성벽 바깥의 금지된 땅을 탐험하던 로빈은 밤이면 늑대로 변하는 능력을 지녔다고 전해지는 수수께끼 부족의 일원인 자유분방한 소녀 메브와 친구가 된다. 함께 메브의 사라진 어머니를 찾던 중, 로빈은 놀라운 비밀을 발견한다. 그 비밀로 인해 로빈의 아버지는 마법의 울프워커스 세계로 들어오게 되고, 로빈은 아버지가 없애려 하는 바로 그 존재로 변신하는 위험에 빠지게 된다.', 103, 'All', 'RELEASED', 35.142000, 8.200000, 1310720, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 441130 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 441130 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 441130 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 441130 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1363045, 'Honor Kneafsey', '/pgk3qwXCUjYReOwrGCLWm8qCbBx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Honor Kneafsey');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Robyn Goodfellowe (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 441130 AND a.name = 'Honor Kneafsey';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2770089, 'Eva Whittaker', '/hvDckVSrRCW5Rb4OpDWN17oGvR7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Eva Whittaker');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mebh Óg MacTíre (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 441130 AND a.name = 'Eva Whittaker';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 48, '숀 빈', '/kTjiABk3TJ3yI0Cto5RsvyT6V3o.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '숀 빈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Robyn''s Father, Bill Goodfellowe (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 441130 AND a.name = '숀 빈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16358, '사이먼 맥버니', '/wwN02i4RBoPHDdOKXBV5AhFALdT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사이먼 맥버니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lord Protector (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 441130 AND a.name = '사이먼 맥버니';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 107682, 'Tommy Tiernan', '/6n8jJZRfkcxTPFPELLU9n3N9Tkh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tommy Tiernan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sean Óg (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 441130 AND a.name = 'Tommy Tiernan';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 96676, 'Tomm Moore', '/gqUcu5yEtNgnCaA2jtSOs8DV1Gg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Tomm Moore');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 441130 AND d.name = 'Tomm Moore';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1782644, 'Ross Stewart', '/1O6yRqoPBqvZabLgzUK9LmzQEUN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Ross Stewart');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 441130 AND d.name = 'Ross Stewart';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/53VE3Iv9NiCOJfFMWwQuRUQMaXZ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 441130;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yeJhRNtE4XW2lOoVVFO9iuDr3AL.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 441130;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (24188, '이지 라이프', '1962-12-05', '', '쨍쨍 내리쬐는 태양 아래 텅 빈 듯한 로마의 8월 어느 휴일 아침. 창 밖을 내다보던 소심한 법대생 로베르토는 한 40대 남자의 부탁을 들어준다. 브루노라는 이 남자가 로베르토에게 전화를 쓸 수 있겠냐고 부탁하고, 로베르토는 그에게 집으로 올라와서 직접 걸어보라고 한다. 붙임성 좋고 사람을 끄는 매력을 가진 브루노는 어디로 튈지 모르는 철부지다. 로베르토의 무료하던 휴일은 브루노와 얽히며 정신없이 흘러간다.  이탈리안 코미디의 걸작으로 일컬어지는 작품으로, 1960년대 초 고도의 경제적 성장을 이어가는 한편 천박하고 이기적인 자본주의에 물들어가는 이탈리아 사회에 대한 통렬한 풍자적 묘사가 돋보인다.', 105, '', 'RELEASED', 11.199000, 8.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 24188 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 24188 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12259, 'Vittorio Gassman', '/eIcPpL8OlAMlIr9ZMvFTY7ni7LX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Vittorio Gassman');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruno Cortona', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 24188 AND a.name = 'Vittorio Gassman';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1352, '장루이 트랭티냥', '/xZjgsgOGVo8sub6tf0CxclwJ9wR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '장루이 트랭티냥');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Roberto Mariani', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 24188 AND a.name = '장루이 트랭티냥';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 70119, 'Catherine Spaak', '/5WILB2hN0BUCz4HgmoLu7OVq2Hn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Catherine Spaak');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lilli Cortona', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 24188 AND a.name = 'Catherine Spaak';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 32677, 'Claudio Gora', '/e7L9EMVnOxpaW7zTpWfcl86e0BK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Claudio Gora');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Danilo Borelli ''Bibi''', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 24188 AND a.name = 'Claudio Gora';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 128245, 'Luciana Angiolillo', '/8QQAQORpPaAWmV730yeRqcwVDaR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Luciana Angiolillo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gianna Cortona', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 24188 AND a.name = 'Luciana Angiolillo';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 57641, 'Dino Risi', '/rD3rSFa6gvjIJpXa8MQo8fHYFpS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Dino Risi');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 24188 AND d.name = 'Dino Risi';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9vumJKydNxcFtcFNYPIvFeHXVBQ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 24188;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uUrV5KSjnZx47Dq7e6STr73iN4N.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 24188;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (618344, '저스티스 리그 다크: 아포콜립스 워', '2020-05-05', '', '''다크 사이드''가 지구 근처에 접근하고 있는 중임을 알게 된 ''저스티스 리그''는 ’슈퍼맨''이 지구를 공격하기 전에 먼저 선제공격을 주장하고. 이미 우주에 있는 ''슈퍼맨''을 비롯한 ''콘스탄틴'', ''배트맨''등이 공격. 이후 지구에 남은 ''틴타이탄즈''를 비롯한 멤버들이 대응하기로 했으나, ''사이보그''를 해킹하여 먼저 공격할 것을 알게 된 ''다크 사이드''가 ''저스티스 리그''가  오길 기다렸다가 먼저 선방을 날리게 되고. 이로 인해 ''저스티스 리그'' 뿐만 아니라 지구까지 ''다크 사이드''와 ’파라데몬''에게 떼몰살 당하는데...', 90, '', 'RELEASED', 22.726000, 8.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 618344 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 618344 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 618344 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 127712, 'Matt Ryan', '/qLx6rzn6MMcJtTals5Z7Mb6z4Y9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Matt Ryan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'John Constantine (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 618344 AND a.name = 'Matt Ryan';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3035, '제리 오코널', '/p2zcFeDIKUrPrbT5ODqoLifdN3Q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제리 오코널');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Clark Kent / Superman (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 618344 AND a.name = '제리 오코널';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 527313, '타이사 파미가', '/kC2Movbs6uEF8DdDhvyHizQHuru.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '타이사 파미가');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rachel Roth / Raven (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 618344 AND a.name = '타이사 파미가';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 183812, 'Jason O''Mara', '/hYylPvwMALoQU09r7tvCU24thh0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jason O''Mara');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruce Wayne / Batman (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 618344 AND a.name = 'Jason O''Mara';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5916, '로사리오 도슨', '/iBSoM4Fw6ACNFMwG2NkBtTzrWAa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로사리오 도슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Diana Prince / Wonder Woman (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 618344 AND a.name = '로사리오 도슨';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1637776, 'Matt Peters', '/twz7t4EyHuC3aTwQPedQI7ZBQXs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Matt Peters');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 618344 AND d.name = 'Matt Peters';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2579481, 'Christina Sotta', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Christina Sotta');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 618344 AND d.name = 'Christina Sotta';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/c01Y4suApJ1Wic2xLmaq1QYcfoZ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 618344;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sQkRiQo3nLrQYMXZodDjNUJKHZV.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 618344;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (315162, '장화신은 고양이: 끝내주는 모험', '2022-11-26', '당신의 소원을 이루어 줄 2023년 새해 첫 어드벤처', '아홉 개의 목숨 중 단 하나의 목숨만 남은 장화신은 고양이.  마지막 남은 목숨을 지키기 위해 히어로의 삶 대신 반려묘의 삶을 선택한 그에게 찾아온 마지막 기회, 바로 소원을 들어주는 소원별이 있는 곳을 알려주는 지도!  잃어버린 목숨을 되찾고 다시 히어로가 되기를 꿈꾸는 장화신은 고양이는 뜻밖에 동료가 된 앙숙 파트너 ''키티 말랑손'', 그저 친구들과 함께라면 모든 게 행복한 강아지 ''페로''와 함께 소원별을 찾기 위해 길을 떠난다.  그리고 소원별을 노리는 또 다른 빌런들과 마주치게 되는데…', 103, 'All', 'RELEASED', 175.650000, 8.221000, 484700000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 315162 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 315162 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 315162 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 315162 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 315162 AND g.name = '가족';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3131, '안토니오 반데라스', '/fce7zl6elUzsv7wudHFc7RgFtjD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '안토니오 반데라스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Puss in Boots (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 315162 AND a.name = '안토니오 반데라스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3136, '셀마 헤이엑', '/1qfYF7NGRObmeKR7IVXUFVIC0CN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '셀마 헤이엑');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kitty Softpaws (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 315162 AND a.name = '셀마 헤이엑';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 210172, '하비 길렌', '/yiNBonobPwqMVweB02JWufzp2l9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하비 길렌');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Perrito (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 315162 AND a.name = '하비 길렌';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 52583, '바그네르 모라', '/6gcfwvOueJKhDpTP9KLGuWz0Hk4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '바그네르 모라');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wolf (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 315162 AND a.name = '바그네르 모라';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1373737, '플로렌스 퓨', '/6Sjz9teWjrMY9lF2o9FCo4XmoRh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '플로렌스 퓨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Goldilocks (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 315162 AND a.name = '플로렌스 퓨';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1450348, 'Joel Crawford', '/3F60mZB4sGgB51jAIglwn6OrUgB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Joel Crawford');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 315162 AND d.name = 'Joel Crawford';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rKgvctIuPXyuqOzCQ16VGdnHxKx.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 315162;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jr8tSoJGj33XLgFBy6lmZhpGQNu.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 315162;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (16869, '바스터즈: 거친 녀석들', '2009-08-02', '가장 쿨한 녀석들의 통쾌한 복수', '2차 세계 대전, 나치의 잔인하고 폭력적인 행태에 분개한 미군 알도 레인 중위는 당한 만큼 돌려준다는 강렬한 신념으로 최고의 재능을 가진 8명의 대원을 모아 바스터즈란 군단을 만들어 나치가 점령한 프랑스에 잠입해 복수를 시작한다. 어느 날 알도 레인 중위는 독일의 여배우이자 영국의 더블 스파이인 브리짓에게 뜻밖의 소식을 듣는다. 나치 수뇌부가 모두 참석하는 독일 전쟁 영화의 프리미어에 히틀러도 참석을 한다는 것. 한 번에 나치를 모두 쓸어버릴 계획으로 바스터즈는 이탈리아 영화 관계자로 분장해 극장으로 향하는데...', 152, '18', 'RELEASED', 83.877000, 8.200000, 321457747, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 16869 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 16869 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 16869 AND g.name = '전쟁';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 287, '브래드 피트', '/9OfnD7lxgIj3BNQpJFnwxnwl6w5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브래드 피트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'LT. Aldo Raine', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 16869 AND a.name = '브래드 피트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19119, '멜라니 로랑', '/pKV3XJ6mlzfj0B0MGS8uMcMI9cl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '멜라니 로랑');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shosanna', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 16869 AND a.name = '멜라니 로랑';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 27319, '크리스토프 발츠', '/jMvLGCVXLaBqjRLf5olyvEucZob.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스토프 발츠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'COL. Hans Landa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 16869 AND a.name = '크리스토프 발츠';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16847, '일라이 로스', '/qQTkpxzh1FlBGL1HD5hzdUMxv49.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '일라이 로스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'SGT. Donny Donowitz', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 16869 AND a.name = '일라이 로스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 17288, '마이클 패스벤더', '/xvbnUiB2ZBR3QIt595OzNy657Vw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 패스벤더');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'LT. Archie Hicox', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 16869 AND a.name = '마이클 패스벤더';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 138, '쿠엔틴 타란티노', '/1gjcpAa99FAOWGnrUvHEXXsRs7o.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '쿠엔틴 타란티노');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 16869 AND d.name = '쿠엔틴 타란티노';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rl8DDqnafx5kRnw50uwlLGzr7Qt.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 16869;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1Jpkm9qZcsT0mSyVXgs4VlGjPNI.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 16869;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (603, '매트릭스', '1999-03-31', '서기 2199년, 인공지능 AI에 의해 인류가 재배되고 있다', '인간의 기억마저 AI에 의해 입력되고 삭제되는 세상, 진짜보다 더 진짜 같은 가상 현실 매트릭스. 그 속에서 진정한 현실을 인식할 수 없게 재배되는 인간들. 그 매트릭스를 빠져 나오면서 AI에게 가장 위험한 인물이 된 모피어스는 몇 안 되는 동료들과 함께 기계와의 전쟁 전후의의 폐허를 떠돌며 인류를 구할 마지막 영웅을 찾아 헤맨다. 마침내 모피어스는 낮에는 평범한 회사원 앤더슨으로, 밤에는 해커로 활동하는 청년 네오를 그로 지목한다. 모피어스의 지시대로 그를 만나게 된 네오는 두개의 알약 중 하나를 고르는 선택을 하게 되는데...', 136, '12', 'RELEASED', 108.294000, 8.218000, 463517383, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 603 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 603 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6384, '키아누 리브스', '/4D0PpNI0kmP58hgrwGC3wCjxhnm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키아누 리브스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Neo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 603 AND a.name = '키아누 리브스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2975, '로렌스 피시번', '/aBRISux1AGCqkFNTKHYfLcJunWA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로렌스 피시번');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Morpheus', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 603 AND a.name = '로렌스 피시번';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 530, '캐리 앤 모스', '/xD4jTA3KmVp5Rq3aHcymL9DUGjD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '캐리 앤 모스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Trinity', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 603 AND a.name = '캐리 앤 모스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1331, '휴고 위빙', '/t4ScpYIHlXVD41scEyiGdQDYflX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '휴고 위빙');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agent Smith', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 603 AND a.name = '휴고 위빙';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 9364, 'Gloria Foster', '/AriGXtC9fjBOia9Zr8CZjn4o3rx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gloria Foster');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Oracle', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 603 AND a.name = 'Gloria Foster';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 9340, '라나 워쇼스키', '/5KNV7YBSPTBUAIXGfIcPmbhho9w.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '라나 워쇼스키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 603 AND d.name = '라나 워쇼스키';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 9339, '릴리 워쇼스키', '/rCScAjSpeKA19BLNR07MqNNeeTT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '릴리 워쇼스키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 603 AND d.name = '릴리 워쇼스키';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yI9r0iz2XvlevxUzxvdoQmv3yce.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 603;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/lrtSb1skJayPydZk0OSMAKjBOVe.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 603;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (290098, '아가씨', '2016-06-01', '가짜한테 마음을 빼앗겼다', '어릴 적 부모를 잃고 후견인 이모부의 보호 아래 살아가는 귀족 아가씨에게 백작이 추천한 새로운 하녀가 찾아온다. 이모부의 서재에서 책을 읽는 것이 일상의 전부인 아가씨는  순박해 보이는 하녀에게 조금씩 의지하기 시작한다. 하지만 하녀의 정체는 유명한 여도둑의 딸인 소매치기 고아 소녀 숙희. 막대한 재산을 상속받게 될 아가씨를 유혹하여 돈을 가로채겠다는 사기꾼 백작의 제안을 받고  아가씨가 백작을 사랑하게 만들기 위해 하녀가 된 것. 드디어 백작이 등장하고, 백작과 숙희는 자신만의 방식으로 아가씨의 마음을 흔들기 시작하는데...', 144, '', 'RELEASED', 61.242000, 8.217000, 38600000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 290098 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 290098 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 290098 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 123664, '김민희', '/zZ41nW0GJqesHB75hFP6qllPS9y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김민희');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lady Hideko', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 290098 AND a.name = '김민희';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1537768, '김태리', '/gFofVUeVlIvBJMUv7maHQwWdfsk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김태리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sook-hee', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 290098 AND a.name = '김태리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 75913, '하정우', '/alHcDyLYbc6C2X9yOHw8mNHZVGu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하정우');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Count Fujiwara', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 290098 AND a.name = '하정우';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 138336, '조진웅', '/r3o7eKsqVCQu0ppIY88d16VLCsj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조진웅');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Uncle Kouzuki', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 290098 AND a.name = '조진웅';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 93252, '김해숙', '/dt5bmKeG7qbvDwHrxFZFxiGc9fZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김해숙');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ms. Sasaki', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 290098 AND a.name = '김해숙';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 10099, '박찬욱', '/jsSFCVB7MhuVbSLwTgESiXEiNjt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '박찬욱');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 290098 AND d.name = '박찬욱';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kRrNGYnnJqyMjJJgCPuuQKSKMqn.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 290098;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jlMic05JZQQY7t7DhXoYKaRHh2b.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 290098;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (857, '라이언 일병 구하기', '1998-07-24', '임무는 단 한 사람', '1944년 6월 6일 노르망디 상륙 작전. 오마하 해변에 대기하고 있던 병사들은 한치 앞도 내다볼 수 없는 긴장된 상황에 두려움을 감출 수 없다. 노르망디 해변을 응시하는 밀러 대위와 가장 어려운 임무를 수행해야할 두려움에 지친 그의 대원들. 몇 번의 죽을 고비를 넘기고 맡은 바 임무를 완수하지만 3형제가 전사하고 적진에서 실종된 유일한 생존자인 막내 라이언 일병을 위한 미 행정부의 특별한 임무를 맡게 된다.단 한명의 목숨을 구하기 위해 여덟 명이 위험을 감수해야할 상황에서 대원들은 과연 라이언 일병 한 명의 생명이 그들 여덟 명의 생명보다 더 가치가 있는 것인지 끊임없는 혼란에 빠지는데...', 169, '15', 'RELEASED', 67.609000, 8.216000, 481840909, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 857 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 857 AND g.name = '역사';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 857 AND g.name = '전쟁';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 31, '톰 행크스', '/eKF1sGJRrZJbfBG1KirPt1cfNd3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 행크스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Captain Miller', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 857 AND a.name = '톰 행크스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3197, '톰 시즈모어', '/cXikL7I0e2geGVvcM2RT8gQq3Nb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 시즈모어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sergeant Horvath', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 857 AND a.name = '톰 시즈모어';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12833, 'Edward Burns', '/pTLdPUSxDUcdmvy91LGCF3pk0AM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Edward Burns');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Private Reiben', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 857 AND a.name = 'Edward Burns';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12834, 'Barry Pepper', '/pmdNUqrpsoozh7QYqUgEgZQ69cA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Barry Pepper');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Private Jackson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 857 AND a.name = 'Barry Pepper';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6163, 'Adam Goldberg', '/xEbqDqTWlSSCi4v8FI3S9YSEPJz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Adam Goldberg');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Private Mellish', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 857 AND a.name = 'Adam Goldberg';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 488, '스티븐 스필버그', '/tZxcg19YQ3e8fJ0pOs7hjlnmmr6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '스티븐 스필버그');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 857 AND d.name = '스티븐 스필버그';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2ATMbU4EljWkWcEJT9TElbQOMYY.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 857;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rW2xRFlJRbTnBJlQTSjQmjevIwb.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 857;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (98, '글래디에이터', '2000-05-04', '느낄수 있는가, 이 거대한 스펙터클의 전율을', '죽을 날이 머지않은 황제 마르쿠스 아우렐리우스는 막시무스를 총애하여 아들이 아닌 그에게 권력을 넘겨주기로 한다. 황제의 아들 코모두스는 이에 질투와 분노를 느껴 황제를 살해한다. 왕좌를 이어받은 코모두스는 막시무스와 그의 가족을 죽이라고 명령한다. 가족을 모두 잃고 겨우 살아남은 막시무스는 노예로 전락하고, 투기장의 검투사가 된다. 그에게 남은 건 오직 황제 코모두스에 대한 복수 뿐. 검투사로서 매 경기마다 승리로 이끌면서 살아남자 그의 명성은 날로 높아 간다. 그러던 어느 날 오래 전 사랑했던 황제의 누이 루실라를 다시 만나게 되는데...', 154, '15', 'RELEASED', 300.480000, 8.216000, 465361176, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 98 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 98 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 98 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 934, '러셀 크로우', '/rsxGCRtPu42uKDJZlz7qknvz8h6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '러셀 크로우');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maximus', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 98 AND a.name = '러셀 크로우';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 73421, '호아킨 피닉스', '/u38k3hQBDwNX0VA22aQceDp9Iyv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '호아킨 피닉스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Commodus', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 98 AND a.name = '호아킨 피닉스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 935, '코니 닐센', '/lvQypTfeH2Gn2PTbzq6XkT2PLmn.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '코니 닐센');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lucilla', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 98 AND a.name = '코니 닐센';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 936, 'Oliver Reed', '/dWfotc1X71wNCGyPO9hXpv8U9Gw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Oliver Reed');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Proximo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 98 AND a.name = 'Oliver Reed';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 194, '리처드 해리스', '/lCvcVMuxrg1f5A8OMqY9AqkkcZR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리처드 해리스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marcus Aurelius', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 98 AND a.name = '리처드 해리스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 578, '리들리 스콧', '/zABJmN9opmqD4orWl3KSdCaSo7Q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '리들리 스콧');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 98 AND d.name = '리들리 스콧';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yemF0xxGU56Pf3JXxVr4C6kuKng.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 98;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vlAVk0rdG6oyZ8by6bkE9rFVACf.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 98;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (694, '샤이닝', '1980-05-23', '당신을 해치지 않아, 그냥 머리통을 부숴버리기만 할 거야', '소설가인 잭 토랜스는 콜로라도 산맥에 있는 오버룩 호텔의 관리인으로 취직한다. 다음 시즌 준비를 하는 이곳은 겨울 동안 폐쇄되기 때문에 토랜스의 가족들만 호텔에 머물게 된다. 갑자기 몰아친 폭설로 잭과 아내 웬디와 아들과 함께 호텔에 고립되고, 투시와 텔레파시 능력이 있는 잭의 아들 대니는 호텔에 유령이 있으며 유령들이 천천히 아버지를 미치게 하고 있음을 알게 된다. 잭은 과거에 스스로 자신의 아내와 두 딸을 죽인 이곳의 예전 관리인 그레이디의 유령을 만난다. 과거에 있었던 살인사건의 악령에 휘말린 잭은 호텔을 공포의 도가니로 몰아가는데...', 144, '18', 'RELEASED', 80.620000, 8.215000, 44781695, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 694 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 694 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 514, '잭 니콜슨', '/6h12pZsgj3WWjMtykUgfLkLEBWz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '잭 니콜슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jack Torrance', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 694 AND a.name = '잭 니콜슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10409, '셜리 듀발', '/6lG3fmyhXatvyAG4X9WxwMWoPUS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '셜리 듀발');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wendy Torrance', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 694 AND a.name = '셜리 듀발';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10410, '대니 로이드', '/5pEmugZ6m25RB0cXbL4t5D4kZAO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '대니 로이드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Danny', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 694 AND a.name = '대니 로이드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7077, '스캣맨 크로더스', '/jf2ooubjE5tjBJwDI9Nla0M57m2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스캣맨 크로더스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hallorann', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 694 AND a.name = '스캣맨 크로더스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10411, '베리 넬슨', '/fSrHmvOxZJbeKpNM0uWGvha1aK9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '베리 넬슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ullman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 694 AND a.name = '베리 넬슨';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 240, '스탠리 큐브릭', '/yFT0VyIelI9aegZrsAwOG5iVP4v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '스탠리 큐브릭');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 694 AND d.name = '스탠리 큐브릭';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/e3pxD5asVzFMcH3UvmGxolZ7wS.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 694;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mmd1HnuvAzFc4iuVJcnBrhDNEKr.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 694;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (635302, '극장판 귀멸의 칼날: 무한열차편', '2020-10-16', '그 칼로 악몽을 끊어라', '혈귀로 변해버린 여동생 네즈코를 인간으로 되돌릴 단서를 찾아 비밀조직 귀살대에 들어간 탄지로. 젠이츠, 이노스케와 새로운 임무 수행을 위해 무한열차에 탑승 후 귀살대 최강 검사 염주 렌고쿠와 합류한다. 달리는 무한열차에서 승객들이 하나 둘 흔적 없이 사라지자 숨어있는 식인 혈귀의 존재를 직감하는 렌고쿠. 귀살대 탄지로 일행과 최강 검사 염주 렌고쿠는 어둠 속을 달리는 무한열차에서 모두의 목숨을 구하기 위해 예측불가능한 능력을 가진 혈귀와 목숨을 건 혈전을 시작하는데...', 117, '15', 'RELEASED', 86.010000, 8.214000, 507119058, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 635302 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 635302 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 635302 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 635302 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1256603, '하나에 나츠키', '/A1lGrpBEdAUxZA7RoAw4Zr4ved3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하나에 나츠키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tanjiro Kamado (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 635302 AND a.name = '하나에 나츠키';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1563442, '키토 아카리', '/43SgANYtj7vpsHmz68hgPDlxC15.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키토 아카리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nezuko Kamado (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 635302 AND a.name = '키토 아카리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 119145, '시모노 히로', '/i5CaaqKmHH0vKCloqZyrCwn5mWy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시모노 히로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zenitsu Agatsuma (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 635302 AND a.name = '시모노 히로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 233590, '마츠오카 요시츠구', '/ugDwdWEXnmv43jcbnfAi4XwiQ8C.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마츠오카 요시츠구');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Inosuke Hashibira (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 635302 AND a.name = '마츠오카 요시츠구';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 224413, '히노 사토시', '/8ZJIiwIVF2zDyyFr7oXewj0eEuu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '히노 사토시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kyojuro Rengoku (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 635302 AND a.name = '히노 사토시';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1283010, '外崎春雄', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '外崎春雄');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 635302 AND d.name = '外崎春雄';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mxdVTei65ymzhJlalIEtR1qSgV2.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 635302;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qjGrUmKW78MCFG8PTLDBp67S27p.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 635302;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (50014, '헬프', '2011-08-09', '', '1963년, 미국 남부 미시시피 잭슨  흑인 가정부는 백인 주인과 화장실도 같이 쓸 수 없다?!  아무도 가정부의 삶에 대해 묻지 않았다. 그녀가 책을 쓰기 전까지는…  돈 많은 남자와 결혼해 정원과 가정부가 딸린 집의 안주인이 되는 게 최고의 삶이라 여기는 친구들과 달리 대학 졸업 후 작가의 꿈을 이루기 위해 지역 신문사에 취직한 ‘스키터(엠마 스톤)’. 살림 정보 칼럼의 대필을 맡게 된 그녀는 베테랑 가정부 ‘에이빌린(바이올라 데이비스)’에게 도움을 요청한다.  다른 인생은 꿈꿔보지도 못한 채 가정부가 되어 17명의 백인 아이를 헌신적으로 돌봤지만 정작 자신의 아들은 사고로 잃은 ‘에이빌린’. ‘스키터’에게 살림 노하우를 알려주던 그녀는 어느 누구도 관심 갖지 않았던 자신과 흑인 가정부들의 인생을 책으로 써보자는 위험한 제안을 받는다.  때 마침 주인집의 화장실을 썼다는 황당한 이유로 쫓겨난 가정부 ‘미니(옥타비아 스펜서)’가 두 여자의 아슬아슬하지만 유쾌한 반란에 합류한다. 차별과 불만을 이야기 하는 것조차 불법이 되고 생명을 위협받는 일이 되는 시대에, 태어나 처음으로 누군가에게 자신들의 이야기를 털어 놓기 시작하는 ‘에이빌린’과 ‘미니’. 그녀들의 용기 있는 고백은 세상을 발칵 뒤집을 만한 책을 탄생시키는데…', 146, 'All', 'RELEASED', 100.088000, 8.213000, 216600000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 50014 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 54693, '엠마 스톤', '/3UaYw9KF4fEXRMRWhf25aGJpAW2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '엠마 스톤');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Skeeter Phelan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 50014 AND a.name = '엠마 스톤';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19492, '비올라 데이비스', '/y6Qq5FP3AlnDDQ5s0cOhOnNFrPh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '비올라 데이비스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Aibileen Clark', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 50014 AND a.name = '비올라 데이비스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 18997, '브라이스 댈러스 하워드', '/qQX1rhQaJ1G8eMG2RknFKiXfNRc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브라이스 댈러스 하워드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hilly Holbrook', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 50014 AND a.name = '브라이스 댈러스 하워드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6944, '옥타비아 스펜서', '/35SOy4yQZ9xRSJ0q1L5RLhXfhqN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '옥타비아 스펜서');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Minny Jackson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 50014 AND a.name = '옥타비아 스펜서';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 83002, '제시카 차스테인', '/xRvRzxiiHhgUErl0yf9w8WariRE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제시카 차스테인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Celia Foote', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 50014 AND a.name = '제시카 차스테인';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 55789, '테이트 테일러', '/iupMPA0UwdFAO66fjlsHF1iZlT5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '테이트 테일러');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 50014 AND d.name = '테이트 테일러';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qMVZtwZIU9oussRb8al2Gb0YPQL.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 50014;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wyvUmyzqGOBDyqLHRSukGDjI7bH.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 50014;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (37257, '검찰 측 증인', '1957-12-17', '', '남편 레너드를 사랑하는 부인 크리스틴은 살인죄로 구속되자 검사측 증인이 되어 남편 레너드의 범죄를 증언한다. 그 때 정체불명의 여인이 나타나법정에 크리스틴 필적의 편지를 공개해 크리스틴은 위증죄로 걸리게 되고 남편은 석방된다. 하지만 이것은 남편을 구하기 위해 크리스틴이 꾸민 계략이다. 그렇지만 석방된 남편은 애인 다이애너와 달아나 버린다.  세계적인 추리소설가 애거서 크리스티의 <검찰 측 증인>을 각색하여, 인간의 추잡한 욕망을 지능적이고 긴장감 넘치는 법정 스릴러로 밀도 있게 그려낸 걸작이다. 배우들의 탄탄한 연기력이 돋보이지만, 단연 1930~40년대 섹스 심벌로 유명했던 마를렌 디트리히의 악녀 연기가 압권이다.', 116, '', 'RELEASED', 40.356000, 8.200000, 9000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 37257 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 37257 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 37257 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10922, '타이론 파워', '/zHKNyYKkWIQBwhqxCMNBns1eoXR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '타이론 파워');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Leonard Vole', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 37257 AND a.name = '타이론 파워';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2896, '마를레네 디트리히', '/9AxXKUr9CLfy5Lcg3JaNRbWD6Be.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마를레네 디트리히');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Christine', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 37257 AND a.name = '마를레네 디트리히';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10921, 'Charles Laughton', '/lhk6flmWDZMOLwq8VILMD6jH71F.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Charles Laughton');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sir Wilfrid', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 37257 AND a.name = 'Charles Laughton';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2926, 'Elsa Lanchester', '/sG1otCRGe2gHrMzkv5HE68a9KJH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Elsa Lanchester');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miss Plimsoll', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 37257 AND a.name = 'Elsa Lanchester';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5182, 'John Williams', '/gsg1KjcGnZK76LGIYm8lMpSM1Oq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'John Williams');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brogan-Moore', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 37257 AND a.name = 'John Williams';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 3146, '빌리 와일더', '/tfVte6h2dlLn59Q0Mi6AvWAyRLP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '빌리 와일더');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 37257 AND d.name = '빌리 와일더';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9JdugjNWy0Qet7G29yXXX72cp7c.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 37257;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ppKDBRK4TMHxjLPRGx3MQEtJWC0.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 37257;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (354912, '코코', '2017-10-27', '죽은 자들의 세상은 더욱 화려하다', '미구엘은 멕시코의 자랑인 에르네스토 델라 크루즈 같은 뮤지션이 되길 꿈꾸지만 미구엘 집안 사람들에게 음악은 금기다. 먼 옛날 조상 중에 음악 때문에 가족을 버린 인물이 있었기 때문. 미구엘은 죽은 자의 날이 되자 실력으로 인정받겠다는 결심을 하고 경연 무대에 오르려 하는데, 우연히 에르네스토의 기타에 손을 댔다가 죽은 자들의 세상에 들어서게 된다. 이승과 저승을 이어주는 마리골드 꽃길을 건너 죽은 자들의 세상에 도착한 미구엘은 거짓말과 위변조가 장기인 헥터를 만난다. 그리고 꿈에 그리던 우상 에르네스토를 만나러 가는 여정에서 가족의 비밀을 알게 된다.', 105, 'All', 'RELEASED', 263.230000, 8.209000, 807816196, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 354912 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 354912 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 354912 AND g.name = '음악';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 354912 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1193391, 'Anthony Gonzalez', '/WF7bn6t0LkxwBWyDMWvomVujn7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Anthony Gonzalez');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miguel Rivera (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 354912 AND a.name = 'Anthony Gonzalez';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 258, '가엘 가르시아 베르날', '/7mq3EQN1oJfYNXkv9xKXKu6Ccw5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '가엘 가르시아 베르날');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Héctor (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 354912 AND a.name = '가엘 가르시아 베르날';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4589, '벤저민 브랫', '/hBenHPT4iJEG2kt5z2TOGnkRZwh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '벤저민 브랫');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ernesto de la Cruz (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 354912 AND a.name = '벤저민 브랫';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10402, 'Alanna Ubach', '/ffyBAEoW3bDgVJQV3GaHsZ9x29W.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alanna Ubach');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mamá Imelda Rivera (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 354912 AND a.name = 'Alanna Ubach';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 154004, 'Renee Victor', '/wAVDqwFhQsRQgO6VIYq6T9Wbbx8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Renee Victor');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elena Rivera (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 354912 AND a.name = 'Renee Victor';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 8, '리 언크리치', '/crb297utC6W4HSstOe5djDPTwEN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '리 언크리치');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 354912 AND d.name = '리 언크리치';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pQu93NuwR90AaCULzglVD5Ge4Ml.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 354912;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/askg3SMvhqEl4OL52YuvdtY40Yb.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 354912;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (654299, 'Como caído del cielo', '2019-12-24', '', '', 112, '', 'RELEASED', 24.008000, 8.206000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 654299 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 654299 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 654299 AND g.name = '음악';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1134885, 'Omar Chaparro', '/fAIDrbtyHBcDDbRdRZ3bvNesKU7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Omar Chaparro');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 654299 AND a.name = 'Omar Chaparro';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7351, 'Ana Claudia Talancón', '/es8No01z8G0MFX2KeiAa2ouRfCD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ana Claudia Talancón');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 654299 AND a.name = 'Ana Claudia Talancón';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1255083, 'Stephanie Cayo', '/q1biqcKvbpU4tEvMcbVNaoO9ABM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Stephanie Cayo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 654299 AND a.name = 'Stephanie Cayo';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1314375, 'Lupita Sandoval', '/uRd0v4lwTogDrq7HuS5KqNEnSIS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lupita Sandoval');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 654299 AND a.name = 'Lupita Sandoval';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2492975, 'Yare Santana', '/9E6uEr23wEU3Ww2GbKk9Mu5Rnhf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Yare Santana');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jenny Infante', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 654299 AND a.name = 'Yare Santana';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1118818, 'Pepe Bojórquez', '/hTQfailJNpE6tJ7KQhnRx3M6Za7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Pepe Bojórquez');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 654299 AND d.name = 'Pepe Bojórquez';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xg6QZdlHrq2dtSK8cfnQQMnmpeY.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 654299;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/o33acwn7KliNpJRbjy4FrMSpiQ9.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 654299;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (16672, '모래의 여자', '1964-02-15', '', '곤충 연구가인 한 교사가 표본 수집을 하기 위해 모래 지대를 돌아다니다, 지역 주민의 소개로 어느 여인이 혼자 사는 집에서 묵게 된다. 다음날 이 집을 떠나려 하던 그는 땅위로 올라갈 사다리가 없어진 것으로 보고 놀란다. 1964년 칸 영화제 수상작으로 인간의 실존적 조건을 예리하게 묘사한 작품이다. 아베 고보의 소설을 영화화 하였다.', 147, '', 'RELEASED', 15.593000, 8.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 16672 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 16672 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 25466, '岡田英次', '/mQb4kOYl1WlISWZOStAhm13DHdQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '岡田英次');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Entomologist Niki Jumpei', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 16672 AND a.name = '岡田英次';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 94188, '키시다 쿄코', '/hU0aRr1uUmOPuibSz8rveO3lOfs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '키시다 쿄코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Woman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 16672 AND a.name = '키시다 쿄코';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 555339, '伊藤弘子', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '伊藤弘子');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Entomologist''s Wife', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 16672 AND a.name = '伊藤弘子';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 96804, '三井弘次', '/nahTXDNpFHNfKMraAHNDYiLXBM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '三井弘次');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Village Elder', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 16672 AND a.name = '三井弘次';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 96801, '勅使河原宏', '/bMg5nblcbQPY48P1nURbXsyHvfO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '勅使河原宏');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 16672 AND d.name = '勅使河原宏';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wnyTg9ZJaKXAwQPFIohjdzr8FTA.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 16672;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oOM2JzhVBjWyZFHW2iBQQ8A3znY.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 16672;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (11, '스타워즈 에피소드 4: 새로운 희망', '1977-05-25', '아주 오래 전 멀고 먼 은하계에서...', '공화국이 붕괴하고 제국이 수립된 뒤 20년, 제다이 기사단은 전멸하고 강력한 제국군의 횡포에 은하계는 공포에 휩싸여 있다. 그러던 중 공화국 재건을 노리는 반란군이 제국군의 비밀병기 데스스타 설계도를 훔쳐 달아나고 제국군은 이를 쫓는다. 하지만 결국 제국의 손에 붙잡히게 된 그들은 드로이드 R2-D2에 설계도를 넣어서 R2의 친구 C-3PO와 탈출시키는 데 성공하고, 두 드로이드 콤비는 타투인의 시골 마을에서 숙부와 함께 살고 있던 청년 루크 스카이워커에게 오게 되는데...', 121, '', 'RELEASED', 88.717000, 8.204000, 775398007, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2, '마크 해밀', '/2ZulC2Ccq1yv3pemusks6Zlfy2s.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마크 해밀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Luke Skywalker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11 AND a.name = '마크 해밀';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3, '해리슨 포드', '/n4dwIg6NbQzeMaS1yEKKlfNJH7a.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '해리슨 포드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Han Solo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11 AND a.name = '해리슨 포드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4, '캐리 피셔', '/2vmMjXMFW9ebX9VNKPW7WD6HLOR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '캐리 피셔');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Princess Leia Organa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11 AND a.name = '캐리 피셔';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5, '피터 커싱', '/if5g03wn6uvHx7F6FxXHLebKc0q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '피터 커싱');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Grand Moff Tarkin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11 AND a.name = '피터 커싱';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12248, '앨릭 기니스', '/gplGgl6XERpvYdluiwY8GlxSdpi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앨릭 기니스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Obi-Wan "Ben" Kenobi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11 AND a.name = '앨릭 기니스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1, '조지 루카스', '/WCSZzWdtPmdRxH9LUCVi2JPCSJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조지 루카스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 11 AND d.name = '조지 루카스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7XFfURIFCJxN1mfBg0SAjk5yGzg.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 11;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zqkmTXzjkAgXmEWLRsY4UpTWCeo.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 11;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (476292, '이별의 아침에 약속의 꽃을 장식하자', '2018-02-24', '외톨이와 외톨이가 만났다!', '10대 중반에 외모의 성장이 멈추고 수백년을 사는 장수 민족 이올프는 인간이 사는 마을에서 멀리 떨어져 조용히 살고 있었다.  하지만 그들의 온화한 일상은 장수의 피를 요구하는 메자테 군에 의해 파괴된다. 모든 것을 잃고 외톨이가 된 이올프의 소녀 마키아는 숲을 방황하던 중 부모를 잃은 아기를 운명적으로 만나 그를 키워 나가기로 결심한다.', 115, '12', 'RELEASED', 27.980000, 8.200000, 4345395, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 476292 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 476292 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 476292 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 476292 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1835721, '이와미 마나카', '/leKMaCBswXG8u4mfQNQ7J3y6Xow.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이와미 마나카');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maquia (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 476292 AND a.name = '이와미 마나카';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19588, '이리노 미유', '/8qEEhHUObNvGQr4e6eqLu5z4qTz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이리노 미유');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ariel (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 476292 AND a.name = '이리노 미유';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4080133, '櫻井優輝', '/k6cWl6lltnCOd0kqIOSX8rDJLcW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '櫻井優輝');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ariel as a Child (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 476292 AND a.name = '櫻井優輝';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1254671, '카야노 아이', '/l8ywp387rfdAS7mOExe3cEZnsk0.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카야노 아이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Leilia (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 476292 AND a.name = '카야노 아이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 149894, '카지 유우키', '/8wKdPV11IwowfwoqGqMMNt9hmp6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '카지 유우키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Krim (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 476292 AND a.name = '카지 유우키';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1257117, '오카다 마리', '/mfq0VCH3tWJGOUGk1ivtyBH1wz3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '오카다 마리');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 476292 AND d.name = '오카다 마리';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/x4lFC7knq631uFzGsOiu4xZ9ZYQ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 476292;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5nkKy7eEDsXqsxFLJy3GxZhE90J.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 476292;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (11324, '셔터 아일랜드', '2010-02-14', '탈출 불가능의 섬, 누군가 사라졌다', '보스턴 셔터아일랜드의 정신병원은 중범죄를 저지른 정신병자를 격리하는 병동으로 탈출 자체가 불가능하다. 하지만 자식 셋을 죽인 혐의를 받고 있는 여인이 이상한 쪽지만을 남긴 채 감쪽같이 사라지는 사건이 발생한다. 연방보안관 테디 다니엘스(레오나르도 디카프리오)는 수사를 위해 동료 척(마크 러팔로)과 함께 셔터아일랜드로 향한다. 테디는 수사를 위해 의사, 간호사, 병원관계자 등을 심문하지만 수사는 전혀 진척되지 않는다. 설상가상 폭풍이 불어 닥쳐 테디와 척은 섬에 고립되게 되고, 그들에게 점점 괴이한 일들이 일어나기 시작하는데...', 138, '15', 'RELEASED', 75.396000, 8.200000, 294804195, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11324 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11324 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 11324 AND g.name = '미스터리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6193, '레오나르도 디카프리오', '/wo2hJpn04vbtmh0B9utCFdsQhxM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레오나르도 디카프리오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Teddy Daniels', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11324 AND a.name = '레오나르도 디카프리오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 103, '마크 러팔로', '/5GilHMOt5PAQh6rlUKZzGmaKEI7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마크 러팔로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chuck Aule', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11324 AND a.name = '마크 러팔로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2282, '벤 킹슬리', '/vQtBqpF2HDdzbfXHDzR4u37i1Ac.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '벤 킹슬리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Cawley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11324 AND a.name = '벤 킹슬리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2201, '막스 폰 시도우', '/fOzSDFqMx84NR7PSv36P7j0Qf1q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '막스 폰 시도우');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Naehring', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11324 AND a.name = '막스 폰 시도우';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1812, '미셸 윌리엄스', '/jn3BVMVbIptz2gc6Fhxo1qwJVvW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미셸 윌리엄스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dolores', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 11324 AND a.name = '미셸 윌리엄스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1032, '마틴 스콜세지', '/9U9Y5GQuWX3EZy39B8nkk4NY01S.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '마틴 스콜세지');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 11324 AND d.name = '마틴 스콜세지';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aywZdSOXtwcqqLTl271EUJemi2.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 11324;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rbZvGN1A1QyZuoKzhCw8QPmf2q0.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 11324;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1124, '프레스티지', '2006-10-17', '보이는 것만이 진실이 아니다', '로버트 앤지어는 상류층 집안에서 자란 쇼맨십이 강한 마술사다. 반면 고아로 사람들과 잘 어울리지 못하는 알프레드 보든은 아이디어를 남들에게 보여 줄 배짱은 없지만 누구보다도 뛰어난 재능을 가진 천재이다. 두 사람은 서로를 아끼는 친구이자 선의의 경쟁자였지만, 그들이 최고라 자부했던 수중 마술이 실패로 돌아가면서 두 사람은 철천지 원수로 돌변한다. 서로 상대방 마술의 비밀을 캐내려 경쟁을 벌이는 가운데, 로버트는 알프레드의 비밀을 알아내기 위해 자신의 조수이자 사랑하는 여인 올리비아를 알프레드에게 접근하게 만든다.', 130, '15', 'RELEASED', 63.382000, 8.203000, 109676311, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1124 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1124 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1124 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6968, '휴 잭맨', '/4Xujtewxqt6aU0Y81tsS9gkjizk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '휴 잭맨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Robert Angier', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1124 AND a.name = '휴 잭맨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3894, '크리스찬 베일', '/7Pxez9J8fuPd2Mn9kex13YALrCQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스찬 베일');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alfred Borden', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1124 AND a.name = '크리스찬 베일';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3895, '마이클 케인', '/bVZRMlpjTAO2pJK6v90buFgVbSW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 케인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cutter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1124 AND a.name = '마이클 케인';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 15555, 'Piper Perabo', '/5XrzISDEox0KubRDzJU668Oxmxy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Piper Perabo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Julia McCullough', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1124 AND a.name = 'Piper Perabo';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 15556, '레베카 홀', '/coC58ANiDbqRIyle5zEl9QDektf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레베카 홀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sarah', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1124 AND a.name = '레베카 홀';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 525, '크리스토퍼 놀란', '/xuAIuYSmsUzKlUMBFGVZaWsY3DZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스토퍼 놀란');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1124 AND d.name = '크리스토퍼 놀란';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rwEc7SgXu7b5Yo8Co4CvSinF91v.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1124;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xBDE2d6HM1aBKQRu4IT7SfPD9fs.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1124;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (284, '아파트 열쇠를 빌려드립니다', '1960-06-21', '', '버드는 소심하지만 성실하고 착한 뉴욕의 종합보험회사 직원이다. 독신인 그는 시내에 조용한 아파트를 얻어서 살고 있는데, 본의 아니게 회사 임원들을 상대로 그 아파트를 빌려주게 된다. 그로 인해 생활에 피해가 많지만, 원래 소심한 성격에다가 상대가 모두 상당한 영향력을 가지고 있는 사람들이라, 회유와 협박에 번번히 집을 내줄 수 밖에 없다.  한편, 그는 엘리베이터 걸인 프랜에게 은근히 마음을 두고 있고, 프랜도 그에게 상당히 호의적이다. 아파트를 빌리는 임원들의 도움으로 그는 승진 후보에 오르고, 인사권자인 쉘드레이크 전무를 만나는데, 뜻밖에도 쉘드레이크 전무는 그의 비밀을 다 알고 있었고, 전무는 그것을 약점으로 잡아서 자기도 버드의 방을 빌린다. 버드는 방을 빌려주는 대가로 받은 뮤지컬 티켓으로 프랜에게 데이트 신청을 하지만 바람만 맞고 만다. 회사의 크리스마스 파티에서 프랜과 화해할 기회가 생겼지만, 우연히 쉘드레이크가 자기 아파트로 데려오는 여자가 프랜이라는 사실을 알고는 다시 그녀로부터 멀어진다.', 125, '', 'RELEASED', 50.728000, 8.200000, 25000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 284 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 284 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 284 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3151, '잭 레먼', '/7jWVWLr1VJqQrN3d4YJaATCIHRw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '잭 레먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'C.C. Baxter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 284 AND a.name = '잭 레먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4090, '셜리 맥클레인', '/1jvWvxiJHHPjr9OHzAahlKIPYaX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '셜리 맥클레인');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fran Kubelik', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 284 AND a.name = '셜리 맥클레인';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4091, 'Fred MacMurray', '/lxxixlFMNH0JuA9K0K3mJmigYcc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Fred MacMurray');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jeff D. Sheldrake', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 284 AND a.name = 'Fred MacMurray';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4093, 'Ray Walston', '/pRVUmhdc9nxflBI5GJvokz0nPPb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ray Walston');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Joe Dobisch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 284 AND a.name = 'Ray Walston';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4094, 'Jack Kruschen', '/3QOPlFyLfFR8cLe0pseRjrm3lra.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jack Kruschen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Dreyfuss', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 284 AND a.name = 'Jack Kruschen';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 3146, '빌리 와일더', '/tfVte6h2dlLn59Q0Mi6AvWAyRLP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '빌리 와일더');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 284 AND d.name = '빌리 와일더';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/TIwJe8jQ4uhExbxesjxQzNxqY3.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 284;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rzdQXrK37OBArogzCk7inEaW0mS.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 284;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (361743, '탑건: 매버릭', '2022-05-21', '한순간의 실수도 용납되지 않는 하늘 위, 가장 압도적인 비행이 시작된다', '최고의 파일럿이자 전설적인 인물 매버릭은 자신이 졸업한 훈련학교 교관으로 발탁된다. 그의 명성을 모르던 팀원들은 매버릭의 지시를 무시하지만 실전을 방불케 하는 상공 훈련에서 눈으로 봐도 믿기 힘든 전설적인 조종 실력에 모두가 압도된다. 매버릭의 지휘 아래 견고한 팀워크를 쌓아가던 팀원들에게 국경을 뛰어넘는 위험한 임무가 주어지자 매버릭은 자신이 가르친 동료들과 함께 마지막이 될지 모를 하늘 위 비행에 나서는데...', 131, '12', 'RELEASED', 172.831000, 8.202000, 1488732821, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 361743 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 361743 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 500, '톰 크루즈', '/3mShHjSQR7NXOVbdTu5rT2Qd0MN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '톰 크루즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Capt. Pete ''Maverick'' Mitchell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 361743 AND a.name = '톰 크루즈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 996701, '마일스 텔러', '/cg3LW0xX6RKr8dmescxq1bepcb5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마일스 텔러');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lt. Bradley ''Rooster'' Bradshaw', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 361743 AND a.name = '마일스 텔러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1525043, '모니카 바바로', '/hiOYXzSkkuKyCEcjLxBoAc4bLZS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '모니카 바바로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lt. Natasha ''Phoenix'' Trace', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 361743 AND a.name = '모니카 바바로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1700685, '루이스 풀먼', '/jAo0Rxl9EYVxLnhUlBww5Uxl89v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '루이스 풀먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lt. Robert ''Bob'' Floyd', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 361743 AND a.name = '루이스 풀먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 151680, '제이 엘리스', '/78JH7CfMrWrI3Vx2XLbx0GW4c2X.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이 엘리스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lt. Reuben ''Payback'' Fitch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 361743 AND a.name = '제이 엘리스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 86270, '조셉 코신스키', '/oWLUXWY0j8TYzwnf2wETYWO181S.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '조셉 코신스키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 361743 AND d.name = '조셉 코신스키';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jeqXUwNilvNqNXqAHsdwm5pEfae.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 361743;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/AaV1YIdWKnjAIAOe8UUKBFm327v.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 361743;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (324786, '핵소 고지', '2016-10-07', '치열했던 핵소 고지에서 무기 없이 75명의 생명을 구한 기적의 전쟁 실화', '비폭력주의자인 도스는 전쟁으로부터 조국과 소중한 사람들을 지키기 위해 총을 들지 않아도 되는 의무병으로 육군에 자진 입대한다. 총을 들 수 없다는 이유로 필수 훈련 중 하나인 총기 훈련 마저 거부한 도스는 동료 병사들과 군 전체의 비난과 조롱을 받게 된다. 결국 군사재판까지 받게 되지만 끝까지 자신의 신념을 굽히지 않은 도스에게 군 상부는 오키나와 전투에 총기 없이 의무병으로 참전할 것을 허락하는데…', 139, '15', 'RELEASED', 148.104000, 8.196000, 175302354, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 324786 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 324786 AND g.name = '역사';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 324786 AND g.name = '전쟁';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 37625, '앤드류 가필드', '/5ydZ6TluPtxlz5G8nlWMB7SGmow.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '앤드류 가필드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Desmond T. Doss', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324786 AND a.name = '앤드류 가필드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 65731, '샘 워싱턴', '/mflBcox36s9ZPbsZPVOuhf6axaJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '샘 워싱턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Captain Glover', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324786 AND a.name = '샘 워싱턴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4937, '빈스 본', '/A9fJ88dfXZGpgFTnQIK0bOtjMrj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빈스 본');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sgt Howell', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324786 AND a.name = '빈스 본';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20374, '테레사 파머', '/sjSiLSCp9LS1Z0nyGpmquTBuUyr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '테레사 파머');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dorothy Schuttle', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324786 AND a.name = '테레사 파머';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 972356, 'Luke Bracey', '/ot2h7IrXpC8XSnIZDSVsj2FQ5cx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Luke Bracey');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Smitty Ryker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 324786 AND a.name = 'Luke Bracey';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2461, '멜 깁슨', '/jnqHMaOslt8cef2atSmOpGRvNla.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '멜 깁슨');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 324786 AND d.name = '멜 깁슨';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/nlvcNogJK9R9iIj0YINApQE36FF.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 324786;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yQIBS8B9l2qXoPoPtxSXvH7CfoT.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 324786;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (610892, '바이올렛 에버가든 외전: 영원과 자동수기인형', '2019-09-06', '“전하고 싶어, 나의 마음을” “나도… 행복을 전하고 싶어”', '소중한 동생을 지키는 대가로 요크 가문에 입성한 ‘이자벨라’. 더 이상 꿈도 희망도 없는 그녀의 앞에 나타난 자동 수기 인형, ‘바이올렛 에버가든’. 언니의 편지를 받고 C.H 우편사를 찾아온 ‘테일러’는 사람들에게 행복을 전하는 우편배달 일을 시작하고, ‘이자벨라’에게도 자신의 마음을 전하기 위해 ‘바이올렛’에게 대필을 부탁하는데…', 91, '', 'RELEASED', 18.267000, 8.195000, 10841702, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 610892 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 610892 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 610892 AND g.name = '애니메이션';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1224288, '이시카와 유이', '/zptGIN1iklKJL1xrfHKOpxR2qJ9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이시카와 유이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Violet Evergarden (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 610892 AND a.name = '이시카와 유이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1249310, '코토부키 미나코', '/puocmMfvql6X1AvhFTolaV6Vh2r.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '코토부키 미나코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Amy Bartlett / Isabella York (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 610892 AND a.name = '코토부키 미나코';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 936275, '유우키 아오이', '/4kHNZSUIux52UU2BD3H6b5c5ymZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '유우키 아오이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Taylor Bartlett (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 610892 AND a.name = '유우키 아오이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1254052, '우치야마 고키', '/sllSm3iZZWVLTBrDZQRtWrZUfEj.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '우치야마 고키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Benedict Blue (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 610892 AND a.name = '우치야마 고키';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 84508, '코야스 타케히토', '/8uBkNDKPNmp9JWgMUI02NVyfhi1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '코야스 타케히토');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Claudia Hodgins (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 610892 AND a.name = '코야스 타케히토';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1484773, '이시다테 타이치', '/nBPuRvo9oWFWqzZiS8U4P9j0qtg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '이시다테 타이치');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 610892 AND d.name = '이시다테 타이치';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1661032, '藤田春香', '/d17kGnlHzGKXA1zOp5PJCaDY0r.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '藤田春香');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 610892 AND d.name = '藤田春香';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hL2mqR1jdTJ3UUyPC5w9LOrY1qQ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 610892;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/948wWGWLuG2ZIqRMLgfBjmm7tuR.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 610892;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (185, '시계태엽 오렌지', '1971-12-19', '나는 완전히 치유되었다', '10대 소년 알렉스는 친구들과 극악한 비행을 저지르고 다닌다. 어느 날 차를 훔쳐 드라이브를 즐기던 이들은 작가 알렉산더의 집을 습격해 그를 폭행하고 그의 아내를 강간한다. 이튿날 알렉스는 불평을 늘어놓는 친구들을 힘으로 제압하고 자신이 무리의 리더임을 확인시킨다. 그날 밤 알렉스는 한 저택에 침입해 집주인을 죽이고 도망치던 중 친구들의 배신으로 문 앞에 쓰러진다. 검거된 알렉스는 살인죄로 14년형을 언도받는다. 2년 뒤, 알렉스는 좀 더 빨리 감옥 밖으로 나오고 싶은 마음에 재소자에게 약물과 충격요법으로 범죄에 대한 혐오를 불러일으키는 교화 방법인 루도비코 갱생 프로그램에 자원하는데...', 137, '19', 'RELEASED', 45.306000, 8.200000, 27033812, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 185 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 185 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 56890, '말콤 맥도웰', '/hL8ep4Hqj6izX7IlzE7Bbcfq62w.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '말콤 맥도웰');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alex', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 185 AND a.name = '말콤 맥도웰';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2264, 'Patrick Magee', '/99xStF5zQy6qkDxLnIVaKD3urzI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Patrick Magee');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Alexander', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 185 AND a.name = 'Patrick Magee';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2272, 'Carl Duering', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Carl Duering');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Brodsky', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 185 AND a.name = 'Carl Duering';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2267, 'Michael Bates', '/53ciikCHIcr1thlDFvQtzNNbFAd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Michael Bates');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chief Guard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 185 AND a.name = 'Michael Bates';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2268, 'Warren Clarke', '/ecBiugofrkuSk5tRu6IUpQDNGio.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Warren Clarke');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dim', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 185 AND a.name = 'Warren Clarke';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 240, '스탠리 큐브릭', '/yFT0VyIelI9aegZrsAwOG5iVP4v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '스탠리 큐브릭');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 185 AND d.name = '스탠리 큐브릭';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oYa39Fjs8AgaaHMimGdBj8PiG6h.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 185;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/ysnVjBz5iRSRSl3xrNcQTUfa4L3.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 185;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (5156, '자전거 도둑', '1948-07-21', '생애 최초 구입, 도둑 맞은 자전거를 찾습니다!', '2차 대전 직후 이탈리아의 수도 로마의 거리. 오랫동안 일자리를 구하지 못하고 거리를 배회하던 안토니오는 우연히 직업 소개소를 통해 거리에서 벽보를 붙이는 일을 맡는다. 그러나 그 일을 하기 위해선 자전거가 필요했고 이 사실을 안 아내 마리아는 남편의 직업을 위해 자신이 소중하게 간직했던 침대 시트를 전당포에 맡기고 자전거를 구입한다. 한편 직업을 갖게 된 안토니오와 그의 아들 브르노는 기쁨을 참지 못하지만 아뿔싸! 이게 웬일? 이튿날 안토니오가 출근하여 벽보를 붙이는 사이 한 사내가 자전거를 타고 도망치는 것이 아닌가?', 89, '18', 'RELEASED', 24.013000, 8.192000, 450159, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 5156 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 42416, 'Lamberto Maggiorani', '/qp3oZcD8UwTGRg1GiMMOyWLwSaX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lamberto Maggiorani');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Antonio', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 5156 AND a.name = 'Lamberto Maggiorani';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 42417, 'Enzo Staiola', '/k64j9HlXiHIn0DJOUX9Uk8MCtAw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Enzo Staiola');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bruno', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 5156 AND a.name = 'Enzo Staiola';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 42419, 'Lianella Carell', '/dbLf4dnEpapogvOYoe6Mm5rbWbG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Lianella Carell');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maria', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 5156 AND a.name = 'Lianella Carell';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 944148, 'Gino Saltamerenda', '/xGSWaSgVYBTC2meKANoZp9JrM9S.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gino Saltamerenda');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Baiocco', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 5156 AND a.name = 'Gino Saltamerenda';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 975006, 'Vittorio Antonucci', '/uIWKAPeLJzfVvUawLOAM8DKWntA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Vittorio Antonucci');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alfredo Catelli, The Thief', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 5156 AND a.name = 'Vittorio Antonucci';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 12329, '비토리오 데 시카', '/SObzAVAFAzCSM5nmpvpNdX7oxq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '비토리오 데 시카');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 5156 AND d.name = '비토리오 데 시카';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6o83cFToNeEp4MdXPXqooW0zSGD.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 5156;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/kTUUiKGKrdRhJsCcYT3Ivtfuuzh.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 5156;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (522924, '레이싱 인 더 레인', '2019-08-08', '', '래브라도와 테리어 혼혈견 엔조는 스스로 다른 개들과는 다르다고 생각한다. 자기 자신의 몸속에는 인간의 영혼이 깃들어 있다고 믿는 것. 그런 엔조이기에 사랑하는 주인 데니와 의사소통할 수 있는 수단이 제스처밖에 없다는 현실에 좌절감을 느끼기도 한다. 주인 데니는 프로페셔널 카레이서가 되기 위한 사전 준비로 시애틀에 있는 한 자동차 정비소에서 일한다. 엔조는 TV에서 카레이싱을 보며 갖가지 인간사회의 지식들을 배운다. 엔조는 데니와 함께 행복한 시절을 보내지만 둘만의 사이에 이브가 나타난다. 이브와 사랑에 빠진 데니는 곧바로 결혼하게 되고, 둘은 곧 조위라는 예쁜 딸을 낳는다. 그러나 얼마 지나지 않아 엔조는 이브의 건강에 심각한 문제가 있다는 것을 예민한 후각으로 눈치 챈다. 조위가 아장아장 걷기 시작할 무렵, 이브는 심한 두통에 시달리지만 한사코 병원에 가지 않겠다고 고집을 부리다가 결국 때를 놓치게 된다. 이브의 고통스러운 투병 생활과 함께 데니의 가족에게는 시련이 닥친다. 데니를 사위로 인정하지 않던 이브의 부모가 나타나 노골적인 간섭을 시작하고, 급기야 이브가 세상을 떠나면서 조위의 양육권을 둘러싸고 법정싸움을 전개한다. 데니는 송사를 벌이는 동안 재산이 바닥나고, 함정에 빠져 더 큰 문제에 휘말리게 된다. 모든 희망을 잃게 될 무렵, 유일하게 곁을 지키는 엔조는 데니의 재기를 위한 정신적 발판이 되는데….', 109, '', 'RELEASED', 28.411000, 8.200000, 33800000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 522924 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 522924 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1269, '케빈 코스트너', '/bykmxJHLfbFM3NT05RZXhx8YTzF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케빈 코스트너');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Enzo (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 522924 AND a.name = '케빈 코스트너';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16501, 'Milo Ventimiglia', '/9yFPsQCYi9sbPQ0xJGtoAF4Ar6v.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Milo Ventimiglia');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Denny Swift', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 522924 AND a.name = 'Milo Ventimiglia';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2013474, 'Jackie Minns', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jackie Minns');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mrs. Spangle', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 522924 AND a.name = 'Jackie Minns';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 143333, 'Marcus Hondro', '/1PjH36pZQinPACQxyia359F8YPW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Marcus Hondro');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Spangle', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 522924 AND a.name = 'Marcus Hondro';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1461441, 'Ian Lake', '/f8FK8fiDSq7qUtITo2wdMjbB8c5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ian Lake');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mike', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 522924 AND a.name = 'Ian Lake';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 133502, 'Simon Curtis', '/7gQqZO7uoHNrHX6IZfCLCtXBDkU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Simon Curtis');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 522924 AND d.name = 'Simon Curtis';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rFKqqy4YIXq1hasaCEqk5p4Lywh.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 522924;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yv7XGQctTMrFM5ZiEm80zk3Jlw2.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 522924;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (313106, '닥터 후: 닥터의 날', '2013-11-23', '', '시간 전쟁의 마지막 날을 다루고 있다. 전쟁 한복판에서 워 닥터 (존 허트 분)가 이 모든 파멸을 끝내기 위해 달렉 종족과 자신의 종족인 타임 로드 모두를 말살하기로 결심한다. 이와 동시에 현재에서는 준군사조직 UNIT이 외계인의 침공을 막기 위해 런던 전체를 파괴하는 쪽을 택하려 한다. 닥터는 자신의 내력을 뒤집고 마음을 바꿔 달라는 클라라 오스왈드의 간청에 따르고, 시간 전쟁의 마지막 순간으로 돌아가서 전쟁으로 황폐화된 고향 행성을 없애버리지 않고 대신 시공간 속에 숨기게 된다. 그러나 이 선택으로 시간이 일그러지면서 닥터의 과거 모습들은 자신 스스로가 바꿔놓은 선택을 기억하지 못하게 된다.', 77, '', 'RELEASED', 21.080000, 8.200000, 10000000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 313106 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 313106 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 136532, '맷 스미스', '/b3AYe7kkImkB35CoYwlUqHnJGF8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '맷 스미스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Doctor (11)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 313106 AND a.name = '맷 스미스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20049, '데이비드 테넌트', '/pQHLJEOEcKpPpyiIheh47AJ5INS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데이비드 테넌트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Doctor (10)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 313106 AND a.name = '데이비드 테넌트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5049, '존 허트', '/8NriFCt6BxzW1Ex2TxGJfvQibrz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '존 허트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The War Doctor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 313106 AND a.name = '존 허트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1080542, '제나 콜먼', '/h0Lag3Lxgt6yFEZgGLTdSlC7mVC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제나 콜먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Clara Oswald', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 313106 AND a.name = '제나 콜먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 26076, '빌리 파이퍼', '/gBduwAWEZ1bwuL6f7cjMzBvKlJz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '빌리 파이퍼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Moment', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 313106 AND a.name = '빌리 파이퍼';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 42274, 'Nick Hurran', '/eE7RYTPnICZlGLIX02GRj5CfMk6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Nick Hurran');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 313106 AND d.name = 'Nick Hurran';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/yxLra5R61s5J4M5L3mqOY42K5md.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 313106;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/tbF57JNof8j3X14GhZtqafkrziU.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 313106;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (490, '제7의 봉인', '1957-02-16', '신의 존재와 구원의 의미를 찾는 기사의 여정', '14세기 중엽, 기사 안토니우스 블로크는 십자군 전쟁에 참여했다가 10년만에 고국 스웨덴으로 돌아왔으나 페스트가 온 나라를 휩쓸어 고국은 황폐해져 있다. 그의 종자 옌스와 함께 고향으로 돌아가는 여정에서 기사는 죽음의 사자의 방문을 받는다. 기사는 자신의 죽음을 지연시키기 위해 사자에게 체스 게임을 제안하고 사자는 그에 동의한다. 승산이 없는 이 내기에서 블로크가 원하는 것은 체스 게임이 진행되는 동안을 말미 삼아 신의 존재와 구원에 대한 확신을 얻는 것이다. 죽음을 앞둔 삶의 허무를 극복하기 위해 기사는 교회를 찾아가기도 하고 마녀로 낙인이 찍힌 소녀 옆을 지키기도 하지만 그 어디에도 죽음만이 보일 뿐, 신의 구원을 찾을 수 없다. 그러던 중 기사는 광대 부부와 그들의 아기를 만나 충만한 평화를 느끼게 되고, 그들을 지키기 위해 동행을 자처한 기사는 자신의 시종 옌스와 그를 따라나선 여인과 일행을 이루어 길을 떠나는데…', 96, '12', 'RELEASED', 25.047000, 8.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 490 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 490 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2201, '막스 폰 시도우', '/fOzSDFqMx84NR7PSv36P7j0Qf1q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '막스 폰 시도우');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Antonius Block', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 490 AND a.name = '막스 폰 시도우';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6656, 'Bengt Ekerot', '/4UxoMzIdE9PR4THNr3U2PL17veu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Bengt Ekerot');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Death', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 490 AND a.name = 'Bengt Ekerot';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6649, 'Gunnar Björnstrand', '/vkEY3nex3G0PMMnJ11Kamt4yod.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gunnar Björnstrand');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jöns', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 490 AND a.name = 'Gunnar Björnstrand';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6658, 'Nils Poppe', '/qPXSktfOnVn2zlGFSoYUn8BQUhf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Nils Poppe');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jof', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 490 AND a.name = 'Nils Poppe';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6657, '비비 안데르손', '/1oVFJtQSOv6mG8HjsReDy3aipt8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '비비 안데르손');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 490 AND a.name = '비비 안데르손';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 6648, '잉마르 베리만', '/nkmOaXNRoioViN9OQf2n9Iu6akA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '잉마르 베리만');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 490 AND d.name = '잉마르 베리만';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xkW9szYradHFSKCJOoWoCwO1TWi.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 490;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7tBfYcZH4P4AA1oFzjflUTSDZgx.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 490;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (92060, 'Michael Jackson''s Thriller', '1983-11-14', '', '', 14, '', 'RELEASED', 16.091000, 8.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 92060 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 92060 AND g.name = '음악';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 92060 AND g.name = '미스터리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 82702, '마이클 잭슨', '/tWHyifIcUEc1E0ufIZq5JqyeF6R.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 잭슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Michael Jackson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 92060 AND a.name = '마이클 잭슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 926, 'Ola Ray', '/ii6baCrYqNXBMFmPuGaCiUYlwdM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ola Ray');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Michael''s Girlfriend', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 92060 AND a.name = 'Ola Ray';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1905, 'Vincent Price', '/7JIv7U5kwveryP7hrPYgHlKea4d.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Vincent Price');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Narrator (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 92060 AND a.name = 'Vincent Price';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 99914, 'Cynthia Garris', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Cynthia Garris');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zombie (uncredited)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 92060 AND a.name = 'Cynthia Garris';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1897702, 'Tiana Davidson ''Thelma'' Davis', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tiana Davidson ''Thelma'' Davis');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zombie (uncredited)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 92060 AND a.name = 'Tiana Davidson ''Thelma'' Davis';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 4610, '존 랜디스', '/nXKdxxELgAaGecCpxAWCoj6TV3f.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '존 랜디스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 92060 AND d.name = '존 랜디스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dYHGoPMkZMVuBA4EydmDQMo1EEv.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 92060;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aVefEnQsfNPUrgsuMszTDt165P0.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 92060;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (629, '유주얼 서스펙트', '1995-07-19', '유일한 생존자, 사라진 수천 만 달러', '산 페드로 부두에서 27명이 사망하고 9,100만달러가 증발하는 유혈극이 벌어진다. 수사관 데이브 쿠얀은 끔찍한 사건 현장의 유일한 생존자인 버벌로부터 폭발 사고의 유력한 용의자로 지목되었던 5인에 대한 진술을 듣는다. 유치장에서의 만남으로 시작한  그들의 6주 간의 화려한 범죄 행각들이 버벌의 진술과 함께 속속 드러나기 시작한다. 하지만 정작 용의자들도 모르게 그들의 머리 위에 존재했던 전설 속의 악마와도 같은 지하 범죄 조직의 두목 카이저 소제의 존재가 부각되며, 쿠얀은 점점 혼란에 빠지기 시작한다.', 106, '18', 'RELEASED', 49.733000, 8.200000, 23300000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 629 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 629 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 629 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 9045, 'Stephen Baldwin', '/34GOuRYIkAcKW8newjrnYeC1QPK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Stephen Baldwin');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'McManus', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 629 AND a.name = 'Stephen Baldwin';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5168, '가브리엘 번', '/vZ5amSGl8iSSK7C7WLKCN4EewnM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '가브리엘 번');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Keaton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 629 AND a.name = '가브리엘 번';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1121, '베니시오 델 토로', '/d6zTLhei9FguyAP9P0VVs6KJWQr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '베니시오 델 토로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Fenster', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 629 AND a.name = '베니시오 델 토로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 7166, '케빈 폴락', '/2S5eVHJvGWWtjp6oUZXngQ7MKoD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케빈 폴락');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hockney', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 629 AND a.name = '케빈 폴락';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1979, '케빈 스페이시', '/nPrUZDEbGQe6jwpVbHKJCXsMd7r.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케빈 스페이시');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Verbal', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 629 AND a.name = '케빈 스페이시';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 9032, '브라이언 싱어', '/to8mWJabPoWkphkbYKoutCVSj06.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '브라이언 싱어');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 629 AND d.name = '브라이언 싱어';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/cbgicjq4Q2OVvXlfd3PqRlLvqmf.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 629;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7S7PE3vK9Eh5uzCYBDGk5qTJeYW.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 629;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (68718, '장고: 분노의 추적자', '2012-12-25', '복수의 끝에서 놈을 만났다', '흑인 노예 장고는 착한 사마리아인 같은 독일인 현금사냥꾼 닥터 킹의 도움을 받아 멋진 말을 타고 미국 평원을 달리며 헤어진 아내 브룸힐다를 찾아다니는 총잡이 낭만주의자로 변신한다. 그는 브룸힐다가 미시시피에서 가장 악독한 농장 캔디랜드의 노예로 일하고 있다는 소식을 듣고 농장주 캔디를 찾아간다. 아내를 구해야 하는 분노의 로맨티스트 장고, 그를 돕는 정의의 바운티 헌터 닥터 킹, 그리고 그들의 표적이 된 욕망의 마스터 캔디. 복수의 사슬이 풀리면, 세 남자의 피도 눈물도 없는 대결이 시작된다.', 165, '18', 'RELEASED', 121.344000, 8.200000, 425368238, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 68718 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 68718 AND g.name = '서부';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 134, '제이미 폭스', '/zD8Nsy4Xrghp7WunwpCj5JKBPeU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이미 폭스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Django Freeman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 68718 AND a.name = '제이미 폭스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 27319, '크리스토프 발츠', '/jMvLGCVXLaBqjRLf5olyvEucZob.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '크리스토프 발츠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. King Schultz', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 68718 AND a.name = '크리스토프 발츠';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6193, '레오나르도 디카프리오', '/wo2hJpn04vbtmh0B9utCFdsQhxM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레오나르도 디카프리오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Calvin J. Candie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 68718 AND a.name = '레오나르도 디카프리오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11703, '케리 워싱턴', '/zgyjYlxmHG6Ntbg16JcTp8Vu8M3.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '케리 워싱턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Broomhilda von Shaft', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 68718 AND a.name = '케리 워싱턴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2231, '사무엘 L. 잭슨', '/AiAYAqwpM5xmiFrAIeQvUXDCVvo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사무엘 L. 잭슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Stephen', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 68718 AND a.name = '사무엘 L. 잭슨';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 138, '쿠엔틴 타란티노', '/1gjcpAa99FAOWGnrUvHEXXsRs7o.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '쿠엔틴 타란티노');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 68718 AND d.name = '쿠엔틴 타란티노';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/iLKZv6yLIP8oHYxx1jdPyrvjlYS.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 68718;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5Lbm0gpFDRAPIV1Cth6ln9iL1ou.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 68718;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (77, '메멘토', '2000-10-11', '전 세계가 항복한 최고의 두뇌게임', '전직 보험 수사관이었던 레너드에게 기억이란 없다. 자신의 아내가 강간당하고 살해되던 날의 충격으로 기억을 10분 이상 지속시키지 못하는 단기 기억상실증 환자가 되었던 것이다. 그가 마지막으로 기억하고 있는 것은 자신의 이름이 레너드 셸비 라는 것과 아내가 강간당하고 살해당했다는 것, 그리고 범인은 존 G 라는 것이 전부. 레너드는 자신의 가정을 파탄 낸 범인을 찾기 위한 방법으로 메모와 문신을 사용하게 된다. 하지만 진실에 다가갈수록 자신의 기억, 주위 사람들에 대한 의심이 갈수록 커져만 가는데...', 113, '15', 'RELEASED', 55.938000, 8.180000, 40047236, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 77 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 77 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 529, '가이 피어스', '/vTqk6Nh3WgqPubkS23eOlMAwmwa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '가이 피어스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Leonard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 77 AND a.name = '가이 피어스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 530, '캐리 앤 모스', '/xD4jTA3KmVp5Rq3aHcymL9DUGjD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '캐리 앤 모스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Natalie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 77 AND a.name = '캐리 앤 모스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 532, '조 판톨리아노', '/cXMOad9KKVBK1lg8EjEbcNPn1OT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조 판톨리아노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Teddy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 77 AND a.name = '조 판톨리아노';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 534, 'Mark Boone Junior', '/rcncVr356hpfKX9qOrKL3SJlEO7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mark Boone Junior');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Burt', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 77 AND a.name = 'Mark Boone Junior';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 535, '러스 페가', '/d0W7kq97Ul8Iz5LZIVNDKxSly8M.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '러스 페가');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Waiter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 77 AND a.name = '러스 페가';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 525, '크리스토퍼 놀란', '/xuAIuYSmsUzKlUMBFGVZaWsY3DZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '크리스토퍼 놀란');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 77 AND d.name = '크리스토퍼 놀란';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/vqxdADPdy0ZVJr8dMB3mh6C5Vsv.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 77;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7Wev9JMo6R5XAfz2KDvXb7oPMmy.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 77;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (556574, '해밀턴', '2020-07-03', '브로드웨이의 감동을 화면으로 만나다', '1776년 미국, 훗날 미국 건국의 주역이 되는 알렉산더 해밀턴은 혁명 전야의 뉴욕에 도착하고, 그곳에서 처음으로 애런 버를 만난다. 해밀턴은 버가 자신과 마찬가지로 부모를 어린 나이에 잃었고 대학을 2년만에 졸업한 엄청난 능력의 소유자 임을 알고 유대감을 느낀다. 한편 버의 친구들인 존 로렌스, 허큘리스 멀리건, 그리고 라파예트 후작은 해밀턴의 열정과 추진력에 이끌리고, 혁명을 위해 뜻을 같이 할 것을 다짐한다. 곧이어 영국 국왕 조지 3세가 군대를 파병하며 본격적인 전쟁이 시작되고,  미국군 총사령관 조지 워싱턴은 병사의 사기가 떨어질대로 떨어지고 무기와 전략 모든 면에서 밀리는 상황에 참모가 필요함을 느낀다. 이때 버가 나서 오른팔이 되기를 청하지만, 워싱턴은 그 대신 해밀턴을 택하는데...', 160, '', 'RELEASED', 39.560000, 8.179000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 556574 AND g.name = '역사';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 556574 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1179651, '린마누엘 미란다', '/r0wFwPa041pZ1QM66yJWuQXCkqx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '린마누엘 미란다');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alexander Hamilton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 556574 AND a.name = '린마누엘 미란다';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1254614, '레슬리 오돔 주니어', '/iQHN2J2PclpehDaAQhzeFn6DfTx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레슬리 오돔 주니어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Aaron Burr', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 556574 AND a.name = '레슬리 오돔 주니어';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 87932, '러네이 엘리스 골즈베리', '/bNHksD4bZxWhNUIW5mwLgPWc30G.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '러네이 엘리스 골즈베리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Angelica Schuyler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 556574 AND a.name = '러네이 엘리스 골즈베리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1631814, '필리파 수', '/1oKShCBjS2wxeAFqPuO2XSrpa5w.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '필리파 수');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eliza Hamilton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 556574 AND a.name = '필리파 수';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1652371, '더비드 디그스', '/v4VmQP0iFFW7SU2ouE2Qhu27Hgy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '더비드 디그스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marquis de Lafayette / Thomas Jefferson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 556574 AND a.name = '더비드 디그스';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1485823, 'Thomas Kail', '/fe568wCZjaM7ZmSMcraYe3XN3tt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Thomas Kail');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 556574 AND d.name = 'Thomas Kail';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2auoUrTwNWx9eRyTQ4FhIyfWd8c.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 556574;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/uWVkEo9PWHu9algZsiLPi6sRU64.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 556574;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (18148, '동경 이야기', '1953-11-03', '', '2차 세계대전 후. 결혼하여 도쿄에 살고 있는 자식들을 만나기 위해 노부부가 상경한다. 의사 장남과 미용실을 운영하는 둘째 딸은 곧 부모님의 방문을 부담스러워하고 바쁜 일상을 핑계로 소홀히 대한다. 전쟁 중 남편을 잃은 며느리 노리코만이 노부부를 극진히 모시는데…', 137, 'ALL', 'RELEASED', 19.106000, 8.178000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 18148 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 33135, '류 치슈', '/md0GCQUr0ktyjigmnFhRRhIE1tK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '류 치슈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shukichi Hirayama', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 18148 AND a.name = '류 치슈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 134307, '히가시야마 치에코', '/jnZHDwtO6hq5mUwp7jO3cw12E6k.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '히가시야마 치에코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tomi Hirayama', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 18148 AND a.name = '히가시야마 치에코';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 95504, '하라 세츠코', '/zaiy9COvjUVGV6q9x7ptuZeuTCa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하라 세츠코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Noriko Hirayama', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 18148 AND a.name = '하라 세츠코';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 131013, '스기무라 하루코', '/g4ro32UO0Aob9QtLAVAXI9oOKZT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스기무라 하루코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shige Kaneko', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 18148 AND a.name = '스기무라 하루코';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 68411, '山村聰', '/norRWkMGfj3OGT42hKdQ5FvSBG2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '山村聰');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Koichi Hirayama', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 18148 AND a.name = '山村聰';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 95501, '오즈 야스지로', '/s0KBnwAxr6Aujbi6cA3inDqH8Fe.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '오즈 야스지로');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 18148 AND d.name = '오즈 야스지로';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pFxczRxotHvm2Ojg6iS7N3lq0v1.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 18148;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jLq0ol1f0ZKXni9R9GsPBcyPrNN.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 18148;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (797, '페르소나', '1966-10-18', '말을 거부하는 여배우와 말을 찾아주려는 간호사, 두 영혼의 불길한 교차', '유명 연극배우인 엘리자벳은 연극 <엘렉트라>를 공연하던 중 갑자기 말을 잃게 되고, 신경쇠약으로 병원을 거쳐 요양을 떠나게 된다. 그녀의 요양에 동행한 간호사 알마는 엘리자벳에 대해 간호사로서의 친절과 인간적인 호감, 동경 등을 느끼지만 말이 없는 엘리자벳에게 자기를 털어놓는 과정에서 그녀가 자신을 구경거리로 관찰하고 있다는 사실을 깨닫고 공격적인 비난의 태도를 취하게 된다.', 83, '18', 'RELEASED', 34.615000, 8.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 797 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6657, '비비 안데르손', '/1oVFJtQSOv6mG8HjsReDy3aipt8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '비비 안데르손');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alma', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 797 AND a.name = '비비 안데르손';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11916, '리브 울만', '/sF0UHcLrpTsg0eaSaIYee2IxSBB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리브 울만');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elisabet Vogler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 797 AND a.name = '리브 울만';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11917, 'Margaretha Krook', '/eIfMDQG8oaU2Vt5xbYt4vS6ftja.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Margaretha Krook');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Doctor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 797 AND a.name = 'Margaretha Krook';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6649, 'Gunnar Björnstrand', '/vkEY3nex3G0PMMnJ11Kamt4yod.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gunnar Björnstrand');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Herr Vogler', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 797 AND a.name = 'Gunnar Björnstrand';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11918, 'Jörgen Lindström', '/yXsYjc6FvmcHgSJ5Uv4GJBnRBqX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jörgen Lindström');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elisabet''s Son (uncredited)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 797 AND a.name = 'Jörgen Lindström';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 6648, '잉마르 베리만', '/nkmOaXNRoioViN9OQf2n9Iu6akA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '잉마르 베리만');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 797 AND d.name = '잉마르 베리만';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/g9StSKVA2XGlUaceyVuE3mfyguH.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 797;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sj2aZDetPE8RoOCAm5QJitCNfLr.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 797;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (620683, '엄마는 나의 분신 3', '2019-12-26', '', '', 111, '', 'RELEASED', 6.377000, 8.200000, 39273021, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 620683 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1185618, 'Paulo Gustavo', '/w3GJFK6FNj63mG5XaVPGTxm3BHN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Paulo Gustavo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dona Hermínia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 620683 AND a.name = 'Paulo Gustavo';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1185619, 'Mariana Xavier', '/uZDH0zOfjW83I0q9kMU9Nm1kEr4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Mariana Xavier');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marcelina', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 620683 AND a.name = 'Mariana Xavier';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 592370, 'Rodrigo Pandolfo', '/2G09Q53OjMkabmNxaN2Cz8Kmvqy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rodrigo Pandolfo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Juliano', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 620683 AND a.name = 'Rodrigo Pandolfo';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 557414, 'Herson Capri', '/jSiooyHkI3GeVqqALRN7m5ZCT4F.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Herson Capri');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Carlos Alberto', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 620683 AND a.name = 'Herson Capri';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1422048, 'Samantha Schmütz', '/7bNH1XT9mSnPUfZjXcxSATM219F.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Samantha Schmütz');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Waldeia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 620683 AND a.name = 'Samantha Schmütz';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1706418, 'Susana Garcia', '/o5hcdEO1mpkQmwnzKZhgLgk13h7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Susana Garcia');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 620683 AND d.name = 'Susana Garcia';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zw77BFPGJ73Lig8GwRzYj1XHq53.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 620683;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/19vTfircuojU00I6xtRdy3DrF1e.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 620683;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (26451, '완전 범죄', '1970-10-16', '', '과대망상증에 사로잡힌 킬러는 성공한 로마 경찰 간부이다. 그는 매저키스트 성향이 있는 정부 아우구스타 테르찌와 살인 유희를 즐기곤 했다. 이들의 살인 유희는 점점 정도가 심해져 결국 킬러는 관계 중 아우구스타를 죽이게 된다. 주도 면밀한 계획 하에 살인을 저지른 그는 자신에게 혐의가 돌아올수 있도록 증거를 무수히 남긴채 그 곳을 나선다. 하지만 자신의 높은 지위를 과신한 킬러는 그것만으로는 만족할 수 없었던 나머지 자신에게 불리한 정황 증거를 더 만들어 내고 겁에 질린 부하들과 증인들을 우롱하는데...', 111, '', 'RELEASED', 11.263000, 8.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 26451 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 26451 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 14276, 'Gian Maria Volonté', '/xPwxiUgSnvqMvPTm2TlqTUskOJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gian Maria Volonté');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dottore', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 26451 AND a.name = 'Gian Maria Volonté';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 83259, 'Florinda Bolkan', '/iLBiLTmnZtWxvGrhV7JIzI6K0vH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Florinda Bolkan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Augusta Terzi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 26451 AND a.name = 'Florinda Bolkan';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 585373, 'Gianni Santuccio', '/8T3s738fU2yPD3wwFTbyh2ZHaA1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gianni Santuccio');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Police Prefect', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 26451 AND a.name = 'Gianni Santuccio';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 235572, 'Orazio Orlando', '/eT19oXWPxUZSNTVHUXDhtmzXVi1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Orazio Orlando');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Biglia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 26451 AND a.name = 'Orazio Orlando';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 95229, 'Sergio Tramonti', '/nZJ423yufmohaBMpDnEGlpHHKOb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sergio Tramonti');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Antonio Pace', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 26451 AND a.name = 'Sergio Tramonti';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 95456, 'Elio Petri', '/ugTMHGVTEYxcxPqhXOxIROydepZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Elio Petri');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 26451 AND d.name = 'Elio Petri';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4q08KG7jdguPKB1S5FrbC7GNMHB.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 26451;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7SUT9mYb7SD88Gz7rFeLbjC2YeG.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 26451;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (10098, '키드', '1921-01-21', '', '부유한 화가에게 버림받고 갓난 어린 아이를 병원에서 낳은 여자가 키울 능력이 없어 고급차 안에 아이를 두고 간다. 그런데 자동차 도둑이 그 차를 훔치고 아이를 쓰레기통 옆에 두고 간다. 우연히 그 길을 지나가던 떠돌이 찰리가 애기 울음 소리를 듣고 얼떨결에 아이를 안게 되는데...', 68, '', 'RELEASED', 15.387000, 8.200000, 2500000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 10098 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 10098 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 13848, '찰리 채플린', '/qQZ2qDAyX9aw8KCkj9VZAQLKysK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '찰리 채플린');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'A Tramp', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10098 AND a.name = '찰리 채플린';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 19426, 'Jackie Coogan', '/nTyszFKR1OCzEDs0kmUtz1g2msq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jackie Coogan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Kid', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10098 AND a.name = 'Jackie Coogan';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 63378, 'Carl Miller', '/bt3pDOt4rcUJQvt61MlHqYQzBgh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Carl Miller');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Man', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10098 AND a.name = 'Carl Miller';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 21301, 'Edna Purviance', '/qGAhDLNl9YjTdds73hhgOo2NLf7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Edna Purviance');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'The Woman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10098 AND a.name = 'Edna Purviance';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 21306, 'Albert Austin', '/4NjPns56oHuoH0BVmI9oW4pMAmV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Albert Austin');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Car Thief / Man in Shelter (uncredited)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 10098 AND a.name = 'Albert Austin';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 13848, '찰리 채플린', '/qQZ2qDAyX9aw8KCkj9VZAQLKysK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '찰리 채플린');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 10098 AND d.name = '찰리 채플린';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2c0clAU14g0rL11XoKdjyUWyeZI.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 10098;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4H81TyAvjt7WOLXl7km34ZZQGl6.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 10098;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (537061, '스티븐 유니버스: 더 무비', '2019-10-07', '', '지구 수호를 위한 마법 미션들을 헤쳐 나가는 스티븐 유니버스의 신나는 모험이 펼쳐진다. 믿어라, 스티븐 젬파워! 스티븐이 지구를 지키는 일은 끝났다고 생각했다. 그러나, 비치시티에서 새로운 위협이 다가오고 있다. 스티븐은 거대한 도전에 마주하게 될 것이다.', 82, '', 'RELEASED', 16.669000, 8.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 537061 AND g.name = 'TV 영화';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 537061 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 537061 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 537061 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 537061 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 537061 AND g.name = '음악';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 225863, 'Zach Callison', '/gGvcqBYFa0WNyx72FOEMfpSFpKS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Zach Callison');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Steven Universe (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 537061 AND a.name = 'Zach Callison';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1217614, 'Deedee Magno', '/7YE7BszWB45woWAzrBomXu4TgCE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Deedee Magno');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Pearl / Yellow Pearl (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 537061 AND a.name = 'Deedee Magno';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1393199, 'Estelle', '/8fImcnwFk2tX5J9JbFnBMn3NObY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Estelle');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Garnet (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 537061 AND a.name = 'Estelle';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 109488, 'Michaela Dietz', '/19IXtTUNXFd5wPAfTP8UL16UYxl.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Michaela Dietz');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Amethyst (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 537061 AND a.name = 'Michaela Dietz';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1890500, 'Sarah Stiles', '/t1OuHZmz9GlbFu7bfOUg3nzIki6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sarah Stiles');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Spinel (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 537061 AND a.name = 'Sarah Stiles';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1245726, 'Rebecca Sugar', '/wpC32gDTbdkYJYFU3RJ9MKxkmfi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Rebecca Sugar');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 537061 AND d.name = 'Rebecca Sugar';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8mRgpubxHqnqvENK4Bei30xMDvy.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 537061;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/re3ZvlKJg04iLpLRf1xTKHS2wLU.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 537061;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (810693, '극장판 주술회전 0', '2021-12-24', '', '어린 시절, 소꿉친구인 오리모토 리카를 교통사고로 눈 앞에서 잃은 옷코츠 유타. 옷코츠는 원령으로 변한 리카의 저주에 괴로워한 나머지 자신도 죽기를 바라지만, 최강의 주술사인 고죠 사토루에 의해 주술고전에 들어가게 된다. 그리고 동급생인 젠인 마키, 이누마키 토게, 판다를 만나면서 굳은 결심을 한다. 한편 옷코츠와 친구들 앞에 과거에 일반인을 대량으로 학살해서 고전에서 추방된 최악의 주저사인 게토 스구루가 나타난다. 주술사만의 낙원을 만들려는 게토는 비술사를 섬멸하겠다면서 신주쿠와 교토에 천의 저주를 내리는데...', 105, '15', 'RELEASED', 71.746000, 8.200000, 195870885, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 810693 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 810693 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 810693 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 77927, '오가타 메구미', '/eNdfMUyZgG5P4TNIZpbTAu8gBs9.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오가타 메구미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yuta Okkotsu (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 810693 AND a.name = '오가타 메구미';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 119143, '하나자와 카나', '/5bK9ttcRydQBWmyZp7gXDmJYOPF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하나자와 카나');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rika Orimoto (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 810693 AND a.name = '하나자와 카나';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1221114, '나카무라 유이치', '/wb8behVKjBHX9XXrEydvNINCYwH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나카무라 유이치');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Satoru Gojo (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 810693 AND a.name = '나카무라 유이치';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 9705, '사쿠라이 타카히로', '/8s8owcKmpRAuhzEGjSdRpztthUg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '사쿠라이 타카히로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Suguru Geto (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 810693 AND a.name = '사쿠라이 타카히로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1281498, '코마츠 미카코', '/13tQEZ1tLdOmi7oGoRJ4xep1ODQ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '코마츠 미카코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maki Zen''in (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 810693 AND a.name = '코마츠 미카코';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2264366, '박성후', '/psIsL0Ht5RAiuGYRG2PYFnRz9fI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '박성후');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 810693 AND d.name = '박성후';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gHcga1wgDD4MAeApoOM7yDn9BOq.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 810693;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/921vUyXdfIYpaXqu5Lnf3nVb4IJ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 810693;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (592350, '나의 히어로 아카데미아 더 무비: 히어로즈 라이징', '2019-12-20', '', '눈이 계속 내리는 겨울 어느 밤, 히어로 사회를 파괴하려고 계획하는 시가라키 토무라가 인솔하는 빌런 연합과 그 움직임을 사전에 포착한 히어로들의 전투가 전개되는 가운데, 남모르게 조용히 꿈틀거리는 "뭔가"가 일어나고, 그 자리를 떠났다. 마침 이즈쿠 일행의 유에이 고교 히어로과 1학년 A반이 은퇴한 No.1 히어로 올마이트의 뒤를 이어 "차세대 영웅 육성 프로젝트"의 일환으로 학급 전원에서 기간 한정의 교외 히어로 활동을 위해 일본의 훨씬 남쪽에 위치한 외딴 섬 "나부 섬"을 찾았다. 얼마 전 큰 사건이 일어나지 않았던 평화로운 섬에서 이들은 주재 영웅으로서 섬사람들의 생활을 도우며 분주했고, 그러면서도 한가한 시간을 보내고 있었다. 그러나 그 정적을 부수듯이, 갑자기 빌런들이 나부 섬을 덮쳐, 차례차례로 섬의 시설을 파괴해 간다. 그들을 지휘하는 것은, "나인". 그날 밤, 눈을 뜬 "뭔가"그 자체였다. 이즈쿠와 바쿠고 등의 1학년 A반의 멤버는 힘을 모아 빌런에 맞선다! 과연 섬을 덮치는 나인의 목적이란!? 그리고 이즈쿠 일행의 1학년 A반의 "뉴 히어로"들은 이 가장 흉악한 빌런으로부터 섬의 사람들을 지킬 수 있을까!?', 104, '', 'RELEASED', 41.546000, 8.169000, 30017163, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 592350 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 592350 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 592350 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 592350 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1325962, '야마시타 다이키', '/rQNdJdZewk7VGP16ZNbpfJ9ZeMd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '야마시타 다이키');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Izuku Midoriya (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 592350 AND a.name = '야마시타 다이키';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1245094, '오카모토 노부히코', '/41BGKnwmE2573X2ve9rGXeLw3oW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오카모토 노부히코');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Katsuki Bakugo (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 592350 AND a.name = '오카모토 노부히코';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2040402, '井上芳雄', '/mtsRxX1ExpeTYTdoNpjnQ8hxorm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '井上芳雄');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nine (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 592350 AND a.name = '井上芳雄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1919754, '이마다 미오', '/3MMmr33nOlxWKCx5VkNy9R0bUMW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '이마다 미오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Slice (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 592350 AND a.name = '이마다 미오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1247771, '테라사키 유카', '/6UMP4F0FsbfN60dU8NwmFGSbfvH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '테라사키 유카');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Katsuma (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 592350 AND a.name = '테라사키 유카';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1307036, '長崎健司', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '長崎健司');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 592350 AND d.name = '長崎健司';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/x3BYGVio05n4Atdzc5WTmJpV7CY.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 592350;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9guoVF7zayiiUq5ulKQpt375VIy.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 592350;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (111, '스카페이스', '1983-12-09', '세상은 당신의 것입니다', '1980년 5월 쿠바가 마리엘 항을 개항하여 반카스트로 지지자들이 미국 플로리다에 입항한다. 토니 몬타나와 마니리베라도 이민 수용소로 보내진다. 3개월 후 마니가 수용소에 있는 레벤가라는 자를 살해해 주면 신분증을 입수해 주겠다는 일을 받아 수용소에 폭동을 일으켜 레벤가를 암살한다. 접시닦이로 근근히 살아가던 토니는 프랭크의 부하로부터 콜롬비아 마약상과의 거래일을 맡았다가 위험천만한 위기를 넘긴다. 그 사건을 계기로, 토니는 프랭크의 신임을 얻고 그의 부하가 되지만, 수 개월 후 결국 자신을 없애려는 프랭크를 죽이고 조직을 장악, 보스 자리에 오르는데...', 169, '18', 'RELEASED', 78.591000, 8.165000, 66023329, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 111 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 111 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 111 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1158, '알 파치노', '/2dGBb1fOcNdZjtQToVPFxXjm4ke.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '알 파치노');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Tony Montana', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 111 AND a.name = '알 파치노';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1159, '스티븐 바우어', '/omslakUrewSXMgQkI7OdLRBCCK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스티븐 바우어');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Manny Ray', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 111 AND a.name = '스티븐 바우어';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1160, '미셸 파이퍼', '/1sMxCGVcxxWd6Z6TuTuQllEeyDs.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미셸 파이퍼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elvira', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 111 AND a.name = '미셸 파이퍼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1161, '메리 엘리자베스 매스트란토니오', '/vbZ1E557K5oj34xLHR5ErO8wPCi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '메리 엘리자베스 매스트란토니오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gina', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 111 AND a.name = '메리 엘리자베스 매스트란토니오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1162, 'Robert Loggia', '/mRSUgJnfprCNw83pyVfpfW7ryfK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Robert Loggia');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Frank Lopez', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 111 AND a.name = 'Robert Loggia';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1150, '브라이언 드 팔마', '/4xleWFdhtVC7faer6Ru2eyEgfTv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '브라이언 드 팔마');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 111 AND d.name = '브라이언 드 팔마';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zx7sXrMISbs8RI4URbjPyKocRgP.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 111;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1qM2BYNE11Viby8ImC9LC00DgDr.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 111;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (426, '현기증', '1958-05-28', '시종일관 미스터리한 그들의 어긋난 사랑', '스카티는 고소공포증 때문에 경찰을 그만 두고 사립탐정의 길로 들어서게 된다. 어느 날 그는 대학 친구였던 개빈로부터 망령에 사로잡힌 자신의 부인 매들린을 미행해 달라는 부탁을 받는다. 얼마 후 그는 금문교 아래에서 강물에 뛰어든 매들린을 구한 후로 그녀와 사랑에 빠지고 매들린 역시 그에게 사랑을 느끼게 되는데...', 129, '15', 'RELEASED', 39.043000, 8.164000, 7808900, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 426 AND g.name = '미스터리';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 426 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 426 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 854, '제임스 스튜어트', '/yId5fdDqShOkr0YjCoJbUOZipcX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제임스 스튜어트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Det. John ''Scottie'' Ferguson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 426 AND a.name = '제임스 스튜어트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5729, '킴 노박', '/xvIOwqOD1BXkpFZEwzkb6aamaEL.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '킴 노박');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Madeleine Elster / Judy Barton', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 426 AND a.name = '킴 노박';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5730, 'Barbara Bel Geddes', '/99XLCtElLhFY7F7WwO6W4vigrN7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Barbara Bel Geddes');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marjorie ''Midge'' Wood', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 426 AND a.name = 'Barbara Bel Geddes';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5731, 'Tom Helmore', '/aEKwGuDjktdF13YBrEAQjC7Te2m.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tom Helmore');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gavin Elster', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 426 AND a.name = 'Tom Helmore';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5732, 'Henry Jones', '/8rBuIpP5Wlzoh8ow7cp5bOekedU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Henry Jones');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Coroner', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 426 AND a.name = 'Henry Jones';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2636, '알프레드 히치콕', '/108fiNM6poRieMg7RIqLJRxdAwG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '알프레드 히치콕');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 426 AND d.name = '알프레드 히치콕';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/fqePCJXuCAAmUnG935fLFgk9H6L.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 426;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rtVwkTqllcmyY4TVOycgVBHppWf.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 426;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1422, '디파티드', '2006-10-04', '엇갈린 운명의 길을 걷는 두 남자의 대결', '프랭크 코스텔로가 이끄는 남부 보스턴의 최대 범죄 조직망, 아일랜드 마피아를 일망타진하기 위해 매사추세츠 주 경찰청은 신참 경찰 빌리 코스티건을 조직에 침투시킨다. 한편, 또다른 신참 경찰 콜린 설리반은 경찰청 내에서 승승장구하여 코스텔로를 제거하기 위한 특별 수사반에 배치된다. 그러나 콜린은 경찰청에 투입된 코스텔로의 첩자였다. 그들은 곧 그들 사이에 첩자가 있다는 사실을 알아차리게 되는데...', 151, '15', 'RELEASED', 76.730000, 8.163000, 291465000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1422 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1422 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1422 AND g.name = '범죄';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6193, '레오나르도 디카프리오', '/wo2hJpn04vbtmh0B9utCFdsQhxM.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레오나르도 디카프리오');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Billy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1422 AND a.name = '레오나르도 디카프리오';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1892, '맷 데이먼', '/4KAxONjmVq7qcItdXo38SYtnpul.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '맷 데이먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Colin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1422 AND a.name = '맷 데이먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 514, '잭 니콜슨', '/6h12pZsgj3WWjMtykUgfLkLEBWz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '잭 니콜슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Costello', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1422 AND a.name = '잭 니콜슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 13240, '마크 월버그', '/bTEFpaWd7A6AZVWOqKKBWzKEUe8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마크 월버그');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dignam', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1422 AND a.name = '마크 월버그';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8349, '마틴 쉰', '/m2Y3Q0uyuW6htrn2W9UWCWMkpZu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마틴 쉰');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Queenan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1422 AND a.name = '마틴 쉰';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1032, '마틴 스콜세지', '/9U9Y5GQuWX3EZy39B8nkk4NY01S.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '마틴 스콜세지');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1422 AND d.name = '마틴 스콜세지';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/jaaYn5iY0s9vwcm8oOhxKBWYW6U.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1422;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6WRrGYalXXveItfpnipYdayFkQB.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1422;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (795607, '백사 2: 청사의 시련', '2021-07-23', '', '법해를 물리치고 언니를 구하려던 소청은 디스토피아 도시에서 눈을 뜬다. 낯선 이곳은 어딜까. 그런 소청 앞에 전생을 기억하지 못하는 미스터리한 남자가 나타난다.', 131, '15', 'RELEASED', 29.397000, 8.200000, 87212911, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 795607 AND g.name = '애니메이션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 795607 AND g.name = '판타지';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 795607 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 795607 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2508433, '唐小喜', '/gsqR3dgkDYSmKUpHAF1XUPSLyS4.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '唐小喜');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Xiao Qing (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 795607 AND a.name = '唐小喜';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3174708, 'Fuzheng Zhang', '/gB3NHNnG2WSC1SnjGQ36Z9qD8Rp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Fuzheng Zhang');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Masked Man (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 795607 AND a.name = 'Fuzheng Zhang';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2199340, '魏超', '/aPYAEWrS1lb1UYwCFejIcJOOGSU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '魏超');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sima (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 795607 AND a.name = '魏超';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2339332, 'Zhao Mingzhou', '/pXUlknCuP3u5FIfC7DluQzsKWAz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Zhao Mingzhou');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '牛头帮主 (voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 795607 AND a.name = 'Zhao Mingzhou';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2508434, 'Zheng Xiaopu', '/gREy73I5Ds5jTS5yc0r8H9PVY9n.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Zheng Xiaopu');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, '宝青坊主(voice)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 795607 AND a.name = 'Zheng Xiaopu';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2217620, 'Amp Wong', '/igbwZbS8ENmpbkMSP6fpXIZYtwE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Amp Wong');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 795607 AND d.name = 'Amp Wong';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/g1d3uFf3eGvVJQ5Coh793Zi1ASq.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 795607;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/5QWHHjwIPoaJYHNVL0D00bxDUUC.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 795607;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (81481, '도가니', '2011-09-22', '나는 이 사건을 세상에 알리기로 결심했다', '믿을 수 없지만, 한 청각장애인학교에서 실제 일어난 사건입니다. 2000년부터 5년간 청각장애아를 상대로 교장과 교사들이 비인간적인 성폭력과 학대를 저질렀습니다. 인정하고 싶지 않지만 이 이야기는 진실입니다. 이제 이 끔찍한 진실을 마주해야 할 시간입니다.', 124, '19', 'RELEASED', 22.709000, 8.161000, 31500000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 81481 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 150903, '공유', '/ocGoFb6TrK3uWGXt4WnuibUG1vD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '공유');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kang In-ho', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 81481 AND a.name = '공유';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 127720, '정유미', '/9QB7pIW08nDcSqXbVvGw40jRtmx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '정유미');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Seo Yoo-jin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 81481 AND a.name = '정유미';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 913196, '김현수', '/xxkyF7qkLpkuoiknH7mPAVnd7BG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김현수');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kim Yeon-doo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 81481 AND a.name = '김현수';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 929592, 'Jung In-seo', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jung In-seo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jin Yoo-ri', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 81481 AND a.name = 'Jung In-seo';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 145382, '백승환', '/6CLUQJqv0DvNVUoFHFcC1uvSk5h.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '백승환');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jeon Min-soo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 81481 AND a.name = '백승환';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1294471, '황동혁', '/xyr3b04ayyJtA5ZN3L0Af10WKIR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '황동혁');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 81481 AND d.name = '황동혁';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/p6VHOM2GuMe5MJXagoIZLy4UGXg.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 81481;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/e5MvOQIIouSgQcBHCMNA6Rsbwnd.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 81481;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (289, '카사블랑카', '1943-01-15', '당신의 눈동자에 건배를', '2차 대전으로 어수선한 프랑스령 모로코, 미국인인 릭(험프리 보가트)은 암시장과 도박이 판치는 카사블랑카에서 카페를 운영하고 있다. 어느 날 미국으로 가기 위해 비자를 기다리는 피난민들 틈에 섞여 레지스탕스 리더인 라즐로(폴 헨라이드)와 아내 일자(잉그리드 버그만)이 릭의 카페를 찾는다. 일자는 릭의 옛 연인이었다. 라즐로는 릭에게 미국으로 갈 수 있는 통행증을 부탁하지만 아직도 일자를 잊지 못하는 릭은 선뜻 라즐로의 청을 들어주지 못한다. 경찰서장 르노와 독일군 소령 스트라세는 라즐로를 쫓아 릭의 카페를 찾고, 결국 릭은 라즐로와 함께 일자를 떠나보내는데...', 102, '12', 'RELEASED', 39.266000, 8.200000, 10462500, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 289 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 289 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4110, '험프리 보가트', '/uuLZcNsRTof5wh1RddLbFEsGjoN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '험프리 보가트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rick Blaine', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 289 AND a.name = '험프리 보가트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4111, '잉그리드 버그만', '/9LdhzK5CVkLZjRdQ08V9C0Oiu9I.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '잉그리드 버그만');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ilsa Lund', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 289 AND a.name = '잉그리드 버그만';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4112, 'Paul Henreid', '/kqlDSharpQjqeNVS5BZkqqJl3ZF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Paul Henreid');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Victor Laszlo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 289 AND a.name = 'Paul Henreid';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4113, 'Claude Rains', '/agbKGRcw65QRfMPm1aDijUL1Lqd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Claude Rains');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Captain Louis Renault', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 289 AND a.name = 'Claude Rains';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3001, 'Conrad Veidt', '/AkRjkTKXIUoPlczpPegaiFeg4lu.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Conrad Veidt');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Major Heinrich Strasser', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 289 AND a.name = 'Conrad Veidt';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 4109, 'Michael Curtiz', '/AnxPuEsdjPTJ6uIaHY0KdgBeu7t.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Michael Curtiz');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 289 AND d.name = 'Michael Curtiz';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2y4FgbomoL5Aa9EGM3dqDEvvDdT.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 289;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rrsG3xYrWifoduZtsIZ4ntoDfBY.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 289;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (517814, '가버나움', '2018-09-20', '나를 세상에 태어나게 한 "부모님을 고소하고 싶어요..."', '칼로 사람을 찌르고 교도소에 갇힌 12살 소년 자인은 부모를 상대로 소송을 제기한다. 신분증도 없고, 출생증명서도 없어서 언제 태어났는지도 모르는 자인. 법정에 선 자인에게 왜 부모를 상대로 소송을 제기하는지 판사가 묻자 자인이 대답한다. ‘태어나게 했으니까요. 이 끔찍한 세상에 태어나게 한 게 그들이니까요.’', 126, '', 'RELEASED', 19.594000, 8.200000, 64978931, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 517814 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2084595, 'Zain Al Rafeea', '/b9ZlPHX1KNjy1FeQ1SBAl3lvd8E.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Zain Al Rafeea');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Zain', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 517814 AND a.name = 'Zain Al Rafeea';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2084596, 'Yordanos Shifera', '/kQUcANAYcpg98zyargFHqv17hhr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Yordanos Shifera');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rahil', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 517814 AND a.name = 'Yordanos Shifera';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2084597, 'Boluwatife Treasure Bankole', '/790MeyflzEn6DG5wPcsduXbS1Re.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Boluwatife Treasure Bankole');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Yonas', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 517814 AND a.name = 'Boluwatife Treasure Bankole';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2084599, 'Kawsar Al Haddad', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Kawsar Al Haddad');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Souad', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 517814 AND a.name = 'Kawsar Al Haddad';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2084600, 'Fadi Kamel Yousef', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Fadi Kamel Yousef');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Selim', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 517814 AND a.name = 'Fadi Kamel Yousef';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 53431, '나딘 라바키', '/mV1JAlM4CAdzosSqZs2ch2TPKLS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '나딘 라바키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 517814 AND d.name = '나딘 라바키';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oleotXPpilsHknpNUyitqKG6YLK.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 517814;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/sEW8q9al73rtow257dXAusD9yS7.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 517814;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (489, '굿 윌 헌팅', '1997-12-05', '그의 생애 처음으로 인생의 등대를 만나다', '수학, 법학, 역사학 등 모든 분야에 재능이 있는 윌(맷 데이먼)은 천재적인 두뇌를 가지고 있지만 어린 시절 받은 상처로 인해 세상에 마음을 열지 못하고 절친인 처키(벤 애플렉)와어울려 다니는 불우한 반항아이다. 대학을 청소하면서 벽에서 우연히 접한 수학 문제를 간단히 풀어버린 일을 그 대학 교수 램보가 발견하고 윌에게 관심을 갖지만 윌은 냉대한다. 어느 날 보호관찰 대상인 윌은 폭행죄로 수감되고, 램보 교수는 자신이 감독하겠다는 조건으로 윌을 석방시킨 다음 대학 동기인 심리학 교수 숀(로빈 윌리엄스)에게 그를 부탁한다. 거칠기만 하던 윌은 숀과 함께 시간을 보낼수록 상처를 위로 받으며 조금씩 변화하기 시작하는데...', 126, '15', 'RELEASED', 70.941000, 8.200000, 225900000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 489 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1892, '맷 데이먼', '/4KAxONjmVq7qcItdXo38SYtnpul.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '맷 데이먼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Will Hunting', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 489 AND a.name = '맷 데이먼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2157, '로빈 윌리엄스', '/iYdeP6K0qz44Wg2Nw9LPJGMBkQ5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로빈 윌리엄스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sean Maguire', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 489 AND a.name = '로빈 윌리엄스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 880, '벤 애플렉', '/aTcqu8cI4wMohU17xTdqmXKTGrw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '벤 애플렉');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chuckie Sullivan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 489 AND a.name = '벤 애플렉';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1640, '스텔란 스카스가드', '/x78BtYHElirO7Iw8bL4m8CnzRDc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '스텔란 스카스가드');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gerald Lambeau', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 489 AND a.name = '스텔란 스카스가드';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6613, '미니 드라이버', '/2uwaHwpoutbXMuYY5v2dhWU0hml.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '미니 드라이버');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Skylar', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 489 AND a.name = '미니 드라이버';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 5216, '구스 반 산트', '/kICHgrSh4eiICjz8piy9fTXIgph.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '구스 반 산트');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 489 AND d.name = '구스 반 산트';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/iHRY9YuBOyga9MHi59pt6KRGXcB.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 489;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oLsts7ct0NVkdYpx5rZg10MG6zh.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 489;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (348, '에이리언', '1979-05-25', '우주에서는 아무도 당신의 비명소리를 들을 수 없다', '2122년, 2천만톤의 광물과 7명의 승무원을 태우고 지구로 귀환중인 화물선 노스트로모호의 메인 컴퓨터 마더는 어떤 위성에서 나오는 알 수 없는 신호를 포착하게 된다. 마더에 의해 동면중 깨어난 승무원들은 이 신호를 조사하기 위해 혹성 LA-426에 착륙한다. 이들 중엔 2등 항해사인 엘렌 리플리도 있다. 혹성에서 정체 불명의 우주선을 발견한 그들은 탐사에 나서지만, 우주선은 이미 오래전에 파괴되어 썩고 있었으며 승무원들은 모두 미이라로 변해 있다. 사고 원인을 찾기 위해 좀 더 안으로 들어간 조사반은 여기저기 계란 모양의 물체가 있는 산란실을 발견하는데...', 117, '15', 'RELEASED', 142.471000, 8.158000, 104931801, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 348 AND g.name = '공포';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 348 AND g.name = 'SF';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4139, 'Tom Skerritt', '/xP2BNCa5NixphQOpFCl44B0HWgW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Tom Skerritt');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dallas', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 348 AND a.name = 'Tom Skerritt';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10205, '시고니 위버', '/wTSnfktNBLd6kwQxgvkqYw6vEon.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '시고니 위버');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ripley', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 348 AND a.name = '시고니 위버';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5047, 'Veronica Cartwright', '/wIqQnSU4HJLYS2JE4S6jjyb2jMP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Veronica Cartwright');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lambert', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 348 AND a.name = 'Veronica Cartwright';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5048, '해리 딘 스탠턴', '/197UiLVdxPOv8196sqmUpJzOQB5.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '해리 딘 스탠턴');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Brett', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 348 AND a.name = '해리 딘 스탠턴';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5049, '존 허트', '/8NriFCt6BxzW1Ex2TxGJfvQibrz.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '존 허트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kane', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 348 AND a.name = '존 허트';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 578, '리들리 스콧', '/zABJmN9opmqD4orWl3KSdCaSo7Q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '리들리 스콧');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 348 AND d.name = '리들리 스콧';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/k3m1RdlYUlCx51PxxNMlmbm7QSk.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 348;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hdHIjZxq3SWFqpAz4NFhdbud0iz.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 348;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (422, '8과 1/2', '1963-02-14', '', '영화감독 로이드는 어느 날 자신의 몸이 공중에서 추락하는 꿈을 꾼다. 현실의 일상에서 지쳐 있던 그는 요양을 핑계로 온천에 간다. 그러나 그는 온천에서도 생활과 일에서 벗어날 수가 없다. 그리고 온천에서 여생을 보내는 노인들 속에 자신이 있다는 환상을 보기 시작한다. 그는 아내와도 애인과도 모두 지쳐 있는 상태이다. 그런 그에게 유일한 구원은 마음 속에 나타나는 창부같은 성녀 클라우디아였다. 로이드는 소년 시절의 추억에 잠기는 동안 오래도록 잊고 있던 것을 생각해 낸다.', 139, '', 'RELEASED', 16.529000, 8.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 422 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5676, '마르첼로 마스트로얀니', '/bfLnFfNfMC73Q7WW90xQy2PvRZm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마르첼로 마스트로얀니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Guido Anselmi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 422 AND a.name = '마르첼로 마스트로얀니';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5682, '아누크 에메', '/rXkZZRfbBlGfcxQstQqeXX0GDZx.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아누크 에메');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Luisa Anselmi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 422 AND a.name = '아누크 에메';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5683, 'Sandra Milo', '/uBuFRl43GcQN4qAbeWA9rvkY2Yf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sandra Milo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Carla', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 422 AND a.name = 'Sandra Milo';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4959, '클라우디아 카르디날레', '/gbTVdZGrOwteJ7qYSzyn8XpUk0H.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '클라우디아 카르디날레');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Claudia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 422 AND a.name = '클라우디아 카르디날레';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5684, 'Rossella Falk', '/6C2jmLBaR8g5f7yVMugC0LO5yDk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Rossella Falk');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rossella', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 422 AND a.name = 'Rossella Falk';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 4415, '페데리코 펠리니', '/r0GTpMWUrxgPRbMmv38mNggOBvA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '페데리코 펠리니');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 422 AND d.name = '페데리코 펠리니';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mK7BLRf7zYFl68J4uZqdEt9u7e4.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 422;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/y2FNZLHynsevBnVTocGW6c3pQpr.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 422;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (20334, '모퉁이 가게', '1940-01-12', '', '크라릭은 헝가리 부다페스트의 어딘가에 자리한 ‘마투첵 앤 컴퍼니’라는 선물 가게에서 9년 동안 사장의 신임을 받으며 일해오고 있다. 그와 이 상점의 신입 점원인 노박은 말다툼으로 번지지 않는 대화란 거의 성립되지 않는다고 해도 좋을 만큼 대립하는 사이이다. 그런 둘에게도 공통점은 있으니 그건 두 사람 모두 만나보기는커녕 얼굴도 알지 못하는 이성과 편지를 주고받으며 남모를 사랑을 키워오고 있다는 것. 사실 둘은 서로가 편지를 주고받는 사이인데도 상대방이 자신의 ‘미지의 연인’이란 걸 알지 못하고 있다. 드디어 두 사람이 데이트하기로 약속한 그 기분 좋은 날, 크라릭은 사장으로부터 해고통지를 받는데...', 99, '', 'RELEASED', 17.398000, 8.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 20334 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 20334 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 20334 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 854, '제임스 스튜어트', '/yId5fdDqShOkr0YjCoJbUOZipcX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제임스 스튜어트');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Alfred Kralik', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 20334 AND a.name = '제임스 스튜어트';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 14869, 'Margaret Sullavan', '/dEZy2AzvB0M1t6lXe1ObZMKALp8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Margaret Sullavan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Klara Novak', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 20334 AND a.name = 'Margaret Sullavan';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 9067, 'Frank Morgan', '/gwbmaZ6EGYbsBbe8pWW3Gded02k.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Frank Morgan');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Hugo Matuschek', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 20334 AND a.name = 'Frank Morgan';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 24820, 'Joseph Schildkraut', '/vhcQACFWxEt1HttbGcgB7vcBYLS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Joseph Schildkraut');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ferencz Vadas', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 20334 AND a.name = 'Joseph Schildkraut';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 85956, 'Sara Haden', '/77NW5jRIn7rxzEMxhR2kjsCCDXg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Sara Haden');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Flora', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 20334 AND a.name = 'Sara Haden';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2428, '에른스트 루비치', '/tAsEhwiu3oqDgzCZSYN2xu0dEdD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '에른스트 루비치');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 20334 AND d.name = '에른스트 루비치';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dZ1aEzGYRiqJwPfjS6VL7wUkHmF.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 20334;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wqgZSvgoctaadgwUdPYVsksivxn.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 20334;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (872, '사랑은 비를 타고', '1952-04-09', '영화 역사상 가장 유쾌하고 사랑스러운 뮤지컬 영화', '아마츄어 쇼 코미디언인 돈 록우드(진 켈리)와 코스모(도날드 오코너)는 공연을 하며 이곳저곳을 떠돌아다니다 뜻대로 되지않자 새 일자리를 얻기위해 헐리우드로 온다. 그런데 우연찮게 돈 록우드는 마뉴멘탈 영화사의 스턴트맨 역을 따내게 되고, 당시 최고의 인기를 누리고 있던 여배우인 리나 레이먼트(쟌 하겐)와 함께 다수의 영화에 출연함으로써 단연 스타로 급부상하게 된다. 그러나 화려한 영광도 잠시, 헐리웃 영화계가 무성영화에서 유성영화 체제로 전환됨으로써 목소리 연기가 너무나 형편없는 리나 레이먼트 때문에 영화를 완전히 망치게 되는데...', 102, '', 'RELEASED', 25.579000, 8.200000, 7200000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 872 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 872 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 13294, '진 켈리', '/hiyOUoYWGOth6evR0QjGeagSVUo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '진 켈리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Don Lockwood', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 872 AND a.name = '진 켈리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 13295, 'Donald O''Connor', '/sV7Dx16wcajPsxJItmW5dX4axoW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Donald O''Connor');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cosmo Brown', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 872 AND a.name = 'Donald O''Connor';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8857, '데비 레이놀즈', '/2jG8pk5fr9ZgCQOH1cLVDWbbwBK.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '데비 레이놀즈');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kathy Selden', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 872 AND a.name = '데비 레이놀즈';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 13296, 'Jean Hagen', '/nNhtN5Kk7JiwwP2qpxmzyqUyXVi.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jean Hagen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lina Lamont', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 872 AND a.name = 'Jean Hagen';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 13297, 'Millard Mitchell', '/elMhz4DvHUu5OK8hdC3cpzPwGEk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Millard Mitchell');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'R.F. Simpson', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 872 AND a.name = 'Millard Mitchell';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 13284, '스탠리 도넌', '/hvRi8etQyf6Zfh7MRsRP0pBR9Om.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '스탠리 도넌');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 872 AND d.name = '스탠리 도넌';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 13294, '진 켈리', '/hiyOUoYWGOth6evR0QjGeagSVUo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '진 켈리');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 872 AND d.name = '진 켈리';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/7kfvd0Noh4VpdhNRSHc2zYpUlx8.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 872;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rJghNsjhYcrJy2AW9y7aZ9yC1Lj.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 872;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1398, '잠입자', '1979-05-25', '', '잿빛의 이름없는 이 도시는 ''구역''이라는 곳으로 철조망으로 둘러싸여 군인들이 지키고 있는 외계의 공간이라 알려져 있다. 아내의 만류에도 불구하고 스토커라는 이름의 한 사내가 칠흑 같은 어둠 속을 걸어나온다. 그는 구역 안으로 사람들을 안내할 수 있는 정신적인 재능을 부여받은 소수의 무리 중의 하나이다. 하지만 이 일은 너무나도 위험천만한 일이기 때문에 정부에 걸릴 경우엔 감옥행도 불사해야 하는 일이다. 사람들이 이 구역 안의 공간으로 들어가고자 하는 이유는 이곳에 가는 오직 한 사람만 자신의 비밀스런 꿈을 이룰 수 있다는 설이 있기 때문이다. 그 날밤, 스토커는 두 사람을 안내해 구역 안으로 들어간다. 한 사람은 유명한 작가로 이제는 영감이 소멸돼 자신의 천재성에 대해 회의를 갖기 시작하는 사람이고, 또 다른 한 사람은 조용한 과학자로 여행보다는 배낭에 더 관심을 가지는 사람이다. 버려진 공간 ''구역''에서 그 공간을 향하는 길은 정해져 있지 않다. 그들이 점점 공간에 가까이 다가갈수록 규칙은 변하고 스토커는 커다란 위험에 직면하는데...', 162, '', 'RELEASED', 30.015000, 8.155000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1398 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1398 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 28078, 'Александр Кайдановский', '/yHYfkxQu3GVKxx5ibFmEom8qAS6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Александр Кайдановский');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Stalker', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1398 AND a.name = 'Александр Кайдановский';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8475, 'Анатолий Солоницын', '/37Vb7vNMHAz1s2WI5kW4BHt0X0N.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Анатолий Солоницын');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Writer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1398 AND a.name = 'Анатолий Солоницын';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1190992, 'Микола Гринько', '/epmuCiaA0gitEREo33mLP3WYzKo.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Микола Гринько');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Professor', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1398 AND a.name = 'Микола Гринько';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 28079, 'Алиса Фрейндлих', '/psK6Vqmz2e6DAjxfZb9HJuBbtWd.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Алиса Фрейндлих');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Stalker''s Wife', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1398 AND a.name = 'Алиса Фрейндлих';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 28080, 'Наталья Абрамова', '/iJOfkfk0MT3rW1iVrzp8t4pKotr.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Наталья Абрамова');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Martha, Stalker''s Daughter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1398 AND a.name = 'Наталья Абрамова';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 8452, '안드레이 타르콥스키', '/mytn9s5kc6CqzKZtbuJ73oA6ujy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '안드레이 타르콥스키');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1398 AND d.name = '안드레이 타르콥스키';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/mzJxTxIODATNaYUwyJ2C2XPkhXW.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1398;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6yrbWzzrPp7pwz6zHdifspJk8t3.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1398;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (693134, '듄: 파트 2', '2024-02-27', '운명의 반격이 시작된다!', '황제의 모략으로 멸문한 가문의 유일한 후계자 폴. 어머니 레이디 제시카와 간신히 목숨만 부지한 채 사막으로 도망친다. 그곳에서 만난 반란군들과 숨어 지내다 그들과 함께 황제의 모든 것을 파괴할 전투를 준비한다. 한편 반란군들의 기세가 높아질수록 불안해진 황제와 귀족 가문은 잔혹한 암살자 페이드 로타를 보내 반란군을 몰살하려 하는데…', 167, '12', 'RELEASED', 192.150000, 8.200000, 711844359, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 693134 AND g.name = 'SF';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 693134 AND g.name = '모험';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1190668, '티모시 샬라메', '/BE2sdjpgsa2rNTFa66f7upkaOP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '티모시 샬라메');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paul Atreides', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 693134 AND a.name = '티모시 샬라메';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 505710, '젠데이아', '/3WdOloHpjtjL96uVOhFRRCcYSwq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '젠데이아');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chani', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 693134 AND a.name = '젠데이아';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 933238, '레베카 퍼거슨', '/lJloTOheuQSirSLXNA3JHsrMNfH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레베카 퍼거슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jessica', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 693134 AND a.name = '레베카 퍼거슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3810, '하비에르 바르뎀', '/iQnY4JYe7mFoaO2IH1pFNIDL0MH.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하비에르 바르뎀');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Stilgar', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 693134 AND a.name = '하비에르 바르뎀';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16851, '조쉬 브롤린', '/sX2etBbIkxRaCsATyw5ZpOVMPTD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조쉬 브롤린');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Gurney Halleck', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 693134 AND a.name = '조쉬 브롤린';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 137427, '드니 빌뇌브', '/zdDx9Xs93UIrJFWYApYR28J8M6b.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '드니 빌뇌브');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 693134 AND d.name = '드니 빌뇌브';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/8uUU2pxm6IYZw8UgnKJyx7Dqwu9.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 693134;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xOMo8BRK7PfcJv9JCnx7s5hj0PX.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 693134;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (1026227, '우리에게는 아직 내일이 있다', '2023-10-26', '', '가족에게 헌신적이었던 어머니 ‘델리아’가 수상한 편지를 받은 후 변화하는 과정을 그린 영화', 118, '12', 'RELEASED', 19.599000, 8.200000, 49245771, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1026227 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1026227 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 1026227 AND g.name = '전쟁';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 133214, 'Paola Cortellesi', '/6saUVpvd5WASLoWokWErTp5VviY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Paola Cortellesi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Delia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1026227 AND a.name = 'Paola Cortellesi';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 56843, 'Valerio Mastandrea', '/tE7JkSuyv2N8vtEN0YypsCAxW9B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Valerio Mastandrea');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ivano', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1026227 AND a.name = 'Valerio Mastandrea';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2635684, 'Romana Maggiora Vergano', '/noJNRHNXxHuOYO3QQayGhaNoby6.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Romana Maggiora Vergano');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marcella', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1026227 AND a.name = 'Romana Maggiora Vergano';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1689522, 'Emanuela Fanelli', '/iBnInh4sJq0VQKITiHPp4R5gJWc.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Emanuela Fanelli');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marisa', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1026227 AND a.name = 'Emanuela Fanelli';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 128227, 'Giorgio Colangeli', '/3LxOBPqDPT4k0CJ4hJGMSrYKtP1.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Giorgio Colangeli');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sor Ottorino', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 1026227 AND a.name = 'Giorgio Colangeli';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 133214, 'Paola Cortellesi', '/6saUVpvd5WASLoWokWErTp5VviY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Paola Cortellesi');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 1026227 AND d.name = 'Paola Cortellesi';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/hc9SHN0vB6iyr6MBYI6bKrpDHvJ.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1026227;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/39LXWfH7jWRcpJCBn7Hp4Vpv53S.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 1026227;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (606856, '토고', '2019-12-20', '', '1925년 겨울, 최고의 썰매개 조련사인 레온하드 세팔라와 그의 개썰매팀 선두견 토고의 알려지지 않은 실화에 관한 영화다. 디프테리아 혈청을 작은 마을 ''놈''으로 가져오기 위해 세팔라와 토고는 위험을 무릅쓰고 거친 알래스카 툰드라를 향한 감동적이고 희망찬 모험을 시작한다. 그리고 이것은 그들의 강인함과 용기, 결단력을 시험하는 여정이 된다.', 113, '12', 'RELEASED', 23.112000, 8.200000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 606856 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 606856 AND g.name = '가족';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 5293, '윌렘 대포', '/ui8e4sgZAwMPi3hzEO53jyBJF9B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '윌렘 대포');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Leonhard Seppala', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 606856 AND a.name = '윌렘 대포';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 86034, '줄리앤 니콜슨', '/AqlEWaBfrqwb6St5qrL1yJ9d6VS.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '줄리앤 니콜슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Constance Seppala', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 606856 AND a.name = '줄리앤 니콜슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 32887, 'Christopher Heyerdahl', '/pTPZa3TFIkxRbqM5adXYE51a99s.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Christopher Heyerdahl');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'George Maynard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 606856 AND a.name = 'Christopher Heyerdahl';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 97416, 'Richard Dormer', '/6zPTBESTihoWHwqj7KK1BuQ1dLY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Richard Dormer');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Dr. Curtis Welch', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 606856 AND a.name = 'Richard Dormer';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 43933, 'Adrien Dorval', '/toyI2xbgYYRLD4P0Uoudn59oW8G.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Adrien Dorval');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bill Clark', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 606856 AND a.name = 'Adrien Dorval';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 21673, 'Ericson Core', '/8Q6xcRAEM2vJLiX1A8sEQ5Oes0l.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Ericson Core');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 606856 AND d.name = 'Ericson Core';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4Wm3YHJJZ3JsrkwfoWquu9p3nOv.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 606856;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/2Jr2OBzoLLOYqQWnyN4eicZv0sL.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 606856;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (475557, '조커', '2019-10-01', '내 인생이 비극인 줄 알았는데, 코미디였어', '홀어머니와 사는 아서 플렉은 코미디언을 꿈꾸지만 그의 삶은 좌절과 절망으로 가득 차 있다. 광대 아르바이트는 그에게 모욕을 가져다주기 일쑤고, 긴장하면 웃음을 통제할 수 없는 신경병 증세는 그를 더욱 고립시킨다. 정부 예산 긴축으로 인해 정신과 약물을 지원하던 공공의료 서비스마저 없어져 버린 어느 날, 아서는 지하철에서 시비를 걸어온 증권사 직원들에게 얻어맞던 와중에 동료가 건네준 권총으로 그들을 쏴 버리고 만다. 군중들은 지배계급에 대한 저항의 아이콘이 된 그를 추종하기 시작하며 광대 마스크로 얼굴을 가리고 거리로 쏟아져 나오기 시작하는데...', 122, '15', 'RELEASED', 180.128000, 8.100000, 1078958629, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 475557 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 475557 AND g.name = '스릴러';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 475557 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 73421, '호아킨 피닉스', '/u38k3hQBDwNX0VA22aQceDp9Iyv.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '호아킨 피닉스');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Arthur Fleck', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 475557 AND a.name = '호아킨 피닉스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 380, '로버트 드 니로', '/cT8htcckIuyI1Lqwt1CvD02ynTh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 드 니로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Murray Franklin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 475557 AND a.name = '로버트 드 니로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1545693, '재지 비츠', '/ijrT4pvALvxU0gphea4YxDnDh6e.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '재지 비츠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sophie Dumond', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 475557 AND a.name = '재지 비츠';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4432, '프랜시스 콘로이', '/aJRQAkO24L6bH8qkkE5Iv1nA3gf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '프랜시스 콘로이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Penny Fleck', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 475557 AND a.name = '프랜시스 콘로이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16841, '브래트 컬렌', '/4P6TsRcnr9MRbXlCdHitulGM5LT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '브래트 컬렌');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Thomas Wayne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 475557 AND a.name = '브래트 컬렌';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 57130, '토드 필립스', '/A6FPht87DiqXzp456WjakLi2AtP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '토드 필립스');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 475557 AND d.name = '토드 필립스';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/wrCwH6WOvXQvVuqcKNUrLDCDxdw.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 475557;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gZWl93sf8AxavYpVT1Un6EF3oCj.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 475557;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (851644, '20세기 소녀', '2022-10-06', '17살, 내 시선 끝에 서 있던 나의 첫사랑', '보라의 둘도 없는 친구 연두는 심장 수술을 위해 미국에 가면서 자신이 좋아하는 남자 백현진에 대한 모든 정보를 수집해 달라고 보라에게 부탁한다. 보라는 백현진의 가장 친한 친구 풍운호와 먼저 친해지기로 한다. 하지만 보라의 서투른 계획은 예상치 못한 방향으로 전개된다. 새로운 세기가 오기 1년 전인 1999년, 17세가 된 보라는 첫사랑의 열병에 빠진다.', 119, '', 'RELEASED', 76.885000, 8.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 851644 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 851644 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 140335, '김유정', '/a7rLBCFKlTIjL2SifS4QkF7do3y.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김유정');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Na Bo-ra', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 851644 AND a.name = '김유정';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2117890, '변우석', '/nGJfmREoeUQyd9NKUp83enH6SXN.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '변우석');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Poong Woon-ho', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 851644 AND a.name = '변우석';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2377671, '박정우', '/7euKnxnUz6HqjkAHsSLy2dsPvRg.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '박정우');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Baek Hyun-jin', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 851644 AND a.name = '박정우';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3218480, '노윤서', '/A67wGhTozfav5saZ1Umi5f98Ezb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '노윤서');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kim Yeon-du', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 851644 AND a.name = '노윤서';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1806235, '김성경', '/xsH2yoY7K2pWjQ5vIMetMrXenV2.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '김성경');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Bo-ra''s Mother', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 851644 AND a.name = '김성경';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2378215, 'Bang Woo-ri', '/ofaTg8VN5NniUjEyLnB9q5BWHcR.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Bang Woo-ri');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 851644 AND d.name = 'Bang Woo-ri';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/xM9Jt2sA6QcvLuHKM0RI3BMtFc5.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 851644;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/37y53Jt8K6MvN6s4zJVFa61luO2.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 851644;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (791373, '잭 스나이더의 저스티스 리그', '2021-03-18', '기다렸던 감독판, 잭 스나이더의 저스티스 리그', '슈퍼맨이 죽고 지구에 어둠의 그림자가 드리운다. 마더박스를 차지하기 위해 빌런 스테픈울프가 파라데몬 군단을 이끌고 지구에 온 것이다. 지구를 지키기 위해 목숨을 바친 슈퍼맨의 희생이 헛되지 않도록 하기 위해 브루스 웨인은 다이애나 프린스와 적에 맞서기로 한다. 배트맨과 원더 우먼은 새로이 등장한 위협에 맞서 싸우기 위해 특별한 능력을 가진 메타휴먼, 아쿠아맨과 사이보그, 플래시를 찾아가 설득하여 힘을 합친다. 드디어 한 팀이 된 저스티스 리그. 혹시 스테픈울프와 데사드 그리고 다크사이드를 물리치기에 너무 늦어버린 것이 아닐까?', 242, '12', 'RELEASED', 115.920000, 8.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 791373 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 791373 AND g.name = '모험';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 791373 AND g.name = '판타지';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 880, '벤 애플렉', '/aTcqu8cI4wMohU17xTdqmXKTGrw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '벤 애플렉');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Batman / Bruce Wayne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 791373 AND a.name = '벤 애플렉';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 73968, '헨리 카빌', '/iWdKjMry5Pt7vmxU7bmOQsIUyHa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '헨리 카빌');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Superman / Clark Kent', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 791373 AND a.name = '헨리 카빌';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 90633, '갤 가돗', '/AbXKtWQwuDiwhoQLh34VRglwuBE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '갤 가돗');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wonder Woman / Diana Prince', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 791373 AND a.name = '갤 가돗';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1313559, '레이 피셔', '/310snvA05xDOQZDn2fJSp242GHw.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '레이 피셔');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cyborg / Victor Stone', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 791373 AND a.name = '레이 피셔';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 117642, '제이슨 모모아', '/3troAR6QbSb6nUFMDu61YCCWLKa.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이슨 모모아');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Aquaman / Arthur Curry', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 791373 AND a.name = '제이슨 모모아';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 15217, '잭 스나이더', '/iD0GDqkvJXDXiNEZej198hjt3Tt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '잭 스나이더');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 791373 AND d.name = '잭 스나이더';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/qd7iPB26bwMPZqRcnflzAeDkMn.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 791373;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/pcDc2WJAYGJTTvRSEIpRZwM3Ola.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 791373;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (399106, '파이퍼', '2016-06-16', '', '배고픈 도요새가 엄마의 도움 없이 먹이를 찾아 나선다는 이야기.', 6, '', 'RELEASED', 12.164000, 8.143000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 399106 AND g.name = '가족';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 399106 AND g.name = '애니메이션';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 8012, 'Alan Barillaro', '/7GXd8zQUoEWpcD01EaG29oHSwQE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Alan Barillaro');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 399106 AND d.name = 'Alan Barillaro';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/rfEkkVzmrMYqGezNLl02mVyJCP2.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 399106;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4GWYk5VP9qu1rNSeNAwNaBy9mwS.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 399106;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (37165, '트루먼 쇼', '1998-06-04', '미디어와 대중의 관음 폭력을 고발한다', '트루먼 버뱅크는 작고 조용한 섬마을에 사는 평범한 세일즈맨이다. 그런 그가 자신의 삶에 대해 의문을 갖기 시작한 것은 평소와 다름없이 평범한 어느 날, 갑자기 하늘에서 촬영용 조명등이 떨어지고, 어렸을 적 자신이 익사를 직접 목격했던 아버지가 살아오고, 또 누군가에 의해 끌려가는 등 상식 밖의 일들이 벌어지고 나서부터였다. 평생을 그다지 신경쓰지 않고 지냈던 일상이었지만 주변을 보니 이상한 일이 너무 많았다. 결국 자신이 특별한 상황에 놓여있다는 확신을 하게된 트루먼은 첫사랑 실비아의 모든 것이 다 거짓라는 말을 되새기며 일상으로부터 탈출을 결심하게 되는데...', 103, '12', 'RELEASED', 102.785000, 8.143000, 264100000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 37165 AND g.name = '코미디';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 37165 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 206, '짐 캐리', '/u0AqTz6Y7GHPCHINS01P7gPvDSb.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '짐 캐리');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Truman Burbank', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 37165 AND a.name = '짐 캐리';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 350, '로라 리니', '/ztQXGmNLzhDV22rAvcXzCG4d0cy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로라 리니');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Meryl Burbank / Hannah Gill', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 37165 AND a.name = '로라 리니';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11315, 'Noah Emmerich', '/qwPPHYWJ3a9yRwFXicbbHsf60Nm.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Noah Emmerich');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marlon / Louis Coltrane', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 37165 AND a.name = 'Noah Emmerich';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11317, '나타샤 맥켈혼', '/9pxaoasotR1pdCXYSfN1pkm0geO.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '나타샤 맥켈혼');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Lauren Garland / Sylvia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 37165 AND a.name = '나타샤 맥켈혼';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11318, '홀랜드 테일러', '/jt9yFB3nLfZQ0c1DcnvvcfA11gB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '홀랜드 테일러');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Angela Montclair / Alanis Montclair', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 37165 AND a.name = '홀랜드 테일러';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 2690, '피터 위어', '/4GxIZX5gtbMpW4ZgHwvGmLSIHOE.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '피터 위어');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 37165 AND d.name = '피터 위어';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/AsUv4pFf1UQuOLKf7nYUXgmgCNf.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 37165;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/aCHn2TXYJfzPXQKA6r9mKPbMlUB.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 37165;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (20941, '이노센트 보이스', '2005-01-28', '', '1980년대 엘살바도르의 한 마을. 같은 반 여자애 크리스티나를 좋아하는 열한 살 차바는 전쟁을 피해 미국으로 간 아버지를 대신해 조금 일찍 가장이 된 것 말고는 남다를 게 없는 소년이다. 재봉틀로 옷을 만들어 생계를 꾸려가는 자상한 어머니와 뚱땡이 누나, 귀여운 남동생과 함께 사는 차바는 어머니가 만든 옷을 팔러 시내에 갔다가 장난기 많은 버스 운전사를 만나 일자리를 얻게 된다. 돈을 벌게 된 뿌듯함도 잠시, 전쟁은 점점 심해져 밤이면 침대 밑에 엎드려 총알이 멈추기를 기다리는 날들이 계속되던 어느 날. 이웃집 누나가 총에 맞아 죽는 걸 목격하게 된다. 차바와 함께 누나의 죽음을 지켜본 베토 삼촌은 상황은 앞으로 매일매일 더 나빠지기만 할거라며, 금지곡을 방송하는 작은 라디오를 건네준다. 친구들과 종이반딧불이를 띄울 때도, 학교에 갈 때도 라디오에서 흘러나오는 노래에 귀를 기울이게 된 차바. 그러나 베토 삼촌 말대로 상황은 점점 나빠지기만 한다. 강가에서 만나게 된 같은 반 친구는 군대에 끌려간 뒤, 거칠고 폭력적으로 변해버려 차바를 놀라게 한다. 그 사이 군인들이 여자를 강제로 끌고 가는 걸 말리던 신부님은 얻어맞아 다치고, 언젠가 돌아올 아버지를 기다리느라 옮기지 못했던 차바의 집도 결국 이사를 하게 된다. 전쟁은 더욱 심해져 열두살이 된 차바의 친구들은 대부분 군대에 끌려갔다. 이제 남은 것은 열두살 생일이 얼마 남지 않은 어린 친구들 뿐. 하지만 상황은 더욱 악화되고, 군인들의 눈을 용케 피해있던 차바에게도 열두살 생일이 차츰 다가오는데…', 120, '', 'RELEASED', 18.274000, 8.100000, 837000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 20941 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 20941 AND g.name = '전쟁';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 145059, 'Carlos Padilla', '/xyeTntUUIfPH66vnlinwy7Tl1Ir.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Carlos Padilla');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Chava', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 20941 AND a.name = 'Carlos Padilla';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 145061, 'Xuna Primus', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Xuna Primus');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cristina Maria', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 20941 AND a.name = 'Xuna Primus';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 10839, 'Leonor Varela', '/ooZQvMganzssNGoTKaIgFXM38U7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Leonor Varela');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Kella', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 20941 AND a.name = 'Leonor Varela';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 72128, 'José María Yázpik', '/uqZE7oXEADJ1NTg7g7xRELw59Hy.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'José María Yázpik');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Uncle Beto', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 20941 AND a.name = 'José María Yázpik';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1660431, 'Gustavo Muñoz', '', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gustavo Muñoz');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Ancha', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 20941 AND a.name = 'Gustavo Muñoz';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 46085, 'Luis Mandoki', '/52n4X9YpcVkeMH7IHMiMYk7molA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Luis Mandoki');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 20941 AND d.name = 'Luis Mandoki';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/dak56oMnrIWnp9hXXDZuUyw8LTq.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 20941;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/oaUWMPGxpb4OsVCrppmlhQA2bwb.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 20941;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (9702, '암흑 속의 혈투', '1993-02-05', '', '파코(Paco: 벤자민 브래트 분)와 크루스(Cruz: 제시 보레고 분)는 사촌인 미클로(Miklo: 다미안 차파 분)와 LA의 멕시코계 미국인 지역인 치카노에서 성장한다. 파코는 거리의 부사인 반면 크루스는 예술적 재능의 소유자이다. 미클로는 혼혈아로 흰 피부와 푸른 눈 때문에 치카노 세계에서 받아들여지지 않아 치카노 일원이 되려고 애쓴다. 셋은 죽을 때까지 우정을 지킬 것을 서약한다. 어느날 크루스는 캘리포니아주 미술 작품 심사에서 1등을 하나 경쟁 조직인 트레스 푼토스의 습격으로 척추가 부러진다. 다음날 보복을 하기 위해 적의 두목 스파이더(Spider: 레이 오리엘 분)를 모욕하나 스파이더는 총을 피코에게 쏘고, 이를 본 미클로가 스파이더를 사살하나 자신도 중상을 입는다.', 180, '', 'RELEASED', 43.213000, 8.142000, 4500000, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 9702 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 9702 AND g.name = '액션';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 9702 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 9702 AND g.name = '스릴러';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 58646, 'Damian Chapa', '/MAJFUqA0FP3wbRqMSw9ALEuSgP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Damian Chapa');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Miklo', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 9702 AND a.name = 'Damian Chapa';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 58647, 'Jesse Borrego', '/bK9cPqXTJSRN72ZDKN3UXlKN3gU.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jesse Borrego');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Cruz', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 9702 AND a.name = 'Jesse Borrego';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 4589, '벤저민 브랫', '/hBenHPT4iJEG2kt5z2TOGnkRZwh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '벤저민 브랫');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Paco', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 9702 AND a.name = '벤저민 브랫';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 16427, 'Enrique Castillo', '/aKuTti43jY8LZr2oKDcQWdAhnLq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Enrique Castillo');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Montana', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 9702 AND a.name = 'Enrique Castillo';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 58648, 'Victor Rivers', '/9oWhFs2oRzaYOKqs0bGDZ2KGvuZ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Victor Rivers');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Magic Mike', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 9702 AND a.name = 'Victor Rivers';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 18596, 'Taylor Hackford', '/aAP9RYT7XxUiC2NZL9Hi2gEdxGB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Taylor Hackford');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 9702 AND d.name = 'Taylor Hackford';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/gvP6R6juhe2IpCG7QGDgjyUvm0g.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 9702;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/9xjUZjuYyehv2qnqMH0oR9nSTft.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 9702;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (133919, '결혼의 풍경', '1974-09-15', '', '교수 요한과 변호사 마리앤은 모두가 부러워하는 완벽한 부부이다. 안정된 직업, 그리고 사랑스러운 두 딸도 잘 자라고 있다. 그러던 어느 날 갑작스레 요한이 외도를 하고 있음을 밝히고 이혼을 요구한다. 결혼 생활이 삶의 전부였던 마리앤은 혼란에 빠지고, 외도 사실을 이미 알고 있던 친구들이 자신에게만 그 사실을 숨겼다는 것에 더욱 큰 배신감을 느낀다.', 169, '', 'RELEASED', 13.692000, 8.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 133919 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 133919 AND g.name = '로맨스';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 11916, '리브 울만', '/sF0UHcLrpTsg0eaSaIYee2IxSBB.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '리브 울만');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marianne', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 133919 AND a.name = '리브 울만';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 38127, 'Erland Josephson', '/dopG1nAzyT23DMAPyPoUuwbZs4a.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Erland Josephson');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Johan', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 133919 AND a.name = 'Erland Josephson';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6657, '비비 안데르손', '/1oVFJtQSOv6mG8HjsReDy3aipt8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '비비 안데르손');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Katarina', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 133919 AND a.name = '비비 안데르손';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 46867, 'Jan Malmsjö', '/w1x4KhyWndGgZYw772algFd1JBC.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jan Malmsjö');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Peter', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 133919 AND a.name = 'Jan Malmsjö';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6662, 'Gunnel Lindblom', '/93heWge7LBJtmTlvVUvCHRogcmJ.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gunnel Lindblom');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eva', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 133919 AND a.name = 'Gunnel Lindblom';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 6648, '잉마르 베리만', '/nkmOaXNRoioViN9OQf2n9Iu6akA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '잉마르 베리만');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 133919 AND d.name = '잉마르 베리만';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/eDxYVRIBwA8inBiBD7UOzFGfMf1.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 133919;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/prQE97Ds6ElKtTuemJRCvGJFlZz.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 133919;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (103, '택시 드라이버', '1976-02-09', '연약한 영웅의 강한 메시지', '트래비스는 베트남전에서 귀환한 후 불면증에 시달리며 사회에 적응하지 못하고 있다. 그래서 그는 택시 운전기사로 일하며 뉴욕의 밤거리를 다니며 타락한 사회를 보고 자신이 직접 이 악들을 제거하려고 마음 먹는다. 어느 날 트래비스는 우연히 12살 짜리 창녀 아이리스를 만나게 되고 그녀의 인생을 구하려 하지만 그녀는 집으로 돌아가길 꺼려 한다. 자신은 아무 것도 할 수 없다는 생각에 무기력해진 트래비스는 4개의 권총을 구입하고 상원의원 팔렌타인을 저격하러 나선다. 하지만 엉뚱하게도 사창가에서 피비린내 나는 총격전을 벌인 끝에 아이리스를 묶어두고 있던 포주 스포츠를 살해하고 마는데...', 114, '18', 'RELEASED', 59.635000, 8.100000, 28579636, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 103 AND g.name = '범죄';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 103 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 380, '로버트 드 니로', '/cT8htcckIuyI1Lqwt1CvD02ynTh.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '로버트 드 니로');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Travis Bickle', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 103 AND a.name = '로버트 드 니로';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1038, '조디 포스터', '/5emVgsLFlU6SmeBIFsF2Y7aqwtG.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '조디 포스터');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Iris', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 103 AND a.name = '조디 포스터';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1036, 'Cybill Shepherd', '/ci20y6ilSmiw759cUwQVheOqNaD.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Cybill Shepherd');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Betsy', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 103 AND a.name = 'Cybill Shepherd';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1037, '하비 카이텔', '/7P30hza1neYWW3r7rSQOC736K2Z.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '하비 카이텔');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sport', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 103 AND a.name = '하비 카이텔';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1039, 'Peter Boyle', '/6TapQmC46mPDYrwm67tyJaEM97I.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Peter Boyle');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Wizard', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 103 AND a.name = 'Peter Boyle';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 1032, '마틴 스콜세지', '/9U9Y5GQuWX3EZy39B8nkk4NY01S.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '마틴 스콜세지');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 103 AND d.name = '마틴 스콜세지';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/nJFKg6pyfmkLKttiLQKQuLZBLKH.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 103;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/6aoyUbvu0419XLKLIMoH0TkEicH.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 103;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (614, '산딸기', '1957-08-28', '', '보르그 교수는 78의 나이로 한평생 의사로써 살아온 학자이다. 그는 룬트에 있는 성당에서 명예 학위를 수여받기로 되어있다. 그날 새벽 그는 이상한 꿈을 꾼다. 기분이 상한 그는 비행기 대신 차로 룬트까지 가기로 결심하고 며느리 마리안느도 그를 따라나서기로 한다. 가는 도중 그의 식구들이 여름마다 와서 지내던 시골집에 도착한다. 그는 거기서 자신이 처음 사랑했던 사촌 사라와 그녀와 결국 결혼한 형 지그프로트를 회상한다.이때 이집에 산다는 사라라는 아가씨가 이탈리아로 가는 중이라면서 차를 얻어탈 것을 제의한다. 그는 사라에게서 자신의 젊은 시절을 회상한다. 가는 도중 이번에는 싸움이 잦은 부부를 보르그 교수의 차에 태우게 된다. 이들 부부는 서로 사랑하지 않고 미워하나 이들에게서도 자신의 결혼 생활을 기억해 낸다. 어머니를 만나는 보르그를 본 마리안은 얼음처럼 차가운 어머니를 보고 왜 남편이 차갑고 외로운지 이해하게 된다.', 91, '12', 'RELEASED', 13.864000, 8.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 614 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8741, 'Victor Sjöström', '/iGtT2mbmLt80YPk9lXJRSyxaEKW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Victor Sjöström');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Professor Isak Borg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 614 AND a.name = 'Victor Sjöström';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6657, '비비 안데르손', '/1oVFJtQSOv6mG8HjsReDy3aipt8.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '비비 안데르손');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sara', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 614 AND a.name = '비비 안데르손';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8742, '잉그리드 툴린', '/l7Yi6570rbBLJhED1yDM1vhF8h7.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '잉그리드 툴린');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marianne Borg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 614 AND a.name = '잉그리드 툴린';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 6649, 'Gunnar Björnstrand', '/vkEY3nex3G0PMMnJ11Kamt4yod.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gunnar Björnstrand');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Evald Borg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 614 AND a.name = 'Gunnar Björnstrand';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 8743, 'Jullan Kindahl', '/jhJ3houaMKIfvJq1T89ncAuMR7X.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Jullan Kindahl');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Agda', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 614 AND a.name = 'Jullan Kindahl';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 6648, '잉마르 베리만', '/nkmOaXNRoioViN9OQf2n9Iu6akA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '잉마르 베리만');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 614 AND d.name = '잉마르 베리만';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/r6Cl9oToO65qcWfjgOqCFCOBO4g.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 614;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/BBVAUchYvkmPThVIqipgAfabfl.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 614;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (458220, '''파머'' - Palmer', '2021-01-28', '', '학창 시절 미식축구 스타였던 에디 파머. 12년의 수감 생활을 마치고 돌아간 고향에서 가족으로부터 버림받은 소년 샘과 예상치 못하게 인연을 맺게 된다. 그러나 에디의 과거가 새로운 삶과 가족을 위협하게 되는데...', 110, '15', 'RELEASED', 38.329000, 8.100000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 458220 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 12111, '저스틴 팀버레이크', '/fNis6ROoreHGGLvtA75CmnUHviI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '저스틴 팀버레이크');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Eddie Palmer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 458220 AND a.name = '저스틴 팀버레이크';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 2897867, 'Ryder Allen', '/2st9fWNnW1hqU0E2e2vE6Zw0QpW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ryder Allen');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Sam', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 458220 AND a.name = 'Ryder Allen';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 36594, '주노 템플', '/wMpZcKp7zaHnmNQooqbve33577Q.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '주노 템플');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Shelly', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 458220 AND a.name = '주노 템플';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1519512, 'Alisha Wainwright', '/hEtH74TBjLwHASXl3f7rKjWqQYp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Alisha Wainwright');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Maggie Hayes', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 458220 AND a.name = 'Alisha Wainwright';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 35515, '준 스큅', '/iohsuSDPcVAFr0NKQifM7qEJDFt.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '준 스큅');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Vivian Palmer', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 458220 AND a.name = '준 스큅';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 26473, 'Fisher Stevens', '/vfyZMT3t3mGTloYGrC7T3QhGkwp.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Fisher Stevens');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 458220 AND d.name = 'Fisher Stevens';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/eNYsbIblSC0doFA8sN5CrPgwbF5.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 458220;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bblKpucB0XbyQBmfXsaRN985Rgh.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 458220;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (20914, '마이 프렌즈', '1975-10-24', '', '', 140, '', 'RELEASED', 12.176000, 8.133000, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 20914 AND g.name = '코미디';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 32312, 'Ugo Tognazzi', '/sg1hqzAIRKhXMSe32rKFodXbAUW.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Ugo Tognazzi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Raffaello Mascetti', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 20914 AND a.name = 'Ugo Tognazzi';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 3281, 'Gastone Moschin', '/dU58seqJs1NDkNodjwCbGZg3nqT.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Gastone Moschin');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Rambaldo Melandri', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 20914 AND a.name = 'Gastone Moschin';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 24366, '필립 느와레', '/mWPa6A0JK3tfVRQDIzCQGEao19B.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '필립 느와레');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Il Perozzi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 20914 AND a.name = '필립 느와레';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 24599, 'Duilio Del Prete', '/ekFjO2ZPGK3LzRPwBmQvbUNvMMq.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Duilio Del Prete');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Il Necchi', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 20914 AND a.name = 'Duilio Del Prete';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 9920, 'Adolfo Celi', '/dV2RBOU8ddy1UoeO6DdoiJahCXI.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Adolfo Celi');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Il Professor Sassaroli', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 20914 AND a.name = 'Adolfo Celi';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 32375, 'Mario Monicelli', '/rNa6Y3aCqQ0rVnQpr1JUfyPNPUV.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Mario Monicelli');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 20914 AND d.name = 'Mario Monicelli';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4Hw3Li49v6dKuKQTVrHsoFJuqtj.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 20914;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/bg4B52loVIYZTf3odGQKVV6B55h.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 20914;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (406997, '원더', '2017-11-13', '헬멧 속에 숨었던 아이, 세상 밖으로 나오다!', '누구보다 위트 있고 호기심 많은 매력 부자 어기. 하지만 남들과 다른 외모로 태어난 어기는 모두가 좋아하는 크리스마스 대신 얼굴을 감출 수 있는 할로윈을 더 좋아한다. 10살이 된 아들에게 더 큰 세상을 보여주고 싶었던 엄마와 아빠는 어기를 학교에 보낼 준비를 하고, 동생에게 모든 것을 양보해왔지만 누구보다 그를 사랑하는 누나도 첫걸음을 응원해준다. 그렇게 가족이 세상의 전부였던 어기는 처음으로 헬멧을 벗고 낯선 세상에 용감하게 첫발을 내딛는데...', 113, 'ALL', 'RELEASED', 47.529000, 8.100000, 315025930, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 406997 AND g.name = '드라마';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 406997 AND g.name = '가족';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1277188, '제이컵 트람블레이', '/h8CXDp86Y36CUENF4SXJq5ZRTsf.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '제이컵 트람블레이');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Auggie', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 406997 AND a.name = '제이컵 트람블레이';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1204, '줄리아 로버츠', '/fQacAdIa1WUNChQ6FgEko13eqOA.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '줄리아 로버츠');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Isabel', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 406997 AND a.name = '줄리아 로버츠';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 887, '오웬 윌슨', '/lFxHIlcywMlYpe6wkW39sfBrqag.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '오웬 윌슨');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Nate', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 406997 AND a.name = '오웬 윌슨';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1109976, 'Izabela Vidovic', '/q8lxW2OaUmP5OF8SkntIp2vPcDX.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = 'Izabela Vidovic');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Via', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 406997 AND a.name = 'Izabela Vidovic';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1590759, '노아 주프', '/yZQG1s9HTzqrqpm2sIal6POl3jP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '노아 주프');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Jack Will', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 406997 AND a.name = '노아 주프';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 19311, 'Stephen Chbosky', '/9PdTBjn8dJqfn3ygKvsCdl9G06J.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = 'Stephen Chbosky');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 406997 AND d.name = 'Stephen Chbosky';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/1EX3A8mYkQk7czWj7l1tLVlCV2c.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 406997;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/4rsrxYDfIzvtAsIE9wevxPRXAk4.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 406997;

INSERT IGNORE INTO movie (tmdb_id, title, release_date, tagline, overview,
    runtime, certification, status, popularity, vote_avg, revenue,
    created_at, updated_at)
VALUES (398818, '콜 미 바이 유어 네임', '2017-07-28', '네 이름으로 날 불러줘, 내 이름으로 널 부를게', '17살 소년 엘리오의 가족은 매년 여름 손님을 받는다. 엘리오의 아버지 펄먼 교수의 일을 돕는 보조 연구원은 6주 동안 이곳에 머물며 사람들과 어울리고 자유로운 식사, 일광욕과 수영을 즐긴다. 올해 집을 찾은 24살 올리버는 모든 사람이 호감을 갖는 사람이다. 하지만 엘리오의 감정은 좀더 특별하다. 처음 보는 순간부터 그를 의식했고, 그 실체가 동성에게 품은 사랑임을 깨달은 후에는 적대감을 갖고 있는 것처럼 군다. 하지만 엘리오가 자신의 진짜 속내를 내비친 후 두 사람은 서로의 마음이 같다는 것을 알게 된다.', 132, '18', 'RELEASED', 51.548000, 8.100000, 43143046, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 398818 AND g.name = '로맨스';

INSERT IGNORE INTO movie_genre (movie_id, genre_id, created_at, updated_at)
SELECT m.id, g.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, genre g
WHERE m.tmdb_id = 398818 AND g.name = '드라마';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 53807, '아미 해머', '/19lRnnnKd6fjNmfEGR4ftM1qJOk.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아미 해머');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Oliver', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 398818 AND a.name = '아미 해머';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 1190668, '티모시 샬라메', '/BE2sdjpgsa2rNTFa66f7upkaOP.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '티모시 샬라메');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Elio', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 398818 AND a.name = '티모시 샬라메';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 72873, '마이클 스툴바그', '/aYB3SQm3h6ZyAdlbGyiNfakjx56.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '마이클 스툴바그');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Mr. Perlman', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 398818 AND a.name = '마이클 스툴바그';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 20577, '아미라 카사르', '/lTvuFkDI67DA68mLEjF8Tvrza6E.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '아미라 카사르');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Annella', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 398818 AND a.name = '아미라 카사르';

INSERT IGNORE INTO actor (tmdb_id, name, profile, created_at, updated_at)
SELECT 935096, '에스테르 가렐', '/km79Neoe5tLwgbiBzq72pR7pdxY.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM actor WHERE name = '에스테르 가렐');

INSERT IGNORE INTO movie_actor (movie_id, actor_id, role, created_at, updated_at)
SELECT m.id, a.id, 'Marzia', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, actor a
WHERE m.tmdb_id = 398818 AND a.name = '에스테르 가렐';

INSERT IGNORE INTO director (tmdb_id, name, profile, created_at, updated_at)
SELECT 78160, '루카 구아다니노', '/vWCkSOW65g8Ha26BzRxn5KhTEnF.jpg', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM director WHERE name = '루카 구아다니노');

INSERT IGNORE INTO movie_director (movie_id, director_id, created_at, updated_at)
SELECT m.id, d.id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m, director d
WHERE m.tmdb_id = 398818 AND d.name = '루카 구아다니노';

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/guzNdgRjANTBDkTRYGqgzFOgSWx.jpg', true, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 398818;

INSERT IGNORE INTO image (movie_id, height, width, file_path, is_poster, created_at, updated_at)
SELECT m.id, 0, 0, '/zvOJawrnmgK0sL293mOXOdLvTXQ.jpg', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
FROM movie m WHERE m.tmdb_id = 398818;

